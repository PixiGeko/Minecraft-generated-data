{
  "version_data": [
    {
      "type": "table",
      "value": {
        "previousLabel": "1.20.4",
        "currentLabel": "23w51a",
        "values": [
          {
            "key": "DataPack version",
            "previous": "26",
            "current": "27"
          },
          {
            "key": "World version",
            "previous": "3700",
            "current": "3801"
          },
          {
            "key": "Protocol version",
            "previous": "765",
            "current": "1073741993"
          }
        ]
      }
    }
  ],
  "registries": [
    {
      "type": "entries",
      "value": {
        "name": "attribute",
        "differences": {
          "added": [
            "minecraft:generic.block_interaction_range",
            "minecraft:generic.entity_interaction_range",
            "minecraft:generic.scale",
            "minecraft:generic.step_height"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "entity_type",
        "differences": {
          "added": [
            "minecraft:armadillo"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "item",
        "differences": {
          "added": [
            "minecraft:armadillo_scute",
            "minecraft:armadillo_spawn_egg",
            "minecraft:turtle_scute",
            "minecraft:wolf_armor"
          ],
          "removed": [
            "minecraft:scute"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "memory_module_type",
        "differences": {
          "added": [
            "minecraft:breeze_leaving_water",
            "minecraft:danger_detected_recently"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sensor_type",
        "differences": {
          "added": [
            "minecraft:armadillo_scare_detected",
            "minecraft:armadillo_temptations"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sound_event",
        "differences": {
          "added": [
            "minecraft:entity.armadillo.ambient",
            "minecraft:entity.armadillo.brush",
            "minecraft:entity.armadillo.death",
            "minecraft:entity.armadillo.eat",
            "minecraft:entity.armadillo.hurt",
            "minecraft:entity.armadillo.land",
            "minecraft:entity.armadillo.roll",
            "minecraft:entity.armadillo.scute_drop",
            "minecraft:entity.armadillo.step",
            "minecraft:entity.armadillo.unroll",
            "minecraft:entity.breeze.charge",
            "minecraft:entity.breeze.deflect",
            "minecraft:entity.breeze.whirl",
            "minecraft:item.armor.equip_wolf",
            "minecraft:item.armor.unequip_wolf"
          ],
          "removed": []
        }
      }
    }
  ],
  "tags": [
    {
      "type": "entries",
      "value": {
        "name": "all_entities_without_drop.json",
        "differences": {
          "added": [
            "minecraft:armadillo"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_living_entities_without_drop.json",
        "differences": {
          "added": [
            "minecraft:armadillo"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/attribute.json",
        "differences": {
          "added": [
            "minecraft:generic.block_interaction_range",
            "minecraft:generic.entity_interaction_range",
            "minecraft:generic.scale",
            "minecraft:generic.step_height"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/entity_type.json",
        "differences": {
          "added": [
            "minecraft:armadillo"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/item.json",
        "differences": {
          "added": [
            "minecraft:armadillo_scute",
            "minecraft:armadillo_spawn_egg",
            "minecraft:turtle_scute",
            "minecraft:wolf_armor"
          ],
          "removed": [
            "minecraft:scute"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/memory_module_type.json",
        "differences": {
          "added": [
            "minecraft:breeze_leaving_water",
            "minecraft:danger_detected_recently"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sensor_type.json",
        "differences": {
          "added": [
            "minecraft:armadillo_scare_detected",
            "minecraft:armadillo_temptations"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sound_event.json",
        "differences": {
          "added": [
            "minecraft:entity.armadillo.ambient",
            "minecraft:entity.armadillo.brush",
            "minecraft:entity.armadillo.death",
            "minecraft:entity.armadillo.eat",
            "minecraft:entity.armadillo.hurt",
            "minecraft:entity.armadillo.land",
            "minecraft:entity.armadillo.roll",
            "minecraft:entity.armadillo.scute_drop",
            "minecraft:entity.armadillo.step",
            "minecraft:entity.armadillo.unroll",
            "minecraft:entity.breeze.charge",
            "minecraft:entity.breeze.deflect",
            "minecraft:entity.breeze.whirl",
            "minecraft:item.armor.equip_wolf",
            "minecraft:item.armor.unequip_wolf"
          ],
          "removed": []
        }
      }
    }
  ],
  "recipes": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "wolf_armor.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "turtle_helmet.json",
        "lines": [
          "\u001b[1;2mA:\u001b[0m scute\n\u001b[1;2mB:\u001b[0m turtle_scute\n\n\u001b[1;2mPrevious pattern:\u001b[0m\n[\u001b[2;33mA\u001b[0m | \u001b[2;33mA\u001b[0m | \u001b[2;33mA\u001b[0m]\n[\u001b[2;33mA\u001b[0m | \u001b[2;31m \u001b[0m | \u001b[2;33mA\u001b[0m]\n\n\u001b[1;2mNew pattern:\u001b[0m\n[\u001b[2;33mB\u001b[0m | \u001b[2;33mB\u001b[0m | \u001b[2;33mB\u001b[0m]\n[\u001b[2;33mB\u001b[0m | \u001b[2;36m \u001b[0m | \u001b[2;33mB\u001b[0m]"
        ]
      }
    }
  ],
  "translations": [
    {
      "type": "entries",
      "value": {
        "name": "Keys",
        "differences": {
          "added": [
            "attribute.name.generic.block_interaction_range: Block Interaction Range",
            "attribute.name.generic.entity_interaction_range: Entity Interaction Range",
            "attribute.name.generic.scale: Scale",
            "attribute.name.generic.step_height: Step Height",
            "entity.minecraft.armadillo: Armadillo",
            "item.minecraft.armadillo_scute: Armadillo Scute",
            "item.minecraft.armadillo_spawn_egg: Armadillo Spawn Egg",
            "item.minecraft.turtle_scute: Turtle Scute",
            "item.minecraft.wolf_armor: Wolf Armor",
            "subtitles.entity.armadillo.ambient: Armadillo grunts",
            "subtitles.entity.armadillo.brush: Armadillo brushes",
            "subtitles.entity.armadillo.death: Armadillo dies",
            "subtitles.entity.armadillo.eat: Armadillo eats",
            "subtitles.entity.armadillo.hurt: Armadillo hurts",
            "subtitles.entity.armadillo.land: Armadillo lands",
            "subtitles.entity.armadillo.roll: Armadillo rolls up",
            "subtitles.entity.armadillo.scute_drop: Scute drops",
            "subtitles.entity.armadillo.unroll: Armadillo unrolls",
            "subtitles.entity.breeze.charge: Breeze charges",
            "subtitles.entity.breeze.deflect: Breeze deflects",
            "subtitles.entity.breeze.whirl: Breeze whirls",
            "subtitles.item.armor.equip_wolf: Wolf armor straps",
            "subtitles.item.armor.unequip_wolf: Wolf armor slips off"
          ],
          "removed": [
            "item.minecraft.scute: Scute"
          ]
        }
      }
    },
    {
      "type": "text",
      "value": {
        "title": "Changes",
        "values": [
          {
            "key": "subtitles.block.respawn_anchor.ambient",
            "previous": "Portal whooshes",
            "current": "Respawn Anchor whooshes"
          },
          {
            "key": "subtitles.block.trial_spawner.spawn_mob",
            "previous": "Mob spawns",
            "current": "Trial Spawner spawns a mob"
          },
          {
            "key": "subtitles.entity.glow_item_frame.break",
            "previous": "Glow Item Frame breaks",
            "current": "Glow Item Frame broken"
          },
          {
            "key": "subtitles.entity.item_frame.break",
            "previous": "Item Frame breaks",
            "current": "Item Frame broken"
          },
          {
            "key": "subtitles.entity.leash_knot.break",
            "previous": "Leash Knot breaks",
            "current": "Leash Knot broken"
          },
          {
            "key": "subtitles.entity.painting.break",
            "previous": "Painting breaks",
            "current": "Painting broken"
          },
          {
            "key": "subtitles.entity.polar_bear.ambient_baby",
            "previous": "Polar Bear hums",
            "current": "Baby Polar Bear hums"
          },
          {
            "key": "subtitles.entity.turtle.death_baby",
            "previous": "Turtle baby dies",
            "current": "Baby Turtle dies"
          },
          {
            "key": "subtitles.entity.turtle.hurt_baby",
            "previous": "Turtle baby hurts",
            "current": "Baby Turtle hurts"
          },
          {
            "key": "subtitles.entity.turtle.shamble_baby",
            "previous": "Turtle baby shambles",
            "current": "Baby Turtle shambles"
          }
        ]
      }
    }
  ],
  "file_structure": [
    {
      "type": "entries",
      "value": {
        "name": "data",
        "differences": {
          "added": [
            "minecraft/advancements/recipes/combat/wolf_armor.json",
            "minecraft/damage_type/spit.json",
            "minecraft/datapacks/update_1_21/data/minecraft/damage_type/wind_charge.json",
            "minecraft/datapacks/update_1_21/data/minecraft/tags/damage_type/always_kills_armor_stands.json",
            "minecraft/datapacks/update_1_21/data/minecraft/tags/damage_type/is_projectile.json",
            "minecraft/datapacks/update_1_21/data/minecraft/tags/items/doors.json",
            "minecraft/datapacks/update_1_21/data/minecraft/tags/items/trapdoors.json",
            "minecraft/loot_tables/entities/armadillo.json",
            "minecraft/recipes/wolf_armor.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "assets",
        "differences": {
          "added": [
            "minecraft/models/item/armadillo_scute.json",
            "minecraft/models/item/armadillo_spawn_egg.json",
            "minecraft/models/item/turtle_scute.json",
            "minecraft/models/item/wolf_armor.json",
            "minecraft/textures/entity/armadillo.png",
            "minecraft/textures/entity/breeze/breeze_eyes.png",
            "minecraft/textures/entity/wolf/wolf_armor.png",
            "minecraft/textures/item/armadillo_scute.png",
            "minecraft/textures/item/turtle_scute.png",
            "minecraft/textures/item/wolf_armor.png"
          ],
          "removed": [
            "minecraft/models/item/scute.json",
            "minecraft/textures/item/scute.png"
          ]
        }
      }
    }
  ],
  "mappings": [
    {
      "type": "title",
      "value": {
        "title": "Server",
        "id": "server-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.core.dispenser.DispenseItemBehavior$3",
            "XXX.core.dispenser.DispenseItemBehavior$5",
            "XXX.core.dispenser.DispenseItemBehavior$7",
            "XXX.core.dispenser.DispenseItemBehavior$8",
            "XXX.core.dispenser.DispenseItemBehavior$9",
            "XXX.core.dispenser.ShearsDispenseItemBehavior",
            "XXX.core.dispenser.package-info",
            "XXX.core.particles.BlockParticleOption",
            "XXX.core.particles.DustColorTransitionOptions",
            "XXX.core.particles.DustParticleOptions",
            "XXX.core.particles.DustParticleOptionsBase",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SculkChargeParticleOptions$1",
            "XXX.core.particles.ShriekParticleOption$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.core.particles.VibrationParticleOption$1",
            "XXX.core.registries.BuiltInRegistries",
            "XXX.core.registries.Registries",
            "XXX.minecraft.data.BlockFamilies",
            "XXX.minecraft.data.BlockFamily$Builder",
            "XXX.minecraft.data.CachedOutput",
            "XXX.minecraft.data.DataGenerator$PackGenerator",
            "XXX.minecraft.data.DataProvider$Factory",
            "XXX.minecraft.data.HashCache$CacheUpdater",
            "XXX.minecraft.data.HashCache$ProviderCacheBuilder",
            "XXX.minecraft.data.HashCache$UpdateResult",
            "XXX.minecraft.data.PackOutput",
            "XXX.minecraft.data.PackOutput$Target",
            "XXX.data.advancements.AdvancementSubProvider",
            "XXX.advancements.packs.UpdateOneTwentyOneAdvancementProvider",
            "XXX.advancements.packs.VanillaAdvancementProvider",
            "XXX.advancements.packs.VanillaHusbandryAdvancements",
            "XXX.advancements.packs.VanillaStoryAdvancements",
            "XXX.advancements.packs.package-info",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLootSubProvider",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.LootTableProvider$SubProviderEntry",
            "XXX.data.loot.package-info",
            "XXX.loot.packs.TradeRebalanceLootTableProvider",
            "XXX.loot.packs.UpdateOneTwentyOneChestLoot",
            "XXX.loot.packs.VanillaArchaeologyLoot",
            "XXX.loot.packs.VanillaChestLoot",
            "XXX.loot.packs.VanillaFishingLoot",
            "XXX.loot.packs.VanillaLootTableProvider",
            "XXX.loot.packs.package-info",
            "XXX.data.metadata.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$BookSlotModelCacheKey",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ItemModelGenerators$TrimModelData",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplate$JsonFactory",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeBuilder$1",
            "XXX.data.recipes.RecipeOutput",
            "XXX.data.recipes.RecipeProvider$1",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SmithingTrimRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.recipes.packs.UpdateOneTwentyOneRecipeProvider",
            "XXX.recipes.packs.VanillaRecipeProvider$TrimTemplate",
            "XXX.data.registries.RegistriesDatapackGenerator",
            "XXX.data.registries.UpdateOneTwentyOneRegistries",
            "XXX.data.registries.package-info",
            "XXX.data.structures.SnbtDatafixer",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.BiomeTagsProvider",
            "XXX.data.tags.DamageTypeTagsProvider",
            "XXX.data.tags.FlatLevelGeneratorPresetTagsProvider",
            "XXX.data.tags.GameEventTagsProvider",
            "XXX.data.tags.IntrinsicHolderTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.PoiTypeTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.data.tags.TradeRebalanceStructureTagsProvider",
            "XXX.data.tags.UpdateOneTwentyOneBlockTagsProvider",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw$1",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.util.eventlog.EventLogDirectory$CompressedFile",
            "XXX.util.eventlog.EventLogDirectory$FileId",
            "XXX.util.eventlog.EventLogDirectory$RawFile",
            "XXX.util.eventlog.JsonEventLog$1",
            "XXX.util.eventlog.JsonEventLogReader$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.monitoring.jmx.package-info",
            "XXX.util.profiling.ActiveProfiler",
            "XXX.util.profiling.ContinuousProfiler",
            "XXX.util.profiling.FilledProfileResults",
            "XXX.util.profiling.FilledProfileResults$CounterCollector",
            "XXX.util.profiling.ProfileCollector",
            "XXX.util.profiling.ProfilerFiller",
            "XXX.util.profiling.ProfilerPathEntry",
            "XXX.util.profiling.SingleTickProfiler",
            "XXX.profiling.jfr.JfrProfiler",
            "XXX.profiling.jfr.JvmProfiler",
            "XXX.profiling.jfr.Percentiles",
            "XXX.jfr.callback.ProfiledDuration",
            "XXX.jfr.event.ChunkGenerationEvent",
            "XXX.jfr.event.NetworkSummaryEvent",
            "XXX.jfr.event.NetworkSummaryEvent$SumAggregation",
            "XXX.jfr.event.PacketEvent$Fields",
            "XXX.jfr.event.PacketSentEvent",
            "XXX.jfr.event.ServerTickTimeEvent$Fields",
            "XXX.jfr.event.package-info",
            "XXX.jfr.parse.JfrStatsParser",
            "XXX.jfr.parse.JfrStatsParser$MutableCountAndSize",
            "XXX.jfr.parse.package-info",
            "XXX.jfr.serialize.package-info",
            "XXX.jfr.stats.CpuLoadStat",
            "XXX.jfr.stats.FileIOStat$Summary",
            "XXX.jfr.stats.GcHeapStat$Summary",
            "XXX.jfr.stats.NetworkPacketSummary",
            "XXX.jfr.stats.NetworkPacketSummary$PacketIdentification",
            "XXX.jfr.stats.ThreadAllocationStat$Summary",
            "XXX.jfr.stats.TimedStat",
            "XXX.jfr.stats.package-info",
            "XXX.profiling.metrics.MetricSampler",
            "XXX.profiling.metrics.MetricSampler$SamplerResult",
            "XXX.profiling.metrics.MetricSampler$ValueIncreasedByPercentage",
            "XXX.profiling.metrics.MetricsRegistry$AggregatedMetricSampler",
            "XXX.profiling.metrics.ProfilerMeasured",
            "XXX.metrics.profiling.ActiveMetricsRecorder",
            "XXX.metrics.profiling.MetricsRecorder",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider$CpuStats",
            "XXX.metrics.storage.MetricsPersister",
            "XXX.metrics.storage.package-info",
            "XXX.util.random.SimpleWeightedRandomList",
            "XXX.util.random.Weight",
            "XXX.util.random.WeightedEntry$IntrusiveBase",
            "XXX.util.random.WeightedRandom",
            "XXX.util.random.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.valueproviders.BiasedToBottomInt",
            "XXX.util.valueproviders.ClampedNormalFloat",
            "XXX.util.valueproviders.ConstantFloat",
            "XXX.util.valueproviders.FloatProvider",
            "XXX.util.valueproviders.IntProvider",
            "XXX.util.valueproviders.MultipliedFloats",
            "XXX.util.valueproviders.TrapezoidFloat",
            "XXX.util.valueproviders.UniformInt",
            "XXX.util.valueproviders.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.MenuProvider",
            "XXX.minecraft.world.RandomSequence",
            "XXX.minecraft.world.RandomSequences$DirtyMarkingRandomSource",
            "XXX.minecraft.world.SimpleContainer",
            "XXX.minecraft.world.TickRateManager",
            "XXX.minecraft.world.WorldlyContainerHolder",
            "XXX.world.damagesource.CombatRules",
            "XXX.world.damagesource.DamageEffects",
            "XXX.world.damagesource.DamageSource",
            "XXX.world.damagesource.DamageSources",
            "XXX.world.damagesource.DamageTypes",
            "XXX.world.damagesource.FallLocation",
            "XXX.world.effect.AbsorptionMobEffect",
            "XXX.world.effect.MobEffectInstance$FactorData",
            "XXX.ai.sensing.NearestBedSensor",
            "XXX.ai.sensing.NearestLivingEntitySensor",
            "XXX.ai.sensing.PiglinBruteSpecificSensor",
            "XXX.ai.sensing.PlayerSensor",
            "XXX.ai.sensing.Sensing",
            "XXX.ai.sensing.SensorType",
            "XXX.ai.sensing.VillagerBabiesSensor",
            "XXX.ai.sensing.WardenEntitySensor",
            "XXX.ai.targeting.TargetingConditions",
            "XXX.ai.util.AirAndWaterRandomPos",
            "XXX.ai.util.DefaultRandomPos",
            "XXX.ai.util.HoverRandomPos",
            "XXX.ai.util.RandomPos",
            "XXX.ai.village.ReputationEventType",
            "XXX.ai.village.VillageSiege",
            "XXX.ai.village.package-info",
            "XXX.village.poi.PoiManager$DistanceTracker",
            "XXX.village.poi.PoiRecord",
            "XXX.village.poi.PoiType",
            "XXX.village.poi.package-info",
            "XXX.entity.ambient.Bat",
            "XXX.entity.animal.AbstractFish",
            "XXX.entity.animal.AbstractFish$FishSwimGoal",
            "XXX.entity.animal.AbstractSchoolingFish",
            "XXX.entity.animal.Animal",
            "XXX.entity.animal.Bee$1",
            "XXX.entity.animal.Bee$BeeAttackGoal",
            "XXX.entity.animal.Bee$BeeEnterHiveGoal",
            "XXX.entity.animal.Bee$BeeGoToKnownFlowerGoal",
            "XXX.entity.animal.Bee$BeeHurtByOtherGoal",
            "XXX.entity.animal.Bee$BeeLookControl",
            "XXX.entity.animal.Bee$BeeWanderGoal",
            "XXX.entity.animal.Cat",
            "XXX.entity.animal.Cat$CatRelaxOnOwnerGoal",
            "XXX.entity.animal.CatVariant",
            "XXX.entity.animal.Cod",
            "XXX.entity.animal.Dolphin",
            "XXX.entity.animal.Dolphin$DolphinSwimWithPlayerGoal",
            "XXX.entity.animal.FlyingAnimal",
            "XXX.entity.animal.Fox$DefendTrustedTargetGoal",
            "XXX.entity.animal.Fox$FoxAlertableEntitiesSelector",
            "XXX.entity.animal.Fox$FoxBreedGoal",
            "XXX.entity.animal.Fox$FoxFloatGoal",
            "XXX.entity.animal.Fox$FoxGroupData",
            "XXX.entity.animal.Fox$FoxLookControl",
            "XXX.entity.animal.Fox$FoxMoveControl",
            "XXX.entity.animal.Fox$FoxPounceGoal",
            "XXX.entity.animal.Fox$FoxStrollThroughVillageGoal",
            "XXX.entity.animal.Fox$SeekShelterGoal",
            "XXX.entity.animal.Fox$StalkPreyGoal",
            "XXX.entity.animal.FrogVariant",
            "XXX.entity.animal.IronGolem$Crackiness",
            "XXX.entity.animal.MushroomCow$MushroomType",
            "XXX.entity.animal.Ocelot$OcelotAvoidEntityGoal",
            "XXX.entity.animal.Panda",
            "XXX.entity.animal.Panda$PandaAttackGoal",
            "XXX.entity.animal.Panda$PandaBreedGoal",
            "XXX.entity.animal.Panda$PandaLieOnBackGoal",
            "XXX.entity.animal.Panda$PandaMoveControl",
            "XXX.entity.animal.Panda$PandaRollGoal",
            "XXX.entity.animal.Panda$PandaSneezeGoal",
            "XXX.entity.animal.Parrot$1",
            "XXX.entity.animal.Parrot$Variant",
            "XXX.entity.animal.PolarBear",
            "XXX.entity.animal.PolarBear$PolarBearHurtByTargetGoal",
            "XXX.entity.animal.PolarBear$PolarBearPanicGoal",
            "XXX.entity.animal.Pufferfish$PufferfishPuffGoal",
            "XXX.entity.animal.Rabbit$RabbitAvoidEntityGoal",
            "XXX.entity.animal.Rabbit$RabbitJumpControl",
            "XXX.entity.animal.Rabbit$RabbitPanicGoal",
            "XXX.entity.animal.Rabbit$Variant",
            "XXX.entity.animal.Sheep",
            "XXX.entity.animal.Sheep$2",
            "XXX.entity.animal.SnowGolem",
            "XXX.entity.animal.Squid$SquidFleeGoal",
            "XXX.entity.animal.TropicalFish",
            "XXX.entity.animal.TropicalFish$Pattern",
            "XXX.entity.animal.TropicalFish$Variant",
            "XXX.entity.animal.Turtle$TurtleBreedGoal",
            "XXX.entity.animal.Turtle$TurtleGoToWaterGoal",
            "XXX.entity.animal.Turtle$TurtleMoveControl",
            "XXX.entity.animal.Turtle$TurtlePathNavigation",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.entity.animal.Wolf$WolfPanicGoal",
            "XXX.animal.allay.Allay$JukeboxListener",
            "XXX.animal.allay.AllayAi",
            "XXX.monster.breeze.LongJump",
            "XXX.monster.breeze.ShootWhenStuck",
            "XXX.monster.breeze.package-info",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.monster.warden.AngerManagement",
            "XXX.monster.warden.AngerManagement$Sorter",
            "XXX.monster.warden.Warden$1",
            "XXX.monster.warden.Warden$2",
            "XXX.monster.warden.WardenAi",
            "XXX.monster.warden.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$FailureItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspiciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.entity.player.Player$1",
            "XXX.world.item.BookItem",
            "XXX.world.item.BowItem",
            "XXX.world.item.BrushItem",
            "XXX.world.item.BrushItem$DustParticlesDelta",
            "XXX.world.item.BundleItem",
            "XXX.world.item.CompassItem",
            "XXX.world.item.CreativeModeTab",
            "XXX.world.item.CreativeModeTab$Builder",
            "XXX.world.item.CreativeModeTab$ItemDisplayBuilder",
            "XXX.world.item.CreativeModeTab$Output",
            "XXX.world.item.CreativeModeTab$TabVisibility",
            "XXX.world.item.CreativeModeTabs",
            "XXX.world.item.DebugStickItem",
            "XXX.world.item.DiscFragmentItem",
            "XXX.world.item.DoubleHighBlockItem",
            "XXX.world.item.DyeItem",
            "XXX.world.item.DyeableHorseArmorItem",
            "XXX.world.item.EggItem",
            "XXX.world.item.EmptyMapItem",
            "XXX.world.item.EnchantedGoldenAppleItem",
            "XXX.world.item.EnderEyeItem",
            "XXX.world.item.Equipable",
            "XXX.world.item.FireChargeItem",
            "XXX.world.item.FireworkRocketItem$Shape",
            "XXX.world.item.FishingRodItem",
            "XXX.world.item.FoodOnAStickItem",
            "XXX.world.item.GlowInkSacItem",
            "XXX.world.item.HangingSignItem",
            "XXX.world.item.HoneyBottleItem",
            "XXX.world.item.HorseArmorItem",
            "XXX.level.gameevent.GameEventListener$Holder",
            "XXX.level.storage.LevelDataAndDimensions",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelCandidates",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.LevelSummary$BackupStatus",
            "XXX.level.storage.LevelSummary$SymlinkLevelSummary",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.PrimaryLevelData$SpecialWorldProperty",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.IntRange$IntChecker",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootDataManager",
            "XXX.storage.loot.LootDataResolver",
            "XXX.storage.loot.LootDataType$Validator",
            "XXX.storage.loot.LootParams$Builder",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Path",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FunctionReference",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunctionType",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.SequenceFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetBannerPatternFunction$Builder",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetEnchantmentsFunction",
            "XXX.loot.functions.SetInstrumentFunction",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$EffectEntry",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AllOfCondition",
            "XXX.loot.predicates.AnyOfCondition",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.CompositeLootItemCondition$Builder",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.ValueCheckCondition",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.providers.nbt.ContextNbtProvider",
            "XXX.providers.nbt.ContextNbtProvider$2",
            "XXX.providers.nbt.LootNbtProviderType",
            "XXX.providers.nbt.NbtProviders",
            "XXX.providers.nbt.package-info",
            "XXX.providers.number.ConstantValue",
            "XXX.providers.number.NumberProvider",
            "XXX.providers.number.ScoreboardValue",
            "XXX.providers.number.package-info",
            "XXX.providers.score.FixedScoreboardNameProvider",
            "XXX.providers.score.ScoreboardNameProvider",
            "XXX.providers.score.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.level.validation.ContentValidationException",
            "XXX.level.validation.DirectoryValidator$1",
            "XXX.level.validation.PathAllowList",
            "XXX.level.validation.PathAllowList$EntryType",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.world.scores.DisplaySlot",
            "XXX.world.scores.Objective",
            "XXX.world.scores.PlayerScores",
            "XXX.world.scores.ReadOnlyScoreInfo",
            "XXX.world.scores.ScoreAccess",
            "XXX.world.scores.ScoreHolder$1",
            "XXX.world.scores.ScoreHolder$3",
            "XXX.world.scores.Scoreboard$1",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info",
            "XXX.world.ticks.BlackholeTickAccess$1",
            "XXX.world.ticks.ContainerSingleItem",
            "XXX.world.ticks.LevelTickAccess",
            "XXX.world.ticks.LevelTicks$PosAndContainerConsumer",
            "XXX.world.ticks.SavedTick",
            "XXX.world.ticks.ScheduledTick",
            "XXX.world.ticks.SerializableTickContainer",
            "XXX.world.ticks.TickContainerAccess",
            "XXX.world.ticks.WorldGenTickAccess"
          ],
          "removed": [
            "XXX.core.dispenser.DispenseItemBehavior$28",
            "XXX.core.dispenser.DispenseItemBehavior$4",
            "XXX.core.dispenser.DispenseItemBehavior$6",
            "XXX.core.dispenser.DispenseItemBehavior$7$1",
            "XXX.core.dispenser.DispenseItemBehavior$8$1",
            "XXX.core.dispenser.OptionalDispenseItemBehavior",
            "XXX.core.dispenser.ShulkerBoxDispenseBehavior",
            "XXX.minecraft.core.package-info",
            "XXX.core.particles.BlockParticleOption$1",
            "XXX.core.particles.DustColorTransitionOptions$1",
            "XXX.core.particles.DustParticleOptions$1",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleGroup",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SculkChargeParticleOptions",
            "XXX.core.particles.ShriekParticleOption",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.VibrationParticleOption",
            "XXX.core.particles.package-info",
            "XXX.core.registries.BuiltInRegistries$RegistryBootstrap",
            "XXX.core.registries.package-info",
            "XXX.minecraft.data.BlockFamily",
            "XXX.minecraft.data.BlockFamily$Variant",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.HashCache",
            "XXX.minecraft.data.HashCache$ProviderCache",
            "XXX.minecraft.data.HashCache$UpdateFunction",
            "XXX.minecraft.data.Main",
            "XXX.minecraft.data.PackOutput$PathProvider",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.package-info",
            "XXX.advancements.packs.UpdateOneTwentyOneAdventureAdvancements",
            "XXX.advancements.packs.VanillaAdventureAdvancements",
            "XXX.advancements.packs.VanillaNetherAdvancements",
            "XXX.advancements.packs.VanillaTheEndAdvancements",
            "XXX.data.info.BiomeParametersDumpReport",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.EntityLootSubProvider",
            "XXX.data.loot.LootTableProvider$1",
            "XXX.data.loot.LootTableSubProvider",
            "XXX.loot.packs.TradeRebalanceChestLoot",
            "XXX.loot.packs.UpdateOneTwentyOneBlockLoot",
            "XXX.loot.packs.UpdateOneTwentyOneLootTableProvider",
            "XXX.loot.packs.VanillaBlockLoot",
            "XXX.loot.packs.VanillaEntityLoot",
            "XXX.loot.packs.VanillaGiftLoot",
            "XXX.loot.packs.VanillaPiglinBarterLoot",
            "XXX.data.metadata.PackMetadataGenerator",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$BlockStateGeneratorSupplier",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.RecipeBuilder",
            "XXX.data.recipes.RecipeCategory",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SmithingTransformRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.recipes.packs.BundleRecipeProvider",
            "XXX.recipes.packs.VanillaRecipeProvider",
            "XXX.recipes.packs.package-info",
            "XXX.data.registries.RegistryPatchGenerator",
            "XXX.data.registries.VanillaRegistries",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$StructureConversionException",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BannerPatternTagsProvider",
            "XXX.data.tags.CatVariantTagsProvider",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.InstrumentTagsProvider",
            "XXX.data.tags.IntrinsicHolderTagsProvider$IntrinsicTagAppender",
            "XXX.data.tags.PaintingVariantTagsProvider",
            "XXX.data.tags.StructureTagsProvider",
            "XXX.data.tags.TagsProvider$1CombinedData",
            "XXX.data.tags.TagsProvider$TagLookup",
            "XXX.data.tags.UpdateOneTwentyOneBiomeTagsProvider",
            "XXX.data.tags.UpdateOneTwentyOneDamageTypeTagsProvider",
            "XXX.datafix.schemas.V3799",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.util.eventlog.EventLogDirectory",
            "XXX.util.eventlog.EventLogDirectory$File",
            "XXX.util.eventlog.EventLogDirectory$FileList",
            "XXX.util.eventlog.JsonEventLog",
            "XXX.util.eventlog.JsonEventLogReader",
            "XXX.util.eventlog.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$AttributeDescription",
            "XXX.minecraft.util.package-info",
            "XXX.util.profiling.ActiveProfiler$PathEntry",
            "XXX.util.profiling.EmptyProfileResults",
            "XXX.util.profiling.FilledProfileResults$1",
            "XXX.util.profiling.InactiveProfiler",
            "XXX.util.profiling.ProfileResults",
            "XXX.util.profiling.ProfilerFiller$1",
            "XXX.util.profiling.ResultField",
            "XXX.profiling.jfr.Environment",
            "XXX.profiling.jfr.JfrProfiler$1",
            "XXX.profiling.jfr.JvmProfiler$NoOpProfiler",
            "XXX.profiling.jfr.SummaryReporter",
            "XXX.jfr.callback.package-info",
            "XXX.jfr.event.ChunkGenerationEvent$Fields",
            "XXX.jfr.event.NetworkSummaryEvent$Fields",
            "XXX.jfr.event.PacketEvent",
            "XXX.jfr.event.PacketReceivedEvent",
            "XXX.jfr.event.ServerTickTimeEvent",
            "XXX.jfr.event.WorldLoadFinishedEvent",
            "XXX.profiling.jfr.package-info",
            "XXX.jfr.parse.JfrStatsParser$1",
            "XXX.jfr.parse.JfrStatsResult",
            "XXX.jfr.serialize.JfrResultJsonSerializer",
            "XXX.jfr.stats.ChunkGenStat",
            "XXX.jfr.stats.FileIOStat",
            "XXX.jfr.stats.GcHeapStat",
            "XXX.jfr.stats.GcHeapStat$Timing",
            "XXX.jfr.stats.NetworkPacketSummary$PacketCountAndSize",
            "XXX.jfr.stats.ThreadAllocationStat",
            "XXX.jfr.stats.TickTimeStat",
            "XXX.jfr.stats.TimedStatSummary",
            "XXX.profiling.metrics.MetricCategory",
            "XXX.profiling.metrics.MetricSampler$MetricSamplerBuilder",
            "XXX.profiling.metrics.MetricSampler$ThresholdTest",
            "XXX.profiling.metrics.MetricsRegistry",
            "XXX.profiling.metrics.MetricsSamplerProvider",
            "XXX.profiling.metrics.package-info",
            "XXX.metrics.profiling.InactiveMetricsRecorder",
            "XXX.metrics.profiling.ProfilerSamplerAdapter",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider$1",
            "XXX.metrics.profiling.package-info",
            "XXX.metrics.storage.RecordedDeviation",
            "XXX.util.profiling.package-info",
            "XXX.util.random.SimpleWeightedRandomList$Builder",
            "XXX.util.random.WeightedEntry",
            "XXX.util.random.WeightedEntry$Wrapper",
            "XXX.util.random.WeightedRandomList",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.valueproviders.ClampedInt",
            "XXX.util.valueproviders.ClampedNormalInt",
            "XXX.util.valueproviders.ConstantInt",
            "XXX.util.valueproviders.FloatProviderType",
            "XXX.util.valueproviders.IntProviderType",
            "XXX.util.valueproviders.SampledFloat",
            "XXX.util.valueproviders.UniformFloat",
            "XXX.util.valueproviders.WeightedListInt",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.ItemInteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.minecraft.world.RandomSequences",
            "XXX.minecraft.world.RandomizableContainer",
            "XXX.minecraft.world.SimpleMenuProvider",
            "XXX.minecraft.world.WorldlyContainer",
            "XXX.world.damagesource.CombatEntry",
            "XXX.world.damagesource.CombatTracker",
            "XXX.world.damagesource.DamageScaling",
            "XXX.world.damagesource.DamageSource$1",
            "XXX.world.damagesource.DamageType",
            "XXX.world.damagesource.DeathMessageType",
            "XXX.world.damagesource.package-info",
            "XXX.world.effect.MobEffectInstance$BlendState",
            "XXX.world.entity.EntityAttachment$Fallback",
            "XXX.world.entity.EntityAttachments$Builder",
            "XXX.ai.sensing.MobSensor",
            "XXX.ai.sensing.NearestItemSensor",
            "XXX.ai.sensing.NearestVisibleLivingEntitySensor",
            "XXX.ai.sensing.PiglinSpecificSensor",
            "XXX.ai.sensing.SecondaryPoiSensor",
            "XXX.ai.sensing.Sensor",
            "XXX.ai.sensing.TemptingSensor",
            "XXX.ai.sensing.VillagerHostilesSensor",
            "XXX.ai.sensing.package-info",
            "XXX.ai.targeting.package-info",
            "XXX.ai.util.AirRandomPos",
            "XXX.ai.util.GoalUtils",
            "XXX.ai.util.LandRandomPos",
            "XXX.ai.util.package-info",
            "XXX.ai.village.ReputationEventType$1",
            "XXX.ai.village.VillageSiege$State",
            "XXX.village.poi.PoiManager",
            "XXX.village.poi.PoiManager$Occupancy",
            "XXX.village.poi.PoiSection",
            "XXX.village.poi.PoiTypes",
            "XXX.entity.ambient.AmbientCreature",
            "XXX.entity.ambient.package-info",
            "XXX.entity.animal.AbstractFish$FishMoveControl",
            "XXX.entity.animal.AbstractGolem",
            "XXX.entity.animal.AbstractSchoolingFish$SchoolSpawnGroupData",
            "XXX.entity.animal.Bee",
            "XXX.entity.animal.Bee$BaseBeeGoal",
            "XXX.entity.animal.Bee$BeeBecomeAngryTargetGoal",
            "XXX.entity.animal.Bee$BeeGoToHiveGoal",
            "XXX.entity.animal.Bee$BeeGrowCropGoal",
            "XXX.entity.animal.Bee$BeeLocateHiveGoal",
            "XXX.entity.animal.Bee$BeePollinateGoal",
            "XXX.entity.animal.Bucketable",
            "XXX.entity.animal.Cat$CatAvoidEntityGoal",
            "XXX.entity.animal.Cat$CatTemptGoal",
            "XXX.entity.animal.Chicken",
            "XXX.entity.animal.Cow",
            "XXX.entity.animal.Dolphin$DolphinSwimToTreasureGoal",
            "XXX.entity.animal.Dolphin$PlayWithItemsGoal",
            "XXX.entity.animal.Fox",
            "XXX.entity.animal.Fox$FaceplantGoal",
            "XXX.entity.animal.Fox$FoxBehaviorGoal",
            "XXX.entity.animal.Fox$FoxEatBerriesGoal",
            "XXX.entity.animal.Fox$FoxFollowParentGoal",
            "XXX.entity.animal.Fox$FoxLookAtPlayerGoal",
            "XXX.entity.animal.Fox$FoxMeleeAttackGoal",
            "XXX.entity.animal.Fox$FoxPanicGoal",
            "XXX.entity.animal.Fox$FoxSearchForItemsGoal",
            "XXX.entity.animal.Fox$PerchAndSearchGoal",
            "XXX.entity.animal.Fox$SleepGoal",
            "XXX.entity.animal.Fox$Type",
            "XXX.entity.animal.IronGolem",
            "XXX.entity.animal.MushroomCow",
            "XXX.entity.animal.Ocelot",
            "XXX.entity.animal.Ocelot$OcelotTemptGoal",
            "XXX.entity.animal.Panda$Gene",
            "XXX.entity.animal.Panda$PandaAvoidGoal",
            "XXX.entity.animal.Panda$PandaHurtByTargetGoal",
            "XXX.entity.animal.Panda$PandaLookAtPlayerGoal",
            "XXX.entity.animal.Panda$PandaPanicGoal",
            "XXX.entity.animal.Panda$PandaSitGoal",
            "XXX.entity.animal.Parrot",
            "XXX.entity.animal.Parrot$ParrotWanderGoal",
            "XXX.entity.animal.Pig",
            "XXX.entity.animal.PolarBear$PolarBearAttackPlayersGoal",
            "XXX.entity.animal.PolarBear$PolarBearMeleeAttackGoal",
            "XXX.entity.animal.Pufferfish",
            "XXX.entity.animal.Rabbit",
            "XXX.entity.animal.Rabbit$RabbitGroupData",
            "XXX.entity.animal.Rabbit$RabbitMoveControl",
            "XXX.entity.animal.Rabbit$RaidGardenGoal",
            "XXX.entity.animal.Salmon",
            "XXX.entity.animal.Sheep$1",
            "XXX.entity.animal.ShoulderRidingEntity",
            "XXX.entity.animal.Squid",
            "XXX.entity.animal.Squid$SquidRandomMovementGoal",
            "XXX.entity.animal.TropicalFish$Base",
            "XXX.entity.animal.TropicalFish$TropicalFishGroupData",
            "XXX.entity.animal.Turtle",
            "XXX.entity.animal.Turtle$TurtleGoHomeGoal",
            "XXX.entity.animal.Turtle$TurtleLayEggGoal",
            "XXX.entity.animal.Turtle$TurtlePanicGoal",
            "XXX.entity.animal.Turtle$TurtleRandomStrollGoal",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.allay.Allay",
            "XXX.animal.allay.Allay$VibrationUser",
            "XXX.animal.allay.package-info",
            "XXX.animal.armadillo.Armadillo$1",
            "XXX.animal.armadillo.Armadillo$ArmadilloState",
            "XXX.animal.armadillo.ArmadilloAi$1",
            "XXX.animal.armadillo.ArmadilloAi$ArmadilloPanic",
            "XXX.monster.breeze.BreezeUtil",
            "XXX.monster.breeze.Shoot",
            "XXX.monster.breeze.Slide",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.monster.warden.AngerLevel",
            "XXX.monster.warden.AngerManagement$1",
            "XXX.monster.warden.Warden",
            "XXX.monster.warden.Warden$1$1",
            "XXX.monster.warden.Warden$VibrationUser",
            "XXX.monster.warden.WardenSpawnTracker",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerTrades$TypeSpecificTrade",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.world.item.AnimalArmorItem",
            "XXX.world.item.BoneMealItem$1",
            "XXX.world.item.BottleItem",
            "XXX.world.item.BowlFoodItem",
            "XXX.world.item.BrushItem$1",
            "XXX.world.item.BucketItem",
            "XXX.world.item.ChorusFruitItem",
            "XXX.world.item.ComplexItem",
            "XXX.world.item.CreativeModeTab$1",
            "XXX.world.item.CreativeModeTab$DisplayItemsGenerator",
            "XXX.world.item.CreativeModeTab$ItemDisplayParameters",
            "XXX.world.item.CreativeModeTab$Row",
            "XXX.world.item.CreativeModeTab$Type",
            "XXX.world.item.CrossbowItem",
            "XXX.world.item.DiggerItem",
            "XXX.world.item.DispensibleContainerItem",
            "XXX.world.item.DyeColor",
            "XXX.world.item.DyeableAnimalArmorItem",
            "XXX.world.item.DyeableLeatherItem",
            "XXX.world.item.ElytraItem",
            "XXX.world.item.EnchantedBookItem",
            "XXX.world.item.EndCrystalItem",
            "XXX.world.item.EnderpearlItem",
            "XXX.world.item.ExperienceBottleItem",
            "XXX.world.item.FireworkRocketItem",
            "XXX.world.item.FireworkStarItem",
            "XXX.world.item.FlintAndSteelItem",
            "XXX.world.item.GameMasterBlockItem",
            "XXX.world.item.HangingEntityItem",
            "XXX.world.item.HoeItem",
            "XXX.world.item.HoneycombItem",
            "XXX.level.block.BonemealableBlock$1",
            "XXX.level.gameevent.GameEventListener$Provider",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelResource",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelDirectory",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.LevelSummary$CorruptedLevelSummary",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.IntRange",
            "XXX.storage.loot.IntRange$IntLimiter",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$VisitedEntry",
            "XXX.storage.loot.LootDataId",
            "XXX.storage.loot.LootDataManager$1",
            "XXX.storage.loot.LootDataType",
            "XXX.storage.loot.LootParams",
            "XXX.storage.loot.LootParams$DynamicDrop",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryType",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaType",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetBannerPatternFunction",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetEnchantmentsFunction$Builder",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetPotionFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AllOfCondition$Builder",
            "XXX.loot.predicates.AnyOfCondition$Builder",
            "XXX.loot.predicates.CompositeLootItemCondition",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemConditionType",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.package-info",
            "XXX.providers.nbt.ContextNbtProvider$1",
            "XXX.providers.nbt.ContextNbtProvider$Getter",
            "XXX.providers.nbt.NbtProvider",
            "XXX.providers.nbt.StorageNbtProvider",
            "XXX.providers.number.BinomialDistributionGenerator",
            "XXX.providers.number.LootNumberProviderType",
            "XXX.providers.number.NumberProviders",
            "XXX.providers.number.UniformGenerator",
            "XXX.providers.score.ContextScoreboardNameProvider",
            "XXX.providers.score.LootScoreProviderType",
            "XXX.providers.score.ScoreboardNameProviders",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.package-info",
            "XXX.level.validation.DirectoryValidator",
            "XXX.level.validation.ForbiddenSymlinkInfo",
            "XXX.level.validation.PathAllowList$ConfigEntry",
            "XXX.level.validation.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.DisplaySlot$1",
            "XXX.world.scores.PlayerScoreEntry",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreHolder",
            "XXX.world.scores.ScoreHolder$2",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info",
            "XXX.world.ticks.BlackholeTickAccess",
            "XXX.world.ticks.BlackholeTickAccess$2",
            "XXX.world.ticks.LevelChunkTicks",
            "XXX.world.ticks.LevelTicks",
            "XXX.world.ticks.ProtoChunkTicks",
            "XXX.world.ticks.SavedTick$1",
            "XXX.world.ticks.ScheduledTick$1",
            "XXX.world.ticks.TickAccess",
            "XXX.world.ticks.TickPriority",
            "XXX.world.ticks.package-info"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.advancements.critereon.ItemPredicate$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.functions.FunctionBuilder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.functions.MacroFunction \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.commands.functions.MacroFunction$MacroEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.commands.functions.PlainTextFunction \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.Holder$Direct \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Holder$Reference \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.MappedRegistry \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Registry \u001b[2;32m+1P\u001b[0m",
          "XXX.core.cauldron.CauldronInteraction \u001b[2;32m+15M\u001b[0m \u001b[2;31m-15M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.protocol.game.ClientboundRemoveMobEffectPacket \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.protocol.game.ClientboundUpdateMobEffectPacket \u001b[2;32m+3M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.protocol.game.DebugPackets \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.protocol.game.ServerboundSetBeaconPacket \u001b[2;32m+9M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.network.syncher.EntityDataSerializers \u001b[2;32m+1P\u001b[0m",
          "XXX.server.level.WorldGenRegion \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.sounds.SoundEvents \u001b[2;32m+15P\u001b[0m",
          "XXX.minecraft.util.TimeUtil \u001b[2;32m+1P\u001b[0m",
          "XXX.datafix.fixes.BlockRenameFix$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.effect.BadOmenMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.HungerMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.MobEffect \u001b[2;32m+6M\u001b[0m \u001b[2;31m-7M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.effect.MobEffects \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+33P\u001b[0m \u001b[2;31m-33P\u001b[0m",
          "XXX.world.effect.RegenerationMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.WitherMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.entity.Entity \u001b[2;32m+7M\u001b[0m \u001b[2;31m-9M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.entity.LivingEntity \u001b[2;32m+8M\u001b[0m \u001b[2;31m-11M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.entity.Mob \u001b[2;32m+1M\u001b[0m",
          "XXX.world.entity.PathfinderMob \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.attributes.AttributeInstance \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.ai.attributes.AttributeSupplier \u001b[2;32m+7M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.ai.attributes.Attributes \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+18P\u001b[0m \u001b[2;31m-14P\u001b[0m",
          "XXX.ai.goal.GoalSelector \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;31m-3P\u001b[0m",
          "XXX.ai.memory.MemoryModuleType \u001b[2;32m+2P\u001b[0m",
          "XXX.animal.axolotl.Axolotl \u001b[2;31m-1M\u001b[0m",
          "XXX.animal.goat.Goat \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.animal.horse.Horse \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.animal.horse.Llama \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.animal.horse.ZombieHorse \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.boss.enderdragon.EnderDragon \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.decoration.ItemFrame \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.item.PrimedTnt \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.AbstractIllager \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Drowned \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.monster.EnderMan \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Ghast \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.monster.Guardian \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Husk \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Phantom \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.monster.Ravager \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Silverfish \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Slime \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.monster.Spider \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.monster.Spider$SpiderEffectsGroupData \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.monster.Vex \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.monster.Witch \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Zoglin \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.ZombieVillager \u001b[2;31m-1M\u001b[0m",
          "XXX.monster.breeze.Breeze \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+4P\u001b[0m",
          "XXX.monster.breeze.BreezeAi \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.projectile.AbstractArrow \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.projectile.Arrow \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.projectile.ThrownPotion \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.projectile.WindCharge \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.vehicle.AbstractMinecart \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.entity.vehicle.Boat \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.world.item.Items \u001b[2;32m+4P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.LeadItem \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.WritableBookItem \u001b[2;31m-1M\u001b[0m",
          "XXX.item.alchemy.Potion \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.item.alchemy.PotionBrewing$Mix \u001b[2;32m+7M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.item.alchemy.Potions \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+43P\u001b[0m \u001b[2;31m-43P\u001b[0m",
          "XXX.level.block.BeaconBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BrewingStandBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.ButtonBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CandleBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CartographyTableBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CaveVinesBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CeilingHangingSignBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CommandBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.ComposterBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DaylightDetectorBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DecoratedPotBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DispenserBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DragonEggBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EnderChestBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.FenceBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FletchingTableBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FlowerPotBlock \u001b[2;32m+5M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.GrassBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.HopperBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.JigsawBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LecternBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LevelEvent \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.MossBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.NoteBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.RedStoneOreBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.RepeaterBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SmithingTableBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.StructureBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SweetBerryBushBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.TntBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.TrapDoorBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.WallHangingSignBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.BeaconBlockEntity \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.block.entity.SculkCatalystBlockEntity$CatalystListener \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.SculkSensorBlockEntity$VibrationUser \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.entity.SculkShriekerBlockEntity$VibrationUser \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.state.BlockBehaviour \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.state.BlockBehaviour$BlockStateBase \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.gameevent.EuclideanGameEventListenerRegistry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.gameevent.GameEvent \u001b[2;32m+6M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+60P\u001b[0m \u001b[2;31m-61P\u001b[0m",
          "XXX.level.gameevent.GameEvent$ListenerInfo \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.gameevent.GameEventListener \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.gameevent.GameEventListenerRegistry$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ItemPredicate$Builder",
        "differences": {
          "added": [
            "ItemPredicate$Builder isPotion(Potion)"
          ],
          "removed": [
            "ItemPredicate$Builder isPotion(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.FunctionBuilder",
        "differences": {
          "added": [
            "void addMacro(String,int)"
          ],
          "removed": [
            "void addMacro(String,int,ExecutionCommandSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.MacroFunction",
        "differences": {
          "added": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,ExecutionCommandSource)",
            "InstantiatedFunction substituteAndParse(List,List,CommandDispatcher,ExecutionCommandSource)",
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,Object)"
          ],
          "removed": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher)",
            "InstantiatedFunction substituteAndParse(List,List,CommandDispatcher)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.MacroFunction$MacroEntry",
        "differences": {
          "added": [
            "void <init>(StringTemplate,IntList)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,ExecutionCommandSource,ResourceLocation)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,Object,ResourceLocation)"
          ],
          "removed": [
            "void <init>(StringTemplate,IntList,ExecutionCommandSource)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.PlainTextFunction",
        "differences": {
          "added": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,Object)"
          ],
          "removed": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Holder$Direct",
        "differences": {
          "added": [],
          "removed": [
            "boolean is(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Holder$Reference",
        "differences": {
          "added": [],
          "removed": [
            "boolean is(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.MappedRegistry",
        "differences": {
          "added": [],
          "removed": [
            "Optional getHolder(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.cauldron.CauldronInteraction",
        "differences": {
          "added": [
            "InteractionResult fillBucket(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack,ItemStack,Predicate,SoundEvent)",
            "InteractionResult emptyBucket(Level,BlockPos,Player,InteractionHand,ItemStack,BlockState,SoundEvent)",
            "InteractionResult lambda$static$15(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$14(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$13(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$12(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$11(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$10(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$9(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$7(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$5(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$4(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$3(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$1(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$newInteractionMap$0(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)"
          ],
          "removed": [
            "ItemInteractionResult fillBucket(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack,ItemStack,Predicate,SoundEvent)",
            "ItemInteractionResult emptyBucket(Level,BlockPos,Player,InteractionHand,ItemStack,BlockState,SoundEvent)",
            "ItemInteractionResult lambda$static$15(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$14(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$13(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$12(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$11(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$10(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$9(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$7(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$5(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$4(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$3(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$1(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$newInteractionMap$0(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket",
        "differences": {
          "added": [
            "void <init>(int,MobEffect)",
            "MobEffect getEffect()"
          ],
          "removed": [
            "void <init>(int,Holder)",
            "String toString()",
            "int hashCode()",
            "boolean equals(Object)",
            "int entityId()",
            "Holder effect()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket",
        "differences": {
          "added": [
            "void <init>(int,MobEffectInstance)",
            "MobEffect getEffect()",
            "MobEffectInstance$FactorData getFactorData()",
            "void lambda$write$1(FriendlyByteBuf,MobEffectInstance$FactorData)",
            "MobEffectInstance$FactorData lambda$new$0(FriendlyByteBuf)"
          ],
          "removed": [
            "void <init>(int,MobEffectInstance,boolean)",
            "Holder getEffect()",
            "boolean shouldBlend()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.DebugPackets",
        "differences": {
          "added": [
            "void sendGameEventInfo(Level,GameEvent,Vec3)"
          ],
          "removed": [
            "void sendGameEventInfo(Level,Holder,Vec3)",
            "void lambda$sendGameEventInfo$7(ServerLevel,Vec3,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ServerboundSetBeaconPacket",
        "differences": {
          "added": [
            "Optional getPrimary()",
            "Optional getSecondary()",
            "void lambda$write$3(FriendlyByteBuf,MobEffect)",
            "void lambda$write$2(FriendlyByteBuf,MobEffect)",
            "MobEffect lambda$new$1(FriendlyByteBuf)",
            "MobEffect lambda$new$0(FriendlyByteBuf)"
          ],
          "removed": [
            "String toString()",
            "int hashCode()",
            "boolean equals(Object)",
            "Optional primary()",
            "Optional secondary()",
            "void lambda$write$3(FriendlyByteBuf,Holder)",
            "void lambda$write$2(FriendlyByteBuf,Holder)",
            "Holder lambda$new$1(FriendlyByteBuf)",
            "Holder lambda$new$0(FriendlyByteBuf)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.WorldGenRegion",
        "differences": {
          "added": [
            "void gameEvent(GameEvent,Vec3,GameEvent$Context)"
          ],
          "removed": [
            "void gameEvent(Holder,Vec3,GameEvent$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockRenameFix$1",
        "differences": {
          "added": [
            "String fixBlock(String)"
          ],
          "removed": [
            "String renameBlock(String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.BadOmenMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.HungerMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.MobEffect",
        "differences": {
          "added": [
            "Optional createFactorData()",
            "void applyEffectTick(LivingEntity,int)",
            "MobEffect addAttributeModifier(Attribute,String,double,AttributeModifier$Operation)",
            "MobEffect setFactorDataFactory(Supplier)",
            "Map getAttributeModifiers()",
            "Holder$Reference builtInRegistryHolder()",
            "MobEffectInstance$FactorData lambda$new$0()"
          ],
          "removed": [
            "int getBlendDurationTicks()",
            "boolean applyEffectTick(LivingEntity,int)",
            "MobEffect addAttributeModifier(Holder,String,double,AttributeModifier$Operation)",
            "MobEffect setBlendDuration(int)",
            "void createModifiers(int,BiConsumer)",
            "void lambda$createModifiers$0(BiConsumer,int,Holder,MobEffect$AttributeTemplate)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.MobEffects",
        "differences": {
          "added": [
            "MobEffect register(String,MobEffect)",
            "MobEffectInstance$FactorData lambda$static$0()"
          ],
          "removed": [
            "Holder register(String,MobEffect)",
            "Holder bootstrap(Registry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.RegenerationMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.WitherMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.Entity",
        "differences": {
          "added": [
            "void gameEvent(GameEvent,Entity)",
            "void gameEvent(GameEvent)",
            "float getMyRidingOffset(Entity)",
            "float ridingOffset(Entity)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getEyeHeight(Pose,EntityDimensions)",
            "float getNameTagOffsetY()",
            "BlockState getFeetBlockState()",
            "void setMaxUpStep(float)"
          ],
          "removed": [
            "void gameEvent(Holder,Entity)",
            "void gameEvent(Holder)",
            "Vec3 getVehicleAttachmentPoint(Entity)",
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "Vec3 getDefaultPassengerAttachmentPoint(Entity,Entity,EntityAttachments)",
            "void playProjectileDeflectionSound(Projectile)",
            "BlockState getInBlockState()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.LivingEntity",
        "differences": {
          "added": [
            "boolean hasEffect(MobEffect)",
            "MobEffectInstance getEffect(MobEffect)",
            "MobEffectInstance removeEffectNoUpdate(MobEffect)",
            "boolean removeEffect(MobEffect)",
            "void onAttributeUpdated(Attribute)",
            "AttributeInstance getAttribute(Attribute)",
            "double getAttributeValue(Attribute)",
            "double getAttributeBaseValue(Attribute)",
            "float getEyeHeight(Pose,EntityDimensions)",
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float getMyRidingOffset(Entity)"
          ],
          "removed": [
            "float getAgeScale()",
            "boolean hasEffect(Holder)",
            "MobEffectInstance getEffect(Holder)",
            "MobEffectInstance removeEffectNoUpdate(Holder)",
            "boolean removeEffect(Holder)",
            "void onAttributeUpdated(Holder)",
            "AttributeInstance getAttribute(Holder)",
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.Mob",
        "differences": {
          "added": [],
          "removed": [
            "void stopInPlace()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.PathfinderMob",
        "differences": {
          "added": [
            "boolean lambda$isPanicking$0(WrappedGoal)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeInstance",
        "differences": {
          "added": [
            "void <init>(Attribute,Consumer)",
            "Attribute getAttribute()"
          ],
          "removed": [
            "void <init>(Holder,Consumer)",
            "Holder getAttribute()",
            "void addOrUpdateTransientModifier(AttributeModifier)",
            "IllegalStateException lambda$save$2()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeSupplier",
        "differences": {
          "added": [
            "AttributeInstance getAttributeInstance(Attribute)",
            "double getValue(Attribute)",
            "double getBaseValue(Attribute)",
            "double getModifierValue(Attribute,UUID)",
            "AttributeInstance createInstance(Consumer,Attribute)",
            "boolean hasAttribute(Attribute)",
            "boolean hasModifier(Attribute,UUID)"
          ],
          "removed": [
            "AttributeInstance getAttributeInstance(Holder)",
            "double getValue(Holder)",
            "double getBaseValue(Holder)",
            "double getModifierValue(Holder,UUID)",
            "AttributeInstance createInstance(Consumer,Holder)",
            "boolean hasAttribute(Holder)",
            "boolean hasModifier(Holder,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.Attributes",
        "differences": {
          "added": [
            "Attribute register(String,Attribute)"
          ],
          "removed": [
            "Holder register(String,Attribute)",
            "Holder bootstrap(Registry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.GoalSelector",
        "differences": {
          "added": [
            "Stream getRunningGoals()",
            "void setNewGoalRate(int)",
            "boolean lambda$removeGoal$2(Goal,WrappedGoal)"
          ],
          "removed": [
            "boolean lambda$tick$2(Map$Entry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.axolotl.Axolotl",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.goat.Goat",
        "differences": {
          "added": [
            "EntityDimensions getDimensions(Pose)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Horse",
        "differences": {
          "added": [],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Llama",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)",
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.ZombieHorse",
        "differences": {
          "added": [
            "float getPassengersRidingOffsetY(EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.boss.enderdragon.EnderDragon",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.ItemFrame",
        "differences": {
          "added": [
            "float getEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.item.PrimedTnt",
        "differences": {
          "added": [
            "float getEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.AbstractIllager",
        "differences": {
          "added": [
            "float ridingOffset(Entity)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Drowned",
        "differences": {
          "added": [],
          "removed": [
            "AttributeSupplier$Builder createAttributes()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.EnderMan",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Ghast",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float ridingOffset(Entity)",
            "float getStandingEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Guardian",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Husk",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Phantom",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "EntityDimensions getDimensions(Pose)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float ridingOffset(Entity)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Ravager",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Silverfish",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Slime",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "EntityDimensions getDimensions(Pose)"
          ],
          "removed": [
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Spider",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float ridingOffset(Entity)"
          ],
          "removed": [
            "Vec3 getVehicleAttachmentPoint(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Vex",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float ridingOffset(Entity)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Witch",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Zoglin",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.ZombieVillager",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.breeze.Breeze",
        "differences": {
          "added": [
            "boolean withinOuterCircleRange(Vec3)",
            "boolean withinMiddleCircleRange(Vec3)"
          ],
          "removed": [
            "void playWhirlSound()",
            "void playProjectileDeflectionSound(Projectile)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.breeze.BreezeAi",
        "differences": {
          "added": [
            "Optional lambda$initFightActivity$0(Breeze)"
          ],
          "removed": [
            "void initIdleActivity(Brain)",
            "void updateActivity(Breeze)",
            "Optional lambda$initIdleActivity$0(Breeze)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.projectile.AbstractArrow",
        "differences": {
          "added": [
            "void deflect()",
            "float getEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": [
            "void deflect(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.projectile.ThrownPotion",
        "differences": {
          "added": [
            "void makeAreaOfEffectCloud(ItemStack,Potion)"
          ],
          "removed": [
            "void makeAreaOfEffectCloud(ItemStack,Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.projectile.WindCharge",
        "differences": {
          "added": [
            "float getEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.AbstractMinecart",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.Boat",
        "differences": {
          "added": [
            "float getEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.LeadItem",
        "differences": {
          "added": [],
          "removed": [
            "boolean lambda$bindPlayerMobs$0(Player,Mob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.WritableBookItem",
        "differences": {
          "added": [
            "InteractionResult useOn(UseOnContext)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.alchemy.Potion",
        "differences": {
          "added": [
            "Potion byName(String)",
            "String getName(String)",
            "Holder$Reference builtInRegistryHolder()"
          ],
          "removed": [
            "Holder byName(String)",
            "String getName(Holder,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.alchemy.PotionBrewing$Mix",
        "differences": {
          "added": [
            "void <init>(Object,Ingredient,Object)"
          ],
          "removed": [
            "void <init>(Holder,Ingredient,Holder)",
            "String toString()",
            "int hashCode()",
            "boolean equals(Object)",
            "Holder from()",
            "Ingredient ingredient()",
            "Holder to()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.alchemy.Potions",
        "differences": {
          "added": [
            "Potion register(String,Potion)",
            "Potion register(ResourceKey,Potion)"
          ],
          "removed": [
            "Holder register(String,Potion)",
            "Holder register(ResourceKey,Potion)",
            "Holder bootstrap(Registry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BeaconBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BrewingStandBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ButtonBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CandleBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CartographyTableBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CaveVinesBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CeilingHangingSignBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CommandBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ComposterBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DaylightDetectorBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DecoratedPotBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DispenserBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DragonEggBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EnderChestBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "AbstractContainerMenu lambda$use$1(PlayerEnderChestContainer,int,Inventory,Player)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "AbstractContainerMenu lambda$useWithoutItem$1(PlayerEnderChestContainer,int,Inventory,Player)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FenceBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FletchingTableBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FlowerPotBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "void lambda$useWithoutItem$4(Player,ItemStack)",
            "void lambda$useWithoutItem$3(Player,ItemStack,InteractionHand)",
            "boolean lambda$useWithoutItem$2(Player,InteractionHand)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.GrassBlock",
        "differences": {
          "added": [],
          "removed": [
            "BonemealableBlock$Type getType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.HopperBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.JigsawBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.LecternBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.MossBlock",
        "differences": {
          "added": [],
          "removed": [
            "BonemealableBlock$Type getType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.NoteBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RedStoneOreBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RepeaterBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SmithingTableBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.StructureBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SweetBerryBushBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.TntBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$use$0(InteractionHand,Player)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$useItemOn$0(InteractionHand,Player)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.TrapDoorBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.WallHangingSignBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BeaconBlockEntity",
        "differences": {
          "added": [
            "MobEffect filterEffect(MobEffect)",
            "void applyEffects(Level,BlockPos,int,MobEffect,MobEffect)",
            "void storeEffect(CompoundTag,String,MobEffect)",
            "MobEffect loadEffect(CompoundTag,String)"
          ],
          "removed": [
            "Holder filterEffect(Holder)",
            "void applyEffects(Level,BlockPos,int,Holder,Holder)",
            "void storeEffect(CompoundTag,String,Holder)",
            "Holder loadEffect(CompoundTag,String)",
            "void lambda$storeEffect$0(CompoundTag,String,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SculkCatalystBlockEntity$CatalystListener",
        "differences": {
          "added": [
            "boolean handleGameEvent(ServerLevel,GameEvent,GameEvent$Context,Vec3)"
          ],
          "removed": [
            "boolean handleGameEvent(ServerLevel,Holder,GameEvent$Context,Vec3)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SculkSensorBlockEntity$VibrationUser",
        "differences": {
          "added": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,GameEvent,GameEvent$Context)",
            "void onReceiveVibration(ServerLevel,BlockPos,GameEvent,Entity,Entity,float)"
          ],
          "removed": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,Holder,GameEvent$Context)",
            "void onReceiveVibration(ServerLevel,BlockPos,Holder,Entity,Entity,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SculkShriekerBlockEntity$VibrationUser",
        "differences": {
          "added": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,GameEvent,GameEvent$Context)",
            "void onReceiveVibration(ServerLevel,BlockPos,GameEvent,Entity,Entity,float)"
          ],
          "removed": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,Holder,GameEvent$Context)",
            "void onReceiveVibration(ServerLevel,BlockPos,Holder,Entity,Entity,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.BlockBehaviour",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase",
        "differences": {
          "added": [
            "InteractionResult use(Level,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,Level,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(Level,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.EuclideanGameEventListenerRegistry",
        "differences": {
          "added": [
            "boolean visitInRangeListeners(GameEvent,Vec3,GameEvent$Context,GameEventListenerRegistry$ListenerVisitor)"
          ],
          "removed": [
            "boolean visitInRangeListeners(Holder,Vec3,GameEvent$Context,GameEventListenerRegistry$ListenerVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.GameEvent",
        "differences": {
          "added": [
            "int getNotificationRadius()",
            "GameEvent register(String)",
            "GameEvent register(String,int)",
            "Holder$Reference builtInRegistryHolder()",
            "boolean is(TagKey)"
          ],
          "removed": [
            "Holder bootstrap(Registry)",
            "int notificationRadius()",
            "Holder$Reference register(String)",
            "Holder$Reference register(String,int)",
            "int hashCode()",
            "boolean equals(Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.GameEvent$ListenerInfo",
        "differences": {
          "added": [
            "void <init>(GameEvent,Vec3,GameEvent$Context,GameEventListener,Vec3)",
            "GameEvent gameEvent()"
          ],
          "removed": [
            "void <init>(Holder,Vec3,GameEvent$Context,GameEventListener,Vec3)",
            "Holder gameEvent()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.GameEventListenerRegistry$1",
        "differences": {
          "added": [
            "boolean visitInRangeListeners(GameEvent,Vec3,GameEvent$Context,GameEventListenerRegistry$ListenerVisitor)"
          ],
          "removed": [
            "boolean visitInRangeListeners(Holder,Vec3,GameEvent$Context,GameEventListenerRegistry$ListenerVisitor)"
          ]
        }
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Client",
        "id": "client-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.animation.definitions.BatAnimation",
            "XXX.animation.definitions.CamelAnimation",
            "XXX.animation.definitions.SnifferAnimation",
            "XXX.animation.definitions.package-info",
            "XXX.color.block.BlockColor",
            "XXX.color.block.BlockTintCache",
            "XXX.color.block.BlockTintCache$LatestCacheInfo",
            "XXX.color.item.ItemColor",
            "XXX.color.item.package-info",
            "XXX.client.gui.ComponentPath$Leaf",
            "XXX.client.gui.Font",
            "XXX.client.gui.Font$StringRenderOutput",
            "XXX.client.gui.Gui$1DisplayEntry",
            "XXX.client.gui.GuiGraphics",
            "XXX.client.gui.GuiSpriteManager",
            "XXX.client.gui.MapRenderer$MapInstance",
            "XXX.gui.components.AbstractContainerWidget",
            "XXX.gui.components.AbstractScrollWidget",
            "XXX.gui.components.AbstractSelectionList$1",
            "XXX.gui.components.AbstractSelectionList$TrackedList",
            "XXX.gui.components.AbstractStringWidget",
            "XXX.gui.components.BossHealthOverlay",
            "XXX.gui.components.Button",
            "XXX.gui.components.Button$CreateNarration",
            "XXX.gui.components.ChatComponent",
            "XXX.gui.components.Checkbox",
            "XXX.gui.components.Checkbox$OnValueChange",
            "XXX.gui.components.CommandSuggestions$SuggestionsList",
            "XXX.gui.components.ComponentRenderUtils",
            "XXX.gui.components.ContainerObjectSelectionList$1",
            "XXX.gui.components.CycleButton",
            "XXX.gui.components.CycleButton$OnValueChange",
            "XXX.gui.components.CycleButton$ValueListSupplier$1",
            "XXX.gui.components.DebugScreenOverlay",
            "XXX.gui.components.DebugScreenOverlay$AllocationRateCalculator",
            "XXX.gui.components.FittingMultiLineTextWidget",
            "XXX.gui.components.ImageButton",
            "XXX.gui.components.ImageWidget$Sprite",
            "XXX.gui.components.LerpingBossEvent",
            "XXX.gui.components.LockIconButton",
            "XXX.gui.components.LogoRenderer",
            "XXX.gui.components.MultiLineLabel",
            "XXX.gui.components.MultiLineLabel$2",
            "XXX.gui.components.MultiLineTextWidget",
            "XXX.gui.components.MultilineTextField",
            "XXX.gui.components.MultilineTextField$StringView",
            "XXX.gui.components.ObjectSelectionList$Entry",
            "XXX.gui.components.OptionsList$Entry",
            "XXX.gui.components.PlayerFaceRenderer",
            "XXX.gui.components.PlayerSkinWidget$Model",
            "XXX.gui.components.PlayerTabOverlay$HealthState",
            "XXX.gui.components.PopupScreen",
            "XXX.gui.components.PopupScreen$ButtonOption",
            "XXX.gui.components.SplashRenderer",
            "XXX.gui.components.SpriteIconButton$Builder",
            "XXX.gui.components.SpriteIconButton$TextAndIcon",
            "XXX.gui.components.StringWidget",
            "XXX.gui.components.SubtitleOverlay$Subtitle",
            "XXX.gui.components.TabOrderedElement",
            "XXX.gui.components.Whence",
            "XXX.components.debugchart.AbstractDebugChart",
            "XXX.components.debugchart.FpsDebugChart",
            "XXX.components.debugchart.TpsDebugChart",
            "XXX.components.events.ContainerEventHandler",
            "XXX.components.events.package-info",
            "XXX.components.spectator.SpectatorGui",
            "XXX.components.tabs.GridLayoutTab",
            "XXX.components.tabs.TabManager",
            "XXX.components.tabs.TabNavigationBar$Builder",
            "XXX.components.toasts.AdvancementToast",
            "XXX.components.toasts.SystemToast",
            "XXX.components.toasts.Toast",
            "XXX.components.toasts.ToastComponent",
            "XXX.components.toasts.TutorialToast",
            "XXX.components.toasts.package-info",
            "XXX.gui.font.CodepointMap",
            "XXX.gui.font.FontManager",
            "XXX.gui.font.FontManager$BuilderResult",
            "XXX.gui.font.FontManager$Preparation",
            "XXX.gui.font.FontSet",
            "XXX.gui.font.FontTexture",
            "XXX.gui.font.GlyphRenderTypes",
            "XXX.gui.font.TextFieldHelper",
            "XXX.gui.font.TextFieldHelper$CursorStep",
            "XXX.font.glyphs.BakedGlyph$Effect",
            "XXX.font.glyphs.SpecialGlyphs",
            "XXX.font.glyphs.SpecialGlyphs$PixelProvider",
            "XXX.gui.font.package-info",
            "XXX.font.providers.BitmapProvider$Definition",
            "XXX.font.providers.BitmapProvider$Glyph$1",
            "XXX.font.providers.GlyphProviderDefinition$Loader",
            "XXX.font.providers.GlyphProviderType",
            "XXX.font.providers.TrueTypeGlyphProviderDefinition",
            "XXX.font.providers.UnihexProvider",
            "XXX.font.providers.UnihexProvider$Definition",
            "XXX.font.providers.UnihexProvider$Glyph",
            "XXX.font.providers.UnihexProvider$IntContents",
            "XXX.font.providers.UnihexProvider$OverrideRange",
            "XXX.font.providers.UnihexProvider$ShortContents",
            "XXX.gui.layouts.AbstractLayout",
            "XXX.gui.layouts.CommonLayouts",
            "XXX.gui.layouts.EqualSpacingLayout$1",
            "XXX.gui.layouts.EqualSpacingLayout$Orientation",
            "XXX.gui.layouts.FrameLayout$ChildContainer",
            "XXX.gui.layouts.GridLayout$CellInhabitant",
            "XXX.gui.layouts.HeaderAndFooterLayout",
            "XXX.gui.layouts.LayoutElement",
            "XXX.gui.layouts.LayoutSettings$LayoutSettingsImpl",
            "XXX.gui.layouts.LinearLayout$1",
            "XXX.gui.layouts.SpacerElement",
            "XXX.gui.narration.NarratableEntry",
            "XXX.gui.narration.NarratedElementType",
            "XXX.gui.narration.NarrationSupplier",
            "XXX.gui.narration.ScreenNarrationCollector",
            "XXX.gui.narration.ScreenNarrationCollector$EntryKey",
            "XXX.gui.narration.ScreenNarrationCollector$Output",
            "XXX.gui.navigation.CommonInputs",
            "XXX.gui.navigation.FocusNavigationEvent$ArrowNavigation",
            "XXX.gui.navigation.FocusNavigationEvent$TabNavigation",
            "XXX.gui.navigation.ScreenAxis$1",
            "XXX.gui.navigation.ScreenDirection$1",
            "XXX.gui.navigation.ScreenPosition$1",
            "XXX.gui.navigation.ScreenRectangle$1",
            "XXX.client.gui.package-info",
            "XXX.gui.screens.AccessibilityOptionsScreen",
            "XXX.gui.screens.BackupConfirmScreen",
            "XXX.gui.screens.BanNoticeScreens",
            "XXX.gui.screens.ChatScreen",
            "XXX.gui.screens.ConfirmLinkScreen",
            "XXX.gui.screens.ConnectScreen",
            "XXX.gui.screens.ConnectScreen$2",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList",
            "XXX.gui.screens.CreateFlatWorldScreen",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList$Entry",
            "XXX.gui.screens.DatapackLoadFailureScreen",
            "XXX.gui.screens.DeathScreen$TitleConfirmScreen",
            "XXX.gui.screens.DirectJoinServerScreen",
            "XXX.gui.screens.EditServerScreen",
            "XXX.gui.screens.FaviconTexture",
            "XXX.gui.screens.GenericWaitingScreen",
            "XXX.gui.screens.LanguageSelectScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry",
            "XXX.gui.screens.LoadingDotsText",
            "XXX.gui.screens.LoadingOverlay$LogoTexture",
            "XXX.gui.screens.MenuScreens$ScreenConstructor",
            "XXX.gui.screens.NoticeWithLinkScreen",
            "XXX.gui.screens.OptionsScreen",
            "XXX.gui.screens.OutOfMemoryScreen",
            "XXX.gui.screens.PauseScreen",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList",
            "XXX.gui.screens.ProgressScreen",
            "XXX.gui.screens.RecoverWorldDataScreen",
            "XXX.gui.screens.Screen$DeferredTooltipRendering",
            "XXX.gui.screens.ShareToLanScreen",
            "XXX.gui.screens.SkinCustomizationScreen",
            "XXX.gui.screens.TitleScreen",
            "XXX.gui.screens.UnsupportedGraphicsWarningScreen",
            "XXX.gui.screens.VideoSettingsScreen",
            "XXX.gui.screens.WinScreen$CreditsReader",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemRowComparator",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList$MobRow",
            "XXX.screens.achievement.package-info",
            "XXX.screens.advancements.AdvancementTabType",
            "XXX.screens.advancements.AdvancementTabType$Sprites",
            "XXX.screens.advancements.AdvancementWidgetType",
            "XXX.screens.advancements.AdvancementsScreen",
            "XXX.screens.controls.ControlsScreen",
            "XXX.screens.controls.KeyBindsList$CategoryEntry",
            "XXX.screens.controls.KeyBindsList$Entry",
            "XXX.screens.controls.KeyBindsScreen",
            "XXX.screens.debug.GameModeSwitcherScreen",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeIcon",
            "XXX.screens.debug.package-info",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen$1",
            "XXX.screens.inventory.AbstractFurnaceScreen",
            "XXX.screens.inventory.AnvilScreen",
            "XXX.screens.inventory.BeaconScreen$1",
            "XXX.screens.inventory.BeaconScreen$BeaconCancelButton",
            "XXX.screens.inventory.BeaconScreen$BeaconPowerButton",
            "XXX.screens.inventory.BeaconScreen$BeaconSpriteScreenButton",
            "XXX.screens.inventory.BlastFurnaceScreen",
            "XXX.screens.inventory.BookEditScreen$DisplayCache",
            "XXX.screens.inventory.BookEditScreen$Pos2i",
            "XXX.screens.inventory.BookViewScreen$1",
            "XXX.screens.inventory.BookViewScreen$WritableBookAccess",
            "XXX.screens.inventory.BrewingStandScreen",
            "XXX.screens.inventory.CommandBlockEditScreen",
            "XXX.screens.inventory.ContainerScreen",
            "XXX.screens.inventory.CrafterScreen$1",
            "XXX.screens.inventory.CreativeInventoryListener",
            "XXX.screens.inventory.CreativeModeInventoryScreen$CustomCreativeSlot",
            "XXX.screens.inventory.CreativeModeInventoryScreen$SlotWrapper",
            "XXX.screens.inventory.DispenserScreen",
            "XXX.screens.inventory.EnchantmentNames",
            "XXX.screens.inventory.FurnaceScreen",
            "XXX.screens.inventory.HangingSignEditScreen",
            "XXX.screens.inventory.HorseInventoryScreen",
            "XXX.screens.inventory.ItemCombinerScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen$1",
            "XXX.screens.inventory.LecternScreen$1",
            "XXX.screens.inventory.MenuAccess",
            "XXX.screens.inventory.MerchantScreen$TradeOfferButton",
            "XXX.screens.inventory.PageButton",
            "XXX.screens.inventory.SignEditScreen",
            "XXX.screens.inventory.SmokerScreen",
            "XXX.screens.inventory.StructureBlockEditScreen",
            "XXX.screens.inventory.StructureBlockEditScreen$2",
            "XXX.inventory.tooltip.BelowOrAboveWidgetTooltipPositioner",
            "XXX.inventory.tooltip.ClientBundleTooltip$Texture",
            "XXX.inventory.tooltip.ClientTooltipComponent",
            "XXX.inventory.tooltip.DefaultTooltipPositioner",
            "XXX.inventory.tooltip.TooltipRenderUtil",
            "XXX.screens.multiplayer.JoinMultiplayerScreen",
            "XXX.screens.multiplayer.SafetyScreen",
            "XXX.screens.multiplayer.ServerSelectionList",
            "XXX.client.model.ArmedModel",
            "XXX.client.model.ArmorStandModel",
            "XXX.client.model.BatModel",
            "XXX.client.model.BlazeModel",
            "XXX.client.model.BookModel",
            "XXX.client.model.CamelModel",
            "XXX.client.model.ChestBoatModel",
            "XXX.client.model.ChestedHorseModel",
            "XXX.client.model.CodModel",
            "XXX.client.model.ColorableHierarchicalModel",
            "XXX.client.model.CreeperModel",
            "XXX.client.model.DrownedModel",
            "XXX.client.model.EndermanModel",
            "XXX.client.model.EntityModel",
            "XXX.client.model.FoxModel",
            "XXX.client.model.GhastModel",
            "XXX.client.model.GoatModel",
            "XXX.client.model.HeadedModel",
            "XXX.client.model.HoglinModel",
            "XXX.client.model.HumanoidArmorModel",
            "XXX.client.model.HumanoidModel$1",
            "XXX.client.model.IllagerModel",
            "XXX.client.model.LavaSlimeModel",
            "XXX.client.model.ListModel",
            "XXX.client.model.LlamaSpitModel",
            "XXX.client.model.Model",
            "XXX.client.model.OcelotModel",
            "XXX.client.model.ParrotModel",
            "XXX.client.model.ParrotModel$State",
            "XXX.client.model.PigModel",
            "XXX.client.model.PiglinModel",
            "XXX.client.model.PolarBearModel",
            "XXX.client.model.PufferfishMidModel",
            "XXX.client.model.QuadrupedModel",
            "XXX.client.model.RaftModel",
            "XXX.client.model.SalmonModel",
            "XXX.client.model.SheepModel",
            "XXX.client.model.ShulkerBulletModel",
            "XXX.client.model.SilverfishModel",
            "XXX.client.model.SkullModel",
            "XXX.client.model.SlimeModel",
            "XXX.client.model.SnowGolemModel",
            "XXX.client.model.SquidModel",
            "XXX.client.model.TadpoleModel",
            "XXX.client.model.TropicalFishModelA",
            "XXX.client.model.TurtleModel",
            "XXX.client.model.VillagerHeadModel",
            "XXX.client.model.WardenModel",
            "XXX.client.model.WindChargeModel",
            "XXX.client.model.WitherBossModel",
            "XXX.client.model.ZombieModel",
            "XXX.model.dragon.DragonHeadModel",
            "XXX.model.geom.EntityModelSet",
            "XXX.model.geom.ModelLayerLocation",
            "XXX.model.geom.ModelPart",
            "XXX.model.geom.ModelPart$Polygon",
            "XXX.model.geom.ModelPart$Visitor",
            "XXX.model.geom.PartPose",
            "XXX.geom.builders.CubeDeformation",
            "XXX.geom.builders.LayerDefinition",
            "XXX.geom.builders.MeshDefinition",
            "XXX.geom.builders.UVPair",
            "XXX.model.geom.package-info",
            "XXX.client.multiplayer.AccountProfileKeyPairManager",
            "XXX.client.multiplayer.ClientAdvancements",
            "XXX.client.multiplayer.ClientChunkCache",
            "XXX.client.multiplayer.ClientCommonPacketListenerImpl",
            "XXX.client.multiplayer.ClientCommonPacketListenerImpl$PackConfirmScreen",
            "XXX.client.multiplayer.ClientConfigurationPacketListenerImpl",
            "XXX.client.multiplayer.ClientHandshakePacketListenerImpl$State",
            "XXX.client.multiplayer.ClientLevel$1",
            "XXX.client.multiplayer.ClientLevel$EntityCallbacks",
            "XXX.client.multiplayer.ClientPacketListener$1",
            "XXX.client.multiplayer.ClientSuggestionProvider",
            "XXX.client.multiplayer.CommonListenerCookie",
            "XXX.client.multiplayer.LegacyServerPinger$Output",
            "XXX.client.multiplayer.LevelLoadStatusManager$1",
            "XXX.client.multiplayer.MultiPlayerGameMode",
            "XXX.client.multiplayer.PlayerInfo",
            "XXX.client.multiplayer.ProfileKeyPairManager$1",
            "XXX.client.multiplayer.ServerData$ServerPackStatus",
            "XXX.renderer.entity.ArrowRenderer",
            "XXX.renderer.entity.BatRenderer",
            "XXX.renderer.entity.BlazeRenderer",
            "XXX.renderer.entity.BreezeRenderer",
            "XXX.renderer.entity.CatRenderer",
            "XXX.renderer.entity.ChestedHorseRenderer",
            "XXX.renderer.entity.CodRenderer",
            "XXX.renderer.entity.CreeperRenderer",
            "XXX.renderer.entity.DisplayRenderer$1",
            "XXX.renderer.entity.DisplayRenderer$ItemDisplayRenderer",
            "XXX.renderer.entity.DolphinRenderer",
            "XXX.renderer.entity.DrownedRenderer",
            "XXX.renderer.entity.EndCrystalRenderer",
            "XXX.renderer.entity.EnderDragonRenderer$DragonModel",
            "XXX.renderer.entity.EndermiteRenderer",
            "XXX.renderer.entity.EntityRenderer",
            "XXX.renderer.entity.EntityRendererProvider$Context",
            "XXX.renderer.entity.EvokerFangsRenderer",
            "XXX.renderer.entity.EvokerRenderer$1",
            "XXX.renderer.entity.FallingBlockRenderer",
            "XXX.renderer.entity.FishingHookRenderer",
            "XXX.renderer.entity.FrogRenderer",
            "XXX.renderer.entity.GiantMobRenderer",
            "XXX.renderer.entity.GoatRenderer",
            "XXX.renderer.entity.HoglinRenderer",
            "XXX.renderer.entity.HumanoidMobRenderer",
            "XXX.renderer.entity.IllagerRenderer",
            "XXX.renderer.entity.IllusionerRenderer$1",
            "XXX.renderer.entity.ItemEntityRenderer",
            "XXX.renderer.entity.ItemRenderer",
            "XXX.renderer.entity.LightningBoltRenderer",
            "XXX.renderer.entity.LivingEntityRenderer$1",
            "XXX.renderer.entity.LlamaRenderer$1",
            "XXX.renderer.entity.MagmaCubeRenderer",
            "XXX.renderer.entity.MobRenderer",
            "XXX.renderer.entity.NoopRenderer",
            "XXX.renderer.entity.PaintingRenderer",
            "XXX.renderer.entity.ParrotRenderer",
            "XXX.renderer.entity.PhantomRenderer",
            "XXX.renderer.entity.PiglinRenderer",
            "XXX.renderer.entity.PolarBearRenderer",
            "XXX.renderer.entity.RabbitRenderer",
            "XXX.renderer.entity.RavagerRenderer",
            "XXX.renderer.entity.SalmonRenderer",
            "XXX.renderer.entity.ShulkerBulletRenderer",
            "XXX.renderer.entity.SilverfishRenderer",
            "XXX.renderer.entity.SlimeRenderer",
            "XXX.renderer.entity.SnowGolemRenderer",
            "XXX.renderer.entity.SpiderRenderer",
            "XXX.renderer.entity.StrayRenderer",
            "XXX.renderer.entity.TadpoleRenderer",
            "XXX.renderer.entity.ThrownTridentRenderer",
            "XXX.renderer.entity.TntMinecartRenderer",
            "XXX.renderer.entity.TropicalFishRenderer",
            "XXX.renderer.entity.TurtleRenderer",
            "XXX.renderer.entity.VexRenderer",
            "XXX.renderer.entity.VindicatorRenderer",
            "XXX.renderer.entity.WanderingTraderRenderer",
            "XXX.renderer.entity.WindChargeRenderer",
            "XXX.renderer.entity.WitherBossRenderer",
            "XXX.renderer.entity.WitherSkullRenderer",
            "XXX.renderer.entity.ZoglinRenderer",
            "XXX.renderer.entity.ZombieVillagerRenderer",
            "XXX.entity.layers.BeeStingerLayer",
            "XXX.entity.layers.BreezeWindLayer",
            "XXX.entity.layers.CarriedBlockLayer",
            "XXX.entity.layers.CreeperPowerLayer",
            "XXX.entity.layers.CustomHeadLayer",
            "XXX.entity.layers.DolphinCarryingItemLayer",
            "XXX.entity.layers.ElytraLayer",
            "XXX.entity.layers.EnergySwirlLayer",
            "XXX.entity.layers.FoxHeldItemLayer",
            "XXX.entity.layers.HorseMarkingLayer",
            "XXX.entity.layers.HumanoidArmorLayer$1",
            "XXX.entity.layers.IronGolemFlowerLayer",
            "XXX.entity.layers.LlamaDecorLayer",
            "XXX.entity.layers.PandaHoldsItemLayer",
            "XXX.entity.layers.PhantomEyesLayer",
            "XXX.entity.layers.RenderLayer",
            "XXX.entity.layers.SheepFurLayer",
            "XXX.entity.layers.SlimeOuterLayer",
            "XXX.entity.layers.SpiderEyesLayer",
            "XXX.entity.layers.StrayClothingLayer",
            "XXX.entity.layers.TropicalFishPatternLayer",
            "XXX.entity.layers.VillagerProfessionLayer",
            "XXX.entity.layers.WardenEmissiveLayer$AlphaFunction",
            "XXX.entity.layers.WitchItemLayer",
            "XXX.core.dispenser.DispenseItemBehavior$3",
            "XXX.core.dispenser.DispenseItemBehavior$5",
            "XXX.core.dispenser.DispenseItemBehavior$7",
            "XXX.core.dispenser.DispenseItemBehavior$8",
            "XXX.core.dispenser.DispenseItemBehavior$9",
            "XXX.core.dispenser.ShearsDispenseItemBehavior",
            "XXX.core.dispenser.package-info",
            "XXX.core.particles.BlockParticleOption",
            "XXX.core.particles.DustColorTransitionOptions",
            "XXX.core.particles.DustParticleOptions",
            "XXX.core.particles.DustParticleOptionsBase",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SculkChargeParticleOptions$1",
            "XXX.core.particles.ShriekParticleOption$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.core.particles.VibrationParticleOption$1",
            "XXX.core.registries.BuiltInRegistries",
            "XXX.core.registries.Registries",
            "XXX.minecraft.data.BlockFamilies",
            "XXX.minecraft.data.BlockFamily$Builder",
            "XXX.minecraft.data.CachedOutput",
            "XXX.minecraft.data.DataGenerator$PackGenerator",
            "XXX.minecraft.data.DataProvider$Factory",
            "XXX.minecraft.data.HashCache$CacheUpdater",
            "XXX.minecraft.data.HashCache$ProviderCacheBuilder",
            "XXX.minecraft.data.HashCache$UpdateResult",
            "XXX.minecraft.data.PackOutput",
            "XXX.minecraft.data.PackOutput$Target",
            "XXX.data.advancements.AdvancementSubProvider",
            "XXX.advancements.packs.UpdateOneTwentyOneAdvancementProvider",
            "XXX.advancements.packs.VanillaAdvancementProvider",
            "XXX.advancements.packs.VanillaHusbandryAdvancements",
            "XXX.advancements.packs.VanillaStoryAdvancements",
            "XXX.advancements.packs.package-info",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLootSubProvider",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.LootTableProvider$SubProviderEntry",
            "XXX.data.loot.package-info",
            "XXX.loot.packs.TradeRebalanceLootTableProvider",
            "XXX.loot.packs.UpdateOneTwentyOneChestLoot",
            "XXX.loot.packs.VanillaArchaeologyLoot",
            "XXX.loot.packs.VanillaChestLoot",
            "XXX.loot.packs.VanillaFishingLoot",
            "XXX.loot.packs.VanillaLootTableProvider",
            "XXX.loot.packs.package-info",
            "XXX.data.metadata.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$BookSlotModelCacheKey",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ItemModelGenerators$TrimModelData",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplate$JsonFactory",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeBuilder$1",
            "XXX.data.recipes.RecipeOutput",
            "XXX.data.recipes.RecipeProvider$1",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SmithingTrimRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.recipes.packs.UpdateOneTwentyOneRecipeProvider",
            "XXX.recipes.packs.VanillaRecipeProvider$TrimTemplate",
            "XXX.data.registries.RegistriesDatapackGenerator",
            "XXX.data.registries.UpdateOneTwentyOneRegistries",
            "XXX.data.registries.package-info",
            "XXX.data.structures.SnbtDatafixer",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.BiomeTagsProvider",
            "XXX.data.tags.DamageTypeTagsProvider",
            "XXX.data.tags.FlatLevelGeneratorPresetTagsProvider",
            "XXX.data.tags.GameEventTagsProvider",
            "XXX.data.tags.IntrinsicHolderTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.PoiTypeTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.data.tags.TradeRebalanceStructureTagsProvider",
            "XXX.data.tags.UpdateOneTwentyOneBlockTagsProvider",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.util.eventlog.EventLogDirectory",
            "XXX.util.eventlog.EventLogDirectory$File",
            "XXX.util.eventlog.EventLogDirectory$FileList",
            "XXX.util.eventlog.JsonEventLog",
            "XXX.util.eventlog.JsonEventLogReader",
            "XXX.util.eventlog.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$AttributeDescription",
            "XXX.minecraft.util.package-info",
            "XXX.util.profiling.ActiveProfiler$PathEntry",
            "XXX.util.profiling.EmptyProfileResults",
            "XXX.util.profiling.FilledProfileResults$1",
            "XXX.util.profiling.InactiveProfiler",
            "XXX.util.profiling.ProfileResults",
            "XXX.util.profiling.ProfilerFiller$1",
            "XXX.util.profiling.ResultField",
            "XXX.profiling.jfr.Environment",
            "XXX.profiling.jfr.JfrProfiler$1",
            "XXX.profiling.jfr.JvmProfiler$NoOpProfiler",
            "XXX.profiling.jfr.SummaryReporter",
            "XXX.jfr.callback.package-info",
            "XXX.jfr.event.ChunkGenerationEvent$Fields",
            "XXX.jfr.event.NetworkSummaryEvent$Fields",
            "XXX.jfr.event.PacketEvent",
            "XXX.jfr.event.PacketReceivedEvent",
            "XXX.jfr.event.ServerTickTimeEvent",
            "XXX.jfr.event.WorldLoadFinishedEvent",
            "XXX.profiling.jfr.package-info",
            "XXX.jfr.parse.JfrStatsParser$1",
            "XXX.jfr.parse.JfrStatsResult",
            "XXX.jfr.serialize.JfrResultJsonSerializer",
            "XXX.jfr.stats.ChunkGenStat",
            "XXX.jfr.stats.FileIOStat",
            "XXX.jfr.stats.GcHeapStat",
            "XXX.jfr.stats.GcHeapStat$Timing",
            "XXX.jfr.stats.NetworkPacketSummary$PacketCountAndSize",
            "XXX.jfr.stats.ThreadAllocationStat",
            "XXX.jfr.stats.TickTimeStat",
            "XXX.jfr.stats.TimedStatSummary",
            "XXX.profiling.metrics.MetricCategory",
            "XXX.profiling.metrics.MetricSampler$MetricSamplerBuilder",
            "XXX.profiling.metrics.MetricSampler$ThresholdTest",
            "XXX.profiling.metrics.MetricsRegistry",
            "XXX.profiling.metrics.MetricsSamplerProvider",
            "XXX.profiling.metrics.package-info",
            "XXX.metrics.profiling.InactiveMetricsRecorder",
            "XXX.metrics.profiling.ProfilerSamplerAdapter",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider$1",
            "XXX.metrics.profiling.package-info",
            "XXX.metrics.storage.RecordedDeviation",
            "XXX.util.profiling.package-info",
            "XXX.util.random.SimpleWeightedRandomList$Builder",
            "XXX.util.random.WeightedEntry",
            "XXX.util.random.WeightedEntry$Wrapper",
            "XXX.util.random.WeightedRandomList",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.valueproviders.ClampedInt",
            "XXX.util.valueproviders.ClampedNormalInt",
            "XXX.util.valueproviders.ConstantInt",
            "XXX.util.valueproviders.FloatProviderType",
            "XXX.util.valueproviders.IntProviderType",
            "XXX.util.valueproviders.SampledFloat",
            "XXX.util.valueproviders.UniformFloat",
            "XXX.util.valueproviders.WeightedListInt",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.minecraft.world.RandomSequences",
            "XXX.minecraft.world.RandomizableContainer",
            "XXX.minecraft.world.SimpleMenuProvider",
            "XXX.minecraft.world.WorldlyContainer",
            "XXX.world.damagesource.CombatEntry",
            "XXX.world.damagesource.CombatTracker",
            "XXX.world.damagesource.DamageScaling",
            "XXX.world.damagesource.DamageSource$1",
            "XXX.world.damagesource.DamageType",
            "XXX.world.damagesource.DeathMessageType",
            "XXX.world.damagesource.package-info",
            "XXX.world.effect.AttributeModifierTemplate",
            "XXX.world.effect.MobEffect$MobEffectAttributeModifierTemplate",
            "XXX.ai.sensing.NearestItemSensor",
            "XXX.ai.sensing.NearestVisibleLivingEntitySensor",
            "XXX.ai.sensing.PiglinSpecificSensor",
            "XXX.ai.sensing.SecondaryPoiSensor",
            "XXX.ai.sensing.Sensor",
            "XXX.ai.sensing.TemptingSensor",
            "XXX.ai.sensing.VillagerHostilesSensor",
            "XXX.ai.sensing.package-info",
            "XXX.ai.targeting.package-info",
            "XXX.ai.util.AirRandomPos",
            "XXX.ai.util.GoalUtils",
            "XXX.ai.util.LandRandomPos",
            "XXX.ai.util.package-info",
            "XXX.ai.village.ReputationEventType$1",
            "XXX.ai.village.VillageSiege$State",
            "XXX.village.poi.PoiManager",
            "XXX.village.poi.PoiManager$Occupancy",
            "XXX.village.poi.PoiSection",
            "XXX.village.poi.PoiTypes",
            "XXX.entity.ambient.AmbientCreature",
            "XXX.entity.ambient.package-info",
            "XXX.entity.animal.AbstractFish$FishMoveControl",
            "XXX.entity.animal.AbstractGolem",
            "XXX.entity.animal.AbstractSchoolingFish$SchoolSpawnGroupData",
            "XXX.entity.animal.Bee",
            "XXX.entity.animal.Bee$BaseBeeGoal",
            "XXX.entity.animal.Bee$BeeBecomeAngryTargetGoal",
            "XXX.entity.animal.Bee$BeeGoToHiveGoal",
            "XXX.entity.animal.Bee$BeeGrowCropGoal",
            "XXX.entity.animal.Bee$BeeLocateHiveGoal",
            "XXX.entity.animal.Bee$BeePollinateGoal",
            "XXX.entity.animal.Bucketable",
            "XXX.entity.animal.Cat$CatAvoidEntityGoal",
            "XXX.entity.animal.Cat$CatTemptGoal",
            "XXX.entity.animal.Chicken",
            "XXX.entity.animal.Cow",
            "XXX.entity.animal.Dolphin$DolphinSwimToTreasureGoal",
            "XXX.entity.animal.Dolphin$PlayWithItemsGoal",
            "XXX.entity.animal.Fox",
            "XXX.entity.animal.Fox$FaceplantGoal",
            "XXX.entity.animal.Fox$FoxBehaviorGoal",
            "XXX.entity.animal.Fox$FoxEatBerriesGoal",
            "XXX.entity.animal.Fox$FoxFollowParentGoal",
            "XXX.entity.animal.Fox$FoxLookAtPlayerGoal",
            "XXX.entity.animal.Fox$FoxMeleeAttackGoal",
            "XXX.entity.animal.Fox$FoxPanicGoal",
            "XXX.entity.animal.Fox$FoxSearchForItemsGoal",
            "XXX.entity.animal.Fox$PerchAndSearchGoal",
            "XXX.entity.animal.Fox$SleepGoal",
            "XXX.entity.animal.Fox$Type",
            "XXX.entity.animal.IronGolem",
            "XXX.entity.animal.MushroomCow",
            "XXX.entity.animal.Ocelot",
            "XXX.entity.animal.Ocelot$OcelotTemptGoal",
            "XXX.entity.animal.Panda$Gene",
            "XXX.entity.animal.Panda$PandaAvoidGoal",
            "XXX.entity.animal.Panda$PandaHurtByTargetGoal",
            "XXX.entity.animal.Panda$PandaLookAtPlayerGoal",
            "XXX.entity.animal.Panda$PandaPanicGoal",
            "XXX.entity.animal.Panda$PandaSitGoal",
            "XXX.entity.animal.Parrot",
            "XXX.entity.animal.Parrot$ParrotWanderGoal",
            "XXX.entity.animal.Pig",
            "XXX.entity.animal.PolarBear$PolarBearAttackPlayersGoal",
            "XXX.entity.animal.PolarBear$PolarBearMeleeAttackGoal",
            "XXX.entity.animal.Pufferfish",
            "XXX.entity.animal.Rabbit",
            "XXX.entity.animal.Rabbit$RabbitGroupData",
            "XXX.entity.animal.Rabbit$RabbitMoveControl",
            "XXX.entity.animal.Rabbit$RaidGardenGoal",
            "XXX.entity.animal.Salmon",
            "XXX.entity.animal.Sheep$1",
            "XXX.entity.animal.ShoulderRidingEntity",
            "XXX.entity.animal.Squid",
            "XXX.entity.animal.Squid$SquidRandomMovementGoal",
            "XXX.entity.animal.TropicalFish$Base",
            "XXX.entity.animal.TropicalFish$TropicalFishGroupData",
            "XXX.entity.animal.Turtle",
            "XXX.entity.animal.Turtle$TurtleGoHomeGoal",
            "XXX.entity.animal.Turtle$TurtleLayEggGoal",
            "XXX.entity.animal.Turtle$TurtlePanicGoal",
            "XXX.entity.animal.Turtle$TurtleRandomStrollGoal",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.allay.Allay",
            "XXX.animal.allay.Allay$VibrationUser",
            "XXX.animal.allay.package-info",
            "XXX.monster.breeze.Shoot",
            "XXX.monster.breeze.Slide",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.monster.warden.AngerLevel",
            "XXX.monster.warden.AngerManagement$1",
            "XXX.monster.warden.Warden",
            "XXX.monster.warden.Warden$1$1",
            "XXX.monster.warden.Warden$VibrationUser",
            "XXX.monster.warden.WardenSpawnTracker",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerTrades$TypeSpecificTrade",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.world.item.BottleItem",
            "XXX.world.item.BowlFoodItem",
            "XXX.world.item.BrushItem$1",
            "XXX.world.item.BucketItem",
            "XXX.world.item.ChorusFruitItem",
            "XXX.world.item.ComplexItem",
            "XXX.world.item.CreativeModeTab$1",
            "XXX.world.item.CreativeModeTab$DisplayItemsGenerator",
            "XXX.world.item.CreativeModeTab$ItemDisplayParameters",
            "XXX.world.item.CreativeModeTab$Row",
            "XXX.world.item.CreativeModeTab$Type",
            "XXX.world.item.CrossbowItem",
            "XXX.world.item.DiggerItem",
            "XXX.world.item.DispensibleContainerItem",
            "XXX.world.item.DyeColor",
            "XXX.world.item.DyeableLeatherItem",
            "XXX.world.item.ElytraItem",
            "XXX.world.item.EnchantedBookItem",
            "XXX.world.item.EndCrystalItem",
            "XXX.world.item.EnderpearlItem",
            "XXX.world.item.ExperienceBottleItem",
            "XXX.world.item.FireworkRocketItem",
            "XXX.world.item.FireworkStarItem",
            "XXX.world.item.FlintAndSteelItem",
            "XXX.world.item.GameMasterBlockItem",
            "XXX.world.item.HangingEntityItem",
            "XXX.world.item.HoeItem",
            "XXX.world.item.HoneycombItem",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelResource",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelDirectory",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.LevelSummary$CorruptedLevelSummary",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.IntRange",
            "XXX.storage.loot.IntRange$IntLimiter",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$VisitedEntry",
            "XXX.storage.loot.LootDataId",
            "XXX.storage.loot.LootDataManager$1",
            "XXX.storage.loot.LootDataType",
            "XXX.storage.loot.LootParams",
            "XXX.storage.loot.LootParams$DynamicDrop",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryType",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaType",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetBannerPatternFunction",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetEnchantmentsFunction$Builder",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetPotionFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AllOfCondition$Builder",
            "XXX.loot.predicates.AnyOfCondition$Builder",
            "XXX.loot.predicates.CompositeLootItemCondition",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemConditionType",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.package-info",
            "XXX.providers.nbt.ContextNbtProvider$1",
            "XXX.providers.nbt.ContextNbtProvider$Getter",
            "XXX.providers.nbt.NbtProvider",
            "XXX.providers.nbt.StorageNbtProvider",
            "XXX.providers.number.BinomialDistributionGenerator",
            "XXX.providers.number.LootNumberProviderType",
            "XXX.providers.number.NumberProviders",
            "XXX.providers.number.UniformGenerator",
            "XXX.providers.score.ContextScoreboardNameProvider",
            "XXX.providers.score.LootScoreProviderType",
            "XXX.providers.score.ScoreboardNameProviders",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.package-info",
            "XXX.level.validation.DirectoryValidator",
            "XXX.level.validation.ForbiddenSymlinkInfo",
            "XXX.level.validation.PathAllowList$ConfigEntry",
            "XXX.level.validation.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.DisplaySlot$1",
            "XXX.world.scores.PlayerScoreEntry",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreHolder",
            "XXX.world.scores.ScoreHolder$2",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info",
            "XXX.world.ticks.BlackholeTickAccess",
            "XXX.world.ticks.BlackholeTickAccess$2",
            "XXX.world.ticks.LevelChunkTicks",
            "XXX.world.ticks.LevelTicks",
            "XXX.world.ticks.ProtoChunkTicks",
            "XXX.world.ticks.SavedTick$1",
            "XXX.world.ticks.ScheduledTick$1",
            "XXX.world.ticks.TickAccess",
            "XXX.world.ticks.TickPriority",
            "XXX.world.ticks.package-info"
          ],
          "removed": [
            "XXX.animation.definitions.ArmadilloAnimation",
            "XXX.animation.definitions.BreezeAnimation",
            "XXX.animation.definitions.FrogAnimation",
            "XXX.animation.definitions.WardenAnimation",
            "XXX.client.animation.package-info",
            "XXX.color.block.BlockColors",
            "XXX.color.block.BlockTintCache$CacheData",
            "XXX.color.block.package-info",
            "XXX.color.item.ItemColors",
            "XXX.client.gui.ComponentPath",
            "XXX.client.gui.ComponentPath$Path",
            "XXX.client.gui.Font$DisplayMode",
            "XXX.client.gui.Gui",
            "XXX.client.gui.Gui$HeartType",
            "XXX.client.gui.GuiGraphics$ScissorStack",
            "XXX.client.gui.LayeredDraw",
            "XXX.client.gui.MapRenderer",
            "XXX.gui.components.AbstractButton",
            "XXX.gui.components.AbstractOptionSliderButton",
            "XXX.gui.components.AbstractSelectionList",
            "XXX.gui.components.AbstractSelectionList$Entry",
            "XXX.gui.components.AbstractSliderButton",
            "XXX.gui.components.AbstractWidget",
            "XXX.gui.components.BossHealthOverlay$1",
            "XXX.gui.components.Button$Builder",
            "XXX.gui.components.Button$OnPress",
            "XXX.gui.components.ChatComponent$DelayedMessageDeletion",
            "XXX.gui.components.Checkbox$Builder",
            "XXX.gui.components.CommandSuggestions",
            "XXX.gui.components.CommonButtons",
            "XXX.gui.components.ContainerObjectSelectionList",
            "XXX.gui.components.ContainerObjectSelectionList$Entry",
            "XXX.gui.components.CycleButton$Builder",
            "XXX.gui.components.CycleButton$ValueListSupplier",
            "XXX.gui.components.CycleButton$ValueListSupplier$2",
            "XXX.gui.components.DebugScreenOverlay$1",
            "XXX.gui.components.EditBox",
            "XXX.gui.components.FocusableTextWidget",
            "XXX.gui.components.ImageWidget",
            "XXX.gui.components.ImageWidget$Texture",
            "XXX.gui.components.LoadingDotsWidget",
            "XXX.gui.components.LockIconButton$Icon",
            "XXX.gui.components.MultiLineEditBox",
            "XXX.gui.components.MultiLineLabel$1",
            "XXX.gui.components.MultiLineLabel$TextWithWidth",
            "XXX.gui.components.MultiLineTextWidget$CacheKey",
            "XXX.gui.components.MultilineTextField$1",
            "XXX.gui.components.ObjectSelectionList",
            "XXX.gui.components.OptionsList",
            "XXX.gui.components.PlainTextButton",
            "XXX.gui.components.PlayerSkinWidget",
            "XXX.gui.components.PlayerTabOverlay",
            "XXX.gui.components.PlayerTabOverlay$ScoreDisplayEntry",
            "XXX.gui.components.PopupScreen$Builder",
            "XXX.gui.components.Renderable",
            "XXX.gui.components.SpriteIconButton",
            "XXX.gui.components.SpriteIconButton$CenteredIcon",
            "XXX.gui.components.StateSwitchingButton",
            "XXX.gui.components.SubtitleOverlay",
            "XXX.gui.components.TabButton",
            "XXX.gui.components.Tooltip",
            "XXX.gui.components.WidgetSprites",
            "XXX.components.debugchart.BandwidthDebugChart",
            "XXX.components.debugchart.PingDebugChart",
            "XXX.components.events.AbstractContainerEventHandler",
            "XXX.components.events.GuiEventListener",
            "XXX.gui.components.package-info",
            "XXX.components.spectator.package-info",
            "XXX.components.tabs.Tab",
            "XXX.components.tabs.TabNavigationBar",
            "XXX.components.tabs.package-info",
            "XXX.components.toasts.RecipeToast",
            "XXX.components.toasts.SystemToast$SystemToastId",
            "XXX.components.toasts.Toast$Visibility",
            "XXX.components.toasts.ToastComponent$ToastInstance",
            "XXX.components.toasts.TutorialToast$Icons",
            "XXX.gui.font.AllMissingGlyphProvider",
            "XXX.gui.font.CodepointMap$Output",
            "XXX.gui.font.FontManager$BuilderId",
            "XXX.gui.font.FontManager$FontDefinitionFile",
            "XXX.gui.font.FontManager$UnresolvedBuilderBundle",
            "XXX.gui.font.FontSet$GlyphInfoFilter",
            "XXX.gui.font.FontTexture$Node",
            "XXX.gui.font.GlyphRenderTypes$1",
            "XXX.gui.font.TextFieldHelper$1",
            "XXX.font.glyphs.BakedGlyph",
            "XXX.font.glyphs.EmptyGlyph",
            "XXX.font.glyphs.SpecialGlyphs$1",
            "XXX.font.glyphs.package-info",
            "XXX.font.providers.BitmapProvider",
            "XXX.font.providers.BitmapProvider$Glyph",
            "XXX.font.providers.GlyphProviderDefinition",
            "XXX.font.providers.GlyphProviderDefinition$Reference",
            "XXX.font.providers.ProviderReferenceDefinition",
            "XXX.font.providers.TrueTypeGlyphProviderDefinition$Shift",
            "XXX.font.providers.UnihexProvider$ByteContents",
            "XXX.font.providers.UnihexProvider$Dimensions",
            "XXX.font.providers.UnihexProvider$Glyph$1",
            "XXX.font.providers.UnihexProvider$LineData",
            "XXX.font.providers.UnihexProvider$ReaderOutput",
            "XXX.font.providers.package-info",
            "XXX.gui.layouts.AbstractLayout$AbstractChildWrapper",
            "XXX.gui.layouts.EqualSpacingLayout",
            "XXX.gui.layouts.EqualSpacingLayout$ChildContainer",
            "XXX.gui.layouts.FrameLayout",
            "XXX.gui.layouts.GridLayout",
            "XXX.gui.layouts.GridLayout$RowHelper",
            "XXX.gui.layouts.Layout",
            "XXX.gui.layouts.LayoutSettings",
            "XXX.gui.layouts.LinearLayout",
            "XXX.gui.layouts.LinearLayout$Orientation",
            "XXX.gui.layouts.package-info",
            "XXX.gui.narration.NarratableEntry$NarrationPriority",
            "XXX.gui.narration.NarrationElementOutput",
            "XXX.gui.narration.NarrationThunk",
            "XXX.gui.narration.ScreenNarrationCollector$1",
            "XXX.gui.narration.ScreenNarrationCollector$NarrationEntry",
            "XXX.gui.narration.package-info",
            "XXX.gui.navigation.FocusNavigationEvent",
            "XXX.gui.navigation.FocusNavigationEvent$InitialFocus",
            "XXX.gui.navigation.ScreenAxis",
            "XXX.gui.navigation.ScreenDirection",
            "XXX.gui.navigation.ScreenPosition",
            "XXX.gui.navigation.ScreenRectangle",
            "XXX.gui.navigation.package-info",
            "XXX.gui.screens.AccessibilityOnboardingScreen",
            "XXX.gui.screens.AlertScreen",
            "XXX.gui.screens.BackupConfirmScreen$Listener",
            "XXX.gui.screens.ChatOptionsScreen",
            "XXX.gui.screens.ChatScreen$1",
            "XXX.gui.screens.ConfirmScreen",
            "XXX.gui.screens.ConnectScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList$Entry",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList",
            "XXX.gui.screens.CreditsAndAttributionScreen",
            "XXX.gui.screens.DeathScreen",
            "XXX.gui.screens.DemoIntroScreen",
            "XXX.gui.screens.DisconnectedScreen",
            "XXX.gui.screens.ErrorScreen",
            "XXX.gui.screens.GenericDirtMessageScreen",
            "XXX.gui.screens.InBedChatScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList",
            "XXX.gui.screens.LevelLoadingScreen",
            "XXX.gui.screens.LoadingOverlay",
            "XXX.gui.screens.MenuScreens",
            "XXX.gui.screens.MouseSettingsScreen",
            "XXX.gui.screens.OnlineOptionsScreen",
            "XXX.gui.screens.OptionsSubScreen",
            "XXX.gui.screens.Overlay",
            "XXX.gui.screens.PresetFlatWorldScreen",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList$Entry",
            "XXX.gui.screens.ReceivingLevelScreen",
            "XXX.gui.screens.Screen",
            "XXX.gui.screens.Screen$NarratableSearchResult",
            "XXX.gui.screens.SimpleOptionsSubScreen",
            "XXX.gui.screens.SoundOptionsScreen",
            "XXX.gui.screens.TitleScreen$WarningLabel",
            "XXX.gui.screens.UnsupportedGraphicsWarningScreen$ButtonOption",
            "XXX.gui.screens.WinScreen",
            "XXX.screens.achievement.StatsScreen",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList$Entry",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemRow",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList",
            "XXX.screens.achievement.StatsUpdateListener",
            "XXX.screens.advancements.AdvancementTab",
            "XXX.screens.advancements.AdvancementTabType$1",
            "XXX.screens.advancements.AdvancementWidget",
            "XXX.screens.advancements.AdvancementWidgetType$1",
            "XXX.screens.advancements.package-info",
            "XXX.screens.controls.KeyBindsList",
            "XXX.screens.controls.KeyBindsList$CategoryEntry$1",
            "XXX.screens.controls.KeyBindsList$KeyEntry",
            "XXX.screens.controls.package-info",
            "XXX.screens.debug.GameModeSwitcherScreen$1",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeSlot",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen",
            "XXX.screens.inventory.AbstractContainerScreen",
            "XXX.screens.inventory.AbstractSignEditScreen",
            "XXX.screens.inventory.BeaconScreen",
            "XXX.screens.inventory.BeaconScreen$BeaconButton",
            "XXX.screens.inventory.BeaconScreen$BeaconConfirmButton",
            "XXX.screens.inventory.BeaconScreen$BeaconScreenButton",
            "XXX.screens.inventory.BeaconScreen$BeaconUpgradePowerButton",
            "XXX.screens.inventory.BookEditScreen",
            "XXX.screens.inventory.BookEditScreen$LineInfo",
            "XXX.screens.inventory.BookViewScreen",
            "XXX.screens.inventory.BookViewScreen$BookAccess",
            "XXX.screens.inventory.BookViewScreen$WrittenBookAccess",
            "XXX.screens.inventory.CartographyTableScreen",
            "XXX.screens.inventory.CommandBlockEditScreen$1",
            "XXX.screens.inventory.CrafterScreen",
            "XXX.screens.inventory.CraftingScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen$ItemPickerMenu",
            "XXX.screens.inventory.CyclingSlotBackground",
            "XXX.screens.inventory.EffectRenderingInventoryScreen",
            "XXX.screens.inventory.EnchantmentScreen",
            "XXX.screens.inventory.GrindstoneScreen",
            "XXX.screens.inventory.HopperScreen",
            "XXX.screens.inventory.InventoryScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen",
            "XXX.screens.inventory.LecternScreen",
            "XXX.screens.inventory.LoomScreen",
            "XXX.screens.inventory.MerchantScreen",
            "XXX.screens.inventory.MinecartCommandBlockEditScreen",
            "XXX.screens.inventory.ShulkerBoxScreen",
            "XXX.screens.inventory.SmithingScreen",
            "XXX.screens.inventory.StonecutterScreen",
            "XXX.screens.inventory.StructureBlockEditScreen$1",
            "XXX.screens.inventory.package-info",
            "XXX.inventory.tooltip.ClientBundleTooltip",
            "XXX.inventory.tooltip.ClientTextTooltip",
            "XXX.inventory.tooltip.ClientTooltipPositioner",
            "XXX.inventory.tooltip.MenuTooltipPositioner",
            "XXX.inventory.tooltip.package-info",
            "XXX.screens.multiplayer.Realms32bitWarningScreen",
            "XXX.screens.multiplayer.ServerReconfigScreen",
            "XXX.screens.multiplayer.ServerSelectionList$1",
            "XXX.client.model.ArmadilloModel",
            "XXX.client.model.ArmorStandArmorModel",
            "XXX.client.model.AxolotlModel",
            "XXX.client.model.BeeModel",
            "XXX.client.model.BoatModel",
            "XXX.client.model.BreezeModel",
            "XXX.client.model.CatModel",
            "XXX.client.model.ChestRaftModel",
            "XXX.client.model.ChickenModel",
            "XXX.client.model.ColorableAgeableListModel",
            "XXX.client.model.CowModel",
            "XXX.client.model.DolphinModel",
            "XXX.client.model.ElytraModel",
            "XXX.client.model.EndermiteModel",
            "XXX.client.model.EvokerFangsModel",
            "XXX.client.model.FrogModel",
            "XXX.client.model.GiantZombieModel",
            "XXX.client.model.GuardianModel",
            "XXX.client.model.HierarchicalModel",
            "XXX.client.model.HorseModel",
            "XXX.client.model.HumanoidModel",
            "XXX.client.model.HumanoidModel$ArmPose",
            "XXX.client.model.IronGolemModel",
            "XXX.client.model.LeashKnotModel",
            "XXX.client.model.LlamaModel",
            "XXX.client.model.MinecartModel",
            "XXX.client.model.ModelUtils",
            "XXX.client.model.PandaModel",
            "XXX.client.model.ParrotModel$1",
            "XXX.client.model.PhantomModel",
            "XXX.client.model.PiglinHeadModel",
            "XXX.client.model.PlayerModel",
            "XXX.client.model.PufferfishBigModel",
            "XXX.client.model.PufferfishSmallModel",
            "XXX.client.model.RabbitModel",
            "XXX.client.model.RavagerModel",
            "XXX.client.model.SheepFurModel",
            "XXX.client.model.ShieldModel",
            "XXX.client.model.ShulkerModel",
            "XXX.client.model.SkeletonModel",
            "XXX.client.model.SkullModelBase",
            "XXX.client.model.SnifferModel",
            "XXX.client.model.SpiderModel",
            "XXX.client.model.StriderModel",
            "XXX.client.model.TridentModel",
            "XXX.client.model.TropicalFishModelB",
            "XXX.client.model.VexModel",
            "XXX.client.model.VillagerModel",
            "XXX.client.model.WaterPatchModel",
            "XXX.client.model.WitchModel",
            "XXX.client.model.WolfModel",
            "XXX.client.model.ZombieVillagerModel",
            "XXX.model.dragon.package-info",
            "XXX.model.geom.LayerDefinitions",
            "XXX.model.geom.ModelLayers",
            "XXX.model.geom.ModelPart$Cube",
            "XXX.model.geom.ModelPart$Vertex",
            "XXX.model.geom.PartNames",
            "XXX.geom.builders.CubeDefinition",
            "XXX.geom.builders.CubeListBuilder",
            "XXX.geom.builders.MaterialDefinition",
            "XXX.geom.builders.PartDefinition",
            "XXX.geom.builders.package-info",
            "XXX.client.model.package-info",
            "XXX.client.multiplayer.ChunkBatchSizeCalculator",
            "XXX.client.multiplayer.ClientAdvancements$Listener",
            "XXX.client.multiplayer.ClientChunkCache$Storage",
            "XXX.client.multiplayer.ClientCommonPacketListenerImpl$DeferredPacket",
            "XXX.client.multiplayer.ClientCommonPacketListenerImpl$PackConfirmScreen$PendingRequest",
            "XXX.client.multiplayer.ClientHandshakePacketListenerImpl",
            "XXX.client.multiplayer.ClientLevel",
            "XXX.client.multiplayer.ClientLevel$ClientLevelData",
            "XXX.client.multiplayer.ClientPacketListener",
            "XXX.client.multiplayer.ClientRegistryLayer",
            "XXX.client.multiplayer.ClientSuggestionProvider$1",
            "XXX.client.multiplayer.LegacyServerPinger",
            "XXX.client.multiplayer.LevelLoadStatusManager",
            "XXX.client.multiplayer.LevelLoadStatusManager$Status",
            "XXX.client.multiplayer.PingDebugMonitor",
            "XXX.client.multiplayer.ProfileKeyPairManager",
            "XXX.client.multiplayer.ServerData",
            "XXX.client.multiplayer.ServerData$State",
            "XXX.renderer.entity.ArmorStandRenderer",
            "XXX.renderer.entity.AxolotlRenderer",
            "XXX.renderer.entity.BeeRenderer",
            "XXX.renderer.entity.BoatRenderer",
            "XXX.renderer.entity.CamelRenderer",
            "XXX.renderer.entity.CaveSpiderRenderer",
            "XXX.renderer.entity.ChickenRenderer",
            "XXX.renderer.entity.CowRenderer",
            "XXX.renderer.entity.DisplayRenderer",
            "XXX.renderer.entity.DisplayRenderer$BlockDisplayRenderer",
            "XXX.renderer.entity.DisplayRenderer$TextDisplayRenderer",
            "XXX.renderer.entity.DragonFireballRenderer",
            "XXX.renderer.entity.ElderGuardianRenderer",
            "XXX.renderer.entity.EnderDragonRenderer",
            "XXX.renderer.entity.EndermanRenderer",
            "XXX.renderer.entity.EntityRenderDispatcher",
            "XXX.renderer.entity.EntityRendererProvider",
            "XXX.renderer.entity.EntityRenderers",
            "XXX.renderer.entity.EvokerRenderer",
            "XXX.renderer.entity.ExperienceOrbRenderer",
            "XXX.renderer.entity.FireworkEntityRenderer",
            "XXX.renderer.entity.FoxRenderer",
            "XXX.renderer.entity.GhastRenderer",
            "XXX.renderer.entity.GlowSquidRenderer",
            "XXX.renderer.entity.GuardianRenderer",
            "XXX.renderer.entity.HorseRenderer",
            "XXX.renderer.entity.HuskRenderer",
            "XXX.renderer.entity.IllusionerRenderer",
            "XXX.renderer.entity.IronGolemRenderer",
            "XXX.renderer.entity.ItemFrameRenderer",
            "XXX.renderer.entity.LeashKnotRenderer",
            "XXX.renderer.entity.LivingEntityRenderer",
            "XXX.renderer.entity.LlamaRenderer",
            "XXX.renderer.entity.LlamaSpitRenderer",
            "XXX.renderer.entity.MinecartRenderer",
            "XXX.renderer.entity.MushroomCowRenderer",
            "XXX.renderer.entity.OcelotRenderer",
            "XXX.renderer.entity.PandaRenderer",
            "XXX.renderer.entity.ParrotRenderer$1",
            "XXX.renderer.entity.PigRenderer",
            "XXX.renderer.entity.PillagerRenderer",
            "XXX.renderer.entity.PufferfishRenderer",
            "XXX.renderer.entity.RabbitRenderer$1",
            "XXX.renderer.entity.RenderLayerParent",
            "XXX.renderer.entity.SheepRenderer",
            "XXX.renderer.entity.ShulkerRenderer",
            "XXX.renderer.entity.SkeletonRenderer",
            "XXX.renderer.entity.SnifferRenderer",
            "XXX.renderer.entity.SpectralArrowRenderer",
            "XXX.renderer.entity.SquidRenderer",
            "XXX.renderer.entity.StriderRenderer",
            "XXX.renderer.entity.ThrownItemRenderer",
            "XXX.renderer.entity.TippableArrowRenderer",
            "XXX.renderer.entity.TntRenderer",
            "XXX.renderer.entity.TropicalFishRenderer$1",
            "XXX.renderer.entity.UndeadHorseRenderer",
            "XXX.renderer.entity.VillagerRenderer",
            "XXX.renderer.entity.VindicatorRenderer$1",
            "XXX.renderer.entity.WardenRenderer",
            "XXX.renderer.entity.WitchRenderer",
            "XXX.renderer.entity.WitherSkeletonRenderer",
            "XXX.renderer.entity.WolfRenderer",
            "XXX.renderer.entity.ZombieRenderer",
            "XXX.entity.layers.ArrowLayer",
            "XXX.entity.layers.BreezeEyesLayer",
            "XXX.entity.layers.CapeLayer",
            "XXX.entity.layers.CatCollarLayer",
            "XXX.entity.layers.CrossedArmsItemLayer",
            "XXX.entity.layers.Deadmau5EarsLayer",
            "XXX.entity.layers.DrownedOuterLayer",
            "XXX.entity.layers.EnderEyesLayer",
            "XXX.entity.layers.EyesLayer",
            "XXX.entity.layers.HorseArmorLayer",
            "XXX.entity.layers.HumanoidArmorLayer",
            "XXX.entity.layers.IronGolemCrackinessLayer",
            "XXX.entity.layers.ItemInHandLayer",
            "XXX.entity.layers.MushroomCowMushroomLayer",
            "XXX.entity.layers.ParrotOnShoulderLayer",
            "XXX.entity.layers.PlayerItemInHandLayer",
            "XXX.entity.layers.SaddleLayer",
            "XXX.entity.layers.ShulkerHeadLayer",
            "XXX.entity.layers.SnowGolemHeadLayer",
            "XXX.entity.layers.SpinAttackEffectLayer",
            "XXX.entity.layers.StuckInBodyLayer",
            "XXX.entity.layers.TropicalFishPatternLayer$1",
            "XXX.entity.layers.WardenEmissiveLayer",
            "XXX.entity.layers.WardenEmissiveLayer$DrawSelector",
            "XXX.entity.layers.WitherArmorLayer",
            "XXX.core.dispenser.DispenseItemBehavior$28",
            "XXX.core.dispenser.DispenseItemBehavior$4",
            "XXX.core.dispenser.DispenseItemBehavior$6",
            "XXX.core.dispenser.DispenseItemBehavior$7$1",
            "XXX.core.dispenser.DispenseItemBehavior$8$1",
            "XXX.core.dispenser.OptionalDispenseItemBehavior",
            "XXX.core.dispenser.ShulkerBoxDispenseBehavior",
            "XXX.minecraft.core.package-info",
            "XXX.core.particles.BlockParticleOption$1",
            "XXX.core.particles.DustColorTransitionOptions$1",
            "XXX.core.particles.DustParticleOptions$1",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleGroup",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SculkChargeParticleOptions",
            "XXX.core.particles.ShriekParticleOption",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.VibrationParticleOption",
            "XXX.core.particles.package-info",
            "XXX.core.registries.BuiltInRegistries$RegistryBootstrap",
            "XXX.core.registries.package-info",
            "XXX.minecraft.data.BlockFamily",
            "XXX.minecraft.data.BlockFamily$Variant",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.HashCache",
            "XXX.minecraft.data.HashCache$ProviderCache",
            "XXX.minecraft.data.HashCache$UpdateFunction",
            "XXX.minecraft.data.Main",
            "XXX.minecraft.data.PackOutput$PathProvider",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.package-info",
            "XXX.advancements.packs.UpdateOneTwentyOneAdventureAdvancements",
            "XXX.advancements.packs.VanillaAdventureAdvancements",
            "XXX.advancements.packs.VanillaNetherAdvancements",
            "XXX.advancements.packs.VanillaTheEndAdvancements",
            "XXX.data.info.BiomeParametersDumpReport",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.EntityLootSubProvider",
            "XXX.data.loot.LootTableProvider$1",
            "XXX.data.loot.LootTableSubProvider",
            "XXX.loot.packs.TradeRebalanceChestLoot",
            "XXX.loot.packs.UpdateOneTwentyOneBlockLoot",
            "XXX.loot.packs.UpdateOneTwentyOneLootTableProvider",
            "XXX.loot.packs.VanillaBlockLoot",
            "XXX.loot.packs.VanillaEntityLoot",
            "XXX.loot.packs.VanillaGiftLoot",
            "XXX.loot.packs.VanillaPiglinBarterLoot",
            "XXX.data.metadata.PackMetadataGenerator",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$BlockStateGeneratorSupplier",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.RecipeBuilder",
            "XXX.data.recipes.RecipeCategory",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SmithingTransformRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.recipes.packs.BundleRecipeProvider",
            "XXX.recipes.packs.VanillaRecipeProvider",
            "XXX.recipes.packs.package-info",
            "XXX.data.registries.RegistryPatchGenerator",
            "XXX.data.registries.VanillaRegistries",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$StructureConversionException",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BannerPatternTagsProvider",
            "XXX.data.tags.CatVariantTagsProvider",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.InstrumentTagsProvider",
            "XXX.data.tags.IntrinsicHolderTagsProvider$IntrinsicTagAppender",
            "XXX.data.tags.PaintingVariantTagsProvider",
            "XXX.data.tags.StructureTagsProvider",
            "XXX.data.tags.TagsProvider$1CombinedData",
            "XXX.data.tags.TagsProvider$TagLookup",
            "XXX.data.tags.UpdateOneTwentyOneBiomeTagsProvider",
            "XXX.data.tags.UpdateOneTwentyOneDamageTypeTagsProvider",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.util.eventlog.EventLogDirectory$CompressedFile",
            "XXX.util.eventlog.EventLogDirectory$FileId",
            "XXX.util.eventlog.EventLogDirectory$RawFile",
            "XXX.util.eventlog.JsonEventLog$1",
            "XXX.util.eventlog.JsonEventLogReader$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.monitoring.jmx.package-info",
            "XXX.util.profiling.ActiveProfiler",
            "XXX.util.profiling.ContinuousProfiler",
            "XXX.util.profiling.FilledProfileResults",
            "XXX.util.profiling.FilledProfileResults$CounterCollector",
            "XXX.util.profiling.ProfileCollector",
            "XXX.util.profiling.ProfilerFiller",
            "XXX.util.profiling.ProfilerPathEntry",
            "XXX.util.profiling.SingleTickProfiler",
            "XXX.profiling.jfr.JfrProfiler",
            "XXX.profiling.jfr.JvmProfiler",
            "XXX.profiling.jfr.Percentiles",
            "XXX.jfr.callback.ProfiledDuration",
            "XXX.jfr.event.ChunkGenerationEvent",
            "XXX.jfr.event.NetworkSummaryEvent",
            "XXX.jfr.event.NetworkSummaryEvent$SumAggregation",
            "XXX.jfr.event.PacketEvent$Fields",
            "XXX.jfr.event.PacketSentEvent",
            "XXX.jfr.event.ServerTickTimeEvent$Fields",
            "XXX.jfr.event.package-info",
            "XXX.jfr.parse.JfrStatsParser",
            "XXX.jfr.parse.JfrStatsParser$MutableCountAndSize",
            "XXX.jfr.parse.package-info",
            "XXX.jfr.serialize.package-info",
            "XXX.jfr.stats.CpuLoadStat",
            "XXX.jfr.stats.FileIOStat$Summary",
            "XXX.jfr.stats.GcHeapStat$Summary",
            "XXX.jfr.stats.NetworkPacketSummary",
            "XXX.jfr.stats.NetworkPacketSummary$PacketIdentification",
            "XXX.jfr.stats.ThreadAllocationStat$Summary",
            "XXX.jfr.stats.TimedStat",
            "XXX.jfr.stats.package-info",
            "XXX.profiling.metrics.MetricSampler",
            "XXX.profiling.metrics.MetricSampler$SamplerResult",
            "XXX.profiling.metrics.MetricSampler$ValueIncreasedByPercentage",
            "XXX.profiling.metrics.MetricsRegistry$AggregatedMetricSampler",
            "XXX.profiling.metrics.ProfilerMeasured",
            "XXX.metrics.profiling.ActiveMetricsRecorder",
            "XXX.metrics.profiling.MetricsRecorder",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider",
            "XXX.metrics.profiling.ServerMetricsSamplersProvider$CpuStats",
            "XXX.metrics.storage.MetricsPersister",
            "XXX.metrics.storage.package-info",
            "XXX.util.random.SimpleWeightedRandomList",
            "XXX.util.random.Weight",
            "XXX.util.random.WeightedEntry$IntrusiveBase",
            "XXX.util.random.WeightedRandom",
            "XXX.util.random.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.valueproviders.BiasedToBottomInt",
            "XXX.util.valueproviders.ClampedNormalFloat",
            "XXX.util.valueproviders.ConstantFloat",
            "XXX.util.valueproviders.FloatProvider",
            "XXX.util.valueproviders.IntProvider",
            "XXX.util.valueproviders.MultipliedFloats",
            "XXX.util.valueproviders.TrapezoidFloat",
            "XXX.util.valueproviders.UniformInt",
            "XXX.util.valueproviders.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.ItemInteractionResult$1",
            "XXX.minecraft.world.MenuProvider",
            "XXX.minecraft.world.RandomSequence",
            "XXX.minecraft.world.RandomSequences$DirtyMarkingRandomSource",
            "XXX.minecraft.world.SimpleContainer",
            "XXX.minecraft.world.TickRateManager",
            "XXX.minecraft.world.WorldlyContainerHolder",
            "XXX.world.damagesource.CombatRules",
            "XXX.world.damagesource.DamageEffects",
            "XXX.world.damagesource.DamageSource",
            "XXX.world.damagesource.DamageSources",
            "XXX.world.damagesource.DamageTypes",
            "XXX.world.damagesource.FallLocation",
            "XXX.world.effect.AbsorptionMobEffect",
            "XXX.world.effect.MobEffect$AttributeTemplate",
            "XXX.world.entity.EntityAttachment",
            "XXX.world.entity.EntityAttachments",
            "XXX.ai.sensing.NearestBedSensor",
            "XXX.ai.sensing.NearestLivingEntitySensor",
            "XXX.ai.sensing.PiglinBruteSpecificSensor",
            "XXX.ai.sensing.PlayerSensor",
            "XXX.ai.sensing.Sensing",
            "XXX.ai.sensing.SensorType",
            "XXX.ai.sensing.VillagerBabiesSensor",
            "XXX.ai.sensing.WardenEntitySensor",
            "XXX.ai.targeting.TargetingConditions",
            "XXX.ai.util.AirAndWaterRandomPos",
            "XXX.ai.util.DefaultRandomPos",
            "XXX.ai.util.HoverRandomPos",
            "XXX.ai.util.RandomPos",
            "XXX.ai.village.ReputationEventType",
            "XXX.ai.village.VillageSiege",
            "XXX.ai.village.package-info",
            "XXX.village.poi.PoiManager$DistanceTracker",
            "XXX.village.poi.PoiRecord",
            "XXX.village.poi.PoiType",
            "XXX.village.poi.package-info",
            "XXX.entity.ambient.Bat",
            "XXX.entity.animal.AbstractFish",
            "XXX.entity.animal.AbstractFish$FishSwimGoal",
            "XXX.entity.animal.AbstractSchoolingFish",
            "XXX.entity.animal.Animal",
            "XXX.entity.animal.Bee$1",
            "XXX.entity.animal.Bee$BeeAttackGoal",
            "XXX.entity.animal.Bee$BeeEnterHiveGoal",
            "XXX.entity.animal.Bee$BeeGoToKnownFlowerGoal",
            "XXX.entity.animal.Bee$BeeHurtByOtherGoal",
            "XXX.entity.animal.Bee$BeeLookControl",
            "XXX.entity.animal.Bee$BeeWanderGoal",
            "XXX.entity.animal.Cat",
            "XXX.entity.animal.Cat$CatRelaxOnOwnerGoal",
            "XXX.entity.animal.CatVariant",
            "XXX.entity.animal.Cod",
            "XXX.entity.animal.Dolphin",
            "XXX.entity.animal.Dolphin$DolphinSwimWithPlayerGoal",
            "XXX.entity.animal.FlyingAnimal",
            "XXX.entity.animal.Fox$DefendTrustedTargetGoal",
            "XXX.entity.animal.Fox$FoxAlertableEntitiesSelector",
            "XXX.entity.animal.Fox$FoxBreedGoal",
            "XXX.entity.animal.Fox$FoxFloatGoal",
            "XXX.entity.animal.Fox$FoxGroupData",
            "XXX.entity.animal.Fox$FoxLookControl",
            "XXX.entity.animal.Fox$FoxMoveControl",
            "XXX.entity.animal.Fox$FoxPounceGoal",
            "XXX.entity.animal.Fox$FoxStrollThroughVillageGoal",
            "XXX.entity.animal.Fox$SeekShelterGoal",
            "XXX.entity.animal.Fox$StalkPreyGoal",
            "XXX.entity.animal.FrogVariant",
            "XXX.entity.animal.IronGolem$Crackiness",
            "XXX.entity.animal.MushroomCow$MushroomType",
            "XXX.entity.animal.Ocelot$OcelotAvoidEntityGoal",
            "XXX.entity.animal.Panda",
            "XXX.entity.animal.Panda$PandaAttackGoal",
            "XXX.entity.animal.Panda$PandaBreedGoal",
            "XXX.entity.animal.Panda$PandaLieOnBackGoal",
            "XXX.entity.animal.Panda$PandaMoveControl",
            "XXX.entity.animal.Panda$PandaRollGoal",
            "XXX.entity.animal.Panda$PandaSneezeGoal",
            "XXX.entity.animal.Parrot$1",
            "XXX.entity.animal.Parrot$Variant",
            "XXX.entity.animal.PolarBear",
            "XXX.entity.animal.PolarBear$PolarBearHurtByTargetGoal",
            "XXX.entity.animal.PolarBear$PolarBearPanicGoal",
            "XXX.entity.animal.Pufferfish$PufferfishPuffGoal",
            "XXX.entity.animal.Rabbit$RabbitAvoidEntityGoal",
            "XXX.entity.animal.Rabbit$RabbitJumpControl",
            "XXX.entity.animal.Rabbit$RabbitPanicGoal",
            "XXX.entity.animal.Rabbit$Variant",
            "XXX.entity.animal.Sheep",
            "XXX.entity.animal.Sheep$2",
            "XXX.entity.animal.SnowGolem",
            "XXX.entity.animal.Squid$SquidFleeGoal",
            "XXX.entity.animal.TropicalFish",
            "XXX.entity.animal.TropicalFish$Pattern",
            "XXX.entity.animal.TropicalFish$Variant",
            "XXX.entity.animal.Turtle$TurtleBreedGoal",
            "XXX.entity.animal.Turtle$TurtleGoToWaterGoal",
            "XXX.entity.animal.Turtle$TurtleMoveControl",
            "XXX.entity.animal.Turtle$TurtlePathNavigation",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.entity.animal.Wolf$WolfPanicGoal",
            "XXX.animal.allay.Allay$JukeboxListener",
            "XXX.animal.allay.AllayAi",
            "XXX.animal.armadillo.Armadillo",
            "XXX.animal.armadillo.Armadillo$2",
            "XXX.animal.armadillo.ArmadilloAi",
            "XXX.animal.armadillo.ArmadilloAi$ArmadilloBallUp",
            "XXX.animal.armadillo.package-info",
            "XXX.monster.breeze.LongJump",
            "XXX.monster.breeze.ShootWhenStuck",
            "XXX.monster.breeze.package-info",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.monster.warden.AngerManagement",
            "XXX.monster.warden.AngerManagement$Sorter",
            "XXX.monster.warden.Warden$1",
            "XXX.monster.warden.Warden$2",
            "XXX.monster.warden.WardenAi",
            "XXX.monster.warden.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$FailureItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspiciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.world.item.AnimalArmorItem$Type",
            "XXX.world.item.BookItem",
            "XXX.world.item.BowItem",
            "XXX.world.item.BrushItem",
            "XXX.world.item.BrushItem$DustParticlesDelta",
            "XXX.world.item.BundleItem",
            "XXX.world.item.CompassItem",
            "XXX.world.item.CreativeModeTab",
            "XXX.world.item.CreativeModeTab$Builder",
            "XXX.world.item.CreativeModeTab$ItemDisplayBuilder",
            "XXX.world.item.CreativeModeTab$Output",
            "XXX.world.item.CreativeModeTab$TabVisibility",
            "XXX.world.item.CreativeModeTabs",
            "XXX.world.item.DebugStickItem",
            "XXX.world.item.DiscFragmentItem",
            "XXX.world.item.DoubleHighBlockItem",
            "XXX.world.item.DyeItem",
            "XXX.world.item.EggItem",
            "XXX.world.item.EmptyMapItem",
            "XXX.world.item.EnchantedGoldenAppleItem",
            "XXX.world.item.EnderEyeItem",
            "XXX.world.item.Equipable",
            "XXX.world.item.FireChargeItem",
            "XXX.world.item.FireworkRocketItem$Shape",
            "XXX.world.item.FishingRodItem",
            "XXX.world.item.FoodOnAStickItem",
            "XXX.world.item.GlowInkSacItem",
            "XXX.world.item.HangingSignItem",
            "XXX.world.item.HoneyBottleItem",
            "XXX.level.block.BonemealableBlock$Type",
            "XXX.level.storage.FileNameDateFormatter",
            "XXX.level.storage.LevelDataAndDimensions",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelCandidates",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.LevelSummary$BackupStatus",
            "XXX.level.storage.LevelSummary$SymlinkLevelSummary",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.PrimaryLevelData$SpecialWorldProperty",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.IntRange$IntChecker",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootDataManager",
            "XXX.storage.loot.LootDataResolver",
            "XXX.storage.loot.LootDataType$Validator",
            "XXX.storage.loot.LootParams$Builder",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Path",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FunctionReference",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunctionType",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.SequenceFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetBannerPatternFunction$Builder",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetEnchantmentsFunction",
            "XXX.loot.functions.SetInstrumentFunction",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$EffectEntry",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AllOfCondition",
            "XXX.loot.predicates.AnyOfCondition",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.CompositeLootItemCondition$Builder",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.ValueCheckCondition",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.providers.nbt.ContextNbtProvider",
            "XXX.providers.nbt.ContextNbtProvider$2",
            "XXX.providers.nbt.LootNbtProviderType",
            "XXX.providers.nbt.NbtProviders",
            "XXX.providers.nbt.package-info",
            "XXX.providers.number.ConstantValue",
            "XXX.providers.number.NumberProvider",
            "XXX.providers.number.ScoreboardValue",
            "XXX.providers.number.package-info",
            "XXX.providers.score.FixedScoreboardNameProvider",
            "XXX.providers.score.ScoreboardNameProvider",
            "XXX.providers.score.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.level.validation.ContentValidationException",
            "XXX.level.validation.DirectoryValidator$1",
            "XXX.level.validation.PathAllowList",
            "XXX.level.validation.PathAllowList$EntryType",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.world.scores.DisplaySlot",
            "XXX.world.scores.Objective",
            "XXX.world.scores.PlayerScores",
            "XXX.world.scores.ReadOnlyScoreInfo",
            "XXX.world.scores.ScoreAccess",
            "XXX.world.scores.ScoreHolder$1",
            "XXX.world.scores.ScoreHolder$3",
            "XXX.world.scores.Scoreboard$1",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info",
            "XXX.world.ticks.BlackholeTickAccess$1",
            "XXX.world.ticks.ContainerSingleItem",
            "XXX.world.ticks.LevelTickAccess",
            "XXX.world.ticks.LevelTicks$PosAndContainerConsumer",
            "XXX.world.ticks.SavedTick",
            "XXX.world.ticks.ScheduledTick",
            "XXX.world.ticks.SerializableTickContainer",
            "XXX.world.ticks.TickContainerAccess",
            "XXX.world.ticks.WorldGenTickAccess"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.mojang.realmsclient.RealmsMainScreen \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.gui.screens.RealmsGenericErrorScreen \u001b[2;32m+1M\u001b[0m",
          "XXX.advancements.critereon.MobEffectsPredicate$Builder \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.client.MouseHandler \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.multiplayer.ServerSelectionList$OnlineServerEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.multiplayer.ServerStatusPinger$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.client.renderer.FogRenderer$BlindnessFogFunction \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.client.renderer.FogRenderer$MobEffectFogFunction \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.resources.MobEffectTextureManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.functions.FunctionBuilder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.functions.MacroFunction \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.commands.functions.MacroFunction$MacroEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.commands.functions.PlainTextFunction \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.Holder$Direct \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Holder$Reference \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.MappedRegistry \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Registry \u001b[2;32m+1P\u001b[0m",
          "XXX.core.cauldron.CauldronInteraction \u001b[2;32m+15M\u001b[0m \u001b[2;31m-15M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.protocol.game.ClientboundRemoveMobEffectPacket \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.protocol.game.ClientboundUpdateMobEffectPacket \u001b[2;32m+3M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.protocol.game.DebugPackets \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.protocol.game.ServerboundSetBeaconPacket \u001b[2;32m+9M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.network.syncher.EntityDataSerializers \u001b[2;32m+1P\u001b[0m",
          "XXX.server.commands.LocateCommand \u001b[2;32m+6M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.server.level.ServerLevel \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerPlayer \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+3P\u001b[0m",
          "XXX.server.network.ServerGamePacketListenerImpl \u001b[2;31m-1P\u001b[0m",
          "XXX.server.players.PlayerList \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.minecraft.tags.TagManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.util.ParticleUtils \u001b[2;32m+2M\u001b[0m",
          "XXX.datafix.fixes.BlockRenameFix \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.References \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.datafix.schemas.V1909 \u001b[2;32m+1M\u001b[0m",
          "XXX.world.effect.HealOrHarmMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.MobEffectInstance \u001b[2;32m+14M\u001b[0m \u001b[2;31m-13M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.world.effect.MobEffectUtil \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.PoisonMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.effect.SaturationMobEffect \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.entity.AreaEffectCloud \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.entity.EntityDimensions \u001b[2;32m+11M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.world.entity.EntityType \u001b[2;32m+1P\u001b[0m",
          "XXX.world.entity.EntityType$Builder \u001b[2;32m+6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.ai.attributes.AttributeMap \u001b[2;32m+7M\u001b[0m \u001b[2;31m-11M\u001b[0m",
          "XXX.ai.attributes.AttributeSupplier$Builder \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.ai.behavior.Swim \u001b[2;32m+1M\u001b[0m",
          "XXX.animal.camel.Camel \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.animal.frog.Frog \u001b[2;31m-1M\u001b[0m",
          "XXX.animal.horse.AbstractChestedHorse \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.animal.horse.AbstractHorse \u001b[2;32m+2M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.animal.horse.SkeletonHorse \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.animal.sniffer.Sniffer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.decoration.ArmorStand \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.decoration.LeashFenceKnotEntity \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.AbstractSkeleton \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.CaveSpider \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.monster.ElderGuardian \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Endermite \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Giant \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Shulker \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Strider \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.WitherSkeleton \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Zombie \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.monster.ZombifiedPiglin \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.inventory.BeaconMenu \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.world.item.ItemStack \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.world.item.WrittenBookItem \u001b[2;31m-1M\u001b[0m",
          "XXX.item.alchemy.PotionBrewing \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.item.alchemy.PotionUtils \u001b[2;32m+6M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.world.level.LevelAccessor \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.AbstractCauldronBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.AbstractFurnaceBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.AnvilBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BarrelBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BedBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.BeehiveBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.BellBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BonemealableBlock \u001b[2;32m+2M\u001b[0m",
          "XXX.level.block.CakeBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CampfireBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CandleCakeBlock \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.CaveVinesPlantBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.ChestBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.ChiseledBookShelfBlock \u001b[2;32m+5M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.level.block.ComparatorBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CrafterBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.CraftingTableBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DoorBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EnchantmentTableBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FenceGateBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FlowerBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.GrindstoneBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.JukeboxBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LeverBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LightBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LoomBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.MangroveLeavesBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.NetherrackBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.NyliumBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.PumpkinBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.RedStoneWireBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.RespawnAnchorBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.RootedDirtBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.ShulkerBoxBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SignBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.StonecutterBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SuspiciousEffectHolder$EffectEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.WitherRoseBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.CalibratedSculkSensorBlockEntity$VibrationUser \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.piston.MovingPistonBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.gameevent.GameEventDispatcher \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.gameevent.GameEventListenerRegistry \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gameevent.vibrations.VibrationInfo \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gameevent.vibrations.VibrationSystem \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gameevent.vibrations.VibrationSystem$Listener \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.gameevent.vibrations.VibrationSystem$User \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.saveddata.maps.MapItemSavedData \u001b[2;32m+2M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.RealmsMainScreen",
        "differences": {
          "added": [
            "void access$300(RealmsMainScreen,Component)",
            "Font access$1700(RealmsMainScreen)",
            "Minecraft access$2000(RealmsMainScreen)",
            "Font access$2700(RealmsMainScreen)",
            "Minecraft access$3000(RealmsMainScreen)"
          ],
          "removed": [
            "void onClose()",
            "Font access$300(RealmsMainScreen)",
            "Minecraft access$1700(RealmsMainScreen)",
            "Font access$2000(RealmsMainScreen)",
            "Minecraft access$2700(RealmsMainScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsGenericErrorScreen",
        "differences": {
          "added": [],
          "removed": [
            "void onClose()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.MobEffectsPredicate$Builder",
        "differences": {
          "added": [
            "MobEffectsPredicate$Builder and(MobEffect)",
            "MobEffectsPredicate$Builder and(MobEffect,MobEffectsPredicate$MobEffectInstancePredicate)"
          ],
          "removed": [
            "MobEffectsPredicate$Builder and(Holder)",
            "MobEffectsPredicate$Builder and(Holder,MobEffectsPredicate$MobEffectInstancePredicate)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.MouseHandler",
        "differences": {
          "added": [
            "void turnPlayer()",
            "void lambda$onMove$11(Screen,double,double,double,double)",
            "void lambda$onMove$10(Screen,double,double)"
          ],
          "removed": [
            "void handleAccumulatedMovement()",
            "void turnPlayer(double)",
            "void lambda$handleAccumulatedMovement$11(Screen,double,double,double,double)",
            "void lambda$handleAccumulatedMovement$10(Screen,double,double)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.multiplayer.ServerSelectionList$OnlineServerEntry",
        "differences": {
          "added": [
            "boolean pingCompleted()",
            "boolean isCompatible()"
          ],
          "removed": [
            "void refreshStatus()",
            "void lambda$render$2()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ServerStatusPinger$1",
        "differences": {
          "added": [
            "void <init>(ServerStatusPinger,Connection,ServerData,Runnable,InetSocketAddress,ServerAddress)"
          ],
          "removed": [
            "void <init>(ServerStatusPinger,Connection,ServerData,Runnable,Runnable,InetSocketAddress,ServerAddress)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.FogRenderer$BlindnessFogFunction",
        "differences": {
          "added": [
            "MobEffect getMobEffect()"
          ],
          "removed": [
            "Holder getMobEffect()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.MobEffectTextureManager",
        "differences": {
          "added": [
            "TextureAtlasSprite get(MobEffect)"
          ],
          "removed": [
            "TextureAtlasSprite get(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.FunctionBuilder",
        "differences": {
          "added": [
            "void addMacro(String,int)"
          ],
          "removed": [
            "void addMacro(String,int,ExecutionCommandSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.MacroFunction",
        "differences": {
          "added": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,ExecutionCommandSource)",
            "InstantiatedFunction substituteAndParse(List,List,CommandDispatcher,ExecutionCommandSource)",
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,Object)"
          ],
          "removed": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher)",
            "InstantiatedFunction substituteAndParse(List,List,CommandDispatcher)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.MacroFunction$MacroEntry",
        "differences": {
          "added": [
            "void <init>(StringTemplate,IntList)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,ExecutionCommandSource,ResourceLocation)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,Object,ResourceLocation)"
          ],
          "removed": [
            "void <init>(StringTemplate,IntList,ExecutionCommandSource)",
            "UnboundEntryAction instantiate(List,CommandDispatcher,ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.functions.PlainTextFunction",
        "differences": {
          "added": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher,Object)"
          ],
          "removed": [
            "InstantiatedFunction instantiate(CompoundTag,CommandDispatcher)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Holder$Direct",
        "differences": {
          "added": [],
          "removed": [
            "boolean is(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Holder$Reference",
        "differences": {
          "added": [],
          "removed": [
            "boolean is(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.MappedRegistry",
        "differences": {
          "added": [],
          "removed": [
            "Optional getHolder(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.cauldron.CauldronInteraction",
        "differences": {
          "added": [
            "InteractionResult fillBucket(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack,ItemStack,Predicate,SoundEvent)",
            "InteractionResult emptyBucket(Level,BlockPos,Player,InteractionHand,ItemStack,BlockState,SoundEvent)",
            "InteractionResult lambda$static$15(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$14(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$13(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$12(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$11(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$static$10(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$9(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$7(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$5(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$4(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$3(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$bootStrap$1(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "InteractionResult lambda$newInteractionMap$0(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)"
          ],
          "removed": [
            "ItemInteractionResult fillBucket(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack,ItemStack,Predicate,SoundEvent)",
            "ItemInteractionResult emptyBucket(Level,BlockPos,Player,InteractionHand,ItemStack,BlockState,SoundEvent)",
            "ItemInteractionResult lambda$static$15(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$14(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$13(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$12(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$11(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$static$10(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$9(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$7(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$5(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$4(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$3(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$bootStrap$1(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)",
            "ItemInteractionResult lambda$newInteractionMap$0(BlockState,Level,BlockPos,Player,InteractionHand,ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket",
        "differences": {
          "added": [
            "void <init>(int,MobEffect)",
            "MobEffect getEffect()"
          ],
          "removed": [
            "void <init>(int,Holder)",
            "String toString()",
            "int hashCode()",
            "boolean equals(Object)",
            "int entityId()",
            "Holder effect()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket",
        "differences": {
          "added": [
            "void <init>(int,MobEffectInstance)",
            "MobEffect getEffect()",
            "MobEffectInstance$FactorData getFactorData()",
            "void lambda$write$1(FriendlyByteBuf,MobEffectInstance$FactorData)",
            "MobEffectInstance$FactorData lambda$new$0(FriendlyByteBuf)"
          ],
          "removed": [
            "void <init>(int,MobEffectInstance,boolean)",
            "Holder getEffect()",
            "boolean shouldBlend()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.DebugPackets",
        "differences": {
          "added": [
            "void sendGameEventInfo(Level,GameEvent,Vec3)"
          ],
          "removed": [
            "void sendGameEventInfo(Level,Holder,Vec3)",
            "void lambda$sendGameEventInfo$7(ServerLevel,Vec3,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ServerboundSetBeaconPacket",
        "differences": {
          "added": [
            "Optional getPrimary()",
            "Optional getSecondary()",
            "void lambda$write$3(FriendlyByteBuf,MobEffect)",
            "void lambda$write$2(FriendlyByteBuf,MobEffect)",
            "MobEffect lambda$new$1(FriendlyByteBuf)",
            "MobEffect lambda$new$0(FriendlyByteBuf)"
          ],
          "removed": [
            "String toString()",
            "int hashCode()",
            "boolean equals(Object)",
            "Optional primary()",
            "Optional secondary()",
            "void lambda$write$3(FriendlyByteBuf,Holder)",
            "void lambda$write$2(FriendlyByteBuf,Holder)",
            "Holder lambda$new$1(FriendlyByteBuf)",
            "Holder lambda$new$0(FriendlyByteBuf)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.LocateCommand",
        "differences": {
          "added": [
            "String getElementName(Pair)",
            "Component lambda$showLocateResult$17(String,String,Component,int)",
            "Style lambda$showLocateResult$16(BlockPos,String,Style)",
            "String lambda$showLocateResult$15(Pair,TagKey)",
            "String lambda$showLocateResult$14(ResourceKey)",
            "String lambda$showLocateResult$13(ResourceOrTagArgument$Result,Pair,HolderSet$Named)",
            "String lambda$showLocateResult$12(ResourceOrTagArgument$Result,Holder$Reference)",
            "String lambda$getElementName$11(ResourceKey)"
          ],
          "removed": [
            "Component lambda$showLocateResult$16(String,String,Component,int)",
            "Style lambda$showLocateResult$15(BlockPos,String,Style)",
            "String lambda$showLocateResult$14(Pair,TagKey)",
            "String lambda$showLocateResult$13(ResourceKey)",
            "String lambda$showLocateResult$12(ResourceOrTagArgument$Result,Pair,HolderSet$Named)",
            "String lambda$showLocateResult$11(ResourceOrTagArgument$Result,Holder$Reference)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerLevel",
        "differences": {
          "added": [
            "void gameEvent(GameEvent,Vec3,GameEvent$Context)"
          ],
          "removed": [
            "void gameEvent(Holder,Vec3,GameEvent$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerPlayer",
        "differences": {
          "added": [],
          "removed": [
            "void updatePlayerAttributes()",
            "boolean canInteractWithEntity(AABB)",
            "boolean canInteractWithBlock(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.PlayerList",
        "differences": {
          "added": [
            "CompoundTag load(ServerPlayer)",
            "Component lambda$broadcastSystemMessage$2(Component,ServerPlayer)",
            "void lambda$remove$1(Entity)",
            "Entity lambda$placeNewPlayer$0(ServerLevel,Entity)"
          ],
          "removed": [
            "Optional load(ServerPlayer)",
            "Component lambda$broadcastSystemMessage$3(Component,ServerPlayer)",
            "void lambda$remove$2(Entity)",
            "Entity lambda$placeNewPlayer$1(ServerLevel,Entity)",
            "Optional lambda$placeNewPlayer$0(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagManager",
        "differences": {
          "added": [
            "TagManager$LoadResult lambda$createLoader$4(ResourceKey,TagLoader,ResourceManager)",
            "Optional lambda$createLoader$3(Registry,ResourceKey,ResourceLocation)"
          ],
          "removed": [
            "TagManager$LoadResult lambda$createLoader$3(ResourceKey,TagLoader,ResourceManager)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.ParticleUtils",
        "differences": {
          "added": [],
          "removed": [
            "void spawnParticleInBlock(LevelAccessor,BlockPos,int,ParticleOptions)",
            "void spawnParticles(LevelAccessor,BlockPos,int,double,double,boolean,ParticleOptions)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockRenameFix",
        "differences": {
          "added": [
            "Typed lambda$makeRule$3(Typed)",
            "Dynamic lambda$makeRule$2(Dynamic)"
          ],
          "removed": [
            "Dynamic fixBlockState(Dynamic)",
            "String fixFlatBlockState(String)",
            "Typed lambda$makeRule$4(Typed)",
            "Dynamic lambda$makeRule$3(Dynamic)",
            "Typed lambda$makeRule$2(Typed)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.References",
        "differences": {
          "added": [],
          "removed": [
            "String lambda$static$35()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V1909",
        "differences": {
          "added": [],
          "removed": [
            "TypeTemplate lambda$registerBlockEntities$0(Schema)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.HealOrHarmMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.MobEffectInstance",
        "differences": {
          "added": [
            "void <init>(MobEffect)",
            "void <init>(MobEffect,int)",
            "void <init>(MobEffect,int,int)",
            "void <init>(MobEffect,int,int,boolean,boolean)",
            "void <init>(MobEffect,int,int,boolean,boolean,boolean)",
            "void <init>(MobEffect,int,int,boolean,boolean,boolean,MobEffectInstance,Optional)",
            "Optional getFactorData()",
            "MobEffect getEffect()",
            "MobEffectInstance loadSpecifiedEffect(MobEffect,CompoundTag)",
            "void lambda$writeDetailsTo$3(CompoundTag,MobEffectInstance$FactorData)",
            "void lambda$writeDetailsTo$2(CompoundTag,Tag)",
            "int lambda$tickDownDuration$1(int)",
            "void lambda$tick$0(MobEffectInstance$FactorData)"
          ],
          "removed": [
            "void <init>(Holder)",
            "void <init>(Holder,int)",
            "void <init>(Holder,int,int)",
            "void <init>(Holder,int,int,boolean,boolean)",
            "void <init>(Holder,int,int,boolean,boolean,boolean)",
            "void <init>(Holder,int,int,boolean,boolean,boolean,MobEffectInstance)",
            "float getBlendFactor(LivingEntity,float)",
            "Holder getEffect()",
            "MobEffectInstance loadSpecifiedEffect(Holder,CompoundTag)",
            "boolean is(Holder)",
            "void copyBlendState(MobEffectInstance)",
            "void skipBlending()",
            "MobEffectInstance lambda$load$1(CompoundTag,Holder$Reference)",
            "int lambda$tickDownDuration$0(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.MobEffectUtil",
        "differences": {
          "added": [
            "boolean lambda$addEffectToPlayersAround$0(Entity,Vec3,double,MobEffect,MobEffectInstance,int,ServerPlayer)"
          ],
          "removed": [
            "boolean lambda$addEffectToPlayersAround$0(Entity,Vec3,double,Holder,MobEffectInstance,int,ServerPlayer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.PoisonMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.SaturationMobEffect",
        "differences": {
          "added": [
            "void applyEffectTick(LivingEntity,int)"
          ],
          "removed": [
            "boolean applyEffectTick(LivingEntity,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.AreaEffectCloud",
        "differences": {
          "added": [
            "void setPotion(Potion)",
            "Potion getPotion()"
          ],
          "removed": [
            "void setPotion(Holder)",
            "Holder getPotion()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EntityDimensions",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(float,float,float,EntityAttachments,boolean)",
            "float defaultEyeHeight(float)",
            "EntityDimensions withEyeHeight(float)",
            "EntityDimensions withAttachments(EntityAttachments$Builder)",
            "int hashCode()",
            "boolean equals(Object)",
            "float width()",
            "float height()",
            "float eyeHeight()",
            "EntityAttachments attachments()",
            "boolean fixed()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EntityType$Builder",
        "differences": {
          "added": [],
          "removed": [
            "EntityType$Builder eyeHeight(float)",
            "EntityType$Builder passengerAttachments(float[])",
            "EntityType$Builder passengerAttachments(Vec3[])",
            "EntityType$Builder vehicleAttachment(Vec3)",
            "EntityType$Builder ridingOffset(float)",
            "EntityType$Builder nameTagOffset(float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeMap",
        "differences": {
          "added": [
            "AttributeInstance getInstance(Attribute)",
            "boolean hasAttribute(Attribute)",
            "boolean hasModifier(Attribute,UUID)",
            "double getValue(Attribute)",
            "double getBaseValue(Attribute)",
            "double getModifierValue(Attribute,UUID)",
            "void lambda$load$7(String)",
            "void lambda$load$6(CompoundTag,Attribute)",
            "void lambda$addTransientAttributeModifiers$4(Attribute,AttributeModifier)",
            "void lambda$removeAttributeModifiers$3(Attribute,Collection)",
            "AttributeInstance lambda$getInstance$1(Attribute)"
          ],
          "removed": [
            "double getValue(Holder)",
            "double getBaseValue(Holder)",
            "void lambda$load$7(ResourceLocation)",
            "void lambda$load$6(CompoundTag,Holder$Reference)",
            "void lambda$addTransientAttributeModifiers$4(Holder,AttributeModifier)",
            "void lambda$removeAttributeModifiers$3(Holder,Collection)",
            "AttributeInstance lambda$getInstance$1(Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeSupplier$Builder",
        "differences": {
          "added": [
            "AttributeInstance create(Attribute)",
            "AttributeSupplier$Builder add(Attribute)",
            "AttributeSupplier$Builder add(Attribute,double)",
            "void lambda$create$0(Attribute,AttributeInstance)"
          ],
          "removed": [
            "AttributeInstance create(Holder)",
            "AttributeSupplier$Builder add(Holder)",
            "AttributeSupplier$Builder add(Holder,double)",
            "void lambda$create$0(Holder,AttributeInstance)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.Swim",
        "differences": {
          "added": [],
          "removed": [
            "boolean shouldSwim(Mob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.camel.Camel",
        "differences": {
          "added": [
            "EntityDimensions getDimensions(Pose)",
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getScale()"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)",
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getAgeScale()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.frog.Frog",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.AbstractChestedHorse",
        "differences": {
          "added": [
            "float getPassengersRidingOffsetY(EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.AbstractHorse",
        "differences": {
          "added": [
            "void setOffspringAttribute(AgeableMob,AbstractHorse,Attribute,double,double)",
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getPassengersRidingOffsetY(EntityDimensions,float)"
          ],
          "removed": [
            "void setOffspringAttribute(AgeableMob,AbstractHorse,Holder,double,double)",
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.SkeletonHorse",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.sniffer.Sniffer",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "EntityDimensions getDimensions(Pose)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float getNameTagOffsetY()"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.ArmorStand",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "EntityDimensions getDimensions(Pose)"
          ],
          "removed": [
            "AttributeSupplier$Builder createAttributes()",
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.LeashFenceKnotEntity",
        "differences": {
          "added": [
            "float getEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.AbstractSkeleton",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float ridingOffset(Entity)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.CaveSpider",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float ridingOffset(Entity)"
          ],
          "removed": [
            "Vec3 getVehicleAttachmentPoint(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.ElderGuardian",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Endermite",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Giant",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float ridingOffset(Entity)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Shulker",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Strider",
        "differences": {
          "added": [
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "Vec3 getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.WitherSkeleton",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "float ridingOffset(Entity)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Zombie",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)",
            "float ridingOffset(Entity)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.ZombifiedPiglin",
        "differences": {
          "added": [
            "float getStandingEyeHeight(Pose,EntityDimensions)",
            "Vector3f getPassengerAttachmentPoint(Entity,EntityDimensions,float)"
          ],
          "removed": [
            "EntityDimensions getDefaultDimensions(Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.BeaconMenu",
        "differences": {
          "added": [
            "int encodeEffect(MobEffect)",
            "MobEffect decodeEffect(int)",
            "MobEffect getPrimaryEffect()",
            "MobEffect getSecondaryEffect()"
          ],
          "removed": [
            "int encodeEffect(Holder)",
            "Holder decodeEffect(int)",
            "Holder getPrimaryEffect()",
            "Holder getSecondaryEffect()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ItemStack",
        "differences": {
          "added": [
            "void addAttributeModifier(Attribute,AttributeModifier,EquipmentSlot)",
            "Style lambda$getDisplayName$14(Style)"
          ],
          "removed": [
            "void addAttributeModifier(Holder,AttributeModifier,EquipmentSlot)",
            "Style lambda$getDisplayName$15(Style)",
            "IllegalArgumentException lambda$addAttributeModifier$14()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.WrittenBookItem",
        "differences": {
          "added": [
            "InteractionResult useOn(UseOnContext)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.alchemy.PotionBrewing",
        "differences": {
          "added": [
            "boolean isBrewablePotion(Potion)",
            "void addMix(Potion,Item,Potion)"
          ],
          "removed": [
            "boolean isBrewablePotion(Holder)",
            "void addMix(Holder,Item,Holder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.alchemy.PotionUtils",
        "differences": {
          "added": [
            "List getAllEffects(Potion,Collection)",
            "int getColor(Potion)",
            "Potion getPotion(ItemStack)",
            "Potion getPotion(CompoundTag)",
            "ItemStack setPotion(ItemStack,Potion)"
          ],
          "removed": [
            "List getAllEffects(Holder,Collection)",
            "int getColor(Holder)",
            "Holder getPotion(ItemStack)",
            "Holder getPotion(CompoundTag)",
            "ItemStack setPotion(ItemStack,Holder)",
            "void lambda$addPotionTooltip$0(List,Holder,AttributeModifier)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LevelAccessor",
        "differences": {
          "added": [
            "void gameEvent(Entity,GameEvent,Vec3)",
            "void gameEvent(Entity,GameEvent,BlockPos)",
            "void gameEvent(GameEvent,BlockPos,GameEvent$Context)"
          ],
          "removed": [
            "void gameEvent(Entity,Holder,Vec3)",
            "void gameEvent(Entity,Holder,BlockPos)",
            "void gameEvent(Holder,BlockPos,GameEvent$Context)",
            "void gameEvent(ResourceKey,BlockPos,GameEvent$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AbstractCauldronBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AbstractFurnaceBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AnvilBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BarrelBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BedBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$use$1(Player,Player$BedSleepingProblem)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "void lambda$useWithoutItem$1(Player,Player$BedSleepingProblem)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BeehiveBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$use$0(InteractionHand,Player)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$useItemOn$0(InteractionHand,Player)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BellBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BonemealableBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockPos getParticlePos(BlockPos)",
            "BonemealableBlock$Type getType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CakeBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CampfireBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CandleCakeBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "BlockState byCandle(Block)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "BlockState byCandle(CandleBlock)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CaveVinesPlantBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ChestBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ChiseledBookShelfBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "int getHitSlot(Vec2)",
            "void lambda$createBlockStateDefinition$0(StateDefinition$Builder,Property)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)",
            "OptionalInt getHitSlot(BlockHitResult,BlockState)",
            "void lambda$createBlockStateDefinition$1(StateDefinition$Builder,Property)",
            "OptionalInt lambda$getHitSlot$0(Vec2)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ComparatorBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CrafterBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CraftingTableBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DoorBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EnchantmentTableBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FenceGateBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FlowerBlock",
        "differences": {
          "added": [
            "void <init>(MobEffect,int,BlockBehaviour$Properties)",
            "List makeEffectList(MobEffect,int)"
          ],
          "removed": [
            "void <init>(Holder,int,BlockBehaviour$Properties)",
            "List makeEffectList(Holder,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.GrindstoneBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.JukeboxBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.LeverBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.LightBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.LoomBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.MangroveLeavesBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockPos getParticlePos(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.NetherrackBlock",
        "differences": {
          "added": [],
          "removed": [
            "BonemealableBlock$Type getType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.NyliumBlock",
        "differences": {
          "added": [],
          "removed": [
            "BonemealableBlock$Type getType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.PumpkinBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$use$0(InteractionHand,Player)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "void lambda$useItemOn$0(InteractionHand,Player)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RedStoneWireBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RespawnAnchorBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RootedDirtBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockPos getParticlePos(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ShulkerBoxBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SignBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult getInteractionResult(boolean)"
          ],
          "removed": [
            "ItemInteractionResult useItemOn(ItemStack,BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)",
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.StonecutterBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SuspiciousEffectHolder$EffectEntry",
        "differences": {
          "added": [
            "void <init>(MobEffect,int)",
            "MobEffect effect()"
          ],
          "removed": [
            "void <init>(Holder,int)",
            "Holder effect()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.WitherRoseBlock",
        "differences": {
          "added": [
            "void <init>(MobEffect,int,BlockBehaviour$Properties)"
          ],
          "removed": [
            "void <init>(Holder,int,BlockBehaviour$Properties)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.CalibratedSculkSensorBlockEntity$VibrationUser",
        "differences": {
          "added": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,GameEvent,GameEvent$Context)"
          ],
          "removed": [
            "boolean canReceiveVibration(ServerLevel,BlockPos,Holder,GameEvent$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.piston.MovingPistonBlock",
        "differences": {
          "added": [
            "InteractionResult use(BlockState,Level,BlockPos,Player,InteractionHand,BlockHitResult)"
          ],
          "removed": [
            "InteractionResult useWithoutItem(BlockState,Level,BlockPos,Player,BlockHitResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.GameEventDispatcher",
        "differences": {
          "added": [
            "void post(GameEvent,Vec3,GameEvent$Context)",
            "void lambda$post$0(List,GameEvent,Vec3,GameEvent$Context,GameEventListener,Vec3)"
          ],
          "removed": [
            "void post(Holder,Vec3,GameEvent$Context)",
            "void lambda$post$0(List,Holder,Vec3,GameEvent$Context,GameEventListener,Vec3)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.vibrations.VibrationInfo",
        "differences": {
          "added": [
            "void <init>(GameEvent,float,Vec3,UUID,UUID)",
            "void <init>(GameEvent,float,Vec3,Entity)",
            "void <init>(GameEvent,float,Vec3,UUID,UUID,Entity)",
            "GameEvent gameEvent()",
            "VibrationInfo lambda$static$2(GameEvent,Float,Vec3,Optional,Optional)"
          ],
          "removed": [
            "void <init>(Holder,float,Vec3,UUID,UUID)",
            "void <init>(Holder,float,Vec3,Entity)",
            "void <init>(Holder,float,Vec3,UUID,UUID,Entity)",
            "Holder gameEvent()",
            "VibrationInfo lambda$static$2(Holder,Float,Vec3,Optional,Optional)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.vibrations.VibrationSystem",
        "differences": {
          "added": [
            "int getGameEventFrequency(GameEvent)",
            "GameEvent getResonanceEventByFrequency(int)",
            "void lambda$static$0(Object2IntOpenHashMap)"
          ],
          "removed": [
            "int getGameEventFrequency(Holder)",
            "int getGameEventFrequency(ResourceKey)",
            "ResourceKey getResonanceEventByFrequency(int)",
            "void lambda$static$0(Reference2IntOpenHashMap)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.vibrations.VibrationSystem$Listener",
        "differences": {
          "added": [
            "boolean handleGameEvent(ServerLevel,GameEvent,GameEvent$Context,Vec3)",
            "void forceScheduleVibration(ServerLevel,GameEvent,GameEvent$Context,Vec3)",
            "void scheduleVibration(ServerLevel,VibrationSystem$Data,GameEvent,GameEvent$Context,Vec3,Vec3)",
            "void lambda$forceScheduleVibration$0(ServerLevel,GameEvent,GameEvent$Context,Vec3,Vec3)"
          ],
          "removed": [
            "boolean handleGameEvent(ServerLevel,Holder,GameEvent$Context,Vec3)",
            "void forceScheduleVibration(ServerLevel,Holder,GameEvent$Context,Vec3)",
            "void scheduleVibration(ServerLevel,VibrationSystem$Data,Holder,GameEvent$Context,Vec3,Vec3)",
            "void lambda$forceScheduleVibration$0(ServerLevel,Holder,GameEvent$Context,Vec3,Vec3)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.vibrations.VibrationSystem$User",
        "differences": {
          "added": [
            "boolean isValidVibration(GameEvent,GameEvent$Context)"
          ],
          "removed": [
            "boolean isValidVibration(Holder,GameEvent$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.saveddata.maps.MapItemSavedData",
        "differences": {
          "added": [],
          "removed": [
            "Predicate mapMatcher(ItemStack)",
            "boolean lambda$mapMatcher$3(ItemStack,Integer,ItemStack)"
          ]
        }
      }
    }
  ]
}