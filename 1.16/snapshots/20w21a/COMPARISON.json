{
  "version_data": [
    {
      "type": "table",
      "value": {
        "previousLabel": "20w20b",
        "currentLabel": "20w21a",
        "values": [
          {
            "key": "World version",
            "previous": "2537",
            "current": "2554"
          },
          {
            "key": "Protocol version",
            "previous": "717",
            "current": "718"
          }
        ]
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Libraries",
        "id": "version-data-libraries",
        "size": 3
      }
    },
    {
      "type": "table",
      "value": {
        "title": "Versions",
        "previousLabel": "20w20b",
        "currentLabel": "20w21a",
        "values": [
          {
            "key": "com.mojang:datafixerupper",
            "previous": "2.0.24",
            "current": "3.0.25"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          }
        ]
      }
    }
  ],
  "registries": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "biome_source.txt",
            "chunk_generator.txt"
          ],
          "removed": [
            "biome_source_type.txt",
            "dimension_type.txt"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "block_state_provider_type",
        "differences": {
          "added": [
            "minecraft:rotated_block_provider"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "feature",
        "differences": {
          "added": [],
          "removed": [
            "minecraft:pillager_outpost",
            "minecraft:mineshaft",
            "minecraft:woodland_mansion",
            "minecraft:jungle_temple",
            "minecraft:desert_pyramid",
            "minecraft:igloo",
            "minecraft:ruined_portal",
            "minecraft:shipwreck",
            "minecraft:swamp_hut",
            "minecraft:stronghold",
            "minecraft:ocean_monument",
            "minecraft:ocean_ruin",
            "minecraft:nether_bridge",
            "minecraft:end_city",
            "minecraft:buried_treasure",
            "minecraft:village",
            "minecraft:nether_fossil",
            "minecraft:bastion_remnant"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sound_event",
        "differences": {
          "added": [
            "minecraft:entity.donkey.eat",
            "minecraft:entity.fox.teleport",
            "minecraft:entity.mule.angry",
            "minecraft:entity.mule.eat",
            "minecraft:entity.parrot.imitate.hoglin",
            "minecraft:entity.parrot.imitate.piglin",
            "minecraft:entity.parrot.imitate.zoglin"
          ],
          "removed": []
        }
      }
    }
  ],
  "tags": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "universal_tags/biome_source.json",
            "universal_tags/chunk_generator.json"
          ],
          "removed": [
            "universal_tags/biome_source_type.json",
            "universal_tags/dimension_type.json"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/block_state_provider_type.json",
        "differences": {
          "added": [
            "minecraft:rotated_block_provider"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/feature.json",
        "differences": {
          "added": [],
          "removed": [
            "minecraft:pillager_outpost",
            "minecraft:mineshaft",
            "minecraft:woodland_mansion",
            "minecraft:jungle_temple",
            "minecraft:desert_pyramid",
            "minecraft:igloo",
            "minecraft:ruined_portal",
            "minecraft:shipwreck",
            "minecraft:swamp_hut",
            "minecraft:stronghold",
            "minecraft:ocean_monument",
            "minecraft:ocean_ruin",
            "minecraft:nether_bridge",
            "minecraft:end_city",
            "minecraft:buried_treasure",
            "minecraft:village",
            "minecraft:nether_fossil",
            "minecraft:bastion_remnant"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sound_event.json",
        "differences": {
          "added": [
            "minecraft:entity.donkey.eat",
            "minecraft:entity.fox.teleport",
            "minecraft:entity.mule.angry",
            "minecraft:entity.mule.eat",
            "minecraft:entity.parrot.imitate.hoglin",
            "minecraft:entity.parrot.imitate.piglin",
            "minecraft:entity.parrot.imitate.zoglin"
          ],
          "removed": []
        }
      }
    }
  ],
  "commands": [
    {
      "type": "entries",
      "value": {
        "name": "locate",
        "differences": {
          "added": [
            "locate bastion_remnant",
            "locate buried_treasure",
            "locate desert_pyramid",
            "locate endcity",
            "locate fortress",
            "locate igloo",
            "locate jungle_pyramid",
            "locate mansion",
            "locate mineshaft",
            "locate monument",
            "locate nether_fossil",
            "locate ocean_ruin",
            "locate pillager_outpost",
            "locate ruined_portal",
            "locate shipwreck",
            "locate stronghold",
            "locate swamp_hut",
            "locate village"
          ],
          "removed": [
            "locate Bastion_Remnant",
            "locate Buried_Treasure",
            "locate Desert_Pyramid",
            "locate EndCity",
            "locate Fortress",
            "locate Igloo",
            "locate Jungle_Pyramid",
            "locate Mansion",
            "locate Mineshaft",
            "locate Monument",
            "locate Nether_Fossil",
            "locate Ocean_Ruin",
            "locate Pillager_Outpost",
            "locate Ruined_Portal",
            "locate Shipwreck",
            "locate Stronghold",
            "locate Swamp_Hut",
            "locate Village"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "spreadplayers",
        "differences": {
          "added": [
            "spreadplayers <center: vec2> <spreadDistance: float> <maxRange: float> under <maxHeight: integer> <respectTeams: bool> <targets: entity>"
          ],
          "removed": []
        }
      }
    }
  ],
  "translations": [
    {
      "type": "entries",
      "value": {
        "name": "Keys",
        "differences": {
          "added": [
            "selectWorld.edit.export_worldgen_settings: Export World Generation Settings",
            "selectWorld.edit.export_worldgen_settings.success: Exported",
            "selectWorld.edit.export_worldgen_settings.failure: Export failed",
            "selectWorld.backupQuestion.experimental: Worlds using Experimental Settings are not supported",
            "selectWorld.backupWarning.experimental: This world uses experimental settings that could stop working at any time. We cannot guarantee it will load or work. Here be dragons!",
            "selectWorld.tooltip.experimental: This world is using experimental settings",
            "selectWorld.import_worldgen_settings: Import settings",
            "selectWorld.import_worldgen_settings.select_file: Select settings file (.json)",
            "selectWorld.import_worldgen_settings.failure: Error importing settings",
            "selectWorld.import_worldgen_settings.experimental.title: Warning! These settings are using experimental features",
            "selectWorld.import_worldgen_settings.experimental.question: These settings are experimental and could one day stop working. Do you wish to proceed?",
            "selectWorld.import_worldgen_settings.deprecated.title: Warning! These settings are using deprecated features",
            "selectWorld.import_worldgen_settings.deprecated.question: Some features used are deprecated and will stop working in the future. Do you wish to proceed?",
            "generator.large_biomes: Large Biomes",
            "generator.custom: Custom",
            "generator.single_biome_surface: Single Biome",
            "generator.single_biome_caves: Caves",
            "generator.single_biome_floating_islands: Floating islands",
            "title.multiplayer.disabled: Multiplayer is disabled, please check your launcher settings.",
            "subtitles.block.portal.travel: Portal noise fades",
            "subtitles.block.portal.trigger: Portal noise intensifies",
            "subtitles.entity.cat.purr: Cat purrs",
            "subtitles.entity.donkey.eat: Donkey eats",
            "subtitles.entity.fox.teleport: Fox teleports",
            "subtitles.entity.mule.angry: Mule neighs",
            "subtitles.entity.mule.eat: Mule eats",
            "subtitles.entity.parrot.imitate.hoglin: Parrot growls",
            "subtitles.entity.parrot.imitate.piglin: Parrot snorts",
            "subtitles.entity.parrot.imitate.zoglin: Parrot growls",
            "subtitles.entity.zombie.attack_wooden_door: Door shakes",
            "subtitles.entity.zombie.break_wooden_door: Door breaks",
            "subtitles.ui.cartography_table.take_result: Map drawn",
            "subtitles.ui.loom.take_result: Loom used",
            "subtitles.ui.stonecutter.take_result: Stonecutter used"
          ],
          "removed": [
            "createWorld.customize.buffet.generatortype: World generator:",
            "createWorld.customize.buffet.generator: Please select a generator type",
            "generator.largeBiomes: Large Biomes",
            "generator.buffet: Buffet",
            "subtitles.entity.horse.land: Horse lands",
            "generator.minecraft.surface: Surface",
            "generator.minecraft.caves: Caves",
            "generator.minecraft.floating_islands: Floating Islands"
          ]
        }
      }
    },
    {
      "type": "text",
      "value": {
        "title": "Changes",
        "values": [
          {
            "key": "generator.customized",
            "previous": "Customized",
            "current": "Old Customized"
          },
          {
            "key": "subtitles.block.blastfurnace.fire_crackle",
            "previous": "Blast furnace crackles",
            "current": "Blast Furnace crackles"
          },
          {
            "key": "subtitles.block.enchantment_table.use",
            "previous": "Enchanting table used",
            "current": "Enchanting Table used"
          },
          {
            "key": "subtitles.block.respawn_anchor.charge",
            "previous": "Respawn anchor is charged",
            "current": "Respawn Anchor is charged"
          },
          {
            "key": "subtitles.block.respawn_anchor.deplete",
            "previous": "Respawn anchor depletes",
            "current": "Respawn Anchor depletes"
          },
          {
            "key": "subtitles.block.respawn_anchor.set_spawn",
            "previous": "Respawn anchor sets spawn",
            "current": "Respawn Anchor sets spawn"
          },
          {
            "key": "subtitles.entity.turtle.egg_break",
            "previous": "Turtle egg breaks",
            "current": "Turtle Egg breaks"
          },
          {
            "key": "subtitles.entity.turtle.egg_crack",
            "previous": "Turtle egg cracks",
            "current": "Turtle Egg cracks"
          },
          {
            "key": "subtitles.entity.turtle.egg_hatch",
            "previous": "Turtle egg hatches",
            "current": "Turtle Egg hatches"
          },
          {
            "key": "subtitles.entity.zombie_villager.converted",
            "previous": "Zombie vociferates",
            "current": "Zombie Villager vociferates"
          },
          {
            "key": "subtitles.entity.zombie_villager.cure",
            "previous": "Zombie snuffles",
            "current": "Zombie Villager snuffles"
          }
        ]
      }
    }
  ],
  "file_structure": [
    {
      "type": "entries",
      "value": {
        "name": "assets",
        "differences": {
          "added": [
            "minecraft/textures/gui/title/mojangstudios.png",
            "minecraft/textures/item/nether_sprouts.png"
          ],
          "removed": [
            "minecraft/textures/gui/title/mojang.png"
          ]
        }
      }
    }
  ],
  "mappings": [
    {
      "type": "title",
      "value": {
        "title": "Server",
        "id": "server-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.minecraft.core.MapFiller",
            "XXX.minecraft.core.NonNullList",
            "XXX.minecraft.core.PositionImpl",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.HashCache",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.HusbandryAdvancements",
            "XXX.data.advancements.StoryAdvancements",
            "XXX.data.advancements.package-info",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.ChestLoot",
            "XXX.data.loot.FishingLoot",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.PropertyValue",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BlockTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.gametest.framework.BeforeBatch",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestRunner$1",
            "XXX.gametest.framework.GameTestSequence$Condition",
            "XXX.gametest.framework.GameTestServer$1",
            "XXX.gametest.framework.GameTestTimeoutException",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.StructureUtils",
            "XXX.gametest.framework.TestClassNameArgument",
            "XXX.gametest.framework.TestCommand$TestSummaryDisplayer",
            "XXX.gametest.framework.TestFunctionArgument",
            "XXX.gametest.framework.package-info",
            "XXX.minecraft.locale.package-info",
            "XXX.minecraft.nbt.ByteArrayTag$1",
            "XXX.minecraft.nbt.ByteTag$1",
            "XXX.minecraft.nbt.CollectionTag",
            "XXX.minecraft.nbt.CompoundTag$1",
            "XXX.minecraft.nbt.DoubleTag$1",
            "XXX.minecraft.nbt.EndTag$1",
            "XXX.minecraft.nbt.FloatTag$1",
            "XXX.minecraft.nbt.IntArrayTag$1",
            "XXX.minecraft.nbt.IntTag$1",
            "XXX.minecraft.nbt.ListTag",
            "XXX.minecraft.nbt.LongArrayTag",
            "XXX.minecraft.nbt.LongTag",
            "XXX.minecraft.nbt.LongTag$Cache",
            "XXX.minecraft.nbt.NbtAccounter$1",
            "XXX.minecraft.nbt.NbtOps",
            "XXX.minecraft.nbt.NumericTag",
            "XXX.minecraft.nbt.ShortTag$1",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.Tag",
            "XXX.minecraft.nbt.TagType",
            "XXX.minecraft.nbt.TagTypes",
            "XXX.minecraft.network.CipherBase",
            "XXX.minecraft.network.CipherEncoder",
            "XXX.minecraft.network.CompressionEncoder",
            "XXX.minecraft.network.Connection$1",
            "XXX.minecraft.network.Connection$PacketHolder",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder",
            "XXX.minecraft.network.PacketDecoder",
            "XXX.minecraft.network.PacketListener",
            "XXX.minecraft.network.Varint21FrameDecoder",
            "XXX.network.chat.BaseComponent",
            "XXX.network.chat.ClickEvent",
            "XXX.network.chat.CommonComponents",
            "XXX.network.chat.Component$ContentConsumer",
            "XXX.network.chat.Component$StyledContentConsumer",
            "XXX.network.chat.ContextAwareComponent",
            "XXX.network.chat.HoverEvent$Action",
            "XXX.network.chat.HoverEvent$ItemStackInfo",
            "XXX.network.chat.MutableComponent",
            "XXX.network.chat.NbtComponent$BlockNbtComponent",
            "XXX.network.chat.NbtComponent$StorageNbtComponent",
            "XXX.network.chat.SelectorComponent",
            "XXX.network.chat.Style$1",
            "XXX.network.chat.TextColor",
            "XXX.network.chat.TranslatableComponent",
            "XXX.network.chat.package-info",
            "XXX.network.protocol.Packet",
            "XXX.network.protocol.PacketUtils",
            "XXX.protocol.game.ClientboundAddEntityPacket",
            "XXX.protocol.game.ClientboundAddGlobalEntityPacket",
            "XXX.protocol.game.ClientboundAddPaintingPacket",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquippedItemPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.ServerPlaceSmeltingRecipe",
            "XXX.server.level.DerivedServerLevel",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerMap",
            "XXX.minecraft.util.Deserializer",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.FastColor",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HttpUtil",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.LimitedCapacityList",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory",
            "XXX.minecraft.util.Mth",
            "XXX.minecraft.util.RewindableStream",
            "XXX.minecraft.util.Serializable",
            "XXX.minecraft.util.SmoothDouble",
            "XXX.minecraft.util.SortedArraySet$1",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.schemas.V102",
            "XXX.datafix.schemas.V106",
            "XXX.datafix.schemas.V1125",
            "XXX.datafix.schemas.V143",
            "XXX.datafix.schemas.V1451_1",
            "XXX.datafix.schemas.V1451_3",
            "XXX.datafix.schemas.V1451_5",
            "XXX.datafix.schemas.V1451_7",
            "XXX.datafix.schemas.V1466",
            "XXX.datafix.schemas.V1481",
            "XXX.datafix.schemas.V1486",
            "XXX.datafix.schemas.V1800",
            "XXX.datafix.schemas.V1904",
            "XXX.datafix.schemas.V1909",
            "XXX.datafix.schemas.V1928",
            "XXX.datafix.schemas.V1931",
            "XXX.datafix.schemas.V2501",
            "XXX.datafix.schemas.V2505",
            "XXX.datafix.schemas.V2519",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.CrossbowAttack$CrossbowState",
            "XXX.ai.behavior.DoNothing",
            "XXX.ai.behavior.EraseMemoryIf",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.GateBehavior$RunningPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$2",
            "XXX.ai.behavior.GoOutsideToCelebrate",
            "XXX.ai.behavior.GoToClosestVillage",
            "XXX.ai.behavior.HarvestFarmland",
            "XXX.ai.behavior.InteractWith",
            "XXX.ai.behavior.JumpOnBed",
            "XXX.ai.behavior.LocateHidingPlaceDuringRaid",
            "XXX.ai.behavior.LookAtTargetSink",
            "XXX.ai.behavior.Mount",
            "XXX.ai.behavior.MoveToTargetSink",
            "XXX.ai.behavior.PositionTracker",
            "XXX.ai.behavior.ReactToBell",
            "XXX.ai.behavior.ResetRaidStatus",
            "XXX.ai.behavior.RunIf",
            "XXX.ai.behavior.RunSometimes",
            "XXX.ai.behavior.SetEntityLookTarget",
            "XXX.ai.behavior.SetLookAndInteract",
            "XXX.ai.behavior.SetWalkTargetAwayFrom",
            "XXX.ai.behavior.SetWalkTargetFromBlockMemory",
            "XXX.ai.behavior.ShowTradesToPlayer",
            "XXX.ai.behavior.SocializeAtBell",
            "XXX.ai.behavior.StartCelebratingIfTargetDead",
            "XXX.ai.behavior.StopBeingAngryIfTargetDead",
            "XXX.ai.behavior.StrollToPoi",
            "XXX.ai.behavior.Swim",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WeightedList",
            "XXX.ai.behavior.WeightedList$WeightedEntry",
            "XXX.world.level.LevelAccessor",
            "XXX.world.level.LevelSettings",
            "XXX.world.level.LevelSimulatedReader",
            "XXX.world.level.LightLayer",
            "XXX.world.level.NaturalSpawner$1",
            "XXX.world.level.NaturalSpawner$ChunkGetter",
            "XXX.world.level.NaturalSpawner$SpawnState",
            "XXX.world.level.PathNavigationRegion",
            "XXX.world.level.PotentialCalculator",
            "XXX.world.level.ServerTickList",
            "XXX.world.level.StructureFeatureManager",
            "XXX.world.level.TickNextTickData",
            "XXX.world.level.WorldGenLevel",
            "XXX.level.biome.AmbientMoodSettings",
            "XXX.level.biome.BadlandsBiome",
            "XXX.level.biome.BambooJungleBiome",
            "XXX.level.biome.BasaltDeltasBiome",
            "XXX.level.biome.Biome",
            "XXX.level.biome.Biome$BiomeBuilder",
            "XXX.level.biome.Biome$BiomeTempCategory",
            "XXX.level.biome.Biome$MobSpawnCost",
            "XXX.level.biome.Biome$SpawnerData",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.MushroomFieldsShoreBiome",
            "XXX.level.biome.NetherWastesBiome",
            "XXX.level.biome.OverworldBiomeSource",
            "XXX.level.biome.RiverBiome",
            "XXX.level.biome.SavannaPlateauBiome",
            "XXX.level.biome.ShatteredSavannaPlateauBiome",
            "XXX.level.biome.SnowyBeachBiome",
            "XXX.level.biome.SnowyTaigaBiome",
            "XXX.level.biome.SnowyTaigaMountainsBiome",
            "XXX.level.biome.SoulSandValleyBiome",
            "XXX.level.biome.SunflowerPlainsBiome",
            "XXX.level.biome.SwampHillsBiome",
            "XXX.level.biome.TaigaHillsBiome",
            "XXX.level.biome.TallBirchForestBiome",
            "XXX.level.biome.TheEndBiome",
            "XXX.level.biome.TheVoidBiome",
            "XXX.level.biome.WarpedForestBiome",
            "XXX.level.biome.WoodedHillsBiome",
            "XXX.level.biome.package-info",
            "XXX.level.block.AbstractChestBlock",
            "XXX.level.block.AbstractGlassBlock",
            "XXX.level.block.AirBlock",
            "XXX.level.block.AttachedStemBlock",
            "XXX.level.block.BambooSaplingBlock",
            "XXX.level.block.BarrelBlock",
            "XXX.level.block.BaseCoralFanBlock",
            "XXX.level.block.BaseCoralPlantTypeBlock",
            "XXX.level.block.BaseEntityBlock",
            "XXX.level.block.BasePressurePlateBlock",
            "XXX.level.block.BaseRailBlock$1",
            "XXX.level.block.BeaconBlock",
            "XXX.level.block.BedBlock$1",
            "XXX.level.block.BeetrootBlock",
            "XXX.level.block.BellBlock$1",
            "XXX.level.block.Block",
            "XXX.level.block.Block$2",
            "XXX.level.block.Blocks",
            "XXX.level.block.BrewingStandBlock",
            "XXX.level.block.BucketPickup",
            "XXX.level.block.ButtonBlock",
            "XXX.level.block.CactusBlock",
            "XXX.level.block.CampfireBlock",
            "XXX.level.block.CartographyTableBlock",
            "XXX.level.block.CauldronBlock",
            "XXX.level.block.ChestBlock",
            "XXX.level.block.ChestBlock$2",
            "XXX.level.block.ChestBlock$3",
            "XXX.level.block.ChorusFlowerBlock",
            "XXX.level.block.CocoaBlock",
            "XXX.level.block.CommandBlock",
            "XXX.level.block.ComposterBlock",
            "XXX.level.block.ComposterBlock$InputContainer",
            "XXX.level.block.ConcretePowderBlock",
            "XXX.level.block.CoralBlock",
            "XXX.level.block.CoralPlantBlock",
            "XXX.level.block.CraftingTableBlock",
            "XXX.level.block.CrossCollisionBlock",
            "XXX.level.block.CryingObsidianBlock",
            "XXX.level.block.DeadBushBlock",
            "XXX.level.block.DetectorRailBlock$1",
            "XXX.level.block.DirectionalBlock",
            "XXX.level.block.DoorBlock",
            "XXX.level.block.DoubleBlockCombiner",
            "XXX.level.block.DoubleBlockCombiner$Combiner",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult$Double",
            "XXX.level.block.DoublePlantBlock",
            "XXX.level.block.DropperBlock",
            "XXX.level.block.EndGatewayBlock",
            "XXX.level.block.EndPortalFrameBlock",
            "XXX.level.block.EndRodBlock$1",
            "XXX.level.block.EntityBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock$1",
            "XXX.level.block.FarmBlock",
            "XXX.level.block.FenceGateBlock",
            "XXX.level.block.FireBlock",
            "XXX.level.block.FlowerBlock",
            "XXX.level.block.FrostedIceBlock",
            "XXX.level.block.FurnaceBlock",
            "XXX.level.block.GlazedTerracottaBlock",
            "XXX.level.block.GrassPathBlock",
            "XXX.level.block.GrindstoneBlock",
            "XXX.level.block.GrowingPlantBlock",
            "XXX.level.block.GrowingPlantHeadBlock",
            "XXX.level.block.HayBlock",
            "XXX.level.block.HopperBlock",
            "XXX.level.block.HorizontalDirectionalBlock",
            "XXX.level.block.IceBlock",
            "XXX.level.block.IronBarsBlock",
            "XXX.level.block.JukeboxBlock",
            "XXX.level.block.KelpPlantBlock",
            "XXX.level.block.LadderBlock$1",
            "XXX.level.block.LeavesBlock",
            "XXX.level.block.LecternBlock$1",
            "XXX.level.block.LeverBlock",
            "XXX.level.block.LiquidBlock",
            "XXX.level.block.LoomBlock",
            "XXX.level.block.MelonBlock",
            "XXX.level.block.Mirror$1",
            "XXX.level.block.MyceliumBlock",
            "XXX.level.block.NetherPortalBlock$1",
            "XXX.level.block.NetherSproutsBlock",
            "XXX.level.block.NetherWartBlock",
            "XXX.level.block.NoteBlock",
            "XXX.level.block.ObserverBlock",
            "XXX.level.block.PipeBlock",
            "XXX.level.block.PlayerWallHeadBlock",
            "XXX.level.block.PoweredBlock",
            "XXX.level.block.PoweredRailBlock$1",
            "XXX.level.block.PressurePlateBlock$1",
            "XXX.level.block.PumpkinBlock",
            "XXX.level.block.RailBlock$1",
            "XXX.level.block.RailState$1",
            "XXX.level.block.RedStoneWireBlock",
            "XXX.level.block.RedstoneLampBlock",
            "XXX.level.block.RedstoneTorchBlock$Toggle",
            "XXX.level.block.RenderShape",
            "XXX.level.block.RespawnAnchorBlock",
            "XXX.level.block.RotatedPillarBlock",
            "XXX.level.block.Rotation",
            "XXX.level.block.SandBlock",
            "XXX.level.block.ScaffoldingBlock",
            "XXX.level.block.Seagrass",
            "XXX.level.block.ShulkerBoxBlock",
            "XXX.level.block.SignBlock",
            "XXX.level.block.SkullBlock",
            "XXX.level.block.SkullBlock$Types",
            "XXX.level.block.SlabBlock$1",
            "XXX.level.block.SmithingTableBlock",
            "XXX.level.block.SnowLayerBlock",
            "XXX.level.block.SnowyDirtBlock",
            "XXX.level.block.SoulSandBlock",
            "XXX.level.block.SpawnerBlock",
            "XXX.level.block.SpreadingSnowyDirtBlock",
            "XXX.level.block.StainedGlassPaneBlock",
            "XXX.level.block.StairBlock$1",
            "XXX.level.block.StemBlock",
            "XXX.level.block.StoneButtonBlock",
            "XXX.level.block.StructureBlock",
            "XXX.level.block.StructureVoidBlock",
            "XXX.level.block.SweetBerryBushBlock",
            "XXX.level.block.TallGrassBlock",
            "XXX.level.block.TargetBlock",
            "XXX.level.block.TorchBlock",
            "XXX.level.block.TrapDoorBlock$1",
            "XXX.level.block.TripWireBlock",
            "XXX.level.block.TripWireHookBlock",
            "XXX.level.block.TurtleEggBlock",
            "XXX.level.block.TwistingVinesPlant",
            "XXX.level.block.VineBlock$1",
            "XXX.level.block.WallBlock",
            "XXX.level.block.WallSignBlock",
            "XXX.level.block.WallTorchBlock",
            "XXX.level.block.WebBlock",
            "XXX.level.block.WeepingVinesPlant",
            "XXX.level.block.WetSpongeBlock",
            "XXX.level.block.WitherSkullBlock",
            "XXX.level.block.WoodButtonBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity",
            "XXX.block.entity.BannerBlockEntity",
            "XXX.block.entity.BannerPattern$Builder",
            "XXX.block.entity.BaseContainerBlockEntity",
            "XXX.block.entity.BeaconBlockEntity$1",
            "XXX.block.entity.BedBlockEntity",
            "XXX.block.entity.BeehiveBlockEntity$1",
            "XXX.block.entity.BeehiveBlockEntity$BeeReleaseStatus",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BlockEntityType",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.DispenserBlockEntity",
            "XXX.block.entity.EnchantmentTableBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$AnimationStatus",
            "XXX.block.entity.SkullBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity",
            "XXX.block.entity.StructureBlockEntity",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.AbstractStateHolder$1",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.level.dimension.Dimension",
            "XXX.level.dimension.NetherDimension",
            "XXX.level.dimension.NormalDimension",
            "XXX.dimension.end.TheEndDimension",
            "XXX.level.dimension.package-info",
            "XXX.level.levelgen.FlatLevelSource$FlatLevelBiomeWrapper",
            "XXX.level.levelgen.GenerationStep$Carving",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NetherLevelSource",
            "XXX.level.levelgen.NoiseGeneratorSettings",
            "XXX.level.levelgen.OverworldLevelSource",
            "XXX.level.levelgen.WorldGenSettings$BuffetGeneratorType",
            "XXX.level.levelgen.WorldGenSettings$Preset",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.DecoratedFeature",
            "XXX.levelgen.feature.DefaultFlowerFeature",
            "XXX.levelgen.feature.DesertPyramidFeature",
            "XXX.levelgen.feature.DesertVillagePools",
            "XXX.levelgen.feature.DiskReplaceFeature",
            "XXX.levelgen.feature.EndCityFeature$EndCityStart",
            "XXX.levelgen.feature.EndIslandFeature",
            "XXX.levelgen.feature.Feature",
            "XXX.levelgen.feature.FossilFeature",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.PillagerOutpostFeature$FeatureStart",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomRandomFeature",
            "XXX.feature.foliageplacers.FoliagePlacer$FoliageAttachment",
            "XXX.feature.foliageplacers.MegaJungleFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.levelgen.structure.StructureFeatureIndexSavedData",
            "XXX.levelgen.structure.StructurePiece$1",
            "XXX.levelgen.structure.StructureStart",
            "XXX.levelgen.structure.SwamplandHutPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.FluidStateImpl",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BinomialDistributionGenerator",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.ConstantIntValue$Serializer",
            "XXX.storage.loot.IntLimiter",
            "XXX.storage.loot.IntLimiter$Serializer",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.RandomIntGenerator",
            "XXX.storage.loot.RandomValueBounds",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntries$Serializer",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$DataSource",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunction$Serializer",
            "XXX.loot.functions.LootItemFunctions$Serializer",
            "XXX.loot.functions.LootingEnchantFunction$1",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$1",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetContainerLootTable$1",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetItemCountFunction$Serializer",
            "XXX.loot.functions.SetItemDamageFunction$1",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNameFunction$1",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.SetStewEffectFunction$1",
            "XXX.loot.functions.SetStewEffectFunction$Serializer",
            "XXX.loot.functions.SmeltItemFunction$1",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$1",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AlternativeLootItemCondition$1",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.BonusLevelTableCondition$1",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.InvertedLootItemCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.TimeCheck$Serializer",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$1",
            "XXX.level.timers.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.IntPointRange",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.WorldRegionIndirectVoxelShape",
            "XXX.world.scores.Objective",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info"
          ],
          "removed": [
            "XXX.minecraft.core.MappedRegistry",
            "XXX.minecraft.core.Position",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.RegistryAccess$RegistryHolder",
            "XXX.minecraft.core.SectionPos",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.Main",
            "XXX.data.advancements.AdventureAdvancements",
            "XXX.data.advancements.NetherAdvancements",
            "XXX.data.advancements.TheEndAdvancements",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLoot",
            "XXX.data.loot.EntityLoot",
            "XXX.data.loot.GiftLoot",
            "XXX.data.loot.PiglinBarterLoot",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$1",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$1",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.FinishedRecipe",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.GameTestSequence",
            "XXX.gametest.framework.GameTestServer",
            "XXX.gametest.framework.GameTestTicker",
            "XXX.gametest.framework.JUnitLikeTestReporter",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.TeamcityTestReporter",
            "XXX.gametest.framework.TestCommand",
            "XXX.gametest.framework.TestFunction",
            "XXX.gametest.framework.TestReporter",
            "XXX.minecraft.locale.Language",
            "XXX.minecraft.nbt.ByteArrayTag",
            "XXX.minecraft.nbt.ByteTag",
            "XXX.minecraft.nbt.ByteTag$Cache",
            "XXX.minecraft.nbt.CompoundTag",
            "XXX.minecraft.nbt.DoubleTag",
            "XXX.minecraft.nbt.EndTag",
            "XXX.minecraft.nbt.FloatTag",
            "XXX.minecraft.nbt.IntArrayTag",
            "XXX.minecraft.nbt.IntTag",
            "XXX.minecraft.nbt.IntTag$Cache",
            "XXX.minecraft.nbt.ListTag$1",
            "XXX.minecraft.nbt.LongArrayTag$1",
            "XXX.minecraft.nbt.LongTag$1",
            "XXX.minecraft.nbt.NbtAccounter",
            "XXX.minecraft.nbt.NbtIo",
            "XXX.minecraft.nbt.NbtOps$1",
            "XXX.minecraft.nbt.NbtUtils",
            "XXX.minecraft.nbt.ShortTag",
            "XXX.minecraft.nbt.ShortTag$Cache",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.TagParser",
            "XXX.minecraft.nbt.TagType$1",
            "XXX.minecraft.nbt.package-info",
            "XXX.minecraft.network.CipherDecoder",
            "XXX.minecraft.network.CompressionDecoder",
            "XXX.minecraft.network.Connection",
            "XXX.minecraft.network.Connection$2",
            "XXX.minecraft.network.ConnectionProtocol",
            "XXX.minecraft.network.ConnectionProtocol$PacketSet",
            "XXX.minecraft.network.FriendlyByteBuf",
            "XXX.minecraft.network.PacketEncoder",
            "XXX.minecraft.network.SkipPacketException",
            "XXX.minecraft.network.Varint21LengthFieldPrepender",
            "XXX.network.chat.ChatType",
            "XXX.network.chat.ClickEvent$Action",
            "XXX.network.chat.Component",
            "XXX.network.chat.Component$Serializer",
            "XXX.network.chat.ComponentUtils",
            "XXX.network.chat.HoverEvent",
            "XXX.network.chat.HoverEvent$EntityTooltipInfo",
            "XXX.network.chat.KeybindComponent",
            "XXX.network.chat.NbtComponent",
            "XXX.network.chat.NbtComponent$EntityNbtComponent",
            "XXX.network.chat.ScoreComponent",
            "XXX.network.chat.Style",
            "XXX.network.chat.Style$Serializer",
            "XXX.network.chat.TextComponent",
            "XXX.network.chat.TranslatableFormatException",
            "XXX.minecraft.network.package-info",
            "XXX.network.protocol.PacketFlow",
            "XXX.protocol.game.ClientGamePacketListener",
            "XXX.protocol.game.ClientboundAddExperienceOrbPacket",
            "XXX.protocol.game.ClientboundAddMobPacket",
            "XXX.protocol.game.ClientboundAddPlayerPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.FeatureSimulator",
            "XXX.server.level.PlayerRespawnLogic",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.FastColor$ARGB32",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.InsensitiveStringMap",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.LinearCongruentialGenerator",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory$1",
            "XXX.minecraft.util.ProgressListener",
            "XXX.minecraft.util.RewindableStream$1",
            "XXX.minecraft.util.SortedArraySet",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringRepresentable$1",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.datafix.fixes.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.fixes.WorldGenSettingsFix",
            "XXX.datafix.schemas.V100",
            "XXX.datafix.schemas.V1022",
            "XXX.datafix.schemas.V107",
            "XXX.datafix.schemas.V135",
            "XXX.datafix.schemas.V1451",
            "XXX.datafix.schemas.V1451_2",
            "XXX.datafix.schemas.V1451_4",
            "XXX.datafix.schemas.V1451_6",
            "XXX.datafix.schemas.V1460",
            "XXX.datafix.schemas.V1470",
            "XXX.datafix.schemas.V1483",
            "XXX.datafix.schemas.V1510",
            "XXX.datafix.schemas.V1801",
            "XXX.datafix.schemas.V1906",
            "XXX.datafix.schemas.V1920",
            "XXX.datafix.schemas.V1929",
            "XXX.datafix.schemas.V2100",
            "XXX.datafix.schemas.V2502",
            "XXX.datafix.schemas.V2509",
            "XXX.datafix.schemas.V2522",
            "XXX.entity.ai.Brain$MemoryValue",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.CrossbowAttack",
            "XXX.ai.behavior.DismountOrSkipMounting",
            "XXX.ai.behavior.EntityTracker",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.GateBehavior$OrderPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$1",
            "XXX.ai.behavior.GiveGiftToHero",
            "XXX.ai.behavior.GoToCelebrateLocation",
            "XXX.ai.behavior.GoToWantedItem",
            "XXX.ai.behavior.InsideBrownianWalk",
            "XXX.ai.behavior.InteractWithDoor",
            "XXX.ai.behavior.LocateHidingPlace",
            "XXX.ai.behavior.LookAndFollowTradingPlayerSink",
            "XXX.ai.behavior.MeleeAttack",
            "XXX.ai.behavior.MoveToSkySeeingSpot",
            "XXX.ai.behavior.PlayTagWithOtherKids",
            "XXX.ai.behavior.RandomStroll",
            "XXX.ai.behavior.ResetProfession",
            "XXX.ai.behavior.RingBell",
            "XXX.ai.behavior.RunOne",
            "XXX.ai.behavior.SetClosestHomeAsWalkTarget",
            "XXX.ai.behavior.SetHiddenState",
            "XXX.ai.behavior.SetRaidStatus",
            "XXX.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach",
            "XXX.ai.behavior.SetWalkTargetFromLookTarget",
            "XXX.ai.behavior.SleepInBed",
            "XXX.ai.behavior.StartAttacking",
            "XXX.ai.behavior.StopAttackingIfTargetInvalid",
            "XXX.ai.behavior.StrollAroundPoi",
            "XXX.ai.behavior.StrollToPoiList",
            "XXX.ai.behavior.TradeWithVillager",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WeightedList$1",
            "XXX.ai.behavior.WeightedList$WeightedEntry$1",
            "XXX.world.level.Level$1",
            "XXX.world.level.LevelReader",
            "XXX.world.level.LevelSimulatedRW",
            "XXX.world.level.LevelWriter",
            "XXX.world.level.NaturalSpawner",
            "XXX.world.level.NaturalSpawner$AfterSpawnCallback",
            "XXX.world.level.NaturalSpawner$SpawnPredicate",
            "XXX.world.level.NoiseColumn",
            "XXX.world.level.PortalForcer",
            "XXX.world.level.PotentialCalculator$PointCharge",
            "XXX.world.level.SpawnData",
            "XXX.world.level.TickList",
            "XXX.world.level.TickPriority",
            "XXX.level.biome.AmbientAdditionsSettings",
            "XXX.level.biome.AmbientParticleSettings",
            "XXX.level.biome.BadlandsPlateauBiome",
            "XXX.level.biome.BambooJungleHillsBiome",
            "XXX.level.biome.BeachBiome",
            "XXX.level.biome.Biome$1",
            "XXX.level.biome.Biome$BiomeCategory",
            "XXX.level.biome.Biome$ClimateParameters",
            "XXX.level.biome.Biome$Precipitation",
            "XXX.level.biome.BiomeDefaultFeatures",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.MushroomFieldsBiome",
            "XXX.level.biome.NearestNeighborBiomeZoomer",
            "XXX.level.biome.OceanBiome",
            "XXX.level.biome.PlainsBiome",
            "XXX.level.biome.SavannaBiome",
            "XXX.level.biome.ShatteredSavannaBiome",
            "XXX.level.biome.SmallEndIslandsBiome",
            "XXX.level.biome.SnowyMountainsBiome",
            "XXX.level.biome.SnowyTaigaHillsBiome",
            "XXX.level.biome.SnowyTundraBiome",
            "XXX.level.biome.StoneShoreBiome",
            "XXX.level.biome.SwampBiome",
            "XXX.level.biome.TaigaBiome",
            "XXX.level.biome.TaigaMountainsBiome",
            "XXX.level.biome.TallBirchHillsBiome",
            "XXX.level.biome.TheEndBiomeSource",
            "XXX.level.biome.WarmOceanBiome",
            "XXX.level.biome.WoodedBadlandsBiome",
            "XXX.level.biome.WoodedMountainBiome",
            "XXX.level.block.AbstractBannerBlock",
            "XXX.level.block.AbstractFurnaceBlock",
            "XXX.level.block.AbstractSkullBlock",
            "XXX.level.block.AnvilBlock",
            "XXX.level.block.BambooBlock",
            "XXX.level.block.BannerBlock",
            "XXX.level.block.BarrierBlock",
            "XXX.level.block.BaseCoralPlantBlock",
            "XXX.level.block.BaseCoralWallFanBlock",
            "XXX.level.block.BaseFireBlock",
            "XXX.level.block.BaseRailBlock",
            "XXX.level.block.BeaconBeamBlock",
            "XXX.level.block.BedBlock",
            "XXX.level.block.BeehiveBlock",
            "XXX.level.block.BellBlock",
            "XXX.level.block.BlastFurnaceBlock",
            "XXX.level.block.Block$1",
            "XXX.level.block.Block$BlockStatePairKey",
            "XXX.level.block.BonemealableBlock",
            "XXX.level.block.BubbleColumnBlock",
            "XXX.level.block.BushBlock",
            "XXX.level.block.ButtonBlock$1",
            "XXX.level.block.CakeBlock",
            "XXX.level.block.CarrotBlock",
            "XXX.level.block.CarvedPumpkinBlock",
            "XXX.level.block.ChainBlock",
            "XXX.level.block.ChestBlock$1",
            "XXX.level.block.ChestBlock$2$1",
            "XXX.level.block.ChestBlock$4",
            "XXX.level.block.ChorusPlantBlock",
            "XXX.level.block.CocoaBlock$1",
            "XXX.level.block.ComparatorBlock",
            "XXX.level.block.ComposterBlock$EmptyContainer",
            "XXX.level.block.ComposterBlock$OutputContainer",
            "XXX.level.block.ConduitBlock",
            "XXX.level.block.CoralFanBlock",
            "XXX.level.block.CoralWallFanBlock",
            "XXX.level.block.CropBlock",
            "XXX.level.block.CrossCollisionBlock$1",
            "XXX.level.block.DaylightDetectorBlock",
            "XXX.level.block.DetectorRailBlock",
            "XXX.level.block.DiodeBlock",
            "XXX.level.block.DispenserBlock",
            "XXX.level.block.DoorBlock$1",
            "XXX.level.block.DoubleBlockCombiner$BlockType",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult$Single",
            "XXX.level.block.DragonEggBlock",
            "XXX.level.block.EnchantmentTableBlock",
            "XXX.level.block.EndPortalBlock",
            "XXX.level.block.EndRodBlock",
            "XXX.level.block.EnderChestBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock",
            "XXX.level.block.FallingBlock",
            "XXX.level.block.FenceBlock",
            "XXX.level.block.FenceGateBlock$1",
            "XXX.level.block.FletchingTableBlock",
            "XXX.level.block.FlowerPotBlock",
            "XXX.level.block.FungusBlock",
            "XXX.level.block.GlassBlock",
            "XXX.level.block.GrassBlock",
            "XXX.level.block.GravelBlock",
            "XXX.level.block.GrindstoneBlock$1",
            "XXX.level.block.GrowingPlantBodyBlock",
            "XXX.level.block.HalfTransparentBlock",
            "XXX.level.block.HoneyBlock",
            "XXX.level.block.HopperBlock$1",
            "XXX.level.block.HugeMushroomBlock",
            "XXX.level.block.InfestedBlock",
            "XXX.level.block.JigsawBlock",
            "XXX.level.block.KelpBlock",
            "XXX.level.block.LadderBlock",
            "XXX.level.block.Lantern",
            "XXX.level.block.LecternBlock",
            "XXX.level.block.LevelEvent",
            "XXX.level.block.LeverBlock$1",
            "XXX.level.block.LiquidBlockContainer",
            "XXX.level.block.MagmaBlock",
            "XXX.level.block.Mirror",
            "XXX.level.block.MushroomBlock",
            "XXX.level.block.NetherPortalBlock",
            "XXX.level.block.NetherPortalBlock$PortalShape",
            "XXX.level.block.NetherVines",
            "XXX.level.block.NetherrackBlock",
            "XXX.level.block.NyliumBlock",
            "XXX.level.block.OreBlock",
            "XXX.level.block.PlayerHeadBlock",
            "XXX.level.block.PotatoBlock",
            "XXX.level.block.PoweredRailBlock",
            "XXX.level.block.PressurePlateBlock",
            "XXX.level.block.PressurePlateBlock$Sensitivity",
            "XXX.level.block.RailBlock",
            "XXX.level.block.RailState",
            "XXX.level.block.RedStoneOreBlock",
            "XXX.level.block.RedStoneWireBlock$1",
            "XXX.level.block.RedstoneTorchBlock",
            "XXX.level.block.RedstoneWallTorchBlock",
            "XXX.level.block.RepeaterBlock",
            "XXX.level.block.RootsBlock",
            "XXX.level.block.RotatedPillarBlock$1",
            "XXX.level.block.Rotation$1",
            "XXX.level.block.SaplingBlock",
            "XXX.level.block.SeaPickleBlock",
            "XXX.level.block.ShearableDoublePlantBlock",
            "XXX.level.block.ShulkerBoxBlock$1",
            "XXX.level.block.SimpleWaterloggedBlock",
            "XXX.level.block.SkullBlock$Type",
            "XXX.level.block.SlabBlock",
            "XXX.level.block.SlimeBlock",
            "XXX.level.block.SmokerBlock",
            "XXX.level.block.SnowLayerBlock$1",
            "XXX.level.block.SoulFireBlock",
            "XXX.level.block.SoundType",
            "XXX.level.block.SpongeBlock",
            "XXX.level.block.StainedGlassBlock",
            "XXX.level.block.StairBlock",
            "XXX.level.block.StandingSignBlock",
            "XXX.level.block.StemGrownBlock",
            "XXX.level.block.StonecutterBlock",
            "XXX.level.block.StructureBlock$1",
            "XXX.level.block.SugarCaneBlock",
            "XXX.level.block.TallFlowerBlock",
            "XXX.level.block.TallSeagrass",
            "XXX.level.block.TntBlock",
            "XXX.level.block.TrapDoorBlock",
            "XXX.level.block.TrappedChestBlock",
            "XXX.level.block.TripWireBlock$1",
            "XXX.level.block.TripWireHookBlock$1",
            "XXX.level.block.TwistingVines",
            "XXX.level.block.VineBlock",
            "XXX.level.block.WallBannerBlock",
            "XXX.level.block.WallBlock$1",
            "XXX.level.block.WallSkullBlock",
            "XXX.level.block.WaterlilyBlock",
            "XXX.level.block.WeepingVines",
            "XXX.level.block.WeightedPressurePlateBlock",
            "XXX.level.block.WitherRoseBlock",
            "XXX.level.block.WitherWallSkullBlock",
            "XXX.level.block.WoolCarpetBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity$1",
            "XXX.block.entity.BannerPattern",
            "XXX.block.entity.BarrelBlockEntity",
            "XXX.block.entity.BeaconBlockEntity",
            "XXX.block.entity.BeaconBlockEntity$BeaconBeamSection",
            "XXX.block.entity.BeehiveBlockEntity",
            "XXX.block.entity.BeehiveBlockEntity$BeeData",
            "XXX.block.entity.BellBlockEntity",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.DaylightDetectorBlockEntity",
            "XXX.block.entity.DropperBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$RuntimePiece",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$1",
            "XXX.block.entity.SignBlockEntity",
            "XXX.block.entity.SmokerBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity$1",
            "XXX.block.entity.StructureBlockEntity$1",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickableBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.block.state.StateDefinition$PropertiesCodec",
            "XXX.block.state.StateHolder$1",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPattern$PortalInfo",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.level.dimension.DimensionType",
            "XXX.dimension.end.package-info",
            "XXX.level.levelgen.GenerationStep",
            "XXX.level.levelgen.GenerationStep$Decoration",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.NoiseGeneratorSettings$1",
            "XXX.level.levelgen.NoiseSamplingSettings",
            "XXX.level.levelgen.NoiseSlideSettings",
            "XXX.levelgen.feature.ConfiguredStructureFeature",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.DecoratedFlowerFeature",
            "XXX.levelgen.feature.DeltaFeature",
            "XXX.levelgen.feature.DesertPyramidFeature$FeatureStart",
            "XXX.levelgen.feature.DesertWellFeature",
            "XXX.levelgen.feature.EndCityFeature",
            "XXX.levelgen.feature.EndGatewayFeature",
            "XXX.levelgen.feature.EndPodiumFeature",
            "XXX.levelgen.feature.FillLayerFeature",
            "XXX.levelgen.feature.GlowstoneFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoSurfaceOreFeature",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.PlainVillagePools",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.feature.configurations.StrongholdConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacer$Factory",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.MegaPineFoliagePlacer",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.StructureTemplatePools",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings$1",
            "XXX.levelgen.structure.StructurePiece",
            "XXX.levelgen.structure.StructurePiece$BlockSelector",
            "XXX.levelgen.structure.StructureStart$1",
            "XXX.levelgen.structure.TemplateStructurePiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.BinomialDistributionGenerator$Serializer",
            "XXX.storage.loot.ConstantIntValue",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.IntLimiter$1",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.RandomIntGenerators",
            "XXX.storage.loot.RandomValueBounds$Serializer",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.CompositeEntryBase$Serializer",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Serializer",
            "XXX.loot.functions.EnchantRandomlyFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.EnchantWithLevelsFunction$1",
            "XXX.loot.functions.EnchantWithLevelsFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$1",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LimitCount$Serializer",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemConditionalFunction$Serializer",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetContainerLootTable$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNameFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AlternativeLootItemCondition",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.BonusLevelTableCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.DamageSourceCondition$Serializer",
            "XXX.loot.predicates.EntityHasScoreCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.InvertedLootItemCondition$1",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemCondition$Serializer",
            "XXX.loot.predicates.LootItemConditions$Serializer",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$1",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$1",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.storage.threaded.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.PosAndRot",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "net.minecraft.SharedConstants \u001b[2;32m+1P\u001b[0m",
          "XXX.advancements.critereon.ChangeDimensionTrigger$TriggerInstance \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.advancements.critereon.LocationPredicate \u001b[2;32m+5M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.commands.CommandSource \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.commands.CommandSourceStack \u001b[2;32m+1M\u001b[0m",
          "XXX.commands.arguments.DimensionTypeArgument \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.minecraft.core.DefaultedRegistry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.core.SerializableLong \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.WritableRegistry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.core.particles.ParticleTypes \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.resources.ResourceLocation \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.server.commands.SpreadPlayersCommand$Position \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.server.level.ServerPlayer \u001b[2;32m+13M\u001b[0m \u001b[2;31m-12M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.server.level.WorldGenRegion \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.server.players.PlayerList \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.sounds.SoundEvents \u001b[2;32m+7P\u001b[0m",
          "XXX.minecraft.tags.Tag \u001b[2;32m+5M\u001b[0m",
          "XXX.datafix.fixes.AbstractUUIDFix \u001b[2;32m+11M\u001b[0m \u001b[2;31m-11M\u001b[0m",
          "XXX.datafix.fixes.AttributesRename \u001b[2;32m+7M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityBannerColorFix \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityCustomNameToComponentFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityShulkerBoxColorFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.BlockNameFlatteningFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ChunkBiomeFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ChunkPalettedStorageFix \u001b[2;32m+15M\u001b[0m \u001b[2;31m-15M\u001b[0m | \u001b[2;32m+11P\u001b[0m \u001b[2;31m-11P\u001b[0m",
          "XXX.datafix.fixes.ChunkPalettedStorageFix$Section \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.datafix.fixes.ChunkStructuresTemplateRenameFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.ColorlessShulkerEntityFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityArmorStandSilentFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityCatSplitFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityCustomNameToComponentFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.EntityEquipmentToArmorAndHandFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityIdFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityMinecartIdentifiersFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.EntityPaintingMotiveFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityRedundantChanceTagsFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.EntityRidingToPassengersFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.EntityShulkerRotationFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.EntityStringUuidFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityWolfColorFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.EntityZombieVillagerTypeFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ForcePoiRebuild \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.GossipUUIDFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.IglooMetadataRemovalFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.ItemCustomNameToComponentFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ItemLoreFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.ItemRenameFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ItemStackEnchantmentNamesFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.ItemStackUUIDFix \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.datafix.fixes.ItemWrittenBookPagesStrictJsonFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.JigsawRotationFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.LeavesFix$LeavesSection \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.LevelDataGeneratorOptionsFix \u001b[2;32m+7M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.datafix.fixes.LevelUUIDFix \u001b[2;32m+12M\u001b[0m \u001b[2;31m-12M\u001b[0m",
          "XXX.datafix.fixes.MemoryExpiryDataFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.ObjectiveDisplayNameFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.OptionsAddTextBackgroundFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.OptionsKeyLwjgl3Fix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.OptionsLowerCaseLanguageFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.PoiTypeRename \u001b[2;32m+9M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.datafix.fixes.RecipesRenameFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.RedstoneWireConnectionsFix \u001b[2;32m+6M\u001b[0m \u001b[2;31m-10M\u001b[0m",
          "XXX.datafix.fixes.RenameBiomesFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.SavedDataUUIDFix \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.datafix.fixes.SimpleEntityRenameFix \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.StatsCounterFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.StructureReferenceCountFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.TeamDisplayNameFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.VillagerFollowRangeFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.schemas.NamespacedSchema \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.datafix.schemas.V704$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.schemas.V705$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.schemas.V99 \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.world.entity.Entity \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.ai.Brain \u001b[2;32m+13M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.ai.goal.MeleeAttackGoal \u001b[2;32m+4M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.ai.gossip.GossipContainer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.ai.memory.ExpirableValue \u001b[2;32m+5M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.village.poi.PoiSection \u001b[2;32m+13M\u001b[0m \u001b[2;31m-11M\u001b[0m",
          "XXX.entity.animal.AbstractFish \u001b[2;32m+1M\u001b[0m",
          "XXX.animal.horse.AbstractChestedHorse \u001b[2;31m-1M\u001b[0m",
          "XXX.animal.horse.Donkey \u001b[2;32m+2M\u001b[0m",
          "XXX.monster.hoglin.HoglinAi \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.monster.piglin.Piglin \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.monster.piglin.PiglinAi \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.npc.Villager \u001b[2;32m+10M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.entity.npc.WanderingTraderSpawner \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.projectile.ThrownEnderpearl \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.CompassItem \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.world.item.ItemStack \u001b[2;32m+9M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.world.level.GameRules \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.biome.BiomeSpecialEffects \u001b[2;32m+10M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.biome.FixedBiomeSource \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.biome.MultiNoiseBiomeSource \u001b[2;32m+18M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+4P\u001b[0m",
          "XXX.state.properties.Property \u001b[2;32m+12M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.level.border.WorldBorder$Settings \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.chunk.ProtoChunk \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.chunk.storage.SectionStorage \u001b[2;32m+7M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.level.levelgen.DebugLevelSource \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.levelgen.WorldGenSettings \u001b[2;32m+11M\u001b[0m \u001b[2;31m-24M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-8P\u001b[0m",
          "XXX.levelgen.carver.CanyonWorldCarver \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.CaveWorldCarver \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.NetherWorldCarver \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.UnderwaterCanyonWorldCarver \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.WorldCarver \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.levelgen.feature.AbstractFlowerFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BambooFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BasaltPillarFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BastionFeature \u001b[2;32m+3M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.levelgen.feature.BlockBlobFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BlueIceFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BuriedTreasureFeature \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.levelgen.feature.ChorusPlantFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.RandomSelectorFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.ReplaceBlockFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.RuinedPortalFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SeagrassFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.ShipwreckFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SimpleRandomSelectorFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SnowAndFreezeFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SpikeFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SpikeFeature$EndSpike \u001b[2;32m+7M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.feature.SpringFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.StrongholdFeature$StrongholdStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.SwamplandHutFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.levelgen.feature.TwistingVinesFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.VillageFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.VoidStartPlatformFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.WeightedConfiguredFeature \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.feature.WoodlandMansionFeature$WoodlandMansionStart \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.blockplacers.BlockPlacerType \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.blockplacers.DoublePlantPlacer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.feature.configurations.BlockPileConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.BuriedTreasureConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ColumnFeatureConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.CountFeatureConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.DecoratedFeatureConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.DeltaFeatureConfiguration \u001b[2;32m+7M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.DiskConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.FeatureConfiguration \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.configurations.HugeMushroomFeatureConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.LayerConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.MultiJigsawConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.NoneDecoratorConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.feature.configurations.OceanRuinConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.OreConfiguration$Predicates \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.feature.configurations.RandomBooleanFeatureConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.RandomPatchConfiguration \u001b[2;32m+14M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ReplaceBlockConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.SeagrassFeatureConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.SimpleBlockConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.SpikeConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.TreeConfiguration \u001b[2;32m+11M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.featuresize.FeatureSizeType \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.featuresize.TwoLayersFeatureSize \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.AcaciaFoliagePlacer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.BushFoliagePlacer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.FancyFoliagePlacer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.CarvingMaskDecoratorConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.ChanceHeightmapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ChancePassthroughDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ChorusPlantPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountBiasedRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountChanceHeightmapDoubleDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountHeighmapDoubleDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountHeightmap32Decorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountTopSolidDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountWithExtraChanceHeightmapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.DepthAverageConfigation \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.EndGatewayPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.FeatureDecorator \u001b[2;32m+5M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.levelgen.placement.FrequencyChanceDecoratorConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.LakeLavaPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.MonsterRoomPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.NoiseHeightmap32Decorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.NopePlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.SimpleFeatureDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.TopSolidHeightMapNoiseBasedDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.ChanceRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.FireDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.MagmaDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.NetherFossilFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanRuinFeature$OceanRuinStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.PoolElementStructurePiece \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.structure.RuinedPortalPiece$Properties \u001b[2;32m+9M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.saveddata.maps.MapItemSavedData \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.storage.DerivedLevelData \u001b[2;31m-2M\u001b[0m",
          "XXX.level.storage.LevelStorageSource$LevelStorageAccess \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance",
        "differences": {
          "added": [
            "void <init>(EntityPredicate$Composite,DimensionType,DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimension(DimensionType,DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionTo(DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(DimensionType)",
            "boolean matches(DimensionType,DimensionType)"
          ],
          "removed": [
            "void <init>(EntityPredicate$Composite,ResourceKey,ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimension(ResourceKey,ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionTo(ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(ResourceKey)",
            "boolean matches(ResourceKey,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.LocationPredicate",
        "differences": {
          "added": [
            "void <init>(MinMaxBounds$Floats,MinMaxBounds$Floats,MinMaxBounds$Floats,Biome,StructureFeature,DimensionType,Boolean,LightPredicate,BlockPredicate,FluidPredicate)",
            "LocationPredicate inDimension(DimensionType)",
            "JsonSyntaxException lambda$fromJson$0(ResourceLocation)"
          ],
          "removed": [
            "void <init>(MinMaxBounds$Floats,MinMaxBounds$Floats,MinMaxBounds$Floats,Biome,StructureFeature,ResourceKey,Boolean,LightPredicate,BlockPredicate,FluidPredicate)",
            "LocationPredicate inDimension(ResourceKey)",
            "JsonSyntaxException lambda$fromJson$2(ResourceLocation)",
            "ResourceKey lambda$fromJson$1(ResourceLocation)",
            "void lambda$serializeToJson$0(JsonObject,JsonElement)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.CommandSourceStack",
        "differences": {
          "added": [],
          "removed": [
            "RegistryAccess registryAccess()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.DimensionTypeArgument",
        "differences": {
          "added": [
            "DimensionType parse(StringReader)",
            "DimensionType getDimension(CommandContext,String)",
            "CommandSyntaxException lambda$parse$2(ResourceLocation)",
            "String lambda$static$0(DimensionType)"
          ],
          "removed": [
            "ResourceLocation parse(StringReader)",
            "ResourceKey getDimension(CommandContext,String)",
            "String lambda$static$0(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.DefaultedRegistry",
        "differences": {
          "added": [
            "void <init>(String)",
            "Object registerMapping(int,ResourceLocation,Object)"
          ],
          "removed": [
            "void <init>(String,ResourceKey,Lifecycle)",
            "Object registerMapping(int,ResourceKey,Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.SerializableLong",
        "differences": {
          "added": [
            "Object serialize(DynamicOps)",
            "SerializableLong of(Dynamic)"
          ],
          "removed": [
            "Long lambda$static$0(SerializableLong)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.WritableRegistry",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(ResourceKey,Lifecycle)",
            "String toString()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.ParticleTypes",
        "differences": {
          "added": [
            "ParticleType register(String,ParticleOptions$Deserializer)"
          ],
          "removed": [
            "ParticleType register(String,ParticleOptions$Deserializer,Function)",
            "Codec lambda$static$0(ParticleType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.resources.ResourceLocation",
        "differences": {
          "added": [
            "boolean lambda$isValidNamespace$1(int)",
            "boolean lambda$isValidPath$0(int)"
          ],
          "removed": [
            "DataResult read(String)",
            "String toDebugFileName()",
            "boolean validPathChar(char)",
            "boolean validNamespaceChar(char)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.SpreadPlayersCommand$Position",
        "differences": {
          "added": [
            "int getSpawnY(BlockGetter)",
            "boolean isSafe(BlockGetter)"
          ],
          "removed": [
            "int getSpawnY(BlockGetter,int)",
            "boolean isSafe(BlockGetter,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerPlayer",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)",
            "void sendMessage(Component)",
            "void sendMessage(Component,ChatType)",
            "DimensionType getRespawnDimension()",
            "void setRespawnPosition(DimensionType,BlockPos,boolean,boolean)",
            "void lambda$sendMessage$6(ChatType,Component,Future)",
            "void lambda$awardStat$5(int,Score)",
            "void lambda$startSleepInBed$4(Unit)",
            "boolean lambda$startSleepInBed$3(Monster)",
            "void lambda$die$2(Component,Future)",
            "Style lambda$null$1(Component,Style)",
            "void lambda$updateScoreForCriteria$0(int,Score)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)",
            "void sendMessage(Component,UUID)",
            "void sendMessage(Component,ChatType,UUID)",
            "ResourceKey getRespawnDimension()",
            "void setRespawnPosition(ResourceKey,BlockPos,boolean,boolean)",
            "void lambda$sendMessage$7(ChatType,Component,UUID,Future)",
            "void lambda$awardStat$6(int,Score)",
            "void lambda$startSleepInBed$5(Unit)",
            "boolean lambda$startSleepInBed$4(Monster)",
            "void lambda$die$3(Component,Future)",
            "Style lambda$null$2(Component,Style)",
            "void lambda$updateScoreForCriteria$1(int,Score)",
            "void lambda$addAdditionalSaveData$0(CompoundTag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.WorldGenRegion",
        "differences": {
          "added": [
            "Dimension getDimension()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.PlayerList",
        "differences": {
          "added": [
            "void <init>(MinecraftServer,PlayerDataStorage,int)",
            "void broadcastAll(Packet,DimensionType)",
            "void broadcast(Player,double,double,double,double,DimensionType,Packet)",
            "void broadcastMessage(Component,boolean)",
            "void broadcastMessage(Component)"
          ],
          "removed": [
            "void <init>(MinecraftServer,RegistryAccess$RegistryHolder,PlayerDataStorage,int)",
            "void broadcastAll(Packet,ResourceKey)",
            "void broadcast(Player,double,double,double,double,ResourceKey,Packet)",
            "void broadcastMessage(Component,ChatType,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.Tag",
        "differences": {
          "added": [],
          "removed": [
            "Codec codec(Supplier)",
            "DataResult lambda$codec$3(Supplier,Tag)",
            "DataResult lambda$null$2(Tag)",
            "DataResult lambda$codec$1(Supplier,ResourceLocation)",
            "DataResult lambda$null$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.AbstractUUIDFix",
        "differences": {
          "added": [
            "Optional replaceUUIDString(Dynamic,String,String)",
            "Optional replaceUUIDMLTag(Dynamic,String,String)",
            "Optional replaceUUIDLeastMost(Dynamic,String,String)",
            "Optional createUUIDFromString(Dynamic,String)",
            "Optional createUUIDFromML(Dynamic)",
            "Optional createUUIDFromLongs(Dynamic,String,String)",
            "Optional createUUIDTag(Dynamic,long,long)",
            "Optional lambda$createUUIDFromString$4(Dynamic,Dynamic)",
            "Dynamic lambda$replaceUUIDLeastMost$3(Dynamic,String,String,String,Dynamic)",
            "Dynamic lambda$replaceUUIDMLTag$2(Dynamic,String,String,Dynamic)",
            "Dynamic lambda$replaceUUIDString$1(Dynamic,String,String,Dynamic)"
          ],
          "removed": [
            "Optional replaceUUIDString(Dynamic,String,String)",
            "Optional replaceUUIDMLTag(Dynamic,String,String)",
            "Optional replaceUUIDLeastMost(Dynamic,String,String)",
            "Optional createUUIDFromString(Dynamic,String)",
            "Optional createUUIDFromML(Dynamic)",
            "Optional createUUIDFromLongs(Dynamic,String,String)",
            "Optional createUUIDTag(Dynamic,long,long)",
            "Optional lambda$createUUIDFromString$4(Dynamic,Dynamic)",
            "Dynamic lambda$replaceUUIDLeastMost$3(Dynamic,String,String,String,Dynamic)",
            "Dynamic lambda$replaceUUIDMLTag$2(Dynamic,String,String,Dynamic)",
            "Dynamic lambda$replaceUUIDString$1(Dynamic,String,String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.AttributesRename",
        "differences": {
          "added": [
            "Dynamic fixName(Dynamic)",
            "Dynamic lambda$fixEntity$9(Dynamic)",
            "Dynamic lambda$null$8(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$fixItemStackTag$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)"
          ],
          "removed": [
            "Dynamic fixName(Dynamic)",
            "Dynamic lambda$fixEntity$9(Dynamic)",
            "Dynamic lambda$null$8(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$fixItemStackTag$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityBannerColorFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$fixTag$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$fixTag$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityCustomNameToComponentFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Typed,OpticFinder,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Typed,OpticFinder,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityShulkerBoxColorFix",
        "differences": {
          "added": [
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockNameFlatteningFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$3(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$3(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkBiomeFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix",
        "differences": {
          "added": [
            "String getName(Dynamic)",
            "String getProperty(Dynamic,String)",
            "int idFor(CrudeIncrementalIntIdentityHashBiMap,Dynamic)",
            "Dynamic fix(Dynamic)",
            "Dynamic access$000()",
            "Dynamic access$400()",
            "Dynamic access$500()",
            "Dynamic access$600()",
            "Dynamic access$1000()",
            "Dynamic access$1400()",
            "Dynamic access$1500()",
            "Dynamic access$1600()",
            "Dynamic access$1700()",
            "Dynamic access$1800()",
            "Dynamic access$1900()"
          ],
          "removed": [
            "String getName(Dynamic)",
            "String getProperty(Dynamic,String)",
            "int idFor(CrudeIncrementalIntIdentityHashBiMap,Dynamic)",
            "Dynamic fix(Dynamic)",
            "Dynamic access$000()",
            "Dynamic access$400()",
            "Dynamic access$500()",
            "Dynamic access$600()",
            "Dynamic access$1000()",
            "Dynamic access$1400()",
            "Dynamic access$1500()",
            "Dynamic access$1600()",
            "Dynamic access$1700()",
            "Dynamic access$1800()",
            "Dynamic access$1900()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Dynamic getBlock(int)",
            "void setBlock(int,Dynamic)",
            "Dynamic write()"
          ],
          "removed": [
            "void <init>(Dynamic)",
            "Dynamic getBlock(int)",
            "void setBlock(int,Dynamic)",
            "Dynamic write()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkStructuresTemplateRenameFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Typed,Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Typed,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ColorlessShulkerEntityFix",
        "differences": {
          "added": [
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityArmorStandSilentFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityCatSplitFix",
        "differences": {
          "added": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ],
          "removed": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityCustomNameToComponentFix",
        "differences": {
          "added": [
            "Dynamic fixTagCustomName(Dynamic)",
            "Dynamic lambda$null$0(Typed,OpticFinder,Dynamic)"
          ],
          "removed": [
            "Dynamic fixTagCustomName(Dynamic)",
            "Dynamic lambda$null$0(Typed,OpticFinder,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityEquipmentToArmorAndHandFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$1(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityIdFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$3(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$3(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityMinecartIdentifiersFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$2(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)",
            "Pair lambda$null$1(TaggedChoice$TaggedChoiceType,DynamicOps,TaggedChoice$TaggedChoiceType,Pair)",
            "IllegalStateException lambda$null$0()"
          ],
          "removed": [
            "Function lambda$makeRule$3(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)",
            "Pair lambda$null$2(TaggedChoice$TaggedChoiceType,DynamicOps,TaggedChoice$TaggedChoiceType,Pair)",
            "IllegalStateException lambda$null$1()",
            "DataResult lambda$null$0(TaggedChoice$TaggedChoiceType,String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityPaintingMotiveFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityRedundantChanceTagsFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityRidingToPassengersFix",
        "differences": {
          "added": [
            "Function lambda$cap$6(Type,OpticFinder,OpticFinder,Type,OpticFinder,DynamicOps)",
            "Pair lambda$null$5(Type,DynamicOps,OpticFinder,OpticFinder,Type,OpticFinder,Pair)",
            "Either lambda$null$2(Type,DynamicOps,OpticFinder,OpticFinder,Pair)"
          ],
          "removed": [
            "Function lambda$cap$6(Type,OpticFinder,OpticFinder,Type,OpticFinder,DynamicOps)",
            "Pair lambda$null$5(Type,DynamicOps,OpticFinder,OpticFinder,Type,OpticFinder,Pair)",
            "Either lambda$null$2(Type,DynamicOps,OpticFinder,OpticFinder,Pair)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityShulkerRotationFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Double lambda$fixTag$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Double lambda$fixTag$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityStringUuidFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityWolfColorFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityZombieVillagerTypeFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ForcePoiRebuild",
        "differences": {
          "added": [
            "Dynamic cap(Dynamic)",
            "Dynamic lambda$cap$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Dynamic cap(Dynamic)",
            "Dynamic lambda$cap$4(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.GossipUUIDFix",
        "differences": {
          "added": [
            "Dynamic lambda$fix$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$fix$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.IglooMetadataRemovalFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic removeIglooPieces(Dynamic)",
            "boolean isIglooPiece(Dynamic)",
            "boolean lambda$null$1(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic removeIglooPieces(Dynamic)",
            "boolean isIglooPiece(Dynamic)",
            "boolean lambda$null$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemCustomNameToComponentFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemLoreFix",
        "differences": {
          "added": [
            "Dynamic lambda$fixLoreList$5(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$fixLoreList$5(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemRenameFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemStackEnchantmentNamesFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$7(Dynamic)",
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$7(Dynamic)",
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemStackUUIDFix",
        "differences": {
          "added": [
            "Dynamic updateAttributeModifiers(Dynamic)",
            "Dynamic updateSkullOwner(Dynamic)",
            "Dynamic lambda$updateSkullOwner$6(Dynamic)",
            "Dynamic lambda$updateAttributeModifiers$5(Dynamic,Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$1(Typed,OpticFinder,Dynamic)"
          ],
          "removed": [
            "Dynamic updateAttributeModifiers(Dynamic)",
            "Dynamic updateSkullOwner(Dynamic)",
            "Dynamic lambda$updateSkullOwner$6(Dynamic)",
            "Dynamic lambda$updateAttributeModifiers$5(Dynamic,Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$1(Typed,OpticFinder,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemWrittenBookPagesStrictJsonFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$2(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic lambda$fixTag$2(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.JigsawRotationFix",
        "differences": {
          "added": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection",
        "differences": {
          "added": [
            "Dynamic makeLeafTag(Dynamic,String,boolean,int)"
          ],
          "removed": [
            "Dynamic makeLeafTag(Dynamic,String,boolean,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LevelDataGeneratorOptionsFix",
        "differences": {
          "added": [
            "Dynamic convert(String,DynamicOps)",
            "Pair lambda$convert$5(DynamicOps,Map$Entry)",
            "Pair lambda$null$4(DynamicOps,Map$Entry)",
            "Object lambda$convert$3(DynamicOps,Pair)",
            "Typed lambda$makeRule$2(Type,Typed)",
            "IllegalStateException lambda$null$1()"
          ],
          "removed": [
            "Dynamic convert(String,DynamicOps)",
            "Pair lambda$convert$6(DynamicOps,Map$Entry)",
            "Pair lambda$null$5(DynamicOps,Map$Entry)",
            "Object lambda$convert$4(DynamicOps,Pair)",
            "Typed lambda$makeRule$3(Type,Typed)",
            "IllegalStateException lambda$null$2()",
            "DataResult lambda$null$1(Type,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LevelUUIDFix",
        "differences": {
          "added": [
            "Dynamic updateWanderingTrader(Dynamic)",
            "Dynamic updateDragonFight(Dynamic)",
            "Dynamic updateCustomBossEvents(Dynamic)",
            "Dynamic lambda$updateCustomBossEvents$12(Dynamic)",
            "Dynamic lambda$null$10(Dynamic)",
            "Dynamic lambda$null$9(Dynamic,Dynamic)",
            "Dynamic lambda$null$8(Dynamic)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$updateDragonFight$6(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic updateWanderingTrader(Dynamic)",
            "Dynamic updateDragonFight(Dynamic)",
            "Dynamic updateCustomBossEvents(Dynamic)",
            "Dynamic lambda$updateCustomBossEvents$12(Dynamic)",
            "Dynamic lambda$null$10(Dynamic)",
            "Dynamic lambda$null$9(Dynamic,Dynamic)",
            "Dynamic lambda$null$8(Dynamic)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$updateDragonFight$6(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.MemoryExpiryDataFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic updateBrain(Dynamic)",
            "Dynamic updateMemories(Dynamic)",
            "Dynamic wrapMemoryValue(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic updateBrain(Dynamic)",
            "Dynamic updateMemories(Dynamic)",
            "Dynamic wrapMemoryValue(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ObjectiveDisplayNameFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ],
          "removed": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.OptionsAddTextBackgroundFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic,String)"
          ],
          "removed": [
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.OptionsKeyLwjgl3Fix",
        "differences": {
          "added": [
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic,Map)"
          ],
          "removed": [
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic,Map)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.OptionsLowerCaseLanguageFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.PoiTypeRename",
        "differences": {
          "added": [
            "Dynamic cap(Dynamic)",
            "Optional renameRecords(Dynamic)",
            "Dynamic lambda$renameRecords$8(Dynamic,Stream)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$cap$5(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Dynamic cap(Dynamic)",
            "Optional renameRecords(Dynamic)",
            "Dynamic lambda$renameRecords$8(Dynamic,Stream)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$cap$5(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.RecipesRenameFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.RedstoneWireConnectionsFix",
        "differences": {
          "added": [
            "Dynamic updateRedstoneConnections(Dynamic)",
            "Dynamic lambda$updateRedstoneConnections$9(Dynamic)",
            "Dynamic lambda$null$8(String,Dynamic)",
            "Dynamic lambda$null$7(String,Dynamic)",
            "Dynamic lambda$null$6(String,Dynamic)",
            "Dynamic lambda$null$5(String,Dynamic)",
            "String lambda$null$4()",
            "String lambda$null$3()",
            "String lambda$null$2()",
            "String lambda$null$1()"
          ],
          "removed": [
            "Dynamic updateRedstoneConnections(Dynamic)",
            "Dynamic lambda$updateRedstoneConnections$5(Dynamic)",
            "Dynamic lambda$null$4(String,Dynamic)",
            "Dynamic lambda$null$3(String,Dynamic)",
            "Dynamic lambda$null$2(String,Dynamic)",
            "Dynamic lambda$null$1(String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.RenameBiomesFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$2(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$2(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.SavedDataUUIDFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.StatsCounterFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.StructureReferenceCountFix",
        "differences": {
          "added": [
            "Dynamic setCountToAtLeastOne(Dynamic)",
            "Dynamic lambda$setCountToAtLeastOne$2(Dynamic)"
          ],
          "removed": [
            "Dynamic setCountToAtLeastOne(Dynamic)",
            "Dynamic lambda$setCountToAtLeastOne$2(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.TeamDisplayNameFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ],
          "removed": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.VillagerFollowRangeFix",
        "differences": {
          "added": [
            "Dynamic fixValue(Dynamic)",
            "Dynamic lambda$fixValue$1(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixValue(Dynamic)",
            "Dynamic lambda$fixValue$1(Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.NamespacedSchema",
        "differences": {
          "added": [],
          "removed": [
            "Type namespacedString()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V704$1",
        "differences": {
          "added": [
            "Object apply(DynamicOps,Object)"
          ],
          "removed": [
            "Object apply(DynamicOps,Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V705$1",
        "differences": {
          "added": [
            "Object apply(DynamicOps,Object)"
          ],
          "removed": [
            "Object apply(DynamicOps,Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V99",
        "differences": {
          "added": [
            "Object addNames(Dynamic,Map,String)",
            "Dynamic lambda$addNames$35(Dynamic,Map,String,Dynamic)",
            "Dynamic lambda$null$34(Dynamic,String,Dynamic)",
            "Dynamic lambda$null$33(Dynamic,Map,Dynamic)"
          ],
          "removed": [
            "Object addNames(Dynamic,Map,String)",
            "Dynamic lambda$addNames$35(Dynamic,Map,String,Dynamic)",
            "Dynamic lambda$null$34(Dynamic,String,Dynamic)",
            "Dynamic lambda$null$33(Dynamic,Map,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.Entity",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)",
            "void sendMessage(Component)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)",
            "void sendMessage(Component,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.Brain",
        "differences": {
          "added": [
            "void <init>(Collection,Collection,Dynamic)",
            "void readMemory(MemoryModuleType,Dynamic)",
            "Object serialize(DynamicOps)",
            "Set lambda$addActivityAndRemoveMemoriesWhenStopped$2(Activity)",
            "Map lambda$addActivityAndRemoveMemoriesWhenStopped$1(Integer)",
            "boolean lambda$isMemoryValue$0(Object,Object)"
          ],
          "removed": [
            "Brain$Provider provider(Collection,Collection)",
            "Codec codec(Collection,Collection)",
            "void <init>(Collection,Collection,ImmutableList,Supplier)",
            "DataResult serializeStart(DynamicOps)",
            "Stream memories()",
            "Set lambda$addActivityAndRemoveMemoriesWhenStopped$3(Activity)",
            "Map lambda$addActivityAndRemoveMemoriesWhenStopped$2(Integer)",
            "boolean lambda$isMemoryValue$1(Object,Object)",
            "Brain$MemoryValue lambda$memories$0(Map$Entry)",
            "Logger access$000()",
            "Stream access$200(Brain)",
            "void access$500(Brain,MemoryModuleType,Optional)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.MeleeAttackGoal",
        "differences": {
          "added": [],
          "removed": [
            "void resetAttackCooldown()",
            "boolean isTimeToAttack()",
            "int getTicksUntilNextAttack()",
            "int getAttackInterval()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.gossip.GossipContainer",
        "differences": {
          "added": [
            "Dynamic store(DynamicOps)",
            "void update(Dynamic)",
            "void lambda$update$7(GossipContainer$GossipEntry)",
            "Dynamic lambda$store$6(DynamicOps,GossipContainer$GossipEntry)"
          ],
          "removed": [
            "Dynamic store(DynamicOps)",
            "void update(Dynamic)",
            "void lambda$update$8(GossipContainer$GossipEntry)",
            "Stream lambda$update$7(DataResult)",
            "Dynamic lambda$store$6(DynamicOps,GossipContainer$GossipEntry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.memory.ExpirableValue",
        "differences": {
          "added": [
            "void <init>(Object)",
            "void <init>(Function,Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "Codec codec(Codec)",
            "App lambda$codec$3(Codec,RecordCodecBuilder$Instance)",
            "ExpirableValue lambda$null$2(Object,Optional)",
            "Optional lambda$null$1(ExpirableValue)",
            "Object lambda$null$0(ExpirableValue)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.village.poi.PoiSection",
        "differences": {
          "added": [
            "void <init>(Runnable,Dynamic)",
            "Object serialize(DynamicOps)",
            "void lambda$refresh$8(Short2ObjectMap,BlockPos,PoiType)",
            "PoiRecord lambda$null$7(BlockPos,PoiType,int)",
            "Object lambda$serialize$6(DynamicOps,PoiRecord)",
            "Set lambda$add$5(PoiType)",
            "Object lambda$add$4(BlockPos)",
            "Object lambda$add$3(PoiType)",
            "Stream lambda$getRecords$2(Map$Entry)",
            "boolean lambda$getRecords$1(Predicate,Map$Entry)",
            "void lambda$new$0(Runnable,Dynamic)"
          ],
          "removed": [
            "Codec codec(Runnable)",
            "void <init>(Runnable,boolean,List)",
            "void lambda$refresh$10(Short2ObjectMap,BlockPos,PoiType)",
            "PoiRecord lambda$null$9(BlockPos,PoiType,int)",
            "Set lambda$add$8(PoiType)",
            "Object lambda$add$7(BlockPos)",
            "Object lambda$add$6(PoiType)",
            "Stream lambda$getRecords$5(Map$Entry)",
            "boolean lambda$getRecords$4(Predicate,Map$Entry)",
            "PoiSection lambda$codec$3(Runnable)",
            "App lambda$codec$2(Runnable,RecordCodecBuilder$Instance)",
            "List lambda$null$1(PoiSection)",
            "Boolean lambda$null$0(PoiSection)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.AbstractFish",
        "differences": {
          "added": [],
          "removed": [
            "void playStepSound(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.AbstractChestedHorse",
        "differences": {
          "added": [
            "SoundEvent getAngrySound()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Donkey",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getAngrySound()",
            "SoundEvent getEatingSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.hoglin.HoglinAi",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)"
          ],
          "removed": [
            "Brain makeBrain(Brain)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.piglin.Piglin",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)"
          ],
          "removed": [
            "Brain$Provider brainProvider()",
            "Brain makeBrain(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.piglin.PiglinAi",
        "differences": {
          "added": [
            "Brain makeBrain(Piglin,Dynamic)",
            "Behavior admireHeldItem()"
          ],
          "removed": [
            "Brain makeBrain(Piglin,Brain)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.npc.Villager",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)",
            "void lambda$spawnGolemIfNeeded$9(long,Villager)",
            "boolean lambda$spawnGolemIfNeeded$8(long,Villager)",
            "int lambda$countFoodPointsInInventory$7(SimpleContainer,Map$Entry)",
            "boolean lambda$getPlayerReputation$6(GossipType)",
            "void lambda$releasePoi$5(MinecraftServer,MemoryModuleType,GlobalPos)",
            "void lambda$tellWitnessesThatIWasMurdered$4(ServerLevel,Entity,LivingEntity)",
            "boolean lambda$tellWitnessesThatIWasMurdered$3(LivingEntity)"
          ],
          "removed": [
            "Brain$Provider brainProvider()",
            "Brain makeBrain(Dynamic)",
            "void lambda$spawnGolemIfNeeded$10(long,Villager)",
            "boolean lambda$spawnGolemIfNeeded$9(long,Villager)",
            "int lambda$countFoodPointsInInventory$8(SimpleContainer,Map$Entry)",
            "boolean lambda$getPlayerReputation$7(GossipType)",
            "void lambda$releasePoi$6(MinecraftServer,MemoryModuleType,GlobalPos)",
            "void lambda$tellWitnessesThatIWasMurdered$5(ServerLevel,Entity,LivingEntity)",
            "boolean lambda$tellWitnessesThatIWasMurdered$4(LivingEntity)",
            "void lambda$addAdditionalSaveData$3(CompoundTag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.npc.WanderingTraderSpawner",
        "differences": {
          "added": [
            "void <init>(ServerLevel,ServerLevelData)",
            "void tick()",
            "boolean spawn()",
            "BlockPos findSpawnPositionNear(BlockPos,int)",
            "boolean hasEnoughSpace(BlockPos)"
          ],
          "removed": [
            "void <init>(ServerLevelData)",
            "int tick(ServerLevel,boolean,boolean)",
            "boolean spawn(ServerLevel)",
            "BlockPos findSpawnPositionNear(LevelReader,BlockPos,int)",
            "boolean hasEnoughSpace(BlockGetter,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.projectile.ThrownEnderpearl",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.CompassItem",
        "differences": {
          "added": [
            "void addLodestoneTags(Dimension,BlockPos,CompoundTag)"
          ],
          "removed": [
            "void addLodestoneTags(RegistryAccess,DimensionType,BlockPos,CompoundTag)",
            "void lambda$addLodestoneTags$0(CompoundTag,Tag)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ItemStack",
        "differences": {
          "added": [
            "Style lambda$getDisplayName$3(Style)",
            "MutableComponent lambda$expandBlockState$2(MutableComponent)",
            "void lambda$appendEnchantmentNames$1(List,CompoundTag,Enchantment)",
            "void lambda$static$0(DecimalFormat)"
          ],
          "removed": [
            "void <init>(ItemLike,int,Optional)",
            "Style lambda$getDisplayName$7(Style)",
            "MutableComponent lambda$expandBlockState$6(MutableComponent)",
            "void lambda$appendEnchantmentNames$5(List,CompoundTag,Enchantment)",
            "void lambda$static$4(DecimalFormat)",
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Optional lambda$null$2(ItemStack)",
            "Integer lambda$null$1(ItemStack)",
            "Item lambda$null$0(ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules",
        "differences": {
          "added": [
            "void loadFromTag(CompoundTag)",
            "void lambda$loadFromTag$5(CompoundTag,GameRules$Key,GameRules$Value)"
          ],
          "removed": [
            "void <init>(DynamicLike)",
            "void <init>(GameRules,MinecraftServer)",
            "void loadFromTag(DynamicLike)",
            "void lambda$loadFromTag$5(DynamicLike,GameRules$Key,GameRules$Value)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeSpecialEffects",
        "differences": {
          "added": [],
          "removed": [
            "App lambda$static$8(RecordCodecBuilder$Instance)",
            "Optional lambda$null$7(BiomeSpecialEffects)",
            "Optional lambda$null$6(BiomeSpecialEffects)",
            "Optional lambda$null$5(BiomeSpecialEffects)",
            "Optional lambda$null$4(BiomeSpecialEffects)",
            "Optional lambda$null$3(BiomeSpecialEffects)",
            "Integer lambda$null$2(BiomeSpecialEffects)",
            "Integer lambda$null$1(BiomeSpecialEffects)",
            "Integer lambda$null$0(BiomeSpecialEffects)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.FixedBiomeSource",
        "differences": {
          "added": [],
          "removed": [
            "Codec codec()",
            "Biome lambda$static$0(FixedBiomeSource)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.MultiNoiseBiomeSource",
        "differences": {
          "added": [
            "MultiNoiseBiomeSource of(long,List)",
            "Float lambda$getNoiseBiome$2(Biome$ClimateParameters,Pair)",
            "Stream lambda$of$1(Biome)",
            "Pair lambda$null$0(Biome,Biome$ClimateParameters)"
          ],
          "removed": [
            "void <init>(long,List,Optional)",
            "MultiNoiseBiomeSource defaultNether(long)",
            "Codec codec()",
            "boolean stable(long)",
            "Float lambda$getNoiseBiome$11(Biome$ClimateParameters,Pair)",
            "Stream lambda$defaultNether$10(Biome)",
            "Pair lambda$null$9(Biome,Biome$ClimateParameters)",
            "Either lambda$static$8(MultiNoiseBiomeSource)",
            "Either lambda$null$7(MultiNoiseBiomeSource)",
            "Either lambda$null$6(MultiNoiseBiomeSource,MultiNoiseBiomeSource$Preset)",
            "MultiNoiseBiomeSource lambda$static$5(Either)",
            "MultiNoiseBiomeSource lambda$null$4(Pair)",
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "List lambda$null$2(MultiNoiseBiomeSource)",
            "App lambda$null$1(RecordCodecBuilder$Instance)",
            "Long lambda$null$0(MultiNoiseBiomeSource)",
            "MultiNoiseBiomeSource access$000(long)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.Property",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(String,Class)",
            "Codec codec()",
            "String getName()",
            "Class getValueClass()",
            "String toString()",
            "boolean equals(Object)",
            "int hashCode()",
            "int generateHashCode()",
            "DataResult parseValue(DynamicOps,StateHolder,Object)",
            "StateHolder lambda$parseValue$2(StateHolder,Comparable)",
            "DataResult lambda$new$1(String)",
            "DataResult lambda$null$0(String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.border.WorldBorder$Settings",
        "differences": {
          "added": [
            "WorldBorder$Settings read(CompoundTag,WorldBorder$Settings)"
          ],
          "removed": [
            "WorldBorder$Settings read(DynamicLike,WorldBorder$Settings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.ProtoChunk",
        "differences": {
          "added": [
            "BitSet lambda$getCarvingMask$5(GenerationStep$Carving)"
          ],
          "removed": [
            "BitSet getOrCreateCarvingMask(GenerationStep$Carving)",
            "BitSet lambda$getOrCreateCarvingMask$5(GenerationStep$Carving)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.SectionStorage",
        "differences": {
          "added": [
            "void <init>(File,Serializer,BiFunction,Function,DataFixer,DataFixTypes,boolean)",
            "void readColumn(ChunkPos,DynamicOps,Object)",
            "Dynamic writeColumn(ChunkPos,DynamicOps)",
            "int getVersion(Dynamic)",
            "Object lambda$readColumn$2(long,Dynamic)"
          ],
          "removed": [
            "void <init>(File,Function,Function,DataFixer,DataFixTypes,boolean)",
            "void readColumn(ChunkPos,DynamicOps,Object)",
            "Dynamic writeColumn(ChunkPos,DynamicOps)",
            "int getVersion(Dynamic)",
            "void lambda$writeColumn$5(Map,DynamicOps,String,Object)",
            "void lambda$writeColumn$4(long)",
            "Optional lambda$readColumn$2(long,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.DebugLevelSource",
        "differences": {
          "added": [
            "Stream lambda$static$0(Block)"
          ],
          "removed": [
            "Codec codec()",
            "Stream lambda$static$1(Block)",
            "DebugLevelSource lambda$static$0()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.WorldGenSettings",
        "differences": {
          "added": [
            "void <init>(long,boolean,boolean,WorldGenSettings$LevelType,Dynamic,ChunkGenerator)",
            "void <init>(long,boolean,boolean,WorldGenSettings$LevelType,Dynamic,ChunkGenerator,String,boolean)",
            "WorldGenSettings readWorldGenSettings(CompoundTag,DataFixer,int)",
            "ChunkGenerator defaultEndGenerator(long)",
            "ChunkGenerator defaultNetherGenerator(long)",
            "CompoundTag serialize()",
            "Map generators()",
            "WorldGenSettings read(Properties)",
            "WorldGenSettings withPreset(WorldGenSettings$Preset)",
            "WorldGenSettings withProvider(WorldGenSettings$LevelType,Dynamic,ChunkGenerator)",
            "WorldGenSettings fromFlatSettings(FlatLevelGeneratorSettings)",
            "WorldGenSettings fromBuffetSettings(WorldGenSettings$BuffetGeneratorType,Set)",
            "WorldGenSettings$Preset preset()",
            "ChunkGenerator make(WorldGenSettings$LevelType,Dynamic,long)",
            "Object getRegistryValue(DynamicLike,Registry,Object)",
            "BiomeSource createBuffetBiomeSource(DynamicLike,long)",
            "Dynamic createBuffetSettings(WorldGenSettings$BuffetGeneratorType,Set)",
            "FlatLevelGeneratorSettings parseFlatSettings()",
            "Pair parseBuffetSettings()",
            "Biome[] lambda$createBuffetBiomeSource$3(int)",
            "Stream lambda$createBuffetBiomeSource$2(Stream)",
            "Biome lambda$null$1(Dynamic)",
            "Optional lambda$make$0(String)",
            "Map access$300()"
          ],
          "removed": [
            "DataResult guardExperimental()",
            "boolean stable()",
            "void <init>(long,boolean,boolean,LinkedHashMap)",
            "void <init>(long,boolean,boolean,LinkedHashMap,Optional)",
            "NoiseBasedChunkGenerator makeDefaultOverworld(long)",
            "LinkedHashMap withOverworld(LinkedHashMap,ChunkGenerator)",
            "LinkedHashMap dimensions()",
            "WorldGenSettings create(Properties)",
            "String lambda$create$2(String)",
            "App lambda$static$1(RecordCodecBuilder$Instance)",
            "Optional lambda$null$0(WorldGenSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CanyonWorldCarver",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CaveWorldCarver",
        "differences": {
          "added": [
            "void <init>(Function,int)"
          ],
          "removed": [
            "void <init>(Codec,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.NetherWorldCarver",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.UnderwaterCanyonWorldCarver",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.WorldCarver",
        "differences": {
          "added": [
            "void <init>(Function,int)",
            "CarverConfiguration createSettings(Dynamic)"
          ],
          "removed": [
            "void <init>(Codec,int)",
            "Codec configuredCodec()",
            "CarverConfiguration lambda$new$1(ConfiguredWorldCarver)",
            "ConfiguredWorldCarver lambda$new$0(CarverConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.AbstractFlowerFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BambooFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BasaltPillarFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BastionFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "boolean isFeatureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome,ChunkPos)",
            "String getFeatureName()",
            "int getLookupRange()",
            "boolean supportsProjection()"
          ],
          "removed": [
            "void <init>(Codec)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,MultiJigsawConfiguration)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BlockBlobFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BlueIceFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BuriedTreasureFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "boolean isFeatureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome,ChunkPos)",
            "String getFeatureName()",
            "int getLookupRange()"
          ],
          "removed": [
            "void <init>(Codec)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,BuriedTreasureConfiguration)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ChorusPlantFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.RandomSelectorFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ReplaceBlockFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.RuinedPortalFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,RuinedPortalConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SeagrassFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ShipwreckFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,ShipwreckConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SimpleRandomSelectorFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SnowAndFreezeFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SpikeFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "SpikeFeature$EndSpike deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$5(RecordCodecBuilder$Instance)",
            "Boolean lambda$null$4(SpikeFeature$EndSpike)",
            "Integer lambda$null$3(SpikeFeature$EndSpike)",
            "Integer lambda$null$2(SpikeFeature$EndSpike)",
            "Integer lambda$null$1(SpikeFeature$EndSpike)",
            "Integer lambda$null$0(SpikeFeature$EndSpike)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SpringFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.StrongholdFeature$StrongholdStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,NoneFeatureConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SwamplandHutFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "String getFeatureName()",
            "int getLookupRange()",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "boolean isSwamphut(StructureFeatureManager,BlockPos)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.TwistingVinesFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.VillageFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,JigsawConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.VoidStartPlatformFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "WeightedConfiguredFeature deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Float lambda$null$1(WeightedConfiguredFeature)",
            "ConfiguredFeature lambda$null$0(WeightedConfiguredFeature)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WoodlandMansionFeature$WoodlandMansionStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)",
            "void postProcess(WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,BoundingBox,ChunkPos)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,NoneFeatureConfiguration)",
            "void placeInChunk(WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,BoundingBox,ChunkPos)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType",
        "differences": {
          "added": [
            "BlockPlacerType register(String,Function)",
            "void <init>(Function)",
            "BlockPlacer deserialize(Dynamic)"
          ],
          "removed": [
            "BlockPlacerType register(String,Codec)",
            "void <init>(Codec)",
            "Codec codec()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.blockplacers.DoublePlantPlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "BlockPlacerType type()",
            "DoublePlantPlacer lambda$static$0()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "BlockPileConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "BlockStateProvider lambda$static$0(BlockPileConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.BuriedTreasureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "BuriedTreasureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Float lambda$static$0(BuriedTreasureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ColumnFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Integer lambda$null$3(ColumnFeatureConfiguration)",
            "Integer lambda$null$2(ColumnFeatureConfiguration)",
            "Integer lambda$null$1(ColumnFeatureConfiguration)",
            "Integer lambda$null$0(ColumnFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.CountFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "CountFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Integer lambda$static$0(CountFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "DecoratedFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "ConfiguredDecorator lambda$null$1(DecoratedFeatureConfiguration)",
            "ConfiguredFeature lambda$null$0(DecoratedFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "DeltaFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$5(RecordCodecBuilder$Instance)",
            "Integer lambda$null$4(DeltaFeatureConfiguration)",
            "Integer lambda$null$3(DeltaFeatureConfiguration)",
            "Integer lambda$null$2(DeltaFeatureConfiguration)",
            "BlockState lambda$null$1(DeltaFeatureConfiguration)",
            "BlockState lambda$null$0(DeltaFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "DiskConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,BlockState)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "List lambda$null$3(DiskConfiguration)",
            "Integer lambda$null$2(DiskConfiguration)",
            "Integer lambda$null$1(DiskConfiguration)",
            "BlockState lambda$null$0(DiskConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "HugeMushroomFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$1(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$0(HugeMushroomFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "LayerConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "BlockState lambda$null$1(LayerConfiguration)",
            "Integer lambda$null$0(LayerConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.MultiJigsawConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "MultiJigsawConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$1(DynamicOps,JigsawConfiguration)",
            "JigsawConfiguration lambda$new$0(Map$Entry)"
          ],
          "removed": [
            "void <init>(List)",
            "JigsawConfiguration lambda$new$1(Map$Entry)",
            "List lambda$static$0(MultiJigsawConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "NoneDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "NoneDecoratorConfiguration lambda$static$0()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "OceanRuinConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Float lambda$null$2(OceanRuinConfiguration)",
            "Float lambda$null$1(OceanRuinConfiguration)",
            "OceanRuinFeature$Type lambda$null$0(OceanRuinConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates",
        "differences": {
          "added": [
            "OreConfiguration$Predicates lambda$static$1(OreConfiguration$Predicates)"
          ],
          "removed": [
            "String getSerializedName()",
            "OreConfiguration$Predicates lambda$static$2(OreConfiguration$Predicates)",
            "boolean lambda$static$1(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "RandomBooleanFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "ConfiguredFeature lambda$null$1(RandomBooleanFeatureConfiguration)",
            "ConfiguredFeature lambda$null$0(RandomBooleanFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "RandomPatchConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$1(DynamicOps,BlockState)",
            "Object lambda$serialize$0(DynamicOps,Block)"
          ],
          "removed": [
            "void <init>(BlockStateProvider,BlockPlacer,List,List,int,int,int,int,boolean,boolean,boolean)",
            "App lambda$static$11(RecordCodecBuilder$Instance)",
            "Boolean lambda$null$10(RandomPatchConfiguration)",
            "Boolean lambda$null$9(RandomPatchConfiguration)",
            "Boolean lambda$null$8(RandomPatchConfiguration)",
            "Integer lambda$null$7(RandomPatchConfiguration)",
            "Integer lambda$null$6(RandomPatchConfiguration)",
            "Integer lambda$null$5(RandomPatchConfiguration)",
            "Integer lambda$null$4(RandomPatchConfiguration)",
            "List lambda$null$3(RandomPatchConfiguration)",
            "List lambda$null$2(RandomPatchConfiguration)",
            "BlockPlacer lambda$null$1(RandomPatchConfiguration)",
            "BlockStateProvider lambda$null$0(RandomPatchConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ReplaceBlockConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "BlockState lambda$null$1(ReplaceBlockConfiguration)",
            "BlockState lambda$null$0(ReplaceBlockConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "SeagrassFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Double lambda$null$1(SeagrassFeatureConfiguration)",
            "Integer lambda$null$0(SeagrassFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration",
        "differences": {
          "added": [
            "void <init>(BlockState,BlockState[],BlockState[],BlockState[])",
            "Dynamic serialize(DynamicOps)",
            "SimpleBlockConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$2(DynamicOps,BlockState)",
            "Object lambda$serialize$1(DynamicOps,BlockState)",
            "Object lambda$serialize$0(DynamicOps,BlockState)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "List lambda$null$3(SimpleBlockConfiguration)",
            "List lambda$null$2(SimpleBlockConfiguration)",
            "List lambda$null$1(SimpleBlockConfiguration)",
            "BlockState lambda$null$0(SimpleBlockConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "SpikeConfiguration deserialize(Dynamic)",
            "Integer lambda$deserialize$1(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,SpikeFeature$EndSpike)"
          ],
          "removed": [
            "void <init>(boolean,List,Optional)",
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Optional lambda$null$2(SpikeConfiguration)",
            "List lambda$null$1(SpikeConfiguration)",
            "Boolean lambda$null$0(SpikeConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "TreeConfiguration deserialize(Dynamic)",
            "TreeDecorator lambda$deserialize$1(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,TreeDecorator)"
          ],
          "removed": [
            "App lambda$static$9(RecordCodecBuilder$Instance)",
            "Heightmap$Types lambda$null$8(TreeConfiguration)",
            "Boolean lambda$null$7(TreeConfiguration)",
            "Integer lambda$null$6(TreeConfiguration)",
            "List lambda$null$5(TreeConfiguration)",
            "FeatureSize lambda$null$4(TreeConfiguration)",
            "TrunkPlacer lambda$null$3(TreeConfiguration)",
            "FoliagePlacer lambda$null$2(TreeConfiguration)",
            "BlockStateProvider lambda$null$1(TreeConfiguration)",
            "BlockStateProvider lambda$null$0(TreeConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType",
        "differences": {
          "added": [
            "FeatureSizeType register(String,Function)",
            "void <init>(Function)",
            "FeatureSize deserialize(Dynamic)"
          ],
          "removed": [
            "FeatureSizeType register(String,Codec)",
            "void <init>(Codec)",
            "Codec codec()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)",
            "OptionalInt lambda$new$0(Number)"
          ],
          "removed": [
            "FeatureSizeType type()",
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(TwoLayersFeatureSize)",
            "Integer lambda$null$1(TwoLayersFeatureSize)",
            "Integer lambda$null$0(TwoLayersFeatureSize)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)"
          ],
          "removed": [
            "FoliagePlacerType type()",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.BushFoliagePlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)"
          ],
          "removed": [
            "FoliagePlacerType type()",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.FancyFoliagePlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)"
          ],
          "removed": [
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "CarvingMaskDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Float lambda$null$1(CarvingMaskDecoratorConfiguration)",
            "GenerationStep$Carving lambda$null$0(CarvingMaskDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChanceHeightmapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChancePassthroughDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChorusPlantPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountBiasedRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountChanceHeightmapDoubleDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountHeighmapDoubleDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountHeightmap32Decorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountTopSolidDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountWithExtraChanceHeightmapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.DepthAverageConfigation",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "DepthAverageConfigation deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(DepthAverageConfigation)",
            "Integer lambda$null$1(DepthAverageConfigation)",
            "Integer lambda$null$0(DepthAverageConfigation)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.EndGatewayPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.FeatureDecorator",
        "differences": {
          "added": [
            "void <init>(Function)",
            "DecoratorConfiguration createSettings(Dynamic)",
            "void lambda$placeFeature$0(ConfiguredFeature,WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,AtomicBoolean,BlockPos)"
          ],
          "removed": [
            "void <init>(Codec)",
            "Codec configuredCodec()",
            "void lambda$placeFeature$2(ConfiguredFeature,WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,AtomicBoolean,BlockPos)",
            "DecoratorConfiguration lambda$new$1(ConfiguredDecorator)",
            "ConfiguredDecorator lambda$new$0(DecoratorConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "FrequencyChanceDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Float lambda$null$1(FrequencyChanceDecoratorConfiguration)",
            "Integer lambda$null$0(FrequencyChanceDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "FrequencyWithExtraChanceDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(FrequencyWithExtraChanceDecoratorConfiguration)",
            "Float lambda$null$1(FrequencyWithExtraChanceDecoratorConfiguration)",
            "Integer lambda$null$0(FrequencyWithExtraChanceDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.LakeLavaPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.MonsterRoomPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.NoiseHeightmap32Decorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.NopePlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.SimpleFeatureDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.TopSolidHeightMapNoiseBasedDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.ChanceRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.FireDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.MagmaDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.NetherFossilFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,NoneFeatureConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanRuinFeature$OceanRuinStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,OceanRuinConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece",
        "differences": {
          "added": [],
          "removed": [
            "void lambda$addAdditionalSaveData$1(CompoundTag,Tag)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.RuinedPortalPiece$Properties",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "void <init>(boolean,float,boolean,boolean,boolean,boolean)",
            "App lambda$static$6(RecordCodecBuilder$Instance)",
            "Boolean lambda$null$5(RuinedPortalPiece$Properties)",
            "Boolean lambda$null$4(RuinedPortalPiece$Properties)",
            "Boolean lambda$null$3(RuinedPortalPiece$Properties)",
            "Boolean lambda$null$2(RuinedPortalPiece$Properties)",
            "Float lambda$null$1(RuinedPortalPiece$Properties)",
            "Boolean lambda$null$0(RuinedPortalPiece$Properties)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.saveddata.maps.MapItemSavedData",
        "differences": {
          "added": [
            "void setProperties(int,int,int,boolean,boolean,DimensionType)"
          ],
          "removed": [
            "void setProperties(int,int,int,boolean,boolean,ResourceKey)",
            "void lambda$save$1(CompoundTag,Tag)",
            "IllegalArgumentException lambda$load$0(CompoundTag)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.DerivedLevelData",
        "differences": {
          "added": [
            "void setDimensionData(CompoundTag)",
            "CompoundTag getDimensionData()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess",
        "differences": {
          "added": [
            "File getDimensionPath(DimensionType)"
          ],
          "removed": [
            "File getDimensionPath(ResourceKey)",
            "DataResult exportWorldGenSettings()",
            "DataResult lambda$exportWorldGenSettings$2(JsonElement)",
            "WorldData lambda$getDataTag$1(File,DataFixer)"
          ]
        }
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Client",
        "id": "client-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.gui.components.ChatComponent",
            "XXX.gui.components.CommandSuggestions",
            "XXX.gui.components.CommandSuggestions$SuggestionsList",
            "XXX.gui.components.ContainerObjectSelectionList",
            "XXX.gui.components.DebugScreenOverlay",
            "XXX.gui.components.EditBox",
            "XXX.gui.components.LerpingBossEvent",
            "XXX.gui.components.LockIconButton",
            "XXX.gui.components.ObjectSelectionList",
            "XXX.gui.components.OptionButton",
            "XXX.gui.components.OptionsList$Entry",
            "XXX.gui.components.PlayerTabOverlay$1",
            "XXX.gui.components.ScrolledSelectionList",
            "XXX.gui.components.StateSwitchingButton",
            "XXX.gui.components.SubtitleOverlay$Subtitle",
            "XXX.gui.components.VolumeSlider",
            "XXX.components.events.AbstractContainerEventHandler",
            "XXX.components.events.GuiEventListener",
            "XXX.gui.components.package-info",
            "XXX.components.spectator.package-info",
            "XXX.components.toasts.RecipeToast",
            "XXX.components.toasts.SystemToast$SystemToastIds",
            "XXX.components.toasts.Toast$Visibility",
            "XXX.components.toasts.ToastComponent$1",
            "XXX.components.toasts.TutorialToast",
            "XXX.components.toasts.package-info",
            "XXX.gui.font.FontManager",
            "XXX.gui.font.FontSet",
            "XXX.gui.font.FontTexture$1",
            "XXX.gui.font.TextFieldHelper",
            "XXX.font.glyphs.BakedGlyph$Effect",
            "XXX.font.glyphs.MissingGlyph",
            "XXX.font.glyphs.package-info",
            "XXX.font.providers.BitmapProvider",
            "XXX.font.providers.BitmapProvider$Builder",
            "XXX.font.providers.GlyphProviderBuilder",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$Builder",
            "XXX.font.providers.TrueTypeGlyphProviderBuilder",
            "XXX.client.gui.package-info",
            "XXX.gui.screens.AlertScreen",
            "XXX.gui.screens.BackupConfirmScreen$Listener",
            "XXX.gui.screens.ChatScreen",
            "XXX.gui.screens.ConfirmLinkScreen",
            "XXX.gui.screens.ConnectScreen",
            "XXX.gui.screens.CreateBuffetWorldScreen",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList",
            "XXX.gui.screens.CreateFlatWorldScreen",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList",
            "XXX.gui.screens.DeathScreen",
            "XXX.gui.screens.DirectJoinServerScreen",
            "XXX.gui.screens.EditServerScreen",
            "XXX.gui.screens.GenericDirtMessageScreen",
            "XXX.gui.screens.LanguageSelectScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry",
            "XXX.gui.screens.LoadingOverlay",
            "XXX.gui.screens.MenuScreens",
            "XXX.gui.screens.MouseSettingsScreen",
            "XXX.gui.screens.OptionsSubScreen",
            "XXX.gui.screens.Overlay",
            "XXX.gui.screens.PresetFlatWorldScreen",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList",
            "XXX.gui.screens.ProgressScreen",
            "XXX.gui.screens.Screen",
            "XXX.gui.screens.SkinCustomizationScreen",
            "XXX.gui.screens.TitleScreen",
            "XXX.gui.screens.WinScreen",
            "XXX.screens.achievement.StatsScreen$1",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList$Entry",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemComparator",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList",
            "XXX.screens.achievement.StatsUpdateListener",
            "XXX.screens.advancements.AdvancementTab",
            "XXX.screens.advancements.AdvancementTabType$1",
            "XXX.screens.advancements.AdvancementWidgetType",
            "XXX.screens.advancements.package-info",
            "XXX.screens.controls.ControlList$1",
            "XXX.screens.controls.ControlList$Entry",
            "XXX.screens.controls.ControlList$KeyEntry$1",
            "XXX.screens.controls.ControlsScreen",
            "XXX.screens.debug.GameModeSwitcherScreen",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeIcon",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen",
            "XXX.screens.inventory.AbstractContainerScreen",
            "XXX.screens.inventory.AnvilScreen",
            "XXX.screens.inventory.BeaconScreen$1",
            "XXX.screens.inventory.BeaconScreen$BeaconConfirmButton",
            "XXX.screens.inventory.BeaconScreen$BeaconScreenButton",
            "XXX.screens.inventory.BlastFurnaceScreen",
            "XXX.screens.inventory.BookEditScreen$DisplayCache",
            "XXX.screens.inventory.BookEditScreen$Pos2i",
            "XXX.screens.inventory.BookViewScreen$1",
            "XXX.screens.inventory.BookViewScreen$WritableBookAccess",
            "XXX.screens.inventory.BrewingStandScreen",
            "XXX.screens.inventory.CommandBlockEditScreen",
            "XXX.screens.inventory.ContainerScreen",
            "XXX.screens.inventory.CreativeInventoryListener",
            "XXX.screens.inventory.CreativeModeInventoryScreen$CustomCreativeSlot",
            "XXX.screens.inventory.CreativeModeInventoryScreen$SlotWrapper",
            "XXX.screens.inventory.EffectRenderingInventoryScreen",
            "XXX.screens.inventory.EnchantmentScreen",
            "XXX.screens.inventory.GrindstoneScreen",
            "XXX.screens.inventory.HorseInventoryScreen",
            "XXX.screens.inventory.ItemCombinerScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen$1",
            "XXX.screens.inventory.LecternScreen$1",
            "XXX.screens.inventory.MenuAccess",
            "XXX.screens.inventory.MerchantScreen$TradeOfferButton",
            "XXX.screens.inventory.PageButton",
            "XXX.screens.inventory.SignEditScreen",
            "XXX.screens.inventory.SmokerScreen",
            "XXX.screens.inventory.StructureBlockEditScreen",
            "XXX.screens.inventory.StructureBlockEditScreen$2",
            "XXX.screens.mco.package-info",
            "XXX.screens.multiplayer.SafetyScreen",
            "XXX.screens.multiplayer.ServerSelectionList$Entry",
            "XXX.screens.multiplayer.ServerSelectionList$NetworkServerEntry",
            "XXX.screens.multiplayer.package-info",
            "XXX.screens.recipebook.AbstractFurnaceRecipeBookComponent",
            "XXX.screens.recipebook.GhostRecipe",
            "XXX.screens.recipebook.OverlayRecipeComponent",
            "XXX.screens.recipebook.OverlayRecipeComponent$OverlayRecipeButton$Pos",
            "XXX.screens.recipebook.RecipeBookComponent",
            "XXX.screens.recipebook.RecipeBookTabButton",
            "XXX.screens.recipebook.RecipeCollection",
            "XXX.screens.recipebook.RecipeUpdateListener",
            "XXX.screens.recipebook.SmokingRecipeBookComponent",
            "XXX.screens.resourcepacks.ResourcePackSelectScreen",
            "XXX.resourcepacks.lists.AvailableResourcePackList",
            "XXX.resourcepacks.lists.ResourcePackList$ResourcePackEntry",
            "XXX.resourcepacks.lists.package-info",
            "XXX.screens.stream.package-info",
            "XXX.screens.worldselection.CreateWorldScreen$1",
            "XXX.screens.worldselection.CreateWorldScreen$3",
            "XXX.screens.worldselection.CreateWorldScreen$5",
            "XXX.screens.worldselection.EditGameRulesScreen",
            "XXX.screens.worldselection.EditGameRulesScreen$BooleanRuleEntry$1",
            "XXX.screens.worldselection.EditGameRulesScreen$EntryFactory",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleList$1",
            "XXX.screens.worldselection.OptimizeWorldScreen",
            "XXX.screens.worldselection.WorldGenSettingsComponent",
            "XXX.screens.worldselection.WorldGenSettingsComponent$2",
            "XXX.screens.worldselection.WorldGenSettingsComponent$PresetEditor",
            "XXX.minecraft.core.MappedRegistry",
            "XXX.minecraft.core.Position",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableBoolean",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.Main",
            "XXX.data.advancements.AdventureAdvancements",
            "XXX.data.advancements.NetherAdvancements",
            "XXX.data.advancements.TheEndAdvancements",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLoot",
            "XXX.data.loot.EntityLoot",
            "XXX.data.loot.GiftLoot",
            "XXX.data.loot.PiglinBarterLoot",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$1",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$1",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.FinishedRecipe",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.GameTestSequence",
            "XXX.gametest.framework.GameTestServer",
            "XXX.gametest.framework.GameTestTicker",
            "XXX.gametest.framework.JUnitLikeTestReporter",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.TeamcityTestReporter",
            "XXX.gametest.framework.TestCommand",
            "XXX.gametest.framework.TestFunction",
            "XXX.gametest.framework.TestReporter",
            "XXX.minecraft.locale.Language",
            "XXX.minecraft.nbt.ByteArrayTag",
            "XXX.minecraft.nbt.ByteTag",
            "XXX.minecraft.nbt.ByteTag$Cache",
            "XXX.minecraft.nbt.CompoundTag",
            "XXX.minecraft.nbt.DoubleTag",
            "XXX.minecraft.nbt.EndTag",
            "XXX.minecraft.nbt.FloatTag",
            "XXX.minecraft.nbt.IntArrayTag",
            "XXX.minecraft.nbt.IntTag",
            "XXX.minecraft.nbt.IntTag$Cache",
            "XXX.minecraft.nbt.ListTag$1",
            "XXX.minecraft.nbt.LongArrayTag$1",
            "XXX.minecraft.nbt.LongTag$1",
            "XXX.minecraft.nbt.NbtAccounter",
            "XXX.minecraft.nbt.NbtIo",
            "XXX.minecraft.nbt.NbtUtils",
            "XXX.minecraft.nbt.ShortTag",
            "XXX.minecraft.nbt.ShortTag$Cache",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.TagParser",
            "XXX.minecraft.nbt.TagType$1",
            "XXX.minecraft.nbt.package-info",
            "XXX.minecraft.network.CipherDecoder",
            "XXX.minecraft.network.CompressionDecoder",
            "XXX.minecraft.network.Connection",
            "XXX.minecraft.network.Connection$2",
            "XXX.minecraft.network.ConnectionProtocol",
            "XXX.minecraft.network.ConnectionProtocol$PacketSet",
            "XXX.minecraft.network.FriendlyByteBuf",
            "XXX.minecraft.network.PacketEncoder",
            "XXX.minecraft.network.SkipPacketException",
            "XXX.minecraft.network.Varint21LengthFieldPrepender",
            "XXX.network.chat.ChatType",
            "XXX.network.chat.ClickEvent$Action",
            "XXX.network.chat.Component",
            "XXX.network.chat.Component$Serializer",
            "XXX.network.chat.ComponentUtils",
            "XXX.network.chat.HoverEvent",
            "XXX.network.chat.HoverEvent$EntityTooltipInfo",
            "XXX.network.chat.KeybindComponent",
            "XXX.network.chat.NbtComponent",
            "XXX.network.chat.NbtComponent$EntityNbtComponent",
            "XXX.network.chat.ScoreComponent",
            "XXX.network.chat.Style",
            "XXX.network.chat.Style$Serializer",
            "XXX.network.chat.TextComponent",
            "XXX.network.chat.TranslatableFormatException",
            "XXX.minecraft.network.package-info",
            "XXX.network.protocol.PacketFlow",
            "XXX.protocol.game.ClientGamePacketListener",
            "XXX.protocol.game.ClientboundAddExperienceOrbPacket",
            "XXX.protocol.game.ClientboundAddMobPacket",
            "XXX.protocol.game.ClientboundAddPlayerPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.realms.NarrationHelper",
            "XXX.minecraft.realms.RealmsConnect",
            "XXX.minecraft.realms.RealmsLabel",
            "XXX.minecraft.realms.RealmsScreen",
            "XXX.minecraft.realms.RepeatedNarrator",
            "XXX.minecraft.realms.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.FeatureSimulator",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.FastColor$ARGB32",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.InsensitiveStringMap",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.LinearCongruentialGenerator",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory$1",
            "XXX.minecraft.util.ProgressListener",
            "XXX.minecraft.util.RewindableStream$1",
            "XXX.minecraft.util.Serializer",
            "XXX.minecraft.util.SortedArraySet",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.util.datafix.OminousBannerRenameFix",
            "XXX.datafix.schemas.V100",
            "XXX.datafix.schemas.V1022",
            "XXX.datafix.schemas.V107",
            "XXX.datafix.schemas.V135",
            "XXX.datafix.schemas.V1451",
            "XXX.datafix.schemas.V1451_2",
            "XXX.datafix.schemas.V1451_4",
            "XXX.datafix.schemas.V1451_6",
            "XXX.datafix.schemas.V1460",
            "XXX.datafix.schemas.V1470",
            "XXX.datafix.schemas.V1483",
            "XXX.datafix.schemas.V1510",
            "XXX.datafix.schemas.V1801",
            "XXX.datafix.schemas.V1906",
            "XXX.datafix.schemas.V1920",
            "XXX.datafix.schemas.V1929",
            "XXX.datafix.schemas.V2100",
            "XXX.datafix.schemas.V2502",
            "XXX.datafix.schemas.V2509",
            "XXX.datafix.schemas.V2522",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.CrossbowAttack",
            "XXX.ai.behavior.DismountOrSkipMounting",
            "XXX.ai.behavior.EntityTracker",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.GateBehavior$OrderPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$1",
            "XXX.ai.behavior.GiveGiftToHero",
            "XXX.ai.behavior.GoToCelebrateLocation",
            "XXX.ai.behavior.GoToWantedItem",
            "XXX.ai.behavior.InsideBrownianWalk",
            "XXX.ai.behavior.InteractWithDoor",
            "XXX.ai.behavior.LocateHidingPlace",
            "XXX.ai.behavior.LookAndFollowTradingPlayerSink",
            "XXX.ai.behavior.MeleeAttack",
            "XXX.ai.behavior.MoveToSkySeeingSpot",
            "XXX.ai.behavior.PlayTagWithOtherKids",
            "XXX.ai.behavior.RandomStroll",
            "XXX.ai.behavior.ResetProfession",
            "XXX.ai.behavior.RingBell",
            "XXX.ai.behavior.RunOne",
            "XXX.ai.behavior.SetClosestHomeAsWalkTarget",
            "XXX.ai.behavior.SetHiddenState",
            "XXX.ai.behavior.SetRaidStatus",
            "XXX.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach",
            "XXX.ai.behavior.SetWalkTargetFromLookTarget",
            "XXX.ai.behavior.SleepInBed",
            "XXX.ai.behavior.StartAttacking",
            "XXX.ai.behavior.StopAttackingIfTargetInvalid",
            "XXX.ai.behavior.StrollAroundPoi",
            "XXX.ai.behavior.StrollToPoiList",
            "XXX.ai.behavior.TradeWithVillager",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WeightedList$1",
            "XXX.world.level.LevelReader",
            "XXX.world.level.LevelSimulatedRW",
            "XXX.world.level.LevelWriter",
            "XXX.world.level.NaturalSpawner",
            "XXX.world.level.NaturalSpawner$AfterSpawnCallback",
            "XXX.world.level.NaturalSpawner$SpawnPredicate",
            "XXX.world.level.NoiseColumn",
            "XXX.world.level.PortalForcer",
            "XXX.world.level.PotentialCalculator$PointCharge",
            "XXX.world.level.SpawnData",
            "XXX.world.level.TickList",
            "XXX.world.level.TickPriority",
            "XXX.level.biome.AmbientAdditionsSettings",
            "XXX.level.biome.AmbientParticleSettings",
            "XXX.level.biome.BadlandsPlateauBiome",
            "XXX.level.biome.BambooJungleHillsBiome",
            "XXX.level.biome.BeachBiome",
            "XXX.level.biome.Biome$1",
            "XXX.level.biome.Biome$BiomeCategory",
            "XXX.level.biome.Biome$ClimateParameters",
            "XXX.level.biome.Biome$Precipitation",
            "XXX.level.biome.BiomeDefaultFeatures",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.BiomeSourceType",
            "XXX.level.biome.MushroomFieldsBiome",
            "XXX.level.biome.NearestNeighborBiomeZoomer",
            "XXX.level.biome.OceanBiome",
            "XXX.level.biome.PlainsBiome",
            "XXX.level.biome.SavannaBiome",
            "XXX.level.biome.ShatteredSavannaBiome",
            "XXX.level.biome.SmallEndIslandsBiome",
            "XXX.level.biome.SnowyMountainsBiome",
            "XXX.level.biome.SnowyTaigaHillsBiome",
            "XXX.level.biome.SnowyTundraBiome",
            "XXX.level.biome.StoneShoreBiome",
            "XXX.level.biome.SwampBiome",
            "XXX.level.biome.TaigaBiome",
            "XXX.level.biome.TaigaMountainsBiome",
            "XXX.level.biome.TallBirchHillsBiome",
            "XXX.level.biome.TheEndBiomeSource",
            "XXX.level.biome.WarmOceanBiome",
            "XXX.level.biome.WoodedBadlandsBiome",
            "XXX.level.biome.WoodedMountainBiome",
            "XXX.level.block.AbstractBannerBlock",
            "XXX.level.block.AbstractFurnaceBlock",
            "XXX.level.block.AbstractSkullBlock",
            "XXX.level.block.AnvilBlock",
            "XXX.level.block.BambooBlock",
            "XXX.level.block.BannerBlock",
            "XXX.level.block.BarrierBlock",
            "XXX.level.block.BaseCoralPlantBlock",
            "XXX.level.block.BaseCoralWallFanBlock",
            "XXX.level.block.BaseFireBlock",
            "XXX.level.block.BaseRailBlock",
            "XXX.level.block.BeaconBeamBlock",
            "XXX.level.block.BedBlock",
            "XXX.level.block.BeehiveBlock",
            "XXX.level.block.BellBlock",
            "XXX.level.block.BlastFurnaceBlock",
            "XXX.level.block.Block$1",
            "XXX.level.block.Block$BlockStatePairKey",
            "XXX.level.block.BonemealableBlock",
            "XXX.level.block.BubbleColumnBlock",
            "XXX.level.block.BushBlock",
            "XXX.level.block.ButtonBlock$1",
            "XXX.level.block.CakeBlock",
            "XXX.level.block.CarrotBlock",
            "XXX.level.block.CarvedPumpkinBlock",
            "XXX.level.block.ChainBlock",
            "XXX.level.block.ChestBlock$1",
            "XXX.level.block.ChestBlock$2$1",
            "XXX.level.block.ChestBlock$4",
            "XXX.level.block.ChorusPlantBlock",
            "XXX.level.block.CocoaBlock$1",
            "XXX.level.block.ComparatorBlock",
            "XXX.level.block.ComposterBlock$EmptyContainer",
            "XXX.level.block.ComposterBlock$OutputContainer",
            "XXX.level.block.ConduitBlock",
            "XXX.level.block.CoralFanBlock",
            "XXX.level.block.CoralWallFanBlock",
            "XXX.level.block.CropBlock",
            "XXX.level.block.CrossCollisionBlock$1",
            "XXX.level.block.DaylightDetectorBlock",
            "XXX.level.block.DetectorRailBlock",
            "XXX.level.block.DiodeBlock",
            "XXX.level.block.DispenserBlock",
            "XXX.level.block.DoorBlock$1",
            "XXX.level.block.DoubleBlockCombiner$BlockType",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult$Single",
            "XXX.level.block.DragonEggBlock",
            "XXX.level.block.EnchantmentTableBlock",
            "XXX.level.block.EndPortalBlock",
            "XXX.level.block.EndRodBlock",
            "XXX.level.block.EnderChestBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock",
            "XXX.level.block.FallingBlock",
            "XXX.level.block.FenceBlock",
            "XXX.level.block.FenceGateBlock$1",
            "XXX.level.block.FletchingTableBlock",
            "XXX.level.block.FlowerPotBlock",
            "XXX.level.block.FungusBlock",
            "XXX.level.block.GlassBlock",
            "XXX.level.block.GrassBlock",
            "XXX.level.block.GravelBlock",
            "XXX.level.block.GrindstoneBlock$1",
            "XXX.level.block.GrowingPlantBodyBlock",
            "XXX.level.block.HalfTransparentBlock",
            "XXX.level.block.HoneyBlock",
            "XXX.level.block.HopperBlock$1",
            "XXX.level.block.HugeMushroomBlock",
            "XXX.level.block.InfestedBlock",
            "XXX.level.block.JigsawBlock",
            "XXX.level.block.KelpBlock",
            "XXX.level.block.LadderBlock",
            "XXX.level.block.Lantern",
            "XXX.level.block.LecternBlock",
            "XXX.level.block.LevelEvent",
            "XXX.level.block.LeverBlock$1",
            "XXX.level.block.LiquidBlockContainer",
            "XXX.level.block.MagmaBlock",
            "XXX.level.block.Mirror",
            "XXX.level.block.MushroomBlock",
            "XXX.level.block.NetherPortalBlock",
            "XXX.level.block.NetherPortalBlock$PortalShape",
            "XXX.level.block.NetherVines",
            "XXX.level.block.NetherrackBlock",
            "XXX.level.block.NyliumBlock",
            "XXX.level.block.OreBlock",
            "XXX.level.block.PlayerHeadBlock",
            "XXX.level.block.PotatoBlock",
            "XXX.level.block.PoweredRailBlock",
            "XXX.level.block.PressurePlateBlock",
            "XXX.level.block.PressurePlateBlock$Sensitivity",
            "XXX.level.block.RailBlock",
            "XXX.level.block.RailState",
            "XXX.level.block.RedStoneOreBlock",
            "XXX.level.block.RedStoneWireBlock$1",
            "XXX.level.block.RedstoneTorchBlock",
            "XXX.level.block.RedstoneWallTorchBlock",
            "XXX.level.block.RepeaterBlock",
            "XXX.level.block.RootsBlock",
            "XXX.level.block.RotatedPillarBlock$1",
            "XXX.level.block.Rotation$1",
            "XXX.level.block.SaplingBlock",
            "XXX.level.block.SeaPickleBlock",
            "XXX.level.block.ShearableDoublePlantBlock",
            "XXX.level.block.ShulkerBoxBlock$1",
            "XXX.level.block.SimpleWaterloggedBlock",
            "XXX.level.block.SkullBlock$Type",
            "XXX.level.block.SlabBlock",
            "XXX.level.block.SlimeBlock",
            "XXX.level.block.SmokerBlock",
            "XXX.level.block.SnowLayerBlock$1",
            "XXX.level.block.SoulFireBlock",
            "XXX.level.block.SoundType",
            "XXX.level.block.SpongeBlock",
            "XXX.level.block.StainedGlassBlock",
            "XXX.level.block.StairBlock",
            "XXX.level.block.StandingSignBlock",
            "XXX.level.block.StemGrownBlock",
            "XXX.level.block.StonecutterBlock",
            "XXX.level.block.StructureBlock$1",
            "XXX.level.block.SugarCaneBlock",
            "XXX.level.block.TallFlowerBlock",
            "XXX.level.block.TallSeagrass",
            "XXX.level.block.TntBlock",
            "XXX.level.block.TrapDoorBlock",
            "XXX.level.block.TrappedChestBlock",
            "XXX.level.block.TripWireBlock$1",
            "XXX.level.block.TripWireHookBlock$1",
            "XXX.level.block.TwistingVines",
            "XXX.level.block.VineBlock",
            "XXX.level.block.WallBannerBlock",
            "XXX.level.block.WallBlock$1",
            "XXX.level.block.WallSkullBlock",
            "XXX.level.block.WaterlilyBlock",
            "XXX.level.block.WeepingVines",
            "XXX.level.block.WeightedPressurePlateBlock",
            "XXX.level.block.WitherRoseBlock",
            "XXX.level.block.WitherWallSkullBlock",
            "XXX.level.block.WoolCarpetBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity$1",
            "XXX.block.entity.BannerPattern",
            "XXX.block.entity.BarrelBlockEntity",
            "XXX.block.entity.BeaconBlockEntity",
            "XXX.block.entity.BeaconBlockEntity$BeaconBeamSection",
            "XXX.block.entity.BeehiveBlockEntity",
            "XXX.block.entity.BeehiveBlockEntity$BeeData",
            "XXX.block.entity.BellBlockEntity",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.DaylightDetectorBlockEntity",
            "XXX.block.entity.DropperBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$RuntimePiece",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$1",
            "XXX.block.entity.SignBlockEntity",
            "XXX.block.entity.SmokerBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity$1",
            "XXX.block.entity.StructureBlockEntity$1",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickableBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.AbstractStateHolder",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPattern$PortalInfo",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.state.properties.AbstractProperty",
            "XXX.level.dimension.DimensionType",
            "XXX.level.dimension.NetherDimension$1",
            "XXX.dimension.end.package-info",
            "XXX.level.levelgen.ChunkGeneratorSettings",
            "XXX.level.levelgen.GenerationStep",
            "XXX.level.levelgen.GenerationStep$Decoration",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NetherGeneratorSettings",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.OverworldGeneratorSettings",
            "XXX.level.levelgen.TheEndLevelSource",
            "XXX.level.levelgen.WorldGenSettings$1",
            "XXX.level.levelgen.WorldGenSettings$LevelType",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.DecoratedFlowerFeature",
            "XXX.levelgen.feature.DeltaFeature",
            "XXX.levelgen.feature.DesertPyramidFeature$FeatureStart",
            "XXX.levelgen.feature.DesertWellFeature",
            "XXX.levelgen.feature.EndCityFeature",
            "XXX.levelgen.feature.EndGatewayFeature",
            "XXX.levelgen.feature.EndPodiumFeature",
            "XXX.levelgen.feature.FillLayerFeature",
            "XXX.levelgen.feature.GlowstoneFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoSurfaceOreFeature",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.PlainVillagePools",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.levelgen.feature.RandomScatteredFeature",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.MegaPineFoliagePlacer",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.StructureTemplatePools",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.structure.StructureFeatureIO",
            "XXX.levelgen.structure.StructurePiece",
            "XXX.levelgen.structure.StructurePiece$BlockSelector",
            "XXX.levelgen.structure.StructureStart$1",
            "XXX.levelgen.structure.TemplateStructurePiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.BinomialDistributionGenerator$Serializer",
            "XXX.storage.loot.ConstantIntValue",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.IntLimiter$1",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.RandomIntGenerators",
            "XXX.storage.loot.RandomValueBounds$Serializer",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.CompositeEntryBase$Serializer",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Serializer",
            "XXX.loot.functions.EnchantRandomlyFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.EnchantWithLevelsFunction$1",
            "XXX.loot.functions.EnchantWithLevelsFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$1",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LimitCount$Serializer",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemConditionalFunction$Serializer",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetContainerLootTable$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNameFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AlternativeLootItemCondition",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.BonusLevelTableCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.DamageSourceCondition$Serializer",
            "XXX.loot.predicates.EntityHasScoreCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.InvertedLootItemCondition$1",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemCondition$Serializer",
            "XXX.loot.predicates.LootItemConditions$Serializer",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$1",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$1",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.storage.threaded.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.PosAndRot",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info"
          ],
          "removed": [
            "XXX.gui.components.Button$OnTooltip",
            "XXX.gui.components.Checkbox",
            "XXX.gui.components.CommandSuggestions$1",
            "XXX.gui.components.ComponentRenderUtils",
            "XXX.gui.components.ContainerObjectSelectionList$Entry",
            "XXX.gui.components.DebugScreenOverlay$1",
            "XXX.gui.components.ImageButton",
            "XXX.gui.components.LerpingBossEvent$1",
            "XXX.gui.components.LockIconButton$Icon",
            "XXX.gui.components.ObjectSelectionList$Entry",
            "XXX.gui.components.OptionsList",
            "XXX.gui.components.PlayerTabOverlay",
            "XXX.gui.components.PlayerTabOverlay$PlayerInfoComparator",
            "XXX.gui.components.SliderButton",
            "XXX.gui.components.SubtitleOverlay",
            "XXX.gui.components.TickableWidget",
            "XXX.gui.components.Widget",
            "XXX.components.events.ContainerEventHandler",
            "XXX.components.events.package-info",
            "XXX.components.spectator.SpectatorGui",
            "XXX.components.toasts.AdvancementToast",
            "XXX.components.toasts.SystemToast",
            "XXX.components.toasts.Toast",
            "XXX.components.toasts.ToastComponent",
            "XXX.components.toasts.ToastComponent$ToastInstance",
            "XXX.components.toasts.TutorialToast$Icons",
            "XXX.gui.font.AllMissingGlyphProvider",
            "XXX.gui.font.FontManager$1",
            "XXX.gui.font.FontTexture",
            "XXX.gui.font.FontTexture$Node",
            "XXX.font.glyphs.BakedGlyph",
            "XXX.font.glyphs.EmptyGlyph",
            "XXX.font.glyphs.WhiteGlyph",
            "XXX.gui.font.package-info",
            "XXX.font.providers.BitmapProvider$1",
            "XXX.font.providers.BitmapProvider$Glyph",
            "XXX.font.providers.GlyphProviderBuilderType",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$1",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$Glyph",
            "XXX.font.providers.package-info",
            "XXX.gui.screens.AccessibilityOptionsScreen",
            "XXX.gui.screens.BackupConfirmScreen",
            "XXX.gui.screens.ChatOptionsScreen",
            "XXX.gui.screens.ChatScreen$1",
            "XXX.gui.screens.ConfirmScreen",
            "XXX.gui.screens.ConnectScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList$Entry",
            "XXX.gui.screens.CreateFlatWorldScreen$1",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList$Entry",
            "XXX.gui.screens.DemoIntroScreen",
            "XXX.gui.screens.DisconnectedScreen",
            "XXX.gui.screens.ErrorScreen",
            "XXX.gui.screens.InBedChatScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList",
            "XXX.gui.screens.LevelLoadingScreen",
            "XXX.gui.screens.LoadingOverlay$LogoTexture",
            "XXX.gui.screens.MenuScreens$ScreenConstructor",
            "XXX.gui.screens.OptionsScreen",
            "XXX.gui.screens.OutOfMemoryScreen",
            "XXX.gui.screens.PauseScreen",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetInfo",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList$Entry",
            "XXX.gui.screens.ReceivingLevelScreen",
            "XXX.gui.screens.ShareToLanScreen",
            "XXX.gui.screens.SoundOptionsScreen",
            "XXX.gui.screens.VideoSettingsScreen",
            "XXX.screens.achievement.StatsScreen",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemRow",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList$MobRow",
            "XXX.screens.achievement.package-info",
            "XXX.screens.advancements.AdvancementTabType",
            "XXX.screens.advancements.AdvancementWidget",
            "XXX.screens.advancements.AdvancementsScreen",
            "XXX.screens.controls.ControlList",
            "XXX.screens.controls.ControlList$CategoryEntry",
            "XXX.screens.controls.ControlList$KeyEntry",
            "XXX.screens.controls.ControlList$KeyEntry$2",
            "XXX.screens.controls.package-info",
            "XXX.screens.debug.GameModeSwitcherScreen$1",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeSlot",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen$1",
            "XXX.screens.inventory.AbstractFurnaceScreen",
            "XXX.screens.inventory.BeaconScreen",
            "XXX.screens.inventory.BeaconScreen$BeaconCancelButton",
            "XXX.screens.inventory.BeaconScreen$BeaconPowerButton",
            "XXX.screens.inventory.BeaconScreen$BeaconSpriteScreenButton",
            "XXX.screens.inventory.BookEditScreen",
            "XXX.screens.inventory.BookEditScreen$LineInfo",
            "XXX.screens.inventory.BookViewScreen",
            "XXX.screens.inventory.BookViewScreen$BookAccess",
            "XXX.screens.inventory.BookViewScreen$WrittenBookAccess",
            "XXX.screens.inventory.CartographyTableScreen",
            "XXX.screens.inventory.CommandBlockEditScreen$1",
            "XXX.screens.inventory.CraftingScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen$ItemPickerMenu",
            "XXX.screens.inventory.DispenserScreen",
            "XXX.screens.inventory.EnchantmentNames",
            "XXX.screens.inventory.FurnaceScreen",
            "XXX.screens.inventory.HopperScreen",
            "XXX.screens.inventory.InventoryScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen",
            "XXX.screens.inventory.LecternScreen",
            "XXX.screens.inventory.LoomScreen",
            "XXX.screens.inventory.MerchantScreen",
            "XXX.screens.inventory.MinecartCommandBlockEditScreen",
            "XXX.screens.inventory.ShulkerBoxScreen",
            "XXX.screens.inventory.SmithingScreen",
            "XXX.screens.inventory.StonecutterScreen",
            "XXX.screens.inventory.StructureBlockEditScreen$1",
            "XXX.screens.inventory.package-info",
            "XXX.screens.multiplayer.JoinMultiplayerScreen",
            "XXX.screens.multiplayer.ServerSelectionList",
            "XXX.screens.multiplayer.ServerSelectionList$LANHeader",
            "XXX.screens.multiplayer.ServerSelectionList$OnlineServerEntry",
            "XXX.gui.screens.package-info",
            "XXX.screens.recipebook.BlastingRecipeBookComponent",
            "XXX.screens.recipebook.GhostRecipe$GhostIngredient",
            "XXX.screens.recipebook.OverlayRecipeComponent$OverlayRecipeButton",
            "XXX.screens.recipebook.OverlayRecipeComponent$OverlaySmeltingRecipeButton",
            "XXX.screens.recipebook.RecipeBookPage",
            "XXX.screens.recipebook.RecipeButton",
            "XXX.screens.recipebook.RecipeShownListener",
            "XXX.screens.recipebook.SmeltingRecipeBookComponent",
            "XXX.screens.recipebook.package-info",
            "XXX.resourcepacks.entries.package-info",
            "XXX.resourcepacks.lists.ResourcePackList",
            "XXX.resourcepacks.lists.SelectedResourcePackList",
            "XXX.screens.resourcepacks.package-info",
            "XXX.screens.worldselection.CreateWorldScreen",
            "XXX.screens.worldselection.CreateWorldScreen$2",
            "XXX.screens.worldselection.CreateWorldScreen$4",
            "XXX.screens.worldselection.CreateWorldScreen$SelectedGameMode",
            "XXX.screens.worldselection.EditGameRulesScreen$BooleanRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$CategoryRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$IntegerRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleList",
            "XXX.screens.worldselection.EditWorldScreen",
            "XXX.screens.worldselection.SelectWorldScreen",
            "XXX.screens.worldselection.WorldGenSettingsComponent$1",
            "XXX.screens.worldselection.WorldGenSettingsComponent$3",
            "XXX.screens.worldselection.WorldPreset$1",
            "XXX.screens.worldselection.WorldPreset$3",
            "XXX.screens.worldselection.WorldPreset$5",
            "XXX.screens.worldselection.WorldPreset$7",
            "XXX.screens.worldselection.WorldPreset$PresetEditor",
            "XXX.minecraft.core.NonNullList",
            "XXX.minecraft.core.PositionImpl",
            "XXX.minecraft.core.RegistryAccess",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.HashCache",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.HusbandryAdvancements",
            "XXX.data.advancements.StoryAdvancements",
            "XXX.data.advancements.package-info",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.ChestLoot",
            "XXX.data.loot.FishingLoot",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.PropertyValue",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BlockTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.gametest.framework.BeforeBatch",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestRunner$1",
            "XXX.gametest.framework.GameTestSequence$Condition",
            "XXX.gametest.framework.GameTestServer$1",
            "XXX.gametest.framework.GameTestTimeoutException",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.StructureUtils",
            "XXX.gametest.framework.TestClassNameArgument",
            "XXX.gametest.framework.TestCommand$TestSummaryDisplayer",
            "XXX.gametest.framework.TestFunctionArgument",
            "XXX.gametest.framework.package-info",
            "XXX.minecraft.locale.package-info",
            "XXX.minecraft.nbt.ByteArrayTag$1",
            "XXX.minecraft.nbt.ByteTag$1",
            "XXX.minecraft.nbt.CollectionTag",
            "XXX.minecraft.nbt.CompoundTag$1",
            "XXX.minecraft.nbt.DoubleTag$1",
            "XXX.minecraft.nbt.EndTag$1",
            "XXX.minecraft.nbt.FloatTag$1",
            "XXX.minecraft.nbt.IntArrayTag$1",
            "XXX.minecraft.nbt.IntTag$1",
            "XXX.minecraft.nbt.ListTag",
            "XXX.minecraft.nbt.LongArrayTag",
            "XXX.minecraft.nbt.LongTag",
            "XXX.minecraft.nbt.LongTag$Cache",
            "XXX.minecraft.nbt.NbtAccounter$1",
            "XXX.minecraft.nbt.NbtOps",
            "XXX.minecraft.nbt.NbtOps$NbtRecordBuilder",
            "XXX.minecraft.nbt.NumericTag",
            "XXX.minecraft.nbt.ShortTag$1",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.Tag",
            "XXX.minecraft.nbt.TagType",
            "XXX.minecraft.nbt.TagTypes",
            "XXX.minecraft.network.CipherBase",
            "XXX.minecraft.network.CipherEncoder",
            "XXX.minecraft.network.CompressionEncoder",
            "XXX.minecraft.network.Connection$1",
            "XXX.minecraft.network.Connection$PacketHolder",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder",
            "XXX.minecraft.network.PacketDecoder",
            "XXX.minecraft.network.PacketListener",
            "XXX.minecraft.network.Varint21FrameDecoder",
            "XXX.network.chat.BaseComponent",
            "XXX.network.chat.ClickEvent",
            "XXX.network.chat.CommonComponents",
            "XXX.network.chat.Component$ContentConsumer",
            "XXX.network.chat.Component$StyledContentConsumer",
            "XXX.network.chat.ContextAwareComponent",
            "XXX.network.chat.HoverEvent$Action",
            "XXX.network.chat.HoverEvent$ItemStackInfo",
            "XXX.network.chat.MutableComponent",
            "XXX.network.chat.NbtComponent$BlockNbtComponent",
            "XXX.network.chat.NbtComponent$StorageNbtComponent",
            "XXX.network.chat.SelectorComponent",
            "XXX.network.chat.Style$1",
            "XXX.network.chat.TextColor",
            "XXX.network.chat.TranslatableComponent",
            "XXX.network.chat.package-info",
            "XXX.network.protocol.Packet",
            "XXX.network.protocol.PacketUtils",
            "XXX.protocol.game.ClientboundAddEntityPacket",
            "XXX.protocol.game.ClientboundAddGlobalEntityPacket",
            "XXX.protocol.game.ClientboundAddPaintingPacket",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquippedItemPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.realms.DisconnectedRealmsScreen",
            "XXX.minecraft.realms.RealmsBridge",
            "XXX.minecraft.realms.RealmsConnect$1",
            "XXX.minecraft.realms.RealmsObjectSelectionList",
            "XXX.minecraft.realms.RealmsServerAddress",
            "XXX.minecraft.realms.RepeatedNarrator$Params",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.ServerPlaceSmeltingRecipe",
            "XXX.minecraft.resources.ResourceKey",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerMap",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.FastColor",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HttpUtil",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.LimitedCapacityList",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory",
            "XXX.minecraft.util.Mth",
            "XXX.minecraft.util.RewindableStream",
            "XXX.minecraft.util.SmoothDouble",
            "XXX.minecraft.util.SortedArraySet$1",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.StringRepresentable$2",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.PackedBitStorage",
            "XXX.datafix.fixes.OminousBannerRenameFix",
            "XXX.datafix.fixes.WorldGenSettingsFix$StructureFeatureConfiguration",
            "XXX.datafix.schemas.NamespacedSchema$1",
            "XXX.datafix.schemas.V102",
            "XXX.datafix.schemas.V106",
            "XXX.datafix.schemas.V1125",
            "XXX.datafix.schemas.V143",
            "XXX.datafix.schemas.V1451_1",
            "XXX.datafix.schemas.V1451_3",
            "XXX.datafix.schemas.V1451_5",
            "XXX.datafix.schemas.V1451_7",
            "XXX.datafix.schemas.V1466",
            "XXX.datafix.schemas.V1481",
            "XXX.datafix.schemas.V1486",
            "XXX.datafix.schemas.V1800",
            "XXX.datafix.schemas.V1904",
            "XXX.datafix.schemas.V1909",
            "XXX.datafix.schemas.V1928",
            "XXX.datafix.schemas.V1931",
            "XXX.datafix.schemas.V2501",
            "XXX.datafix.schemas.V2505",
            "XXX.datafix.schemas.V2519",
            "XXX.datafix.schemas.V2551",
            "XXX.entity.ai.Brain$1",
            "XXX.entity.ai.Brain$Provider",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.CrossbowAttack$CrossbowState",
            "XXX.ai.behavior.DoNothing",
            "XXX.ai.behavior.EraseMemoryIf",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.GateBehavior$RunningPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$2",
            "XXX.ai.behavior.GoOutsideToCelebrate",
            "XXX.ai.behavior.GoToClosestVillage",
            "XXX.ai.behavior.HarvestFarmland",
            "XXX.ai.behavior.InteractWith",
            "XXX.ai.behavior.JumpOnBed",
            "XXX.ai.behavior.LocateHidingPlaceDuringRaid",
            "XXX.ai.behavior.LookAtTargetSink",
            "XXX.ai.behavior.Mount",
            "XXX.ai.behavior.MoveToTargetSink",
            "XXX.ai.behavior.PositionTracker",
            "XXX.ai.behavior.ReactToBell",
            "XXX.ai.behavior.ResetRaidStatus",
            "XXX.ai.behavior.RunIf",
            "XXX.ai.behavior.RunSometimes",
            "XXX.ai.behavior.SetEntityLookTarget",
            "XXX.ai.behavior.SetLookAndInteract",
            "XXX.ai.behavior.SetWalkTargetAwayFrom",
            "XXX.ai.behavior.SetWalkTargetFromBlockMemory",
            "XXX.ai.behavior.ShowTradesToPlayer",
            "XXX.ai.behavior.SocializeAtBell",
            "XXX.ai.behavior.StartCelebratingIfTargetDead",
            "XXX.ai.behavior.StopBeingAngryIfTargetDead",
            "XXX.ai.behavior.StrollToPoi",
            "XXX.ai.behavior.Swim",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WeightedList",
            "XXX.ai.behavior.WeightedList$WeightedEntry",
            "XXX.world.level.LevelAccessor",
            "XXX.world.level.LevelSettings",
            "XXX.world.level.LevelSimulatedReader",
            "XXX.world.level.LightLayer",
            "XXX.world.level.NaturalSpawner$1",
            "XXX.world.level.NaturalSpawner$ChunkGetter",
            "XXX.world.level.NaturalSpawner$SpawnState",
            "XXX.world.level.PathNavigationRegion",
            "XXX.world.level.PotentialCalculator",
            "XXX.world.level.ServerTickList",
            "XXX.world.level.StructureFeatureManager",
            "XXX.world.level.TickNextTickData",
            "XXX.world.level.WorldGenLevel",
            "XXX.level.biome.AmbientMoodSettings",
            "XXX.level.biome.BadlandsBiome",
            "XXX.level.biome.BambooJungleBiome",
            "XXX.level.biome.BasaltDeltasBiome",
            "XXX.level.biome.Biome",
            "XXX.level.biome.Biome$BiomeBuilder",
            "XXX.level.biome.Biome$BiomeTempCategory",
            "XXX.level.biome.Biome$MobSpawnCost",
            "XXX.level.biome.Biome$SpawnerData",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.MultiNoiseBiomeSource$Preset",
            "XXX.level.biome.MushroomFieldsShoreBiome",
            "XXX.level.biome.NetherWastesBiome",
            "XXX.level.biome.OverworldBiomeSource",
            "XXX.level.biome.RiverBiome",
            "XXX.level.biome.SavannaPlateauBiome",
            "XXX.level.biome.ShatteredSavannaPlateauBiome",
            "XXX.level.biome.SnowyBeachBiome",
            "XXX.level.biome.SnowyTaigaBiome",
            "XXX.level.biome.SnowyTaigaMountainsBiome",
            "XXX.level.biome.SoulSandValleyBiome",
            "XXX.level.biome.SunflowerPlainsBiome",
            "XXX.level.biome.SwampHillsBiome",
            "XXX.level.biome.TaigaHillsBiome",
            "XXX.level.biome.TallBirchForestBiome",
            "XXX.level.biome.TheEndBiome",
            "XXX.level.biome.TheVoidBiome",
            "XXX.level.biome.WarpedForestBiome",
            "XXX.level.biome.WoodedHillsBiome",
            "XXX.level.biome.package-info",
            "XXX.level.block.AbstractChestBlock",
            "XXX.level.block.AbstractGlassBlock",
            "XXX.level.block.AirBlock",
            "XXX.level.block.AttachedStemBlock",
            "XXX.level.block.BambooSaplingBlock",
            "XXX.level.block.BarrelBlock",
            "XXX.level.block.BaseCoralFanBlock",
            "XXX.level.block.BaseCoralPlantTypeBlock",
            "XXX.level.block.BaseEntityBlock",
            "XXX.level.block.BasePressurePlateBlock",
            "XXX.level.block.BaseRailBlock$1",
            "XXX.level.block.BeaconBlock",
            "XXX.level.block.BedBlock$1",
            "XXX.level.block.BeetrootBlock",
            "XXX.level.block.BellBlock$1",
            "XXX.level.block.Block",
            "XXX.level.block.Block$2",
            "XXX.level.block.Blocks",
            "XXX.level.block.BrewingStandBlock",
            "XXX.level.block.BucketPickup",
            "XXX.level.block.ButtonBlock",
            "XXX.level.block.CactusBlock",
            "XXX.level.block.CampfireBlock",
            "XXX.level.block.CartographyTableBlock",
            "XXX.level.block.CauldronBlock",
            "XXX.level.block.ChestBlock",
            "XXX.level.block.ChestBlock$2",
            "XXX.level.block.ChestBlock$3",
            "XXX.level.block.ChorusFlowerBlock",
            "XXX.level.block.CocoaBlock",
            "XXX.level.block.CommandBlock",
            "XXX.level.block.ComposterBlock",
            "XXX.level.block.ComposterBlock$InputContainer",
            "XXX.level.block.ConcretePowderBlock",
            "XXX.level.block.CoralBlock",
            "XXX.level.block.CoralPlantBlock",
            "XXX.level.block.CraftingTableBlock",
            "XXX.level.block.CrossCollisionBlock",
            "XXX.level.block.CryingObsidianBlock",
            "XXX.level.block.DeadBushBlock",
            "XXX.level.block.DetectorRailBlock$1",
            "XXX.level.block.DirectionalBlock",
            "XXX.level.block.DoorBlock",
            "XXX.level.block.DoubleBlockCombiner",
            "XXX.level.block.DoubleBlockCombiner$Combiner",
            "XXX.level.block.DoubleBlockCombiner$NeighborCombineResult$Double",
            "XXX.level.block.DoublePlantBlock",
            "XXX.level.block.DropperBlock",
            "XXX.level.block.EndGatewayBlock",
            "XXX.level.block.EndPortalFrameBlock",
            "XXX.level.block.EndRodBlock$1",
            "XXX.level.block.EntityBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock$1",
            "XXX.level.block.FarmBlock",
            "XXX.level.block.FenceGateBlock",
            "XXX.level.block.FireBlock",
            "XXX.level.block.FlowerBlock",
            "XXX.level.block.FrostedIceBlock",
            "XXX.level.block.FurnaceBlock",
            "XXX.level.block.GlazedTerracottaBlock",
            "XXX.level.block.GrassPathBlock",
            "XXX.level.block.GrindstoneBlock",
            "XXX.level.block.GrowingPlantBlock",
            "XXX.level.block.GrowingPlantHeadBlock",
            "XXX.level.block.HayBlock",
            "XXX.level.block.HopperBlock",
            "XXX.level.block.HorizontalDirectionalBlock",
            "XXX.level.block.IceBlock",
            "XXX.level.block.IronBarsBlock",
            "XXX.level.block.JukeboxBlock",
            "XXX.level.block.KelpPlantBlock",
            "XXX.level.block.LadderBlock$1",
            "XXX.level.block.LeavesBlock",
            "XXX.level.block.LecternBlock$1",
            "XXX.level.block.LeverBlock",
            "XXX.level.block.LiquidBlock",
            "XXX.level.block.LoomBlock",
            "XXX.level.block.MelonBlock",
            "XXX.level.block.Mirror$1",
            "XXX.level.block.MyceliumBlock",
            "XXX.level.block.NetherPortalBlock$1",
            "XXX.level.block.NetherSproutsBlock",
            "XXX.level.block.NetherWartBlock",
            "XXX.level.block.NoteBlock",
            "XXX.level.block.ObserverBlock",
            "XXX.level.block.PipeBlock",
            "XXX.level.block.PlayerWallHeadBlock",
            "XXX.level.block.PoweredBlock",
            "XXX.level.block.PoweredRailBlock$1",
            "XXX.level.block.PressurePlateBlock$1",
            "XXX.level.block.PumpkinBlock",
            "XXX.level.block.RailBlock$1",
            "XXX.level.block.RailState$1",
            "XXX.level.block.RedStoneWireBlock",
            "XXX.level.block.RedstoneLampBlock",
            "XXX.level.block.RedstoneTorchBlock$Toggle",
            "XXX.level.block.RenderShape",
            "XXX.level.block.RespawnAnchorBlock",
            "XXX.level.block.RotatedPillarBlock",
            "XXX.level.block.Rotation",
            "XXX.level.block.SandBlock",
            "XXX.level.block.ScaffoldingBlock",
            "XXX.level.block.Seagrass",
            "XXX.level.block.ShulkerBoxBlock",
            "XXX.level.block.SignBlock",
            "XXX.level.block.SkullBlock",
            "XXX.level.block.SkullBlock$Types",
            "XXX.level.block.SlabBlock$1",
            "XXX.level.block.SmithingTableBlock",
            "XXX.level.block.SnowLayerBlock",
            "XXX.level.block.SnowyDirtBlock",
            "XXX.level.block.SoulSandBlock",
            "XXX.level.block.SpawnerBlock",
            "XXX.level.block.SpreadingSnowyDirtBlock",
            "XXX.level.block.StainedGlassPaneBlock",
            "XXX.level.block.StairBlock$1",
            "XXX.level.block.StemBlock",
            "XXX.level.block.StoneButtonBlock",
            "XXX.level.block.StructureBlock",
            "XXX.level.block.StructureVoidBlock",
            "XXX.level.block.SweetBerryBushBlock",
            "XXX.level.block.TallGrassBlock",
            "XXX.level.block.TargetBlock",
            "XXX.level.block.TorchBlock",
            "XXX.level.block.TrapDoorBlock$1",
            "XXX.level.block.TripWireBlock",
            "XXX.level.block.TripWireHookBlock",
            "XXX.level.block.TurtleEggBlock",
            "XXX.level.block.TwistingVinesPlant",
            "XXX.level.block.VineBlock$1",
            "XXX.level.block.WallBlock",
            "XXX.level.block.WallSignBlock",
            "XXX.level.block.WallTorchBlock",
            "XXX.level.block.WebBlock",
            "XXX.level.block.WeepingVinesPlant",
            "XXX.level.block.WetSpongeBlock",
            "XXX.level.block.WitherSkullBlock",
            "XXX.level.block.WoodButtonBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity",
            "XXX.block.entity.BannerBlockEntity",
            "XXX.block.entity.BannerPattern$Builder",
            "XXX.block.entity.BaseContainerBlockEntity",
            "XXX.block.entity.BeaconBlockEntity$1",
            "XXX.block.entity.BedBlockEntity",
            "XXX.block.entity.BeehiveBlockEntity$1",
            "XXX.block.entity.BeehiveBlockEntity$BeeReleaseStatus",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BlockEntityType",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.DispenserBlockEntity",
            "XXX.block.entity.EnchantmentTableBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$AnimationStatus",
            "XXX.block.entity.SkullBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity",
            "XXX.block.entity.StructureBlockEntity",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.level.dimension.package-info",
            "XXX.level.levelgen.GenerationStep$Carving",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NoiseGeneratorSettings",
            "XXX.level.levelgen.NoiseGeneratorSettings$Preset",
            "XXX.level.levelgen.NoiseSettings",
            "XXX.level.levelgen.StructureSettings",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.DecoratedFeature",
            "XXX.levelgen.feature.DefaultFlowerFeature",
            "XXX.levelgen.feature.DesertPyramidFeature",
            "XXX.levelgen.feature.DesertVillagePools",
            "XXX.levelgen.feature.DiskReplaceFeature",
            "XXX.levelgen.feature.EndCityFeature$EndCityStart",
            "XXX.levelgen.feature.EndIslandFeature",
            "XXX.levelgen.feature.Feature",
            "XXX.levelgen.feature.FossilFeature",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.PillagerOutpostFeature$FeatureStart",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomRandomFeature",
            "XXX.feature.configurations.StructureFeatureConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacer$FoliageAttachment",
            "XXX.feature.foliageplacers.MegaJungleFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.levelgen.structure.StructureFeatureIndexSavedData",
            "XXX.levelgen.structure.StructurePiece$1",
            "XXX.levelgen.structure.StructureStart",
            "XXX.levelgen.structure.SwamplandHutPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BinomialDistributionGenerator",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.ConstantIntValue$Serializer",
            "XXX.storage.loot.IntLimiter",
            "XXX.storage.loot.IntLimiter$Serializer",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.RandomIntGenerator",
            "XXX.storage.loot.RandomValueBounds",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntries$Serializer",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$DataSource",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunction$Serializer",
            "XXX.loot.functions.LootItemFunctions$Serializer",
            "XXX.loot.functions.LootingEnchantFunction$1",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$1",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetContainerLootTable$1",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetItemCountFunction$Serializer",
            "XXX.loot.functions.SetItemDamageFunction$1",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNameFunction$1",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.SetStewEffectFunction$1",
            "XXX.loot.functions.SetStewEffectFunction$Serializer",
            "XXX.loot.functions.SmeltItemFunction$1",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$1",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AlternativeLootItemCondition$1",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.BonusLevelTableCondition$1",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.InvertedLootItemCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.TimeCheck$Serializer",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$1",
            "XXX.level.timers.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.IntPointRange",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.WorldRegionIndirectVoxelShape",
            "XXX.world.scores.Objective",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "net.minecraft.SharedConstants \u001b[2;32m+1P\u001b[0m",
          "XXX.advancements.critereon.ChangeDimensionTrigger$TriggerInstance \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.advancements.critereon.LocationPredicate \u001b[2;32m+5M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.client.Minecraft \u001b[2;32m+4M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.client.gui.GuiComponent \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.chat.ChatListener \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gui.chat.OverlayChatListener \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.components.Button \u001b[2;32m+5M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.client.multiplayer.ClientLevel \u001b[2;32m+3M\u001b[0m",
          "XXX.minecraft.commands.CommandSource$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.commands.SharedSuggestionProvider \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.BlockPos \u001b[2;32m+3M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.Direction$Axis \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.GlobalPos \u001b[2;32m+5M\u001b[0m \u001b[2;31m-8M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.core.SerializableUUID \u001b[2;32m+6M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.Vec3i \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.core.particles.BlockParticleOption \u001b[2;32m+3M\u001b[0m",
          "XXX.core.particles.DustParticleOptions \u001b[2;32m+5M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.core.particles.ItemParticleOption \u001b[2;32m+3M\u001b[0m",
          "XXX.core.particles.ParticleType \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.server.Main \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.server.MinecraftServer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.server.commands.LocateCommand \u001b[2;32m+3M\u001b[0m \u001b[2;31m-20M\u001b[0m",
          "XXX.server.commands.SpreadPlayersCommand \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.server.dedicated.DedicatedPlayerList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerLevel \u001b[2;32m+10M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.server.rcon.RconConsoleSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.sounds.Music \u001b[2;32m+6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.sounds.SoundEvent \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.datafix.fixes.AddNewChoices \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.AdvancementsRenameFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.BedBlockEntityInjecter \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.BitStorageAlignFix \u001b[2;32m+7M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityIdFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityKeepPacked \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.BlockEntityUUIDFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.BlockRenameFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.BlockRenameFixWithJigsaw \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.BlockStateData \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.datafix.fixes.CatTypeFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ChunkLightRemoveFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk \u001b[2;32m+8M\u001b[0m \u001b[2;31m-8M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.ChunkToProtochunkFix \u001b[2;32m+8M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.datafix.fixes.EntityBlockStateFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.EntityElderGuardianSplitFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityHealthFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityItemFrameDirectionFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityPaintingItemFrameDirectionFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.EntityProjectileOwnerFix \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.datafix.fixes.EntityRenameFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.EntityShulkerColorFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntitySkeletonSplitFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.EntityUUIDFix \u001b[2;32m+28M\u001b[0m \u001b[2;31m-28M\u001b[0m",
          "XXX.datafix.fixes.EntityZombieSplitFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.FurnaceRecipeFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.HeightmapRenamingFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.ItemSpawnEggFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.JigsawPropertiesFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.LeavesFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.LeavesFix$Section \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.LevelFlatGeneratorInfoFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.MapIdFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.MobSpawnerEntityIdentifiersFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.NewVillageFix \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.datafix.fixes.ObjectiveRenderTypeFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.OptionsForceVBOFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.OptionsKeyTranslationFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.PlayerUUIDFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.References \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.ReorganizePoi \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.SavedDataVillageCropFix \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.datafix.fixes.SimplestEntityRenameFix \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.datafix.fixes.StriderGravityFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.VillagerRebuildLevelAndXpFix \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.datafix.fixes.WallPropertyFix \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.datafix.fixes.ZombieVillagerRebuildXpFix \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.schemas.V99$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.util.worldupdate.WorldUpgrader \u001b[2;32m+6M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.world.entity.EntityType \u001b[2;31m-1M\u001b[0m",
          "XXX.world.entity.LivingEntity \u001b[2;32m+10M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.world.entity.MobCategory \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.ai.gossip.GossipContainer$GossipEntry \u001b[2;32m+3M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.ai.memory.MemoryModuleType \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.village.poi.PoiRecord \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.animal.horse.AbstractHorse \u001b[2;32m+1M\u001b[0m",
          "XXX.animal.horse.Horse \u001b[2;32m+1M\u001b[0m",
          "XXX.animal.horse.Llama \u001b[2;32m+1M\u001b[0m",
          "XXX.animal.horse.Mule \u001b[2;32m+2M\u001b[0m",
          "XXX.entity.item.ItemEntity \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Zoglin \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.ZombieVillager \u001b[2;32m+1M\u001b[0m",
          "XXX.monster.hoglin.Hoglin \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.npc.AbstractVillager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.npc.VillagerData \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.vehicle.AbstractMinecartContainer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.MapItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.BaseCommandBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.Level \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.biome.CheckerboardColumnBiomeSource \u001b[2;32m+6M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.biome.CrimsonForestBiome \u001b[2;31m-3M\u001b[0m",
          "XXX.block.state.StateHolder \u001b[2;32m+15M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+5P\u001b[0m \u001b[2;31m-8P\u001b[0m",
          "XXX.level.chunk.ChunkAccess \u001b[2;31m-1M\u001b[0m",
          "XXX.level.chunk.ChunkGenerator \u001b[2;32m+9M\u001b[0m \u001b[2;31m-10M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.chunk.ImposterProtoChunk \u001b[2;32m+1M\u001b[0m",
          "XXX.level.levelgen.FlatLevelSource \u001b[2;32m+3M\u001b[0m \u001b[2;31m-7M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.levelgen.carver.CarverConfiguration \u001b[2;31m-1P\u001b[0m",
          "XXX.levelgen.carver.ConfiguredWorldCarver \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.carver.NoneCarverConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.levelgen.carver.UnderwaterCaveWorldCarver \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.AbstractHugeMushroomFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BasaltColumnsFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BastionFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BlockPileFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BonusChestFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.ConfiguredFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.levelgen.feature.ReplaceBlobsFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.RuinedPortalFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.feature.RuinedPortalFeature$Type \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.feature.SeaPickleFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.ShipwreckFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.feature.SimpleBlockFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.StrongholdFeature \u001b[2;32m+3M\u001b[0m \u001b[2;31m-9M\u001b[0m | \u001b[2;31m-4P\u001b[0m",
          "XXX.levelgen.feature.StructureFeature \u001b[2;32m+17M\u001b[0m \u001b[2;31m-18M\u001b[0m | \u001b[2;32m+22P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.levelgen.feature.SwamplandHutFeature$FeatureStart \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.TreeFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.VillageFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.levelgen.feature.VinesFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.WeepingVinesFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.WoodlandMansionFeature \u001b[2;32m+3M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.feature.blockplacers.BlockPlacer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.blockplacers.ColumnPlacer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.blockplacers.SimpleBlockPlacer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.feature.configurations.BlockBlobConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.BlockStateConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ChanceRangeDecoratorConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.CountRangeDecoratorConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.DecoratorConfiguration \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.configurations.EndGatewayConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.FeatureRadiusConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.JigsawConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.MineshaftConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.NoiseDependantDecoratorConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.NoneFeatureConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.feature.configurations.OreConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ProbabilityFeatureConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.RandomFeatureConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.RandomRandomFeatureConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ReplaceSpheroidConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.RuinedPortalConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.ShipwreckConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.SimpleRandomFeatureConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.configurations.SpringConfiguration \u001b[2;32m+7M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.featuresize.FeatureSize \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.featuresize.ThreeLayersFeatureSize \u001b[2;32m+8M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.BlobFoliagePlacer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.DarkOakFoliagePlacer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.feature.foliageplacers.FoliagePlacer \u001b[2;32m+7M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.levelgen.placement.CarvingMaskDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ChanceDecoratorConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.ChanceHeightmapDoubleDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ChanceTopSolidHeightmapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ConfiguredDecorator \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.CountChanceHeightmapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountDepthAverageDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountHeight64Decorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountHeightmapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.CountVeryBiasedRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.DarkOakTreePlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.EmeraldPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.EndIslandPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.ForestRockPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.FrequencyDecoratorConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.IcebergPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.LakeWaterPlacementDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.NoiseCountFactorDecoratorConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.levelgen.placement.NoiseHeightmapDoubleDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.RangeDecoratorConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.placement.TopSolidHeightMapDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.placement.TopSolidHeightMapRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.CountRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.LightGemChanceDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.placement.nether.RandomCountRangeDecorator \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.IglooPieces \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.NetherFossilFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.structure.OceanRuinFeature \u001b[2;32m+1M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.structure.OceanRuinFeature$Type \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.structure.RuinedPortalPiece \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.storage.LevelStorageSource \u001b[2;32m+8M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.level.storage.LevelSummary \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-10P\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance",
        "differences": {
          "added": [
            "void <init>(EntityPredicate$Composite,DimensionType,DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimension(DimensionType,DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionTo(DimensionType)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(DimensionType)",
            "boolean matches(DimensionType,DimensionType)"
          ],
          "removed": [
            "void <init>(EntityPredicate$Composite,ResourceKey,ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimension(ResourceKey,ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionTo(ResourceKey)",
            "ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(ResourceKey)",
            "boolean matches(ResourceKey,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.LocationPredicate",
        "differences": {
          "added": [
            "void <init>(MinMaxBounds$Floats,MinMaxBounds$Floats,MinMaxBounds$Floats,Biome,StructureFeature,DimensionType,Boolean,LightPredicate,BlockPredicate,FluidPredicate)",
            "LocationPredicate inDimension(DimensionType)",
            "JsonSyntaxException lambda$fromJson$0(ResourceLocation)"
          ],
          "removed": [
            "void <init>(MinMaxBounds$Floats,MinMaxBounds$Floats,MinMaxBounds$Floats,Biome,StructureFeature,ResourceKey,Boolean,LightPredicate,BlockPredicate,FluidPredicate)",
            "LocationPredicate inDimension(ResourceKey)",
            "JsonSyntaxException lambda$fromJson$2(ResourceLocation)",
            "ResourceKey lambda$fromJson$1(ResourceLocation)",
            "void lambda$serializeToJson$0(JsonObject,JsonElement)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.Minecraft",
        "differences": {
          "added": [],
          "removed": [
            "void openChatScreen(String)",
            "boolean allowsMultiplayer()",
            "boolean isBlocked(UUID)",
            "boolean allowsChat()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.GuiComponent",
        "differences": {
          "added": [
            "void fillGradient(Matrix4f,int,int,int,int,int,int)"
          ],
          "removed": [
            "void fillGradient(Matrix4f,BufferBuilder,int,int,int,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.chat.OverlayChatListener",
        "differences": {
          "added": [
            "void handle(ChatType,Component)"
          ],
          "removed": [
            "void handle(ChatType,Component,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.components.Button",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(int,int,int,int,Component,Button$OnPress,Button$OnTooltip)",
            "void renderButton(PoseStack,int,int,float)",
            "void renderToolTip(PoseStack,int,int)",
            "void lambda$static$0(Button,PoseStack,int,int)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientLevel",
        "differences": {
          "added": [],
          "removed": [
            "void tickTime()",
            "void setGameTime(long)",
            "RegistryAccess registryAccess()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.CommandSource$1",
        "differences": {
          "added": [
            "void sendMessage(Component)"
          ],
          "removed": [
            "void sendMessage(Component,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.BlockPos",
        "differences": {
          "added": [
            "BlockPos deserialize(Dynamic)",
            "Object serialize(DynamicOps)",
            "void lambda$deserialize$2(int[],int)",
            "void lambda$deserialize$1(int[],int)",
            "void lambda$deserialize$0(int[],int)"
          ],
          "removed": [
            "IntStream lambda$static$2(BlockPos)",
            "DataResult lambda$static$1(IntStream)",
            "BlockPos lambda$null$0(int[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.GlobalPos",
        "differences": {
          "added": [
            "void <init>(DimensionType,BlockPos)",
            "GlobalPos of(DimensionType,BlockPos)",
            "GlobalPos of(Dynamic)",
            "DimensionType dimension()",
            "Object serialize(DynamicOps)",
            "IllegalArgumentException lambda$of$2()",
            "Optional lambda$of$1(Dynamic,DimensionType)",
            "GlobalPos lambda$null$0(DimensionType,BlockPos)"
          ],
          "removed": [
            "void <init>(ResourceKey,BlockPos)",
            "GlobalPos of(ResourceKey,BlockPos)",
            "ResourceKey dimension()",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.SerializableUUID",
        "differences": {
          "added": [
            "Object serialize(DynamicOps)",
            "SerializableUUID of(Dynamic)",
            "UUID readUUID(Dynamic)",
            "Object serialize(DynamicOps,UUID)"
          ],
          "removed": [
            "SerializableUUID of(Dynamic)",
            "UUID readUUID(Dynamic)",
            "IntStream lambda$static$2(SerializableUUID)",
            "DataResult lambda$static$1(IntStream)",
            "SerializableUUID lambda$null$0(int[])",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Vec3i",
        "differences": {
          "added": [],
          "removed": [
            "IntStream lambda$static$2(Vec3i)",
            "DataResult lambda$static$1(IntStream)",
            "Vec3i lambda$null$0(int[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.BlockParticleOption",
        "differences": {
          "added": [],
          "removed": [
            "Codec codec(ParticleType)",
            "BlockState lambda$codec$1(BlockParticleOption)",
            "BlockParticleOption lambda$codec$0(ParticleType,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.DustParticleOptions",
        "differences": {
          "added": [],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Float lambda$null$3(DustParticleOptions)",
            "Float lambda$null$2(DustParticleOptions)",
            "Float lambda$null$1(DustParticleOptions)",
            "Float lambda$null$0(DustParticleOptions)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.ItemParticleOption",
        "differences": {
          "added": [],
          "removed": [
            "Codec codec(ParticleType)",
            "ItemStack lambda$codec$1(ItemParticleOption)",
            "ItemParticleOption lambda$codec$0(ParticleType,ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.Main",
        "differences": {
          "added": [],
          "removed": [
            "void forceUpgrade(LevelStorageSource$LevelStorageAccess,DataFixer,boolean,BooleanSupplier)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.MinecraftServer",
        "differences": {
          "added": [
            "void ensureLevelConversion(LevelStorageSource$LevelStorageAccess,DataFixer,boolean,boolean,BooleanSupplier)",
            "void setInitialSpawn(ServerLevel,Dimension,ServerLevelData,boolean,boolean)",
            "ServerLevel getLevel(DimensionType)",
            "void sendMessage(Component)"
          ],
          "removed": [
            "void convertFromRegionFormatIfNeeded(LevelStorageSource$LevelStorageAccess)",
            "void setInitialSpawn(ServerLevel,ServerLevelData,boolean,boolean,boolean)",
            "ServerLevel getLevel(ResourceKey)",
            "void sendMessage(Component,UUID)",
            "RegistryAccess registryAccess()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.LocateCommand",
        "differences": {
          "added": [
            "int locate(CommandSourceStack,String)",
            "Style lambda$showLocateResult$19(BlockPos,Style)",
            "int lambda$register$18(CommandContext)",
            "int lambda$register$17(CommandContext)",
            "int lambda$register$16(CommandContext)",
            "int lambda$register$15(CommandContext)",
            "int lambda$register$14(CommandContext)",
            "int lambda$register$13(CommandContext)",
            "int lambda$register$12(CommandContext)",
            "int lambda$register$11(CommandContext)",
            "int lambda$register$10(CommandContext)",
            "int lambda$register$9(CommandContext)",
            "int lambda$register$8(CommandContext)",
            "int lambda$register$7(CommandContext)",
            "int lambda$register$6(CommandContext)",
            "int lambda$register$5(CommandContext)",
            "int lambda$register$4(CommandContext)",
            "int lambda$register$3(CommandContext)",
            "int lambda$register$2(CommandContext)",
            "int lambda$register$1(CommandContext)"
          ],
          "removed": [
            "int locate(CommandSourceStack,StructureFeature)",
            "Style lambda$showLocateResult$2(BlockPos,Style)",
            "int lambda$register$1(Map$Entry,CommandContext)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.SpreadPlayersCommand",
        "differences": {
          "added": [
            "int spreadPlayers(CommandSourceStack,Vec2,float,float,boolean,Collection)",
            "void spreadPositions(Vec2,double,ServerLevel,Random,double,double,double,double,SpreadPlayersCommand$Position[],boolean)",
            "double setPlayerPositions(Collection,ServerLevel,SpreadPlayersCommand$Position[],boolean)"
          ],
          "removed": [
            "int spreadPlayers(CommandSourceStack,Vec2,float,float,int,boolean,Collection)",
            "void spreadPositions(Vec2,double,ServerLevel,Random,double,double,double,double,int,SpreadPlayersCommand$Position[],boolean)",
            "double setPlayerPositions(Collection,ServerLevel,SpreadPlayersCommand$Position[],int,boolean)",
            "int lambda$register$4(CommandContext)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.DedicatedPlayerList",
        "differences": {
          "added": [
            "void <init>(DedicatedServer,PlayerDataStorage)"
          ],
          "removed": [
            "void <init>(DedicatedServer,RegistryAccess$RegistryHolder,PlayerDataStorage)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerLevel",
        "differences": {
          "added": [
            "void <init>(MinecraftServer,Executor,LevelStorageSource$LevelStorageAccess,ServerLevelData,DimensionType,ChunkProgressListener,ChunkGenerator,boolean,long)",
            "BlockPos getDimensionSpecificSpawn()",
            "BlockPos findNearestMapFeature(String,BlockPos,int,boolean)",
            "void setGameTime(long)"
          ],
          "removed": [
            "void <init>(MinecraftServer,Executor,LevelStorageSource$LevelStorageAccess,ServerLevelData,DimensionType,ChunkProgressListener,ChunkGenerator,boolean,long,List,boolean)",
            "void tickTime()",
            "void setDayTime(long)",
            "void tickCustomSpawners(boolean,boolean)",
            "BlockPos findNearestMapFeature(StructureFeature,BlockPos,int,boolean)",
            "RegistryAccess registryAccess()",
            "EndDragonFight dragonFight()",
            "void makeObsidianPlatform(ServerLevel)",
            "void lambda$makeObsidianPlatform$17(ServerLevel,BlockPos)",
            "void lambda$makeObsidianPlatform$16(ServerLevel,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.rcon.RconConsoleSource",
        "differences": {
          "added": [
            "void sendMessage(Component)"
          ],
          "removed": [
            "void sendMessage(Component,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.sounds.Music",
        "differences": {
          "added": [],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Boolean lambda$null$3(Music)",
            "Integer lambda$null$2(Music)",
            "Integer lambda$null$1(Music)",
            "SoundEvent lambda$null$0(Music)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.sounds.SoundEvent",
        "differences": {
          "added": [],
          "removed": [
            "ResourceLocation lambda$static$0(SoundEvent)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.AddNewChoices",
        "differences": {
          "added": [
            "Function lambda$cap$1(TaggedChoice$TaggedChoiceType,DynamicOps)"
          ],
          "removed": [
            "Function lambda$cap$1(TaggedChoice$TaggedChoiceType,DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.AdvancementsRenameFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Pair lambda$null$1(Dynamic,Pair)",
            "Dynamic lambda$null$0(Dynamic,String,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Pair lambda$null$1(Dynamic,Pair)",
            "Dynamic lambda$null$0(Dynamic,String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BedBlockEntityInjecter",
        "differences": {
          "added": [
            "Integer lambda$null$2(Dynamic)",
            "Function lambda$cap$1(DynamicOps)"
          ],
          "removed": [
            "Integer lambda$null$2(Dynamic)",
            "Function lambda$cap$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BitStorageAlignFix",
        "differences": {
          "added": [
            "Dynamic updateBitStorage(Dynamic,Dynamic,int,int)",
            "Dynamic lambda$null$8(int,Dynamic)",
            "Dynamic lambda$null$7(Dynamic,int,Dynamic)",
            "Dynamic lambda$updateHeightmaps$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic,Dynamic)",
            "Pair lambda$null$3(Dynamic,Pair)",
            "Dynamic lambda$null$2(Dynamic,Dynamic)"
          ],
          "removed": [
            "Dynamic updateBitStorage(Dynamic,Dynamic,int,int)",
            "Dynamic lambda$null$8(int,Dynamic)",
            "Dynamic lambda$null$7(Dynamic,int,Dynamic)",
            "Dynamic lambda$updateHeightmaps$5(Dynamic)",
            "Dynamic lambda$null$4(Dynamic,Dynamic)",
            "Pair lambda$null$3(Dynamic,Pair)",
            "Dynamic lambda$null$2(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityIdFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$3(DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$3(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityKeepPacked",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix",
        "differences": {
          "added": [
            "Dynamic updateLine(Dynamic,String)",
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic updateLine(Dynamic,String)",
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntityUUIDFix",
        "differences": {
          "added": [
            "Dynamic updateSkull(Dynamic)",
            "Dynamic updateConduit(Dynamic)",
            "Dynamic lambda$updateSkull$2(Dynamic,Dynamic)",
            "Dynamic lambda$updateSkull$1(Dynamic)"
          ],
          "removed": [
            "Dynamic updateSkull(Dynamic)",
            "Dynamic updateConduit(Dynamic)",
            "Dynamic lambda$updateSkull$2(Dynamic,Dynamic)",
            "Dynamic lambda$updateSkull$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockRenameFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockRenameFixWithJigsaw",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockStateData",
        "differences": {
          "added": [
            "Dynamic upgradeBlockStateTag(Dynamic)",
            "Dynamic parse(String)",
            "Dynamic getTag(int)"
          ],
          "removed": [
            "Dynamic upgradeBlockStateTag(Dynamic)",
            "Dynamic parse(String)",
            "Dynamic getTag(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.CatTypeFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkLightRemoveFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Dynamic getBlockEntity(int)",
            "Dynamic removeBlockEntity(int)",
            "void setBlock(int,Dynamic)",
            "Dynamic getBlock(int)",
            "Dynamic write()",
            "void lambda$null$2(Dynamic)",
            "void lambda$null$0(Dynamic)"
          ],
          "removed": [
            "void <init>(Dynamic)",
            "Dynamic getBlockEntity(int)",
            "Dynamic removeBlockEntity(int)",
            "void setBlock(int,Dynamic)",
            "Dynamic getBlock(int)",
            "Dynamic write()",
            "void lambda$null$2(Dynamic)",
            "void lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ChunkToProtochunkFix",
        "differences": {
          "added": [
            "Typed lambda$makeRule$4(OpticFinder,Type,OpticFinder,Typed)",
            "Typed lambda$null$3(OpticFinder,Type,Typed)",
            "IllegalStateException lambda$null$2()",
            "void lambda$null$1(List,Dynamic,Dynamic)",
            "Dynamic lambda$null$0(Dynamic,int)"
          ],
          "removed": [
            "Typed lambda$makeRule$7(OpticFinder,Type,OpticFinder,Typed)",
            "Typed lambda$null$6(OpticFinder,Type,Typed)",
            "IllegalStateException lambda$null$5()",
            "Dynamic lambda$null$4(Dynamic,ShortList)",
            "void lambda$null$3(List,Dynamic)",
            "ShortArrayList lambda$null$2(int)",
            "Optional lambda$null$1(Dynamic)",
            "Optional lambda$null$0(Typed)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityBlockStateFix",
        "differences": {
          "added": [
            "Pair lambda$updateBlockToBlockState$12(Dynamic,String,Pair)",
            "Either lambda$updateFallingBlock$10(Dynamic,Either)",
            "Integer lambda$null$9(Dynamic,Unit)",
            "Integer lambda$null$8(Dynamic)"
          ],
          "removed": [
            "Pair lambda$updateBlockToBlockState$12(Dynamic,String,Pair)",
            "Either lambda$updateFallingBlock$10(Dynamic,Either)",
            "Integer lambda$null$9(Dynamic,Unit)",
            "Integer lambda$null$8(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityElderGuardianSplitFix",
        "differences": {
          "added": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ],
          "removed": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityHealthFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityItemFrameDirectionFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityPaintingItemFrameDirectionFix",
        "differences": {
          "added": [
            "Dynamic doFix(Dynamic,boolean,boolean)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic doFix(Dynamic,boolean,boolean)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityProjectileOwnerFix",
        "differences": {
          "added": [
            "Dynamic updateOwnerArrow(Dynamic)",
            "Dynamic updateOwnerLlamaSpit(Dynamic)",
            "Dynamic updateItemPotion(Dynamic)",
            "Dynamic updateOwnerThrowable(Dynamic)",
            "Dynamic setUUID(Dynamic,long,long)"
          ],
          "removed": [
            "Dynamic updateOwnerArrow(Dynamic)",
            "Dynamic updateOwnerLlamaSpit(Dynamic)",
            "Dynamic updateItemPotion(Dynamic)",
            "Dynamic updateOwnerThrowable(Dynamic)",
            "Dynamic setUUID(Dynamic,long,long)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityRenameFix",
        "differences": {
          "added": [
            "Typed getEntity(Object,DynamicOps,Type)",
            "Function lambda$makeRule$1(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)",
            "Pair lambda$null$0(TaggedChoice$TaggedChoiceType,DynamicOps,TaggedChoice$TaggedChoiceType,Pair)"
          ],
          "removed": [
            "Typed getEntity(Object,DynamicOps,Type)",
            "Function lambda$makeRule$1(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)",
            "Pair lambda$null$0(TaggedChoice$TaggedChoiceType,DynamicOps,TaggedChoice$TaggedChoiceType,Pair)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityShulkerColorFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntitySkeletonSplitFix",
        "differences": {
          "added": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ],
          "removed": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityUUIDFix",
        "differences": {
          "added": [
            "Dynamic updatePiglin(Dynamic)",
            "Dynamic updateEvokerFangs(Dynamic)",
            "Dynamic updateZombieVillager(Dynamic)",
            "Dynamic updateAreaEffectCloud(Dynamic)",
            "Dynamic updateShulkerBullet(Dynamic)",
            "Dynamic updateItem(Dynamic)",
            "Dynamic updateFox(Dynamic)",
            "Dynamic updateHurtBy(Dynamic)",
            "Dynamic updateAnimalOwner(Dynamic)",
            "Dynamic updateAnimal(Dynamic)",
            "Dynamic updateMob(Dynamic)",
            "Dynamic updateLivingEntity(Dynamic)",
            "Dynamic updateProjectile(Dynamic)",
            "Dynamic updateEntityUUID(Dynamic)",
            "Dynamic lambda$updateProjectile$14(Dynamic,Dynamic)",
            "Dynamic lambda$updateLivingEntity$13(Dynamic,Dynamic)",
            "Dynamic lambda$null$12(Dynamic)",
            "Dynamic lambda$null$11(Dynamic,Dynamic)",
            "Dynamic lambda$null$10(Dynamic)",
            "Dynamic lambda$updateMob$9(Dynamic)",
            "Dynamic lambda$updateFox$8(Dynamic,Dynamic)",
            "Dynamic lambda$updateFox$7(Dynamic,Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$updatePiglin$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)"
          ],
          "removed": [
            "Dynamic updatePiglin(Dynamic)",
            "Dynamic updateEvokerFangs(Dynamic)",
            "Dynamic updateZombieVillager(Dynamic)",
            "Dynamic updateAreaEffectCloud(Dynamic)",
            "Dynamic updateShulkerBullet(Dynamic)",
            "Dynamic updateItem(Dynamic)",
            "Dynamic updateFox(Dynamic)",
            "Dynamic updateHurtBy(Dynamic)",
            "Dynamic updateAnimalOwner(Dynamic)",
            "Dynamic updateAnimal(Dynamic)",
            "Dynamic updateMob(Dynamic)",
            "Dynamic updateLivingEntity(Dynamic)",
            "Dynamic updateProjectile(Dynamic)",
            "Dynamic updateEntityUUID(Dynamic)",
            "Dynamic lambda$updateProjectile$14(Dynamic,Dynamic)",
            "Dynamic lambda$updateLivingEntity$13(Dynamic,Dynamic)",
            "Dynamic lambda$null$12(Dynamic)",
            "Dynamic lambda$null$11(Dynamic,Dynamic)",
            "Dynamic lambda$null$10(Dynamic)",
            "Dynamic lambda$updateMob$9(Dynamic)",
            "Dynamic lambda$updateFox$8(Dynamic,Dynamic)",
            "Dynamic lambda$updateFox$7(Dynamic,Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$null$5(Dynamic)",
            "Dynamic lambda$updatePiglin$4(Dynamic)",
            "Dynamic lambda$null$3(Dynamic)",
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.EntityZombieSplitFix",
        "differences": {
          "added": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ],
          "removed": [
            "Pair getNewNameAndTag(String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.FurnaceRecipeFix",
        "differences": {
          "added": [
            "void lambda$updateFurnaceContents$5(Type,List,int,Dynamic)",
            "void lambda$null$4(List,int,Object)"
          ],
          "removed": [
            "void lambda$updateFurnaceContents$5(Type,List,int,Dynamic)",
            "void lambda$null$4(List,int,Pair)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.HeightmapRenamingFix",
        "differences": {
          "added": [
            "Dynamic fix(Dynamic)"
          ],
          "removed": [
            "Dynamic fix(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ItemSpawnEggFix",
        "differences": {
          "added": [
            "Typed lambda$makeRule$5(OpticFinder,OpticFinder,OpticFinder,OpticFinder,OpticFinder,Typed)",
            "IllegalStateException lambda$null$4()"
          ],
          "removed": [
            "Typed lambda$makeRule$6(OpticFinder,OpticFinder,OpticFinder,OpticFinder,OpticFinder,Type,Typed)",
            "IllegalStateException lambda$null$5()",
            "DataResult lambda$null$4(Type,Dynamic,String,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.JigsawPropertiesFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LeavesFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$5(int[],Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$5(int[],Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LeavesFix$Section",
        "differences": {
          "added": [
            "void readStorage(Dynamic)",
            "Pair lambda$write$2(Dynamic)",
            "Dynamic lambda$write$1(Dynamic)"
          ],
          "removed": [
            "void readStorage(Dynamic)",
            "Pair lambda$write$2(Dynamic)",
            "Dynamic lambda$write$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.LevelFlatGeneratorInfoFix",
        "differences": {
          "added": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$1(Dynamic)"
          ],
          "removed": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.MapIdFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.MobSpawnerEntityIdentifiersFix",
        "differences": {
          "added": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fix(Dynamic)",
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.NewVillageFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$12(Dynamic)",
            "Dynamic lambda$null$11(Dynamic)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$null$5(Dynamic,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$12(Dynamic)",
            "Dynamic lambda$null$11(Dynamic)",
            "Dynamic lambda$null$7(Dynamic)",
            "Dynamic lambda$null$6(Dynamic)",
            "Dynamic lambda$null$5(Dynamic,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ObjectiveRenderTypeFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$2(DynamicOps)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Function lambda$makeRule$2(DynamicOps)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.OptionsForceVBOFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.OptionsKeyTranslationFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Map)",
            "Pair lambda$null$0(Dynamic,Map$Entry)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$1(Dynamic,Map)",
            "Pair lambda$null$0(Dynamic,Map$Entry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.PlayerUUIDFix",
        "differences": {
          "added": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$null$2(Dynamic)",
            "Dynamic lambda$null$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ReorganizePoi",
        "differences": {
          "added": [
            "Dynamic cap(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ],
          "removed": [
            "Dynamic cap(Dynamic)",
            "Function lambda$makeRule$1(DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.SavedDataVillageCropFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic updateChildren(Dynamic)",
            "Dynamic updateSingleField(Dynamic)",
            "Dynamic updateDoubleField(Dynamic)",
            "Dynamic updateCrop(Dynamic,String)",
            "Dynamic lambda$updateChildren$0(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)",
            "Dynamic updateChildren(Dynamic)",
            "Dynamic updateSingleField(Dynamic)",
            "Dynamic updateDoubleField(Dynamic)",
            "Dynamic updateCrop(Dynamic,String)",
            "Dynamic lambda$updateChildren$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.SimplestEntityRenameFix",
        "differences": {
          "added": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Function lambda$makeRule$2(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)"
          ],
          "removed": [
            "Function lambda$makeRule$4(DynamicOps)",
            "Function lambda$makeRule$2(TaggedChoice$TaggedChoiceType,TaggedChoice$TaggedChoiceType,DynamicOps)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.StriderGravityFix",
        "differences": {
          "added": [
            "Dynamic fixTag(Dynamic)"
          ],
          "removed": [
            "Dynamic fixTag(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.VillagerRebuildLevelAndXpFix",
        "differences": {
          "added": [
            "Dynamic lambda$addXpFromLevel$6(int,Dynamic)",
            "Dynamic lambda$addLevel$5(int,Dynamic)",
            "Dynamic lambda$null$4(int,Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$addXpFromLevel$6(int,Dynamic)",
            "Dynamic lambda$addLevel$5(int,Dynamic)",
            "Dynamic lambda$null$4(int,Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.WallPropertyFix",
        "differences": {
          "added": [
            "Dynamic fixWallProperty(Dynamic,String)",
            "Dynamic upgradeBlockStateTag(Dynamic)",
            "Dynamic lambda$upgradeBlockStateTag$2(Dynamic)",
            "Dynamic lambda$fixWallProperty$1(Dynamic)"
          ],
          "removed": [
            "Dynamic fixWallProperty(Dynamic,String)",
            "Dynamic upgradeBlockStateTag(Dynamic)",
            "Dynamic lambda$upgradeBlockStateTag$2(Dynamic)",
            "Dynamic lambda$fixWallProperty$1(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.ZombieVillagerRebuildXpFix",
        "differences": {
          "added": [
            "Dynamic lambda$fix$0(Dynamic)"
          ],
          "removed": [
            "Dynamic lambda$fix$0(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V99$1",
        "differences": {
          "added": [
            "Object apply(DynamicOps,Object)"
          ],
          "removed": [
            "Object apply(DynamicOps,Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.worldupdate.WorldUpgrader",
        "differences": {
          "added": [
            "List getAllChunkPos(DimensionType)",
            "boolean lambda$getAllChunkPos$2(File,String)",
            "DimensionDataStorage lambda$work$1()",
            "void lambda$new$0(Thread,Throwable)"
          ],
          "removed": [
            "List getAllChunkPos(ResourceKey)",
            "ImmutableMap dimensionTypes()",
            "boolean lambda$getAllChunkPos$3(File,String)",
            "DimensionDataStorage lambda$work$2()",
            "void lambda$new$1(Thread,Throwable)",
            "DimensionType lambda$new$0(Map$Entry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EntityType",
        "differences": {
          "added": [
            "Logger access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.LivingEntity",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)",
            "void lambda$stopSleeping$8(BlockPos)",
            "Vec3 lambda$null$7(BlockPos)",
            "Boolean lambda$checkBedExists$6(BlockPos)",
            "void lambda$updateFallFlying$5(LivingEntity)",
            "boolean lambda$isHolding$4(Item,Item)",
            "void lambda$hurt$3(LivingEntity)",
            "void lambda$tickEffects$2(MobEffectInstance)"
          ],
          "removed": [
            "Brain$Provider brainProvider()",
            "Brain makeBrain(Dynamic)",
            "void lambda$stopSleeping$9(BlockPos)",
            "Vec3 lambda$null$8(BlockPos)",
            "Boolean lambda$checkBedExists$7(BlockPos)",
            "void lambda$updateFallFlying$6(LivingEntity)",
            "boolean lambda$isHolding$5(Item,Item)",
            "void lambda$hurt$4(LivingEntity)",
            "void lambda$tickEffects$3(MobEffectInstance)",
            "void lambda$addAdditionalSaveData$2(CompoundTag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.MobCategory",
        "differences": {
          "added": [],
          "removed": [
            "String getSerializedName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry",
        "differences": {
          "added": [
            "Dynamic store(DynamicOps)",
            "Optional load(Dynamic)",
            "Optional lambda$load$2(Dynamic,GossipType)",
            "Optional lambda$null$1(Dynamic,GossipType,UUID)",
            "GossipContainer$GossipEntry lambda$null$0(UUID,GossipType,Number)"
          ],
          "removed": [
            "void <init>(SerializableUUID,GossipType,int)",
            "Dynamic store(DynamicOps)",
            "DataResult load(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.memory.MemoryModuleType",
        "differences": {
          "added": [
            "Optional getDeserializer()",
            "MemoryModuleType register(String,Optional)"
          ],
          "removed": [
            "Optional getCodec()",
            "MemoryModuleType register(String,Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.village.poi.PoiRecord",
        "differences": {
          "added": [
            "void <init>(Dynamic,Runnable)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "Codec codec(Runnable)",
            "App lambda$codec$3(Runnable,RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(PoiRecord)",
            "PoiType lambda$null$1(PoiRecord)",
            "BlockPos lambda$null$0(PoiRecord)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.AbstractHorse",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getEatingSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Horse",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getEatingSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Llama",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getEatingSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.Mule",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getAngrySound()",
            "SoundEvent getEatingSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.item.ItemEntity",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Zoglin",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)"
          ],
          "removed": [
            "Brain$Provider brainProvider()",
            "Brain makeBrain(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.ZombieVillager",
        "differences": {
          "added": [],
          "removed": [
            "void lambda$addAdditionalSaveData$0(CompoundTag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.hoglin.Hoglin",
        "differences": {
          "added": [
            "Brain makeBrain(Dynamic)"
          ],
          "removed": [
            "Brain$Provider brainProvider()",
            "Brain makeBrain(Dynamic)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.npc.AbstractVillager",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.npc.VillagerData",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(VillagerData)",
            "VillagerProfession lambda$null$1(VillagerData)",
            "VillagerType lambda$null$0(VillagerData)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.npc.VillagerTrades$TreasureMapForEmeralds",
        "differences": {
          "added": [
            "void <init>(int,String,MapDecoration$Type,int,int)"
          ],
          "removed": [
            "void <init>(int,StructureFeature,MapDecoration$Type,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.AbstractMinecartContainer",
        "differences": {
          "added": [
            "Entity changeDimension(DimensionType)"
          ],
          "removed": [
            "Entity changeDimension(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.MapItem",
        "differences": {
          "added": [
            "MapItemSavedData createAndStoreSavedData(ItemStack,Level,int,int,int,boolean,boolean,DimensionType)"
          ],
          "removed": [
            "MapItemSavedData createAndStoreSavedData(ItemStack,Level,int,int,int,boolean,boolean,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.BaseCommandBlock",
        "differences": {
          "added": [
            "void sendMessage(Component)"
          ],
          "removed": [
            "void sendMessage(Component,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.Level",
        "differences": {
          "added": [
            "void setGameTime(long)",
            "void setDayTime(long)",
            "void tickTime()",
            "Dimension getDimension()"
          ],
          "removed": [
            "ResourceKey dimension()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.CheckerboardColumnBiomeSource",
        "differences": {
          "added": [
            "void <init>(Biome[],int)"
          ],
          "removed": [
            "void <init>(List,int)",
            "Codec codec()",
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Integer lambda$null$1(CheckerboardColumnBiomeSource)",
            "List lambda$null$0(CheckerboardColumnBiomeSource)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.CrimsonForestBiome",
        "differences": {
          "added": [
            "Double lambda$new$2(Random)",
            "Double lambda$new$1(Random)",
            "Double lambda$new$0(Random)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.StateHolder",
        "differences": {
          "added": [
            "String getName(Property,Comparable)",
            "StateHolder setValueHelper(StateHolder,Property,String,String,String)"
          ],
          "removed": [
            "void <init>(Object,ImmutableMap,MapCodec)",
            "Object cycle(Property)",
            "Object findNextInCollection(Collection,Object)",
            "String toString()",
            "Collection getProperties()",
            "boolean hasProperty(Property)",
            "Comparable getValue(Property)",
            "Optional getOptionalValue(Property)",
            "Object setValue(Property,Comparable)",
            "void populateNeighbours(Map)",
            "Map makeNeighbourValues(Property,Comparable)",
            "ImmutableMap getValues()",
            "Codec codec(Codec,Function)",
            "Codec lambda$codec$1(Function,Object)",
            "Object lambda$codec$0(StateHolder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.ChunkAccess",
        "differences": {
          "added": [
            "BitSet getCarvingMask(GenerationStep$Carving)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.ChunkGenerator",
        "differences": {
          "added": [
            "void <init>(BiomeSource,ChunkGeneratorSettings)",
            "Biome getCarvingOrDecorationBiome(BiomeManager,BlockPos)",
            "BlockPos findNearestMapFeature(ServerLevel,String,BlockPos,int,boolean)",
            "ChunkGeneratorSettings getSettings()",
            "void tickCustomSpawners(ServerLevel,boolean,boolean)",
            "boolean isBiomeValidStartForStructure(Biome,StructureFeature)",
            "FeatureConfiguration getStructureConfiguration(Biome,StructureFeature)",
            "void createStructures(StructureFeatureManager,BiomeManager,ChunkAccess,ChunkGenerator,StructureManager,long)",
            "boolean canGenerateStructure(StructureFeature)",
            "Biome lambda$applyCarvers$0(BiomeManager,BlockPos)"
          ],
          "removed": [
            "void <init>(BiomeSource,StructureSettings)",
            "void <init>(BiomeSource,BiomeSource,StructureSettings,long)",
            "void generateStrongholds()",
            "BlockPos findNearestMapFeature(ServerLevel,StructureFeature,BlockPos,int,boolean)",
            "StructureSettings getSettings()",
            "void createStructures(StructureFeatureManager,ChunkAccess,StructureManager,long)",
            "void createStructure(ConfiguredStructureFeature,StructureFeatureManager,ChunkAccess,StructureManager,long,ChunkPos,Biome)",
            "boolean hasStronghold(ChunkPos)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.ImposterProtoChunk",
        "differences": {
          "added": [],
          "removed": [
            "BitSet getOrCreateCarvingMask(GenerationStep$Carving)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.FlatLevelSource",
        "differences": {
          "added": [
            "Biome getBiomeFromSettings()",
            "Biome getCarvingOrDecorationBiome(BiomeManager,BlockPos)",
            "boolean canGenerateStructure(StructureFeature)",
            "void tickCustomSpawners(ServerLevel,boolean,boolean)",
            "boolean isBiomeValidStartForStructure(Biome,StructureFeature)",
            "FeatureConfiguration getStructureConfiguration(Biome,StructureFeature)",
            "BlockPos findNearestMapFeature(ServerLevel,String,BlockPos,int,boolean)"
          ],
          "removed": [
            "Codec codec()",
            "FlatLevelGeneratorSettings settings()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver",
        "differences": {
          "added": [
            "void <init>(WorldCarver,Dynamic)",
            "Dynamic serialize(DynamicOps)",
            "ConfiguredWorldCarver deserialize(Dynamic)"
          ],
          "removed": [
            "WorldCarver lambda$static$0(ConfiguredWorldCarver)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.NoneCarverConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "NoneCarverConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "NoneCarverConfiguration lambda$static$0()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.UnderwaterCaveWorldCarver",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.AbstractHugeMushroomFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BasaltColumnsFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BastionFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,MultiJigsawConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BlockPileFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BonusChestFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,BuriedTreasureConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ConfiguredFeature",
        "differences": {
          "added": [
            "void <init>(Feature,Dynamic)",
            "Dynamic serialize(DynamicOps)",
            "ConfiguredFeature deserialize(Dynamic)"
          ],
          "removed": [
            "Feature lambda$static$0(ConfiguredFeature)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ReplaceBlobsFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.RuinedPortalFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "String getFeatureName()",
            "int getLookupRange()",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.RuinedPortalFeature$Type",
        "differences": {
          "added": [],
          "removed": [
            "String getSerializedName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SeaPickleFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.ShipwreckFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "String getFeatureName()",
            "int getLookupRange()",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SimpleBlockFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.StrongholdFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "boolean featureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome)",
            "boolean isFeatureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome,ChunkPos)",
            "void reset()",
            "String getFeatureName()",
            "int getLookupRange()",
            "BlockPos getNearestGeneratedFeature(ServerLevel,ChunkGenerator,BlockPos,int,boolean)",
            "void generatePositions(ChunkGenerator,long)",
            "List access$000(StrongholdFeature)"
          ],
          "removed": [
            "void <init>(Codec)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,NoneFeatureConfiguration)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.StructureFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "ConfiguredFeature configured(FeatureConfiguration)",
            "boolean place(WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,BlockPos,FeatureConfiguration)",
            "StructureStart getStructureAt(StructureFeatureManager,BlockPos,boolean)",
            "boolean isInsideBoundingFeature(StructureFeatureManager,BlockPos)",
            "boolean isInsideFeature(StructureFeatureManager,BlockPos)",
            "BlockPos getNearestGeneratedFeature(ServerLevel,ChunkGenerator,BlockPos,int,boolean)",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "ChunkPos getPotentialFeatureChunk(ChunkGeneratorSettings,long,WorldgenRandom,int,int)",
            "boolean supportsProjection()",
            "boolean featureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome)",
            "boolean isFeatureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome,ChunkPos)",
            "boolean lambda$getStructureAt$3(boolean,BlockPos,StructureStart)",
            "boolean lambda$null$2(BlockPos,StructurePiece)",
            "boolean lambda$getStructureAt$1(BlockPos,StructureStart)",
            "Object lambda$place$0(WorldGenLevel,StructureFeatureManager,ChunkGenerator,Random,int,int,int,int,StructureStart)"
          ],
          "removed": [
            "StructureFeature register(String,StructureFeature,GenerationStep$Decoration)",
            "void <init>(Codec)",
            "GenerationStep$Decoration step()",
            "void bootstrap()",
            "StructureStart loadStaticStart(StructureManager,CompoundTag,long)",
            "Codec configuredStructureCodec()",
            "ConfiguredStructureFeature configured(FeatureConfiguration)",
            "BlockPos getNearestGeneratedFeature(LevelReader,StructureFeatureManager,BlockPos,int,boolean,long,StructureFeatureConfiguration)",
            "ChunkPos getPotentialFeatureChunk(StructureFeatureConfiguration,long,WorldgenRandom,int,int)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,FeatureConfiguration)",
            "StructureStart createStart(int,int,BoundingBox,int,long)",
            "StructureStart generate(ChunkGenerator,BiomeSource,StructureManager,long,ChunkPos,Biome,int,WorldgenRandom,StructureFeatureConfiguration,FeatureConfiguration)",
            "String getFeatureName()",
            "List getSpecialEnemies()",
            "List getSpecialAnimals()",
            "FeatureConfiguration lambda$new$1(ConfiguredStructureFeature)",
            "ConfiguredStructureFeature lambda$new$0(FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SwamplandHutFeature$FeatureStart",
        "differences": {
          "added": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome)"
          ],
          "removed": [
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,NoneFeatureConfiguration)",
            "void generatePieces(ChunkGenerator,StructureManager,int,int,Biome,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.TreeFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.VillageFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "String getFeatureName()",
            "int getLookupRange()",
            "boolean supportsProjection()"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.VinesFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WeepingVinesFeature",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WoodlandMansionFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "boolean isFeatureChunk(BiomeManager,ChunkGenerator,long,WorldgenRandom,int,int,Biome,ChunkPos)",
            "String getFeatureName()",
            "int getLookupRange()"
          ],
          "removed": [
            "void <init>(Codec)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,NoneFeatureConfiguration)",
            "boolean isFeatureChunk(ChunkGenerator,BiomeSource,long,WorldgenRandom,int,int,Biome,ChunkPos,FeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer",
        "differences": {
          "added": [
            "void <init>(BlockPlacerType)"
          ],
          "removed": [
            "void <init>()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.blockplacers.ColumnPlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "BlockPlacerType type()",
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Integer lambda$null$1(ColumnPlacer)",
            "Integer lambda$null$0(ColumnPlacer)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.blockplacers.SimpleBlockPlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "BlockPlacerType type()",
            "SimpleBlockPlacer lambda$static$0()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "BlockBlobConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Integer lambda$null$1(BlockBlobConfiguration)",
            "BlockState lambda$null$0(BlockBlobConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "BlockStateConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "BlockState lambda$static$0(BlockStateConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ChanceRangeDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ChanceRangeDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Integer lambda$null$3(ChanceRangeDecoratorConfiguration)",
            "Integer lambda$null$2(ChanceRangeDecoratorConfiguration)",
            "Integer lambda$null$1(ChanceRangeDecoratorConfiguration)",
            "Float lambda$null$0(ChanceRangeDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "CountRangeDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Integer lambda$null$3(CountRangeDecoratorConfiguration)",
            "Integer lambda$null$2(CountRangeDecoratorConfiguration)",
            "Integer lambda$null$1(CountRangeDecoratorConfiguration)",
            "Integer lambda$null$0(CountRangeDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "EndGatewayConfiguration deserialize(Dynamic)",
            "Optional lambda$deserialize$3(Dynamic,Number)",
            "Optional lambda$null$2(Dynamic,Number,Number)",
            "BlockPos lambda$null$1(Number,Number,Number)",
            "Object lambda$serialize$0(DynamicOps,BlockPos)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Boolean lambda$null$1(EndGatewayConfiguration)",
            "Optional lambda$null$0(EndGatewayConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.FeatureRadiusConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "FeatureRadiusConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Integer lambda$static$0(FeatureRadiusConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.JigsawConfiguration",
        "differences": {
          "added": [
            "void <init>(String,int)",
            "Dynamic serialize(DynamicOps)",
            "JigsawConfiguration deserialize(Dynamic)",
            "String getStartPool()"
          ],
          "removed": [
            "void <init>(ResourceLocation,int)",
            "ResourceLocation getStartPool()",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "MineshaftConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "MineshaftFeature$Type lambda$null$1(MineshaftConfiguration)",
            "Double lambda$null$0(MineshaftConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "NoiseDependantDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(NoiseDependantDecoratorConfiguration)",
            "Integer lambda$null$1(NoiseDependantDecoratorConfiguration)",
            "Double lambda$null$0(NoiseDependantDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "NoneFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "NoneFeatureConfiguration lambda$static$0()",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "OreConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$3(RecordCodecBuilder$Instance)",
            "Integer lambda$null$2(OreConfiguration)",
            "BlockState lambda$null$1(OreConfiguration)",
            "OreConfiguration$Predicates lambda$null$0(OreConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ProbabilityFeatureConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$1(RecordCodecBuilder$Instance)",
            "Float lambda$null$0(ProbabilityFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "RandomFeatureConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,WeightedConfiguredFeature)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "ConfiguredFeature lambda$null$1(RandomFeatureConfiguration)",
            "List lambda$null$0(RandomFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "RandomRandomFeatureConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,ConfiguredFeature)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Integer lambda$null$1(RandomRandomFeatureConfiguration)",
            "List lambda$null$0(RandomRandomFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ReplaceSpheroidConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ReplaceSpheroidConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Vec3i lambda$null$3(ReplaceSpheroidConfiguration)",
            "Vec3i lambda$null$2(ReplaceSpheroidConfiguration)",
            "BlockState lambda$null$1(ReplaceSpheroidConfiguration)",
            "BlockState lambda$null$0(ReplaceSpheroidConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RuinedPortalConfiguration",
        "differences": {
          "added": [
            "void <init>()",
            "Dynamic serialize(DynamicOps)",
            "RuinedPortalConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "RuinedPortalFeature$Type lambda$static$0(RuinedPortalConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ShipwreckConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Boolean lambda$static$0(ShipwreckConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "SimpleRandomFeatureConfiguration deserialize(Dynamic)",
            "Object lambda$serialize$0(DynamicOps,ConfiguredFeature)"
          ],
          "removed": [
            "List lambda$static$0(SimpleRandomFeatureConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "SpringConfiguration deserialize(Dynamic)",
            "Block lambda$deserialize$0(Dynamic)"
          ],
          "removed": [
            "App lambda$static$5(RecordCodecBuilder$Instance)",
            "Set lambda$null$4(SpringConfiguration)",
            "Integer lambda$null$3(SpringConfiguration)",
            "Integer lambda$null$2(SpringConfiguration)",
            "Boolean lambda$null$1(SpringConfiguration)",
            "FluidState lambda$null$0(SpringConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize",
        "differences": {
          "added": [
            "void <init>(FeatureSizeType,OptionalInt)",
            "Object serialize(DynamicOps)",
            "void lambda$serialize$0(ImmutableMap$Builder,DynamicOps,int)"
          ],
          "removed": [
            "RecordCodecBuilder minClippedHeightCodec()",
            "void <init>(OptionalInt)",
            "OptionalInt lambda$minClippedHeightCodec$2(FeatureSize)",
            "Optional lambda$minClippedHeightCodec$1(OptionalInt)",
            "OptionalInt lambda$minClippedHeightCodec$0(Optional)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)",
            "OptionalInt lambda$new$0(Number)"
          ],
          "removed": [
            "FeatureSizeType type()",
            "App lambda$static$5(RecordCodecBuilder$Instance)",
            "Integer lambda$null$4(ThreeLayersFeatureSize)",
            "Integer lambda$null$3(ThreeLayersFeatureSize)",
            "Integer lambda$null$2(ThreeLayersFeatureSize)",
            "Integer lambda$null$1(ThreeLayersFeatureSize)",
            "Integer lambda$null$0(ThreeLayersFeatureSize)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "Products$P5 blobParts(RecordCodecBuilder$Instance)",
            "FoliagePlacerType type()",
            "Integer lambda$blobParts$1(BlobFoliagePlacer)",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer",
        "differences": {
          "added": [
            "void <init>(Dynamic)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "FoliagePlacerType type()",
            "App lambda$static$0(RecordCodecBuilder$Instance)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer",
        "differences": {
          "added": [
            "void <init>(int,int,int,int,FoliagePlacerType)",
            "Object serialize(DynamicOps)"
          ],
          "removed": [
            "Products$P4 foliagePlacerParts(RecordCodecBuilder$Instance)",
            "void <init>(int,int,int,int)",
            "Integer lambda$foliagePlacerParts$3(FoliagePlacer)",
            "Integer lambda$foliagePlacerParts$2(FoliagePlacer)",
            "Integer lambda$foliagePlacerParts$1(FoliagePlacer)",
            "Integer lambda$foliagePlacerParts$0(FoliagePlacer)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CarvingMaskDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "ChanceDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Integer lambda$static$0(ChanceDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChanceHeightmapDoubleDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ChanceTopSolidHeightmapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ConfiguredDecorator",
        "differences": {
          "added": [
            "void <init>(FeatureDecorator,Dynamic)",
            "Dynamic serialize(DynamicOps)",
            "ConfiguredDecorator deserialize(Dynamic)"
          ],
          "removed": [
            "FeatureDecorator lambda$static$0(ConfiguredDecorator)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountChanceHeightmapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountDepthAverageDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountHeight64Decorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountHeightmapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.CountVeryBiasedRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.DarkOakTreePlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.EmeraldPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.EndIslandPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.ForestRockPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "FrequencyDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "Integer lambda$static$0(FrequencyDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.IcebergPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.LakeWaterPlacementDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "NoiseCountFactorDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Heightmap$Types lambda$null$3(NoiseCountFactorDecoratorConfiguration)",
            "Double lambda$null$2(NoiseCountFactorDecoratorConfiguration)",
            "Double lambda$null$1(NoiseCountFactorDecoratorConfiguration)",
            "Integer lambda$null$0(NoiseCountFactorDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.NoiseHeightmapDoubleDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.RangeDecoratorConfiguration",
        "differences": {
          "added": [
            "Dynamic serialize(DynamicOps)",
            "RangeDecoratorConfiguration deserialize(Dynamic)"
          ],
          "removed": [
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Integer lambda$null$1(RangeDecoratorConfiguration)",
            "Integer lambda$null$0(RangeDecoratorConfiguration)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.TopSolidHeightMapDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.TopSolidHeightMapRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.CountRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.LightGemChanceDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.placement.nether.RandomCountRangeDecorator",
        "differences": {
          "added": [
            "void <init>(Function)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.IglooPieces",
        "differences": {
          "added": [
            "void addPieces(StructureManager,BlockPos,Rotation,List,Random,NoneFeatureConfiguration)"
          ],
          "removed": [
            "void addPieces(StructureManager,BlockPos,Rotation,List,Random)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.NetherFossilFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "int getRandomSalt(ChunkGeneratorSettings)",
            "String getFeatureName()",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getLookupRange()"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanRuinFeature",
        "differences": {
          "added": [
            "void <init>(Function)",
            "String getFeatureName()",
            "int getLookupRange()",
            "int getSpacing(ChunkGeneratorSettings)",
            "int getSeparation(ChunkGeneratorSettings)",
            "int getRandomSalt(ChunkGeneratorSettings)"
          ],
          "removed": [
            "void <init>(Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type",
        "differences": {
          "added": [],
          "removed": [
            "String getSerializedName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.RuinedPortalPiece",
        "differences": {
          "added": [
            "void lambda$postProcess$0(Random,WorldGenLevel,BlockPos)"
          ],
          "removed": [
            "void lambda$postProcess$1(Random,WorldGenLevel,BlockPos)",
            "void lambda$addAdditionalSaveData$0(CompoundTag,Tag)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.LevelStorageSource",
        "differences": {
          "added": [
            "WorldData getLevelData(File)",
            "WorldData access$300(LevelStorageSource,File)"
          ],
          "removed": [
            "Pair readWorldGenSettings(Dynamic,DataFixer,int)",
            "Object readLevelData(File,BiFunction)",
            "BiFunction levelSummaryReader(File,boolean)",
            "LevelSummary lambda$levelSummaryReader$0(File,boolean,File,DataFixer)",
            "Object access$300(LevelStorageSource,File,BiFunction)",
            "BiFunction access$800(LevelStorageSource,File,boolean)",
            "Gson access$900()",
            "WorldData access$1000(File,DataFixer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.LevelSummary",
        "differences": {
          "added": [
            "void <init>(WorldData,String,String,long,boolean,boolean,File)",
            "long getSizeOnDisk()"
          ],
          "removed": [
            "void <init>(LevelSettings,LevelVersion,String,boolean,boolean,File,Lifecycle)",
            "WorldGenSettings worldGenSettings()",
            "boolean experimental()"
          ]
        }
      }
    }
  ]
}