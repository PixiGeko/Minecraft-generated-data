{
  "version_data": [
    {
      "type": "table",
      "value": {
        "previousLabel": "20w16a",
        "currentLabel": "20w17a",
        "values": [
          {
            "key": "World version",
            "previous": "2526",
            "current": "2529"
          },
          {
            "key": "Protocol version",
            "previous": "712",
            "current": "713"
          }
        ]
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Libraries",
        "id": "version-data-libraries",
        "size": 3
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "com.ibm.icu:icu4j V66.1"
          ],
          "removed": [
            "com.ibm.icu:icu4j-core-mojang V51.2"
          ]
        }
      }
    },
    {
      "type": "table",
      "value": {
        "title": "Versions",
        "previousLabel": "20w16a",
        "currentLabel": "20w17a",
        "values": [
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          }
        ]
      }
    }
  ],
  "registries": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "feature_size_type.txt"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "block",
        "differences": {
          "added": [
            "minecraft:soul_torch",
            "minecraft:soul_wall_torch",
            "minecraft:soul_lantern"
          ],
          "removed": [
            "minecraft:soul_fire_torch",
            "minecraft:soul_fire_wall_torch",
            "minecraft:soul_fire_lantern"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "feature",
        "differences": {
          "added": [
            "minecraft:tree"
          ],
          "removed": [
            "minecraft:normal_tree",
            "minecraft:fancy_tree",
            "minecraft:jungle_ground_bush",
            "minecraft:dark_oak_tree",
            "minecraft:mega_jungle_tree",
            "minecraft:mega_spruce_tree"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "foliage_placer_type",
        "differences": {
          "added": [
            "minecraft:bush_foliage_placer",
            "minecraft:fancy_foliage_placer",
            "minecraft:jungle_foliage_placer",
            "minecraft:mega_pine_foliage_placer",
            "minecraft:dark_oak_foliage_placer"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "item",
        "differences": {
          "added": [
            "minecraft:soul_torch",
            "minecraft:soul_lantern"
          ],
          "removed": [
            "minecraft:soul_fire_torch",
            "minecraft:soul_fire_lantern"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sound_event",
        "differences": {
          "added": [
            "minecraft:block.chain.break",
            "minecraft:block.chain.fall",
            "minecraft:block.chain.hit",
            "minecraft:block.chain.place",
            "minecraft:block.chain.step",
            "minecraft:block.gilded_blackstone.break",
            "minecraft:block.gilded_blackstone.fall",
            "minecraft:block.gilded_blackstone.hit",
            "minecraft:block.gilded_blackstone.place",
            "minecraft:block.gilded_blackstone.step",
            "minecraft:block.nether_gold_ore.break",
            "minecraft:block.nether_gold_ore.fall",
            "minecraft:block.nether_gold_ore.hit",
            "minecraft:block.nether_gold_ore.place",
            "minecraft:block.nether_gold_ore.step"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "trunk_placer_type",
        "differences": {
          "added": [
            "minecraft:giant_trunk_placer",
            "minecraft:mega_jungle_trunk_placer",
            "minecraft:dark_oak_trunk_placer",
            "minecraft:fancy_trunk_placer"
          ],
          "removed": []
        }
      }
    }
  ],
  "tags": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "universal_tags/feature_size_type.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_blocks_without_drop.json",
        "differences": {
          "added": [
            "minecraft:soul_wall_torch"
          ],
          "removed": [
            "minecraft:soul_fire_wall_torch"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_blocks_with_drop.json",
        "differences": {
          "added": [
            "minecraft:soul_lantern",
            "minecraft:soul_torch"
          ],
          "removed": [
            "minecraft:soul_fire_lantern",
            "minecraft:soul_fire_torch"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/block.json",
        "differences": {
          "added": [
            "minecraft:soul_torch",
            "minecraft:soul_wall_torch",
            "minecraft:soul_lantern"
          ],
          "removed": [
            "minecraft:soul_fire_torch",
            "minecraft:soul_fire_wall_torch",
            "minecraft:soul_fire_lantern"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/feature.json",
        "differences": {
          "added": [
            "minecraft:tree"
          ],
          "removed": [
            "minecraft:normal_tree",
            "minecraft:fancy_tree",
            "minecraft:jungle_ground_bush",
            "minecraft:dark_oak_tree",
            "minecraft:mega_jungle_tree",
            "minecraft:mega_spruce_tree"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/foliage_placer_type.json",
        "differences": {
          "added": [
            "minecraft:bush_foliage_placer",
            "minecraft:fancy_foliage_placer",
            "minecraft:jungle_foliage_placer",
            "minecraft:mega_pine_foliage_placer",
            "minecraft:dark_oak_foliage_placer"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/item.json",
        "differences": {
          "added": [
            "minecraft:soul_torch",
            "minecraft:soul_lantern"
          ],
          "removed": [
            "minecraft:soul_fire_torch",
            "minecraft:soul_fire_lantern"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sound_event.json",
        "differences": {
          "added": [
            "minecraft:block.chain.break",
            "minecraft:block.chain.fall",
            "minecraft:block.chain.hit",
            "minecraft:block.chain.place",
            "minecraft:block.chain.step",
            "minecraft:block.gilded_blackstone.break",
            "minecraft:block.gilded_blackstone.fall",
            "minecraft:block.gilded_blackstone.hit",
            "minecraft:block.gilded_blackstone.place",
            "minecraft:block.gilded_blackstone.step",
            "minecraft:block.nether_gold_ore.break",
            "minecraft:block.nether_gold_ore.fall",
            "minecraft:block.nether_gold_ore.hit",
            "minecraft:block.nether_gold_ore.place",
            "minecraft:block.nether_gold_ore.step"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/trunk_placer_type.json",
        "differences": {
          "added": [
            "minecraft:giant_trunk_placer",
            "minecraft:mega_jungle_trunk_placer",
            "minecraft:dark_oak_trunk_placer",
            "minecraft:fancy_trunk_placer"
          ],
          "removed": []
        }
      }
    }
  ],
  "blocks": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "soul_lantern.json",
            "soul_torch.json",
            "soul_wall_torch.json"
          ],
          "removed": [
            "soul_fire_lantern.json",
            "soul_fire_torch.json",
            "soul_fire_wall_torch.json"
          ]
        }
      }
    }
  ],
  "commands": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "attribute.txt"
          ],
          "removed": []
        }
      }
    }
  ],
  "recipes": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "soul_lantern.json",
            "soul_torch.json"
          ],
          "removed": [
            "soul_fire_lantern.json",
            "soul_fire_torch.json"
          ]
        }
      }
    }
  ],
  "translations": [
    {
      "type": "entries",
      "value": {
        "name": "Keys",
        "differences": {
          "added": [
            "editGamerule.title: Edit game rules",
            "editGamerule.default: Default: %s",
            "selectWorld.gameRules: Game rules",
            "multiplayer.status.ping: %s ms",
            "options.entityDistanceScaling: Entity Distance",
            "options.entityDistancePercent: %s%%",
            "block.minecraft.soul_torch: Soul Torch",
            "block.minecraft.soul_wall_torch: Soul Wall Torch",
            "block.minecraft.soul_lantern: Soul Lantern",
            "gui.entity_tooltip.type: Type: %s",
            "attribute.unknown: Unknown attribute",
            "argument.uuid.invalid: Invalid UUID",
            "commands.attribute.failed.entity: %s is not a valid entity for this command",
            "commands.attribute.failed.no_attribute: Entity %s has no attribute %s",
            "commands.attribute.failed.no_modifier: Attribute %s for entity %s has no modifier %s",
            "commands.attribute.failed.modifier_already_present: Modifier %s is already present on attribute %s for entity %s",
            "commands.attribute.value.get.success: Value of attribute %s for entity %s is %s",
            "commands.attribute.base_value.get.success: Base value of attribute %s for entity %s is %s",
            "commands.attribute.base_value.set.success: Base value for attribute %s for entity %s set to %s",
            "commands.attribute.modifier.add.success: Added modifier %s to attribute %s for entity %s",
            "commands.attribute.modifier.remove.success: Removed modifier %s from attribute %s for entity %s",
            "commands.attribute.modifier.value.get.success: Value of modifier %s on attribute %s for entity %s is %s",
            "gamerule.announceAdvancements: Announce advancements",
            "gamerule.commandBlockOutput: Broadcast command block output",
            "gamerule.disableElytraMovementCheck: Disable Elytra movement check",
            "gamerule.disableRaids: Disable raids",
            "gamerule.doDaylightCycle: Advance in-game time",
            "gamerule.doEntityDrops: Drop entity equipment",
            "gamerule.doEntityDrops.description: Controls drops from minecarts (including inventories), item frames, boats, etc.",
            "gamerule.doFireTick: Update fire",
            "gamerule.doImmediateRespawn: Respawn immediately",
            "gamerule.doInsomnia: Spawn phantoms",
            "gamerule.doLimitedCrafting: Require recipe for crafting",
            "gamerule.doLimitedCrafting.description: If enabled, players will be able to craft only unlocked recipes",
            "gamerule.doMobLoot: Drop mob loot",
            "gamerule.doMobLoot.description: Controls resource drops, including experience orbs",
            "gamerule.doMobSpawning: Spawn mobs",
            "gamerule.doMobSpawning.description: Some entities might have separate rules",
            "gamerule.doPatrolSpawning: Spawn pillager patrols",
            "gamerule.doTileDrops: Drop blocks",
            "gamerule.doTileDrops.description: Controls resource drops, including experience orbs",
            "gamerule.doTraderSpawning: Spawn wandering traders",
            "gamerule.doWeatherCycle: Update weather",
            "gamerule.drowningDamage: Deal drowning damage",
            "gamerule.fallDamage: Deal fall damage",
            "gamerule.fireDamage: Deal fire damage",
            "gamerule.keepInventory: Keep inventory after death",
            "gamerule.logAdminCommands: Broadcast admin commands",
            "gamerule.maxCommandChainLength: Command chain size limit",
            "gamerule.maxCommandChainLength.description: Applies to command block chains and functions",
            "gamerule.maxEntityCramming: Entity cramming threshold",
            "gamerule.mobGriefing: Allow destructive mob actions",
            "gamerule.naturalRegeneration: Regenerate health",
            "gamerule.randomTickSpeed: Random tick speed rate",
            "gamerule.reducedDebugInfo: Reduce debug info",
            "gamerule.reducedDebugInfo.description: Limits contents of debug screen",
            "gamerule.sendCommandFeedback: Send command feedback",
            "gamerule.showDeathMessages: Show death messages",
            "gamerule.spawnRadius: Respawn location radius",
            "gamerule.spectatorsGenerateChunks: Allow spectators to generate terrain",
            "gamerule.category.chat: Chat",
            "gamerule.category.spawning: Spawning",
            "gamerule.category.updates: World updates",
            "gamerule.category.drops: Drops",
            "gamerule.category.mobs: Mobs",
            "gamerule.category.player: Player",
            "gamerule.category.misc: Miscellaneous"
          ],
          "removed": [
            "block.minecraft.soul_fire_torch: Soul Fire Torch",
            "block.minecraft.soul_fire_wall_torch: Soul Fire Wall Torch",
            "block.minecraft.soul_fire_lantern: Soul Fire Lantern"
          ]
        }
      }
    },
    {
      "type": "text",
      "value": {
        "title": "Changes",
        "values": [
          {
            "key": "container.upgrade",
            "previous": "Upgrade",
            "current": "Upgrade gear"
          },
          {
            "key": "jigsaw_block.levels",
            "previous": "Levels: ",
            "current": "Levels: %s"
          }
        ]
      }
    }
  ],
  "file_structure": [
    {
      "type": "entries",
      "value": {
        "name": "data",
        "differences": {
          "added": [
            "minecraft/advancements/recipes/decorations/blackstone_wall.json",
            "minecraft/advancements/recipes/decorations/blackstone_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_brick_wall.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_brick_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_brick_wall_from_polished_blackstone_bricks_stonecutting.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_brick_wall_from_polished_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_wall.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/polished_blackstone_wall_from_polished_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/soul_lantern.json",
            "minecraft/advancements/recipes/decorations/soul_torch.json",
            "minecraft/loot_tables/blocks/soul_lantern.json",
            "minecraft/loot_tables/blocks/soul_torch.json",
            "minecraft/recipes/soul_lantern.json",
            "minecraft/recipes/soul_torch.json",
            "minecraft/tags/blocks/pressure_plates.json",
            "minecraft/tags/blocks/stone_pressure_plates.json"
          ],
          "removed": [
            "minecraft/advancements/recipes/building_blocks/blackstone_wall.json",
            "minecraft/advancements/recipes/building_blocks/blackstone_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_brick_wall.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_brick_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_brick_wall_from_polished_blackstone_bricks_stonecutting.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_brick_wall_from_polished_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_wall.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_wall_from_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/building_blocks/polished_blackstone_wall_from_polished_blackstone_stonecutting.json",
            "minecraft/advancements/recipes/decorations/soul_fire_lantern.json",
            "minecraft/advancements/recipes/decorations/soul_fire_torch.json",
            "minecraft/loot_tables/blocks/soul_fire_lantern.json",
            "minecraft/loot_tables/blocks/soul_fire_torch.json",
            "minecraft/recipes/soul_fire_lantern.json",
            "minecraft/recipes/soul_fire_torch.json"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "assets",
        "differences": {
          "added": [
            "minecraft/blockstates/soul_lantern.json",
            "minecraft/blockstates/soul_torch.json",
            "minecraft/blockstates/soul_wall_torch.json",
            "minecraft/font/uniform.json",
            "minecraft/models/block/soul_lantern.json",
            "minecraft/models/block/soul_lantern_hanging.json",
            "minecraft/models/block/soul_torch.json",
            "minecraft/models/block/soul_wall_torch.json",
            "minecraft/models/item/soul_lantern.json",
            "minecraft/models/item/soul_torch.json",
            "minecraft/textures/block/soul_lantern.png",
            "minecraft/textures/block/soul_lantern.png.mcmeta",
            "minecraft/textures/block/soul_torch.png",
            "minecraft/textures/item/soul_lantern.png"
          ],
          "removed": [
            "minecraft/blockstates/soul_fire_lantern.json",
            "minecraft/blockstates/soul_fire_torch.json",
            "minecraft/blockstates/soul_fire_wall_torch.json",
            "minecraft/models/block/soul_fire_lantern.json",
            "minecraft/models/block/soul_fire_lantern_hanging.json",
            "minecraft/models/block/soul_fire_torch.json",
            "minecraft/models/block/soul_fire_wall_torch.json",
            "minecraft/models/item/soul_fire_lantern.json",
            "minecraft/models/item/soul_fire_torch.json",
            "minecraft/textures/block/soul_fire_lantern.png",
            "minecraft/textures/block/soul_fire_lantern.png.mcmeta",
            "minecraft/textures/block/soul_fire_torch.png",
            "minecraft/textures/item/soul_fire_lantern.png"
          ]
        }
      }
    }
  ],
  "misc": [
    {
      "type": "entries",
      "value": {
        "name": "parsers",
        "differences": {
          "added": [
            "minecraft:uuid"
          ],
          "removed": []
        }
      }
    }
  ],
  "mappings": [
    {
      "type": "title",
      "value": {
        "title": "Server",
        "id": "server-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.arguments.blocks.BlockInput",
            "XXX.arguments.blocks.BlockPredicateArgument$1",
            "XXX.arguments.blocks.BlockPredicateArgument$Result",
            "XXX.arguments.blocks.BlockStateArgument",
            "XXX.arguments.blocks.package-info",
            "XXX.arguments.coordinates.ColumnPosArgument",
            "XXX.arguments.coordinates.LocalCoordinates",
            "XXX.arguments.coordinates.SwizzleArgument",
            "XXX.arguments.coordinates.Vec3Argument",
            "XXX.arguments.coordinates.WorldCoordinates",
            "XXX.arguments.item.FunctionArgument",
            "XXX.arguments.item.FunctionArgument$2",
            "XXX.arguments.item.ItemArgument",
            "XXX.arguments.item.ItemParser",
            "XXX.arguments.item.ItemPredicateArgument$ItemPredicate",
            "XXX.arguments.item.ItemPredicateArgument$TagPredicate",
            "XXX.commands.arguments.package-info",
            "XXX.arguments.selector.EntitySelectorParser",
            "XXX.selector.options.EntitySelectorOptions$1",
            "XXX.selector.options.EntitySelectorOptions$Option",
            "XXX.arguments.selector.package-info",
            "XXX.minecraft.commands.package-info",
            "XXX.commands.synchronization.ArgumentTypes",
            "XXX.commands.synchronization.ArgumentTypes$Entry",
            "XXX.commands.synchronization.SuggestionProviders",
            "XXX.synchronization.brigadier.BrigadierArgumentSerializers",
            "XXX.synchronization.brigadier.FloatArgumentSerializer",
            "XXX.synchronization.brigadier.LongArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer$1",
            "XXX.commands.synchronization.package-info",
            "XXX.minecraft.core.AxisCycle$1",
            "XXX.minecraft.core.AxisCycle$3",
            "XXX.minecraft.core.BlockPos",
            "XXX.minecraft.core.BlockPos$2",
            "XXX.minecraft.core.BlockPos$4",
            "XXX.minecraft.core.BlockSource",
            "XXX.minecraft.core.Cursor3D",
            "XXX.minecraft.core.Direction",
            "XXX.minecraft.core.Direction$Axis",
            "XXX.minecraft.core.Direction$Axis$2",
            "XXX.minecraft.core.Direction$AxisDirection",
            "XXX.minecraft.core.Direction8",
            "XXX.minecraft.core.GlobalPos",
            "XXX.minecraft.core.IdMapper",
            "XXX.minecraft.core.Location",
            "XXX.minecraft.core.MappedRegistry",
            "XXX.minecraft.core.Position",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableBoolean",
            "XXX.minecraft.core.SerializableUUID",
            "XXX.minecraft.core.Vec3i",
            "XXX.core.dispenser.AbstractProjectileDispenseBehavior",
            "XXX.core.dispenser.DefaultDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$1",
            "XXX.core.dispenser.DispenseItemBehavior$11",
            "XXX.core.dispenser.DispenseItemBehavior$13",
            "XXX.core.dispenser.DispenseItemBehavior$15",
            "XXX.core.dispenser.DispenseItemBehavior$17",
            "XXX.core.dispenser.DispenseItemBehavior$19",
            "XXX.core.dispenser.DispenseItemBehavior$20",
            "XXX.core.dispenser.DispenseItemBehavior$22",
            "XXX.core.dispenser.DispenseItemBehavior$24",
            "XXX.core.dispenser.DispenseItemBehavior$3",
            "XXX.core.dispenser.DispenseItemBehavior$5",
            "XXX.core.dispenser.DispenseItemBehavior$7",
            "XXX.core.dispenser.DispenseItemBehavior$8",
            "XXX.core.dispenser.DispenseItemBehavior$9",
            "XXX.core.dispenser.ShearsDispenseItemBehavior",
            "XXX.core.dispenser.package-info",
            "XXX.core.particles.BlockParticleOption",
            "XXX.core.particles.DustParticleOptions",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.Main",
            "XXX.data.advancements.AdventureAdvancements",
            "XXX.data.advancements.NetherAdvancements",
            "XXX.data.advancements.TheEndAdvancements",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLoot",
            "XXX.data.loot.EntityLoot",
            "XXX.data.loot.GiftLoot",
            "XXX.data.loot.PiglinBarterLoot",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$1",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$1",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.FinishedRecipe",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.GameTestSequence",
            "XXX.gametest.framework.GameTestServer",
            "XXX.gametest.framework.GameTestTicker",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.StructureUtils",
            "XXX.gametest.framework.TestClassNameArgument",
            "XXX.gametest.framework.TestCommand$TestSummaryDisplayer",
            "XXX.gametest.framework.TestFunctionArgument",
            "XXX.gametest.framework.package-info",
            "XXX.minecraft.locale.package-info",
            "XXX.minecraft.nbt.ByteArrayTag$1",
            "XXX.minecraft.nbt.ByteTag$1",
            "XXX.minecraft.nbt.CollectionTag",
            "XXX.minecraft.nbt.CompoundTag$1",
            "XXX.minecraft.nbt.DoubleTag$1",
            "XXX.minecraft.nbt.EndTag$1",
            "XXX.minecraft.nbt.FloatTag$1",
            "XXX.minecraft.nbt.IntArrayTag$1",
            "XXX.minecraft.nbt.IntTag$1",
            "XXX.minecraft.nbt.ListTag",
            "XXX.minecraft.nbt.LongArrayTag",
            "XXX.minecraft.nbt.LongTag",
            "XXX.minecraft.nbt.LongTag$Cache",
            "XXX.minecraft.nbt.NbtAccounter$1",
            "XXX.minecraft.nbt.NbtOps",
            "XXX.minecraft.nbt.NumericTag",
            "XXX.minecraft.nbt.ShortTag$1",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.Tag",
            "XXX.minecraft.nbt.TagType",
            "XXX.minecraft.nbt.TagTypes",
            "XXX.minecraft.network.CipherBase",
            "XXX.minecraft.network.CipherEncoder",
            "XXX.minecraft.network.CompressionEncoder",
            "XXX.minecraft.network.Connection$1",
            "XXX.minecraft.network.Connection$PacketHolder",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder",
            "XXX.minecraft.network.PacketDecoder",
            "XXX.minecraft.network.PacketListener",
            "XXX.minecraft.network.Varint21FrameDecoder",
            "XXX.network.chat.BaseComponent",
            "XXX.network.chat.ClickEvent",
            "XXX.network.chat.ContextAwareComponent",
            "XXX.network.chat.HoverEvent$Action",
            "XXX.network.chat.TranslatableComponent",
            "XXX.network.chat.package-info",
            "XXX.network.protocol.Packet",
            "XXX.network.protocol.PacketUtils",
            "XXX.protocol.game.ClientboundAddEntityPacket",
            "XXX.protocol.game.ClientboundAddGlobalEntityPacket",
            "XXX.protocol.game.ClientboundAddPaintingPacket",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquippedItemPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.ServerPlaceSmeltingRecipe",
            "XXX.minecraft.resources.ResourceLocation",
            "XXX.minecraft.resources.package-info",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.DebugPathCommand",
            "XXX.server.commands.DifficultyCommand",
            "XXX.server.commands.EmoteCommands",
            "XXX.server.commands.ExecuteCommand",
            "XXX.server.commands.ExecuteCommand$CommandPredicate",
            "XXX.server.commands.ExperienceCommand$Type",
            "XXX.server.commands.FillCommand$Mode",
            "XXX.server.commands.FunctionCommand",
            "XXX.server.commands.GameRuleCommand",
            "XXX.server.commands.GiveCommand",
            "XXX.server.commands.KickCommand",
            "XXX.server.commands.ListPlayersCommand",
            "XXX.server.commands.LocateCommand",
            "XXX.server.commands.LootCommand$Callback",
            "XXX.server.commands.LootCommand$TailProvider",
            "XXX.server.commands.OpCommand",
            "XXX.server.commands.PardonIpCommand",
            "XXX.server.commands.PlaySoundCommand",
            "XXX.server.commands.RaidCommand",
            "XXX.server.commands.ReloadCommand",
            "XXX.server.commands.SaveAllCommand",
            "XXX.server.commands.SaveOnCommand",
            "XXX.server.commands.ScheduleCommand",
            "XXX.server.commands.SeedCommand",
            "XXX.server.commands.SetBlockCommand$Filter",
            "XXX.server.commands.SetPlayerIdleTimeoutCommand",
            "XXX.server.commands.SetWorldSpawnCommand",
            "XXX.server.commands.SpreadPlayersCommand",
            "XXX.server.commands.StopCommand",
            "XXX.server.commands.SummonCommand",
            "XXX.server.commands.TeamCommand",
            "XXX.server.commands.TeleportCommand",
            "XXX.server.commands.TellRawCommand",
            "XXX.server.commands.TitleCommand",
            "XXX.server.commands.WeatherCommand",
            "XXX.server.commands.WorldBorderCommand",
            "XXX.commands.data.BlockDataAccessor$1",
            "XXX.commands.data.DataCommands",
            "XXX.commands.data.DataCommands$DataManipulatorDecorator",
            "XXX.commands.data.EntityDataAccessor",
            "XXX.commands.data.StorageDataAccessor",
            "XXX.commands.data.package-info",
            "XXX.server.dedicated.DedicatedPlayerList",
            "XXX.server.dedicated.DedicatedServer$1",
            "XXX.server.dedicated.DedicatedServerProperties",
            "XXX.server.dedicated.ServerWatchdog",
            "XXX.server.dedicated.Settings",
            "XXX.server.dedicated.Settings$MutableValue",
            "XXX.server.gui.MinecraftServerGui",
            "XXX.server.gui.MinecraftServerGui$2",
            "XXX.server.gui.StatsComponent",
            "XXX.server.level.BlockDestructionProgress",
            "XXX.server.level.ChunkHolder$1",
            "XXX.server.level.ChunkHolder$ChunkLoadingFailure$1",
            "XXX.server.level.ChunkHolder$LevelChangeListener",
            "XXX.server.level.ChunkMap",
            "XXX.server.level.ChunkMap$2",
            "XXX.server.level.ChunkMap$TrackedEntity",
            "XXX.server.level.ChunkTaskPriorityQueueSorter",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Message",
            "XXX.server.level.ChunkTracker",
            "XXX.server.level.DemoMode",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.FeatureSimulator",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerChunkCache$MainThreadExecutor",
            "XXX.server.level.ServerLevel",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.server.network.package-info",
            "XXX.server.packs.AbstractResourcePack",
            "XXX.server.packs.FolderResourcePack",
            "XXX.server.packs.PackType",
            "XXX.server.packs.VanillaPack",
            "XXX.metadata.pack.PackMetadataSection",
            "XXX.metadata.pack.package-info",
            "XXX.server.packs.package-info",
            "XXX.packs.repository.PackCompatibility",
            "XXX.packs.repository.RepositorySource",
            "XXX.packs.repository.UnopenedPack",
            "XXX.packs.repository.UnopenedPack$UnopenedPackConstructor",
            "XXX.packs.resources.FallbackResourceManager",
            "XXX.packs.resources.PreparableReloadListener",
            "XXX.packs.resources.ProfiledReloadInstance",
            "XXX.packs.resources.ProfiledReloadInstance$State",
            "XXX.packs.resources.ReloadableResourceManager",
            "XXX.packs.resources.ResourceManager",
            "XXX.packs.resources.SimpleJsonResourceReloadListener",
            "XXX.packs.resources.SimpleReloadInstance",
            "XXX.packs.resources.SimpleReloadInstance$StateFactory",
            "XXX.packs.resources.SimpleReloadableResourceManager$FailingReloadInstance",
            "XXX.packs.resources.SimpleResource",
            "XXX.server.players.BanListEntry",
            "XXX.server.players.GameProfileCache$1",
            "XXX.server.players.GameProfileCache$GameProfileInfo",
            "XXX.server.players.IpBanList",
            "XXX.server.players.OldUsersConverter",
            "XXX.server.players.OldUsersConverter$2",
            "XXX.server.players.OldUsersConverter$4",
            "XXX.server.players.OldUsersConverter$ConversionError",
            "XXX.server.players.PlayerList$1",
            "XXX.server.players.ServerOpListEntry",
            "XXX.server.players.StoredUserList",
            "XXX.server.players.UserBanListEntry",
            "XXX.server.players.UserWhiteListEntry",
            "XXX.server.rcon.NetworkDataOutputStream",
            "XXX.server.rcon.RconConsoleSource",
            "XXX.rcon.thread.GenericThread",
            "XXX.rcon.thread.QueryThreadGs4$RequestChallenge",
            "XXX.rcon.thread.RconThread",
            "XXX.minecraft.sounds.SoundEvent",
            "XXX.minecraft.sounds.SoundSource",
            "XXX.minecraft.stats.RecipeBook",
            "XXX.minecraft.stats.ServerStatsCounter",
            "XXX.minecraft.stats.StatFormatter",
            "XXX.minecraft.stats.Stats",
            "XXX.minecraft.stats.package-info",
            "XXX.minecraft.tags.EntityTypeTags",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.StaticTagHelper$1",
            "XXX.minecraft.tags.SynchronizableTagCollection",
            "XXX.minecraft.tags.Tag$1",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagManager",
            "XXX.minecraft.util.BitStorage",
            "XXX.minecraft.util.CrudeIncrementalIntIdentityHashBiMap",
            "XXX.minecraft.util.CsvOutput",
            "XXX.minecraft.util.CsvOutput$Builder",
            "XXX.minecraft.util.CubicSampler$Vec3Fetcher",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.InsensitiveStringMap",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.LinearCongruentialGenerator",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory$1",
            "XXX.minecraft.util.ProgressListener",
            "XXX.minecraft.util.RewindableStream$1",
            "XXX.minecraft.util.Serializer",
            "XXX.minecraft.util.SortedArraySet",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.util.datafix.OminousBannerRenameFix",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.world.level.GameRules$GameRuleTypeVisitor",
            "XXX.world.level.GameRules$Key",
            "XXX.world.level.GameRules$Value",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkGeneratorFactory",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.FeatureAccess",
            "XXX.level.chunk.HashMapPalette",
            "XXX.level.chunk.LevelChunk",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.chunk.UpgradeData$BlockFixer",
            "XXX.level.chunk.UpgradeData$BlockFixers$1",
            "XXX.level.chunk.UpgradeData$BlockFixers$3",
            "XXX.level.chunk.UpgradeData$BlockFixers$5",
            "XXX.chunk.storage.ChunkSerializer",
            "XXX.chunk.storage.IOWorker",
            "XXX.chunk.storage.IOWorker$PendingStore",
            "XXX.chunk.storage.OldChunkStorage$OldLevelChunk",
            "XXX.chunk.storage.RegionFile",
            "XXX.chunk.storage.RegionFile$CommitOp",
            "XXX.chunk.storage.RegionFileVersion",
            "XXX.chunk.storage.SectionStorage",
            "XXX.level.dimension.Dimension",
            "XXX.level.dimension.NetherDimension",
            "XXX.level.dimension.NormalDimension",
            "XXX.dimension.end.DragonRespawnAnimation$1",
            "XXX.dimension.end.DragonRespawnAnimation$3",
            "XXX.dimension.end.DragonRespawnAnimation$5",
            "XXX.dimension.end.TheEndDimension",
            "XXX.level.dimension.package-info",
            "XXX.level.levelgen.ChunkGeneratorSettings",
            "XXX.level.levelgen.DebugLevelSource",
            "XXX.level.levelgen.FlatLevelSource$FlatLevelBiomeWrapper",
            "XXX.level.levelgen.GenerationStep$Carving",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NetherLevelSource",
            "XXX.level.levelgen.OverworldGeneratorSettings",
            "XXX.level.levelgen.PatrolSpawner",
            "XXX.level.levelgen.TheEndGeneratorSettings",
            "XXX.level.levelgen.WorldgenRandom",
            "XXX.levelgen.carver.CarverConfiguration",
            "XXX.levelgen.carver.ConfiguredWorldCarver",
            "XXX.levelgen.carver.NoneCarverConfiguration",
            "XXX.levelgen.carver.UnderwaterCaveWorldCarver",
            "XXX.levelgen.carver.package-info",
            "XXX.levelgen.feature.AbstractHugeMushroomFeature",
            "XXX.levelgen.feature.AbstractTreeFeature",
            "XXX.levelgen.feature.BasaltColumnsFeature",
            "XXX.levelgen.feature.BastionBridgePools",
            "XXX.levelgen.feature.BastionFeature$FeatureStart",
            "XXX.levelgen.feature.BastionHousingUnitsPools",
            "XXX.levelgen.feature.BastionPieces$BastionPiece",
            "XXX.levelgen.feature.BastionTreasureRoomPools",
            "XXX.levelgen.feature.BlockPileFeature",
            "XXX.levelgen.feature.BonusChestFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart",
            "XXX.levelgen.feature.ConfiguredFeature",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.FancyTreeFeature",
            "XXX.levelgen.feature.GroundBushFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.levelgen.feature.MegaJungleTreeFeature",
            "XXX.levelgen.feature.MegaTreeFeature",
            "XXX.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder",
            "XXX.feature.configurations.SmallTreeConfiguration",
            "XXX.feature.foliageplacers.BlobFoliagePlacer",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.StructureTemplatePools",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.material.Fluids",
            "XXX.level.material.LavaFluid$Flowing",
            "XXX.level.material.Material",
            "XXX.level.material.MaterialColor",
            "XXX.level.material.WaterFluid",
            "XXX.level.material.WaterFluid$Source",
            "XXX.newbiome.area.Area",
            "XXX.newbiome.area.LazyArea",
            "XXX.newbiome.context.BigContext",
            "XXX.newbiome.context.LazyAreaContext",
            "XXX.newbiome.layer.AddDeepOceanLayer",
            "XXX.newbiome.layer.AddEdgeLayer$CoolWarm",
            "XXX.newbiome.layer.AddEdgeLayer$IntroduceSpecial",
            "XXX.newbiome.layer.AddMushroomIslandLayer",
            "XXX.newbiome.layer.BiomeEdgeLayer",
            "XXX.newbiome.layer.IslandLayer",
            "XXX.newbiome.layer.Layers",
            "XXX.newbiome.layer.OceanMixerLayer",
            "XXX.newbiome.layer.RareBiomeSpotLayer",
            "XXX.newbiome.layer.RemoveTooMuchOceanLayer",
            "XXX.newbiome.layer.RiverLayer",
            "XXX.newbiome.layer.ShoreLayer",
            "XXX.newbiome.layer.ZoomLayer",
            "XXX.newbiome.layer.package-info",
            "XXX.layer.traits.AreaTransformer1",
            "XXX.layer.traits.BishopTransformer",
            "XXX.layer.traits.C1Transformer",
            "XXX.layer.traits.DimensionOffset0Transformer",
            "XXX.layer.traits.DimensionTransformer",
            "XXX.layer.traits.package-info",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.pathfinder.TurtleNodeEvaluator",
            "XXX.level.pathfinder.package-info",
            "XXX.level.redstone.package-info",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.saveddata.maps.MapItemSavedData$HoldingPlayer",
            "XXX.level.saveddata.package-info",
            "XXX.level.storage.CommandStorage$Container",
            "XXX.level.storage.DimensionDataStorage",
            "XXX.level.storage.LevelStorage",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.PlayerIO",
            "XXX.storage.loot.BinomialDistributionGenerator$Serializer",
            "XXX.storage.loot.ConstantIntValue",
            "XXX.storage.loot.IntLimiter",
            "XXX.storage.loot.IntLimiter$Serializer",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.RandomIntGenerator",
            "XXX.storage.loot.RandomValueBounds",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntries$Serializer",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$DataSource",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunction$Serializer",
            "XXX.loot.functions.LootItemFunctions$Serializer",
            "XXX.loot.functions.LootingEnchantFunction$1",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$1",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetContainerLootTable$1",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetItemCountFunction$Serializer",
            "XXX.loot.functions.SetItemDamageFunction$1",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNameFunction$1",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.SetStewEffectFunction$1",
            "XXX.loot.functions.SetStewEffectFunction$Serializer",
            "XXX.loot.functions.SmeltItemFunction$1",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$1",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AlternativeLootItemCondition$1",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.BonusLevelTableCondition$1",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.InvertedLootItemCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.TimeCheck$Serializer",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$1",
            "XXX.level.timers.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.IntPointRange",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.WorldRegionIndirectVoxelShape",
            "XXX.world.scores.Objective",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info"
          ],
          "removed": [
            "XXX.commands.arguments.UuidArgument",
            "XXX.arguments.blocks.BlockPredicateArgument",
            "XXX.arguments.blocks.BlockPredicateArgument$BlockPredicate",
            "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate",
            "XXX.arguments.blocks.BlockStateParser",
            "XXX.arguments.coordinates.BlockPosArgument",
            "XXX.arguments.coordinates.Coordinates",
            "XXX.arguments.coordinates.RotationArgument",
            "XXX.arguments.coordinates.Vec2Argument",
            "XXX.arguments.coordinates.WorldCoordinate",
            "XXX.arguments.coordinates.package-info",
            "XXX.arguments.item.FunctionArgument$1",
            "XXX.arguments.item.FunctionArgument$Result",
            "XXX.arguments.item.ItemInput",
            "XXX.arguments.item.ItemPredicateArgument",
            "XXX.arguments.item.ItemPredicateArgument$Result",
            "XXX.arguments.item.package-info",
            "XXX.arguments.selector.EntitySelector",
            "XXX.selector.options.EntitySelectorOptions",
            "XXX.selector.options.EntitySelectorOptions$Modifier",
            "XXX.selector.options.package-info",
            "XXX.commands.exceptions.package-info",
            "XXX.commands.synchronization.ArgumentSerializer",
            "XXX.commands.synchronization.ArgumentTypes$1",
            "XXX.commands.synchronization.EmptyArgumentSerializer",
            "XXX.commands.synchronization.SuggestionProviders$Wrapper",
            "XXX.synchronization.brigadier.DoubleArgumentSerializer",
            "XXX.synchronization.brigadier.IntegerArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer",
            "XXX.synchronization.brigadier.package-info",
            "XXX.minecraft.core.AxisCycle",
            "XXX.minecraft.core.AxisCycle$2",
            "XXX.minecraft.core.BlockMath",
            "XXX.minecraft.core.BlockPos$1",
            "XXX.minecraft.core.BlockPos$3",
            "XXX.minecraft.core.BlockPos$MutableBlockPos",
            "XXX.minecraft.core.BlockSourceImpl",
            "XXX.minecraft.core.DefaultedRegistry",
            "XXX.minecraft.core.Direction$1",
            "XXX.minecraft.core.Direction$Axis$1",
            "XXX.minecraft.core.Direction$Axis$3",
            "XXX.minecraft.core.Direction$Plane",
            "XXX.minecraft.core.FrontAndTop",
            "XXX.minecraft.core.IdMap",
            "XXX.minecraft.core.LocatableSource",
            "XXX.minecraft.core.MapFiller",
            "XXX.minecraft.core.NonNullList",
            "XXX.minecraft.core.PositionImpl",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.minecraft.core.SerializableLong",
            "XXX.minecraft.core.Source",
            "XXX.minecraft.core.WritableRegistry",
            "XXX.core.dispenser.BoatDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$10",
            "XXX.core.dispenser.DispenseItemBehavior$12",
            "XXX.core.dispenser.DispenseItemBehavior$14",
            "XXX.core.dispenser.DispenseItemBehavior$16",
            "XXX.core.dispenser.DispenseItemBehavior$18",
            "XXX.core.dispenser.DispenseItemBehavior$2",
            "XXX.core.dispenser.DispenseItemBehavior$21",
            "XXX.core.dispenser.DispenseItemBehavior$23",
            "XXX.core.dispenser.DispenseItemBehavior$25",
            "XXX.core.dispenser.DispenseItemBehavior$4",
            "XXX.core.dispenser.DispenseItemBehavior$6",
            "XXX.core.dispenser.DispenseItemBehavior$7$1",
            "XXX.core.dispenser.DispenseItemBehavior$8$1",
            "XXX.core.dispenser.OptionalDispenseItemBehavior",
            "XXX.core.dispenser.ShulkerBoxDispenseBehavior",
            "XXX.minecraft.core.package-info",
            "XXX.core.particles.BlockParticleOption$1",
            "XXX.core.particles.DustParticleOptions$1",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.HashCache",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.HusbandryAdvancements",
            "XXX.data.advancements.StoryAdvancements",
            "XXX.data.advancements.package-info",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.ChestLoot",
            "XXX.data.loot.FishingLoot",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.PropertyValue",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BlockTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.gametest.framework.BeforeBatch",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestRunner$1",
            "XXX.gametest.framework.GameTestSequence$Condition",
            "XXX.gametest.framework.GameTestServer$1",
            "XXX.gametest.framework.GameTestTimeoutException",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.TeamcityTestReporter",
            "XXX.gametest.framework.TestCommand",
            "XXX.gametest.framework.TestFunction",
            "XXX.gametest.framework.TestReporter",
            "XXX.minecraft.locale.Language",
            "XXX.minecraft.nbt.ByteArrayTag",
            "XXX.minecraft.nbt.ByteTag",
            "XXX.minecraft.nbt.ByteTag$Cache",
            "XXX.minecraft.nbt.CompoundTag",
            "XXX.minecraft.nbt.DoubleTag",
            "XXX.minecraft.nbt.EndTag",
            "XXX.minecraft.nbt.FloatTag",
            "XXX.minecraft.nbt.IntArrayTag",
            "XXX.minecraft.nbt.IntTag",
            "XXX.minecraft.nbt.IntTag$Cache",
            "XXX.minecraft.nbt.ListTag$1",
            "XXX.minecraft.nbt.LongArrayTag$1",
            "XXX.minecraft.nbt.LongTag$1",
            "XXX.minecraft.nbt.NbtAccounter",
            "XXX.minecraft.nbt.NbtIo",
            "XXX.minecraft.nbt.NbtUtils",
            "XXX.minecraft.nbt.ShortTag",
            "XXX.minecraft.nbt.ShortTag$Cache",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.TagParser",
            "XXX.minecraft.nbt.TagType$1",
            "XXX.minecraft.nbt.package-info",
            "XXX.minecraft.network.CipherDecoder",
            "XXX.minecraft.network.CompressionDecoder",
            "XXX.minecraft.network.Connection",
            "XXX.minecraft.network.Connection$2",
            "XXX.minecraft.network.ConnectionProtocol",
            "XXX.minecraft.network.ConnectionProtocol$PacketSet",
            "XXX.minecraft.network.FriendlyByteBuf",
            "XXX.minecraft.network.PacketEncoder",
            "XXX.minecraft.network.SkipPacketException",
            "XXX.minecraft.network.Varint21LengthFieldPrepender",
            "XXX.network.chat.ChatType",
            "XXX.network.chat.ClickEvent$Action",
            "XXX.network.chat.ComponentUtils",
            "XXX.network.chat.HoverEvent",
            "XXX.network.chat.HoverEvent$EntityTooltipInfo",
            "XXX.network.chat.KeybindComponent",
            "XXX.network.chat.TextComponent",
            "XXX.network.chat.TranslatableFormatException",
            "XXX.minecraft.network.package-info",
            "XXX.network.protocol.PacketFlow",
            "XXX.protocol.game.ClientGamePacketListener",
            "XXX.protocol.game.ClientboundAddExperienceOrbPacket",
            "XXX.protocol.game.ClientboundAddMobPacket",
            "XXX.protocol.game.ClientboundAddPlayerPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.minecraft.resources.ResourceLocation$Serializer",
            "XXX.minecraft.server.Bootstrap",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.DebugMobSpawningCommand",
            "XXX.server.commands.DefaultGameModeCommands",
            "XXX.server.commands.EffectCommands",
            "XXX.server.commands.EnchantCommand",
            "XXX.server.commands.ExecuteCommand$CommandNumericPredicate",
            "XXX.server.commands.ExperienceCommand",
            "XXX.server.commands.FillCommand",
            "XXX.server.commands.ForceLoadCommand",
            "XXX.server.commands.GameModeCommand",
            "XXX.server.commands.GameRuleCommand$1",
            "XXX.server.commands.HelpCommand",
            "XXX.server.commands.KillCommand",
            "XXX.server.commands.LocateBiomeCommand",
            "XXX.server.commands.LootCommand",
            "XXX.server.commands.LootCommand$DropConsumer",
            "XXX.server.commands.MsgCommand",
            "XXX.server.commands.PardonCommand",
            "XXX.server.commands.ParticleCommand",
            "XXX.server.commands.PublishCommand",
            "XXX.server.commands.RecipeCommand",
            "XXX.server.commands.ReplaceItemCommand",
            "XXX.server.commands.SaveOffCommand",
            "XXX.server.commands.SayCommand",
            "XXX.server.commands.ScoreboardCommand",
            "XXX.server.commands.SetBlockCommand",
            "XXX.server.commands.SetBlockCommand$Mode",
            "XXX.server.commands.SetSpawnCommand",
            "XXX.server.commands.SpectateCommand",
            "XXX.server.commands.SpreadPlayersCommand$Position",
            "XXX.server.commands.StopSoundCommand",
            "XXX.server.commands.TagCommand",
            "XXX.server.commands.TeamMsgCommand",
            "XXX.server.commands.TeleportCommand$LookAt",
            "XXX.server.commands.TimeCommand",
            "XXX.server.commands.TriggerCommand",
            "XXX.server.commands.WhitelistCommand",
            "XXX.commands.data.BlockDataAccessor",
            "XXX.commands.data.DataAccessor",
            "XXX.commands.data.DataCommands$DataManipulator",
            "XXX.commands.data.DataCommands$DataProvider",
            "XXX.commands.data.EntityDataAccessor$1",
            "XXX.commands.data.StorageDataAccessor$1",
            "XXX.server.commands.package-info",
            "XXX.server.dedicated.DedicatedServer",
            "XXX.server.dedicated.DedicatedServer$2",
            "XXX.server.dedicated.DedicatedServerSettings",
            "XXX.server.dedicated.ServerWatchdog$1",
            "XXX.server.dedicated.Settings$1",
            "XXX.server.dedicated.package-info",
            "XXX.server.gui.MinecraftServerGui$1",
            "XXX.server.gui.PlayerListComponent",
            "XXX.server.gui.package-info",
            "XXX.server.level.ChunkHolder",
            "XXX.server.level.ChunkHolder$ChunkLoadingFailure",
            "XXX.server.level.ChunkHolder$FullChunkStatus",
            "XXX.server.level.ChunkHolder$PlayerProvider",
            "XXX.server.level.ChunkMap$1",
            "XXX.server.level.ChunkMap$DistanceManager",
            "XXX.server.level.ChunkTaskPriorityQueue",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Release",
            "XXX.server.level.ColumnPos",
            "XXX.server.level.DerivedServerLevel",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerChunkCache$1",
            "XXX.server.level.ServerEntity",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.server.network.ServerStatusPacketListenerImpl",
            "XXX.minecraft.server.package-info",
            "XXX.server.packs.FileResourcePack",
            "XXX.server.packs.Pack",
            "XXX.server.packs.ResourcePackFileNotFoundException",
            "XXX.packs.metadata.MetadataSectionSerializer",
            "XXX.metadata.pack.PackMetadataSectionSerializer",
            "XXX.packs.metadata.package-info",
            "XXX.packs.repository.FolderRepositorySource",
            "XXX.packs.repository.PackRepository",
            "XXX.packs.repository.ServerPacksSource",
            "XXX.packs.repository.UnopenedPack$Position",
            "XXX.packs.repository.package-info",
            "XXX.packs.resources.FallbackResourceManager$LeakedResourceWarningInputStream",
            "XXX.packs.resources.PreparableReloadListener$PreparationBarrier",
            "XXX.packs.resources.ProfiledReloadInstance$1",
            "XXX.packs.resources.ReloadInstance",
            "XXX.packs.resources.Resource",
            "XXX.packs.resources.ResourceManagerReloadListener",
            "XXX.packs.resources.SimplePreparableReloadListener",
            "XXX.packs.resources.SimpleReloadInstance$1",
            "XXX.packs.resources.SimpleReloadableResourceManager",
            "XXX.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure",
            "XXX.packs.resources.package-info",
            "XXX.server.players.GameProfileCache",
            "XXX.server.players.GameProfileCache$2",
            "XXX.server.players.GameProfileCache$Serializer",
            "XXX.server.players.IpBanListEntry",
            "XXX.server.players.OldUsersConverter$1",
            "XXX.server.players.OldUsersConverter$3",
            "XXX.server.players.OldUsersConverter$5",
            "XXX.server.players.PlayerList",
            "XXX.server.players.ServerOpList",
            "XXX.server.players.StoredUserEntry",
            "XXX.server.players.UserBanList",
            "XXX.server.players.UserWhiteList",
            "XXX.server.players.package-info",
            "XXX.server.rcon.PktUtils",
            "XXX.server.rcon.package-info",
            "XXX.rcon.thread.QueryThreadGs4",
            "XXX.rcon.thread.RconClient",
            "XXX.rcon.thread.package-info",
            "XXX.minecraft.sounds.Musics",
            "XXX.minecraft.sounds.SoundEvents",
            "XXX.minecraft.sounds.package-info",
            "XXX.minecraft.stats.ServerRecipeBook",
            "XXX.minecraft.stats.Stat",
            "XXX.minecraft.stats.StatType",
            "XXX.minecraft.stats.StatsCounter",
            "XXX.minecraft.tags.BlockTags",
            "XXX.minecraft.tags.FluidTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.StaticTagHelper$Wrapper",
            "XXX.minecraft.tags.Tag",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.tags.package-info",
            "XXX.minecraft.util.ClassInstanceMultiMap",
            "XXX.minecraft.util.Crypt",
            "XXX.minecraft.util.CsvOutput$1",
            "XXX.minecraft.util.CubicSampler",
            "XXX.minecraft.util.Deserializer",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HttpUtil",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.LimitedCapacityList",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory",
            "XXX.minecraft.util.Mth",
            "XXX.minecraft.util.RewindableStream",
            "XXX.minecraft.util.Serializable",
            "XXX.minecraft.util.SmoothDouble",
            "XXX.minecraft.util.SortedArraySet$1",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.world.level.GameRules$Category",
            "XXX.world.level.GameRules$IntegerValue",
            "XXX.world.level.GameRules$Type",
            "XXX.world.level.GameRules$VisitorCaller",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkGeneratorType",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.GlobalPalette",
            "XXX.level.chunk.ImposterProtoChunk",
            "XXX.level.chunk.LevelChunk$EntityCreationType",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.chunk.UpgradeData$1",
            "XXX.level.chunk.UpgradeData$BlockFixers",
            "XXX.level.chunk.UpgradeData$BlockFixers$2",
            "XXX.level.chunk.UpgradeData$BlockFixers$4",
            "XXX.level.chunk.package-info",
            "XXX.chunk.storage.ChunkStorage",
            "XXX.chunk.storage.IOWorker$1",
            "XXX.chunk.storage.OldChunkStorage",
            "XXX.chunk.storage.RegionBitmap",
            "XXX.chunk.storage.RegionFile$ChunkBuffer",
            "XXX.chunk.storage.RegionFileStorage",
            "XXX.chunk.storage.RegionFileVersion$StreamWrapper",
            "XXX.chunk.storage.package-info",
            "XXX.level.dimension.DimensionType",
            "XXX.level.dimension.NetherDimension$1",
            "XXX.dimension.end.DragonRespawnAnimation",
            "XXX.dimension.end.DragonRespawnAnimation$2",
            "XXX.dimension.end.DragonRespawnAnimation$4",
            "XXX.dimension.end.EndDragonFight",
            "XXX.dimension.end.package-info",
            "XXX.level.levelgen.ChunkGeneratorProvider",
            "XXX.level.levelgen.DebugGeneratorSettings",
            "XXX.level.levelgen.FlatLevelSource",
            "XXX.level.levelgen.GenerationStep",
            "XXX.level.levelgen.GenerationStep$Decoration",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NetherGeneratorSettings",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.OverworldLevelSource",
            "XXX.level.levelgen.PhantomSpawner",
            "XXX.level.levelgen.TheEndLevelSource",
            "XXX.levelgen.carver.CanyonWorldCarver",
            "XXX.levelgen.carver.CaveWorldCarver",
            "XXX.levelgen.carver.NetherWorldCarver",
            "XXX.levelgen.carver.UnderwaterCanyonWorldCarver",
            "XXX.levelgen.carver.WorldCarver",
            "XXX.levelgen.feature.AbstractFlowerFeature",
            "XXX.levelgen.feature.BambooFeature",
            "XXX.levelgen.feature.BasaltPillarFeature",
            "XXX.levelgen.feature.BastionFeature",
            "XXX.levelgen.feature.BastionHoglinStablePools",
            "XXX.levelgen.feature.BastionPieces",
            "XXX.levelgen.feature.BastionSharedPools",
            "XXX.levelgen.feature.BlockBlobFeature",
            "XXX.levelgen.feature.BlueIceFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature",
            "XXX.levelgen.feature.ChorusPlantFeature",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.feature.featuresize.FeatureSizeType",
            "XXX.feature.featuresize.TwoLayersFeatureSize",
            "XXX.feature.foliageplacers.AcaciaFoliagePlacer",
            "XXX.feature.foliageplacers.BushFoliagePlacer",
            "XXX.feature.foliageplacers.FancyFoliagePlacer",
            "XXX.feature.foliageplacers.FoliagePlacer$FoliageAttachment",
            "XXX.feature.foliageplacers.MegaJungleFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.FluidStateImpl",
            "XXX.level.material.LavaFluid",
            "XXX.level.material.LavaFluid$Source",
            "XXX.level.material.Material$Builder",
            "XXX.level.material.PushReaction",
            "XXX.level.material.WaterFluid$Flowing",
            "XXX.level.material.package-info",
            "XXX.newbiome.area.AreaFactory",
            "XXX.newbiome.area.package-info",
            "XXX.newbiome.context.Context",
            "XXX.newbiome.context.package-info",
            "XXX.newbiome.layer.AddEdgeLayer",
            "XXX.newbiome.layer.AddEdgeLayer$HeatIce",
            "XXX.newbiome.layer.AddIslandLayer",
            "XXX.newbiome.layer.AddSnowLayer",
            "XXX.newbiome.layer.BiomeInitLayer",
            "XXX.newbiome.layer.Layer",
            "XXX.newbiome.layer.OceanLayer",
            "XXX.newbiome.layer.RareBiomeLargeLayer",
            "XXX.newbiome.layer.RegionHillsLayer",
            "XXX.newbiome.layer.RiverInitLayer",
            "XXX.newbiome.layer.RiverMixerLayer",
            "XXX.newbiome.layer.SmoothLayer",
            "XXX.newbiome.layer.ZoomLayer$1",
            "XXX.layer.traits.AreaTransformer0",
            "XXX.layer.traits.AreaTransformer2",
            "XXX.layer.traits.C0Transformer",
            "XXX.layer.traits.CastleTransformer",
            "XXX.layer.traits.DimensionOffset1Transformer",
            "XXX.layer.traits.PixelTransformer",
            "XXX.world.level.package-info",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.level.pathfinder.WalkNodeEvaluator",
            "XXX.level.redstone.Redstone",
            "XXX.level.saveddata.SaveDataDirtyRunnable",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.saveddata.maps.package-info",
            "XXX.level.storage.CommandStorage",
            "XXX.level.storage.DerivedLevelData",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.storage.loot.BinomialDistributionGenerator",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.ConstantIntValue$Serializer",
            "XXX.storage.loot.IntLimiter$1",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.RandomIntGenerators",
            "XXX.storage.loot.RandomValueBounds$Serializer",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.CompositeEntryBase$Serializer",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Serializer",
            "XXX.loot.functions.EnchantRandomlyFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.EnchantWithLevelsFunction$1",
            "XXX.loot.functions.EnchantWithLevelsFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$1",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LimitCount$Serializer",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemConditionalFunction$Serializer",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetContainerLootTable$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNameFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AlternativeLootItemCondition",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.BonusLevelTableCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.DamageSourceCondition$Serializer",
            "XXX.loot.predicates.EntityHasScoreCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.InvertedLootItemCondition$1",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemCondition$Serializer",
            "XXX.loot.predicates.LootItemConditions$Serializer",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$1",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$1",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.storage.threaded.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.PosAndRot",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "net.minecraft.SharedConstants \u001b[2;31m-1M\u001b[0m",
          "XXX.network.chat.Component \u001b[2;32m+9M\u001b[0m \u001b[2;31m-10M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.network.chat.Component$Serializer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.network.chat.NbtComponent \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.network.chat.NbtComponent$EntityNbtComponent \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.network.chat.ScoreComponent \u001b[2;32m+8M\u001b[0m \u001b[2;31m-7M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.network.chat.Style \u001b[2;32m+26M\u001b[0m \u001b[2;31m-31M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.network.chat.Style$Serializer \u001b[2;32m+6M\u001b[0m",
          "XXX.minecraft.server.MinecraftServer \u001b[2;32m+26M\u001b[0m \u001b[2;31m-27M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-11P\u001b[0m",
          "XXX.server.bossevents.CustomBossEvent \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.world.Difficulty \u001b[2;32m+1M\u001b[0m",
          "XXX.world.damagesource.BadRespawnPointDamage \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.entity.Entity \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.world.entity.EntityType$Builder \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.world.entity.HumanoidArm \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.attributes.AttributeInstance \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.attributes.AttributeSupplier \u001b[2;32m+3M\u001b[0m",
          "XXX.entity.animal.Rabbit \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.item.ItemEntity \u001b[2;32m+2M\u001b[0m",
          "XXX.world.item.BannerPatternItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.CompassItem \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.world.item.CompassItem$CompassWobble \u001b[2;32m+5M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.world.item.FireworkStarItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.Items \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.level.LevelType \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.level.biome.Biome$ClimateParameters \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.biome.BiomeManager \u001b[2;32m+1M\u001b[0m",
          "XXX.level.biome.MultiNoiseBiomeSourceSettings \u001b[2;32m+7M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.BedBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.ChainBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.EndRodBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.FlowerPotBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.SeaPickleBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.SoundType \u001b[2;32m+3P\u001b[0m",
          "XXX.block.entity.SignBlockEntity \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.levelgen.feature.Feature \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-6P\u001b[0m",
          "XXX.feature.configurations.TreeConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.trunkplacers.ForkingTrunkPlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.trunkplacers.TrunkPlacer \u001b[2;32m+7M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.SharedConstants",
        "differences": {
          "added": [
            "String filterUnicodeSupplementary(String)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.Component",
        "differences": {
          "added": [
            "Component append(String)",
            "String getColoredString()",
            "Stream flatStream()",
            "Iterator iterator()",
            "Component deepCopy()",
            "Component withStyle(Consumer)",
            "Component withStyle(ChatFormatting[])",
            "Component withStyle(ChatFormatting)",
            "Component flattenStyle(Component)",
            "void lambda$getString$0(StringBuilder,Component)"
          ],
          "removed": [
            "Optional visit(Component$StyledContentConsumer,Style)",
            "Optional visit(Component$ContentConsumer)",
            "Optional visitSelf(Component$StyledContentConsumer,Style)",
            "Optional visitSelf(Component$ContentConsumer)",
            "List toFlatList(Style)",
            "Optional lambda$toFlatList$2(List,Style,String)",
            "Optional lambda$getString$1(int,StringBuilder,String)",
            "Optional lambda$getString$0(StringBuilder,String)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.Component$Serializer",
        "differences": {
          "added": [
            "Component deserialize(JsonElement,Type,JsonDeserializationContext)",
            "Component fromJson(String)",
            "Component fromJson(JsonElement)",
            "Component fromJsonLenient(String)",
            "Component fromJson(StringReader)"
          ],
          "removed": [
            "MutableComponent deserialize(JsonElement,Type,JsonDeserializationContext)",
            "MutableComponent fromJson(String)",
            "MutableComponent fromJson(JsonElement)",
            "MutableComponent fromJsonLenient(String)",
            "MutableComponent fromJson(StringReader)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.NbtComponent",
        "differences": {
          "added": [
            "String getContents()",
            "Component resolve(CommandSourceStack,Entity,int)",
            "Component lambda$resolve$2(Component,Component)"
          ],
          "removed": [
            "MutableComponent resolve(CommandSourceStack,Entity,int)",
            "MutableComponent lambda$resolve$2(MutableComponent,MutableComponent)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.NbtComponent$EntityNbtComponent",
        "differences": {
          "added": [
            "Component copy()"
          ],
          "removed": [
            "NbtComponent$EntityNbtComponent toMutable()",
            "BaseComponent toMutable()",
            "MutableComponent toMutable()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.ScoreComponent",
        "differences": {
          "added": [
            "String getEntityName(CommandSourceStack)",
            "void setValue(String)",
            "String getContents()",
            "void resolve(CommandSourceStack)",
            "ScoreComponent copy()",
            "Component resolve(CommandSourceStack,Entity,int)",
            "Component copy()"
          ],
          "removed": [
            "EntitySelector parseSelector(String)",
            "void <init>(String,EntitySelector,String)",
            "String findTargetName(CommandSourceStack)",
            "String getScore(String,CommandSourceStack)",
            "ScoreComponent toMutable()",
            "MutableComponent resolve(CommandSourceStack,Entity,int)",
            "BaseComponent toMutable()",
            "MutableComponent toMutable()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.Style",
        "differences": {
          "added": [
            "void <init>()",
            "ChatFormatting getColor()",
            "Style setColor(ChatFormatting)",
            "Style setBold(Boolean)",
            "Style setItalic(Boolean)",
            "Style setStrikethrough(Boolean)",
            "Style setUnderlined(Boolean)",
            "Style setObfuscated(Boolean)",
            "Style setClickEvent(ClickEvent)",
            "Style setHoverEvent(HoverEvent)",
            "Style setInsertion(String)",
            "Style inheritFrom(Style)",
            "String getLegacyFormatCodes()",
            "Style getParent()",
            "String toStringResolved()",
            "Style copy()",
            "Style flatCopy()",
            "Boolean access$002(Style,Boolean)",
            "Boolean access$102(Style,Boolean)",
            "Boolean access$202(Style,Boolean)",
            "Boolean access$302(Style,Boolean)",
            "Boolean access$402(Style,Boolean)",
            "ChatFormatting access$502(Style,ChatFormatting)",
            "String access$602(Style,String)",
            "ClickEvent access$702(Style,ClickEvent)",
            "HoverEvent access$802(Style,HoverEvent)",
            "Boolean access$000(Style)",
            "ChatFormatting access$500(Style)",
            "String access$600(Style)",
            "ClickEvent access$700(Style)",
            "HoverEvent access$800(Style)"
          ],
          "removed": [
            "void <init>(TextColor,Boolean,Boolean,Boolean,Boolean,Boolean,ClickEvent,HoverEvent,String,ResourceLocation)",
            "TextColor getColor()",
            "ResourceLocation getFont()",
            "Style withColor(TextColor)",
            "Style withColor(ChatFormatting)",
            "Style withColor(int)",
            "Style withBold(Boolean)",
            "Style withItalic(Boolean)",
            "Style withUnderlined(Boolean)",
            "Style withStrikethrough(Boolean)",
            "Style withObfuscated(Boolean)",
            "Style withClickEvent(ClickEvent)",
            "Style withHoverEvent(HoverEvent)",
            "Style withInsertion(String)",
            "Style withFont(ResourceLocation)",
            "Style applyFormat(ChatFormatting)",
            "Style applyLegacyFormat(ChatFormatting)",
            "Style applyFormats(ChatFormatting[])",
            "Style applyTo(Style)",
            "void <init>(TextColor,Boolean,Boolean,Boolean,Boolean,Boolean,ClickEvent,HoverEvent,String,ResourceLocation,Style$1)",
            "Boolean access$500(Style)",
            "TextColor access$600(Style)",
            "String access$700(Style)",
            "ClickEvent access$800(Style)",
            "HoverEvent access$900(Style)",
            "ResourceLocation access$1000(Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.Style$Serializer",
        "differences": {
          "added": [],
          "removed": [
            "ResourceLocation getFont(JsonObject)",
            "HoverEvent getHoverEvent(JsonObject)",
            "ClickEvent getClickEvent(JsonObject)",
            "String getInsertion(JsonObject)",
            "TextColor getTextColor(JsonObject)",
            "Boolean getOptionalFlag(JsonObject,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.MinecraftServer",
        "differences": {
          "added": [
            "void <init>(LevelStorageSource$LevelStorageAccess,Proxy,DataFixer,Commands,MinecraftSessionService,GameProfileRepository,GameProfileCache,ChunkProgressListenerFactory)",
            "void ensureLevelConversion()",
            "void setServerStartupState(Component)",
            "Component getStartupState()",
            "void loadLevel(String,long,ChunkGeneratorProvider)",
            "void createLevels(LevelStorage,LevelData,LevelSettings,ChunkProgressListener)",
            "void setupDebugLevel(LevelData)",
            "void loadDataPacks(File,LevelData)",
            "void detectBundledResources(String,LevelStorage)",
            "void forceUpgrade(boolean)",
            "void eraseCache(boolean)",
            "void setLevelName(String)",
            "String getLevelName()",
            "boolean getSpawnMonsters()",
            "void setBonusChest(boolean)",
            "boolean isAnimals()",
            "void setAnimals(boolean)",
            "boolean isNpcsEnabled()",
            "void setNpcsEnabled(boolean)",
            "void setDefaultGameMode(GameType)",
            "void updateSelectedPacks(LevelData)",
            "Path getWorldPath()",
            "void lambda$updateSelectedPacks$10(LevelData,UnopenedPack)",
            "void lambda$updateSelectedPacks$9(LevelData,UnopenedPack)",
            "void lambda$updateSelectedPacks$8(List,UnopenedPack)",
            "UnopenedPack lambda$updateSelectedPacks$7(UnopenedPack)",
            "String lambda$fillReport$4()"
          ],
          "removed": [
            "void <init>(LevelStorageSource$LevelStorageAccess,WorldData,Proxy,DataFixer,Commands,MinecraftSessionService,GameProfileRepository,GameProfileCache,ChunkProgressListenerFactory)",
            "void ensureLevelConversion(LevelStorageSource$LevelStorageAccess,DataFixer,boolean,boolean,BooleanSupplier)",
            "void loadLevel()",
            "void forceDifficulty()",
            "void createLevels(ChunkProgressListener)",
            "void setupDebugLevel(WorldData)",
            "void loadDataPacks()",
            "void detectBundledResources()",
            "GameType getDefaultGameType()",
            "boolean isHardcore()",
            "LevelSettings createLevelSettings(DedicatedServerProperties)",
            "void updateMobSpawningFlags()",
            "boolean isSpawningMonsters()",
            "boolean isSpawningAnimals()",
            "boolean areNpcsEnabled()",
            "void setDefaultGameType(GameType)",
            "void updateSelectedPacks()",
            "Path getWorldPath(LevelResource)",
            "StructureManager getStructureManager()",
            "WorldData getWorldData()",
            "void lambda$updateSelectedPacks$11(UnopenedPack)",
            "void lambda$updateSelectedPacks$10(UnopenedPack)",
            "void lambda$updateSelectedPacks$9(List,UnopenedPack)",
            "UnopenedPack lambda$updateSelectedPacks$8(UnopenedPack)",
            "String lambda$fillReport$7()",
            "boolean lambda$main$4()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.bossevents.CustomBossEvent",
        "differences": {
          "added": [
            "void lambda$getDisplayName$0(Style)"
          ],
          "removed": [
            "Style lambda$getDisplayName$0(Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix$1",
        "differences": {
          "added": [
            "Component deserialize(JsonElement,Type,JsonDeserializationContext)"
          ],
          "removed": [
            "MutableComponent deserialize(JsonElement,Type,JsonDeserializationContext)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.Difficulty",
        "differences": {
          "added": [],
          "removed": [
            "Difficulty nextById()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.damagesource.BadRespawnPointDamage",
        "differences": {
          "added": [
            "void lambda$getLocalizedDeathMessage$0(Style)"
          ],
          "removed": [
            "Style lambda$getLocalizedDeathMessage$0(Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.Entity",
        "differences": {
          "added": [
            "void updateSprintingState()",
            "void doSprintParticleEffect()",
            "void removeAction(Component)",
            "void lambda$getDisplayName$6(Style)",
            "void lambda$removeAction$1(Style)"
          ],
          "removed": [
            "boolean canSpawnSprintParticle()",
            "void spawnSprintParticle()",
            "Component removeAction(Component)",
            "Style lambda$getDisplayName$6(Style)",
            "Style lambda$removeAction$1(Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EntityType$Builder",
        "differences": {
          "added": [],
          "removed": [
            "EntityType$Builder clientTrackingRange(int)",
            "EntityType$Builder updateInterval(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.HumanoidArm",
        "differences": {
          "added": [],
          "removed": [
            "Component getName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeInstance",
        "differences": {
          "added": [],
          "removed": [
            "boolean removePermanentModifier(UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeSupplier",
        "differences": {
          "added": [],
          "removed": [
            "double getModifierValue(Attribute,UUID)",
            "boolean hasAttribute(Attribute)",
            "boolean hasModifier(Attribute,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Rabbit",
        "differences": {
          "added": [
            "void updateSprintingState()"
          ],
          "removed": [
            "boolean canSpawnSprintParticle()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.item.ItemEntity",
        "differences": {
          "added": [],
          "removed": [
            "void onSyncedDataUpdated(EntityDataAccessor)",
            "float getSpin(float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.BannerPatternItem",
        "differences": {
          "added": [
            "Component getDisplayName()"
          ],
          "removed": [
            "MutableComponent getDisplayName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.CompassItem",
        "differences": {
          "added": [
            "boolean hasLodestoneData(CompoundTag)",
            "boolean access$100(CompoundTag)",
            "double access$400(ItemFrame)",
            "double access$500(Vec3,Entity)"
          ],
          "removed": [
            "void addLodestoneTags(Dimension,BlockPos,CompoundTag)",
            "boolean access$100(ItemStack)",
            "double access$700(ItemFrame)",
            "double access$800(Vec3,Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.CompassItem$CompassWobble",
        "differences": {
          "added": [
            "double getRotation()",
            "void setRotation(double)",
            "double getDeltaRotation()",
            "void setDeltaRotation(double)",
            "void update(Level,double)",
            "void access$600(CompassItem$CompassWobble,Level,double)"
          ],
          "removed": [
            "boolean shouldUpdate(long)",
            "void update(long,double)",
            "boolean access$400(CompassItem$CompassWobble,long)",
            "void access$500(CompassItem$CompassWobble,long,double)",
            "double access$600(CompassItem$CompassWobble)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.FireworkStarItem",
        "differences": {
          "added": [
            "Component appendColors(Component,int[])"
          ],
          "removed": [
            "Component appendColors(MutableComponent,int[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LevelType",
        "differences": {
          "added": [
            "String getDescriptionId()",
            "String getHelpTextId()"
          ],
          "removed": [
            "Component getDescription()",
            "Component getHelpText()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeManager",
        "differences": {
          "added": [],
          "removed": [
            "Biome getNoiseBiomeAtPosition(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.MultiNoiseBiomeSourceSettings",
        "differences": {
          "added": [
            "MultiNoiseBiomeSourceSettings setBiomes(Set)",
            "Set getBiomes()"
          ],
          "removed": [
            "MultiNoiseBiomeSourceSettings setBiomes(List)",
            "MultiNoiseBiomeSourceSettings setParameters(List)",
            "List getParameters()",
            "boolean useY()",
            "void setUseY(boolean)",
            "Stream lambda$setBiomes$1(Biome)",
            "Pair lambda$null$0(Biome,Biome$ClimateParameters)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BedBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean canSetSpawn(Level,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ChainBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EndRodBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FlowerPotBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SeaPickleBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SignBlockEntity",
        "differences": {
          "added": [
            "String getRenderMessage(int,Function)"
          ],
          "removed": [
            "Component getRenderMessage(int,UnaryOperator)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.Feature",
        "differences": {
          "added": [],
          "removed": [
            "boolean isGrassOrDirt(LevelSimulatedReader,BlockPos)",
            "boolean isAir(LevelSimulatedReader,BlockPos)",
            "boolean lambda$isGrassOrDirt$1(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration",
        "differences": {
          "added": [
            "void <init>(BlockStateProvider,BlockStateProvider,List,int)"
          ],
          "removed": [
            "void <init>(BlockStateProvider,BlockStateProvider,FoliagePlacer,TrunkPlacer,FeatureSize,List,int,boolean,Heightmap$Types)",
            "TreeConfiguration withDecorators(List)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.trunkplacers.ForkingTrunkPlacer",
        "differences": {
          "added": [
            "Map placeTrunk(LevelSimulatedRW,Random,int,BlockPos,int,Set,BoundingBox,SmallTreeConfiguration)"
          ],
          "removed": [
            "List placeTrunk(LevelSimulatedRW,Random,int,BlockPos,Set,BoundingBox,TreeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer",
        "differences": {
          "added": [
            "int getBaseHeight()",
            "int getTreeHeight(Random,SmallTreeConfiguration)"
          ],
          "removed": [
            "int getTreeHeight(Random)",
            "void setBlock(LevelWriter,BlockPos,BlockState,BoundingBox)",
            "boolean isDirt(LevelSimulatedReader,BlockPos)",
            "void setDirtAt(LevelSimulatedRW,BlockPos)",
            "boolean placeLog(LevelSimulatedRW,Random,BlockPos,Set,BoundingBox,TreeConfiguration)",
            "void placeLogIfFree(LevelSimulatedRW,Random,BlockPos$MutableBlockPos,Set,BoundingBox,TreeConfiguration)",
            "boolean lambda$isDirt$0(BlockState)"
          ]
        }
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Client",
        "id": "client-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.mojang.realmsclient.RealmsMainScreen$PendingInvitesButton",
            "XXX.mojang.realmsclient.RealmsMainScreen$ServerEntry",
            "XXX.mojang.realmsclient.RealmsMainScreen$TrialEntry",
            "XXX.realmsclient.client.FileDownload",
            "XXX.realmsclient.client.FileDownload$DownloadCountingOutputStream",
            "XXX.realmsclient.client.FileDownload$ResourcePackProgressListener",
            "XXX.realmsclient.client.FileUpload$CustomInputStreamEntity",
            "XXX.realmsclient.client.Ping$Region",
            "XXX.realmsclient.client.RealmsClient$CompatibleVersionResponse",
            "XXX.realmsclient.client.RealmsClientConfig",
            "XXX.realmsclient.client.Request",
            "XXX.realmsclient.client.Request$Get",
            "XXX.realmsclient.client.Request$Put",
            "XXX.realmsclient.dto.Backup",
            "XXX.realmsclient.dto.GuardedSerializer",
            "XXX.realmsclient.dto.PendingInvite",
            "XXX.realmsclient.dto.PingResult",
            "XXX.realmsclient.dto.RealmsDescriptionDto",
            "XXX.realmsclient.dto.RealmsServer",
            "XXX.realmsclient.dto.RealmsServer$State",
            "XXX.realmsclient.dto.RealmsServerAddress",
            "XXX.realmsclient.dto.RealmsServerPing",
            "XXX.realmsclient.dto.RealmsServerPlayerLists",
            "XXX.realmsclient.dto.RealmsWorldResetDto",
            "XXX.realmsclient.dto.RegionPingResult",
            "XXX.realmsclient.dto.Subscription$SubscriptionType",
            "XXX.realmsclient.dto.ValueObject",
            "XXX.realmsclient.dto.WorldTemplate",
            "XXX.realmsclient.dto.WorldTemplatePaginatedList",
            "XXX.realmsclient.exception.RealmsHttpException",
            "XXX.realmsclient.exception.RetryCallException",
            "XXX.minecraft.client.CycleOption",
            "XXX.minecraft.client.FullscreenResolutionProgressOption",
            "XXX.minecraft.client.Game$Metrics",
            "XXX.minecraft.client.HotbarManager",
            "XXX.minecraft.client.KeyMapping$1",
            "XXX.client.gui.Gui",
            "XXX.client.gui.MapRenderer",
            "XXX.client.gui.MapRenderer$MapInstance",
            "XXX.gui.chat.NarratorChatListener",
            "XXX.gui.chat.StandardChatListener",
            "XXX.gui.components.AbstractButton",
            "XXX.gui.components.AbstractSelectionList",
            "XXX.gui.components.AbstractSelectionList$Entry",
            "XXX.gui.components.AbstractSliderButton",
            "XXX.gui.components.BossHealthOverlay",
            "XXX.gui.components.Button$OnPress",
            "XXX.gui.components.Checkbox",
            "XXX.gui.components.CommandSuggestions$1",
            "XXX.gui.components.ComponentRenderUtils",
            "XXX.gui.components.ContainerObjectSelectionList$Entry",
            "XXX.gui.components.DebugScreenOverlay$1",
            "XXX.gui.components.ImageButton",
            "XXX.gui.components.LerpingBossEvent$1",
            "XXX.gui.components.LockIconButton$Icon",
            "XXX.gui.components.ObjectSelectionList$Entry",
            "XXX.gui.components.OptionsList",
            "XXX.gui.components.PlayerTabOverlay",
            "XXX.gui.components.PlayerTabOverlay$PlayerInfoComparator",
            "XXX.gui.components.SliderButton",
            "XXX.gui.components.SubtitleOverlay",
            "XXX.gui.components.TickableWidget",
            "XXX.gui.components.Widget",
            "XXX.components.events.ContainerEventHandler",
            "XXX.components.events.package-info",
            "XXX.components.spectator.SpectatorGui",
            "XXX.components.toasts.AdvancementToast",
            "XXX.components.toasts.SystemToast",
            "XXX.components.toasts.Toast",
            "XXX.components.toasts.ToastComponent",
            "XXX.components.toasts.ToastComponent$ToastInstance",
            "XXX.components.toasts.TutorialToast$Icons",
            "XXX.gui.font.AllMissingGlyphProvider",
            "XXX.gui.font.FontManager$1",
            "XXX.client.map.package-info",
            "XXX.client.model.AgeableListModel",
            "XXX.client.model.ArmedModel",
            "XXX.client.model.ArmorStandModel",
            "XXX.client.model.BeeModel",
            "XXX.client.model.BoatModel",
            "XXX.client.model.CatModel",
            "XXX.client.model.ChickenModel",
            "XXX.client.model.ColorableAgeableListModel",
            "XXX.client.model.CowModel",
            "XXX.client.model.DolphinModel",
            "XXX.client.model.ElytraModel",
            "XXX.client.model.EndermiteModel",
            "XXX.client.model.EvokerFangsModel",
            "XXX.client.model.GhastModel",
            "XXX.client.model.GuardianModel",
            "XXX.client.model.HoglinModel",
            "XXX.client.model.HumanoidHeadModel",
            "XXX.client.model.HumanoidModel$1",
            "XXX.client.model.IllagerModel",
            "XXX.client.model.LavaSlimeModel",
            "XXX.client.model.ListModel",
            "XXX.client.model.LlamaSpitModel",
            "XXX.client.model.Model",
            "XXX.client.model.OcelotModel",
            "XXX.client.model.ParrotModel",
            "XXX.client.model.ParrotModel$State",
            "XXX.client.model.PigModel",
            "XXX.client.model.PlayerModel",
            "XXX.client.model.PufferfishBigModel",
            "XXX.client.model.PufferfishSmallModel",
            "XXX.client.model.RabbitModel",
            "XXX.client.model.SalmonModel",
            "XXX.client.model.SheepModel",
            "XXX.client.model.ShulkerBulletModel",
            "XXX.client.model.SilverfishModel",
            "XXX.client.model.SkullModel",
            "XXX.client.model.SnowGolemModel",
            "XXX.client.model.SquidModel",
            "XXX.client.model.TridentModel",
            "XXX.client.model.TropicalFishModelB",
            "XXX.client.model.VexModel",
            "XXX.client.model.VillagerModel",
            "XXX.client.model.WitherBossModel",
            "XXX.client.model.ZombieModel",
            "XXX.model.dragon.DragonHeadModel",
            "XXX.model.geom.ModelPart",
            "XXX.model.geom.ModelPart$Polygon",
            "XXX.model.geom.package-info",
            "XXX.client.multiplayer.ClientAdvancements",
            "XXX.client.multiplayer.ClientChunkCache",
            "XXX.client.multiplayer.ClientChunkCache$Storage",
            "XXX.client.multiplayer.ClientLevel",
            "XXX.client.multiplayer.ClientPacketListener",
            "XXX.client.multiplayer.ClientSuggestionProvider",
            "XXX.client.multiplayer.PlayerInfo",
            "XXX.client.multiplayer.ServerData",
            "XXX.client.multiplayer.ServerList",
            "XXX.client.multiplayer.ServerStatusPinger$1",
            "XXX.client.multiplayer.ServerStatusPinger$2$1",
            "XXX.minecraft.client.package-info",
            "XXX.client.particle.AshParticle$Provider",
            "XXX.client.particle.AttackSweepParticle$1",
            "XXX.client.particle.BarrierParticle",
            "XXX.client.particle.BarrierParticle$Provider",
            "XXX.client.particle.BreakingItemParticle",
            "XXX.client.particle.BreakingItemParticle$Provider",
            "XXX.client.particle.BreakingItemParticle$SnowballProvider",
            "XXX.client.particle.BubbleColumnUpParticle$1",
            "XXX.client.particle.BubbleParticle",
            "XXX.client.particle.BubbleParticle$Provider",
            "XXX.client.particle.BubblePopParticle$1",
            "XXX.client.particle.CampfireSmokeParticle",
            "XXX.client.particle.CampfireSmokeParticle$CosyProvider",
            "XXX.client.particle.CritParticle",
            "XXX.client.particle.CritParticle$DamageIndicatorProvider",
            "XXX.client.particle.CritParticle$Provider",
            "XXX.client.particle.DragonBreathParticle$1",
            "XXX.client.particle.DripParticle",
            "XXX.client.particle.DripParticle$CoolingDripHangParticle",
            "XXX.client.particle.DripParticle$DripLandParticle",
            "XXX.client.particle.DripParticle$FallingParticle",
            "XXX.client.particle.DripParticle$HoneyFallProvider",
            "XXX.client.particle.DripParticle$HoneyLandProvider",
            "XXX.client.particle.DripParticle$LavaHangProvider",
            "XXX.client.particle.DripParticle$NectarFallProvider",
            "XXX.client.particle.DripParticle$ObsidianTearHangProvider",
            "XXX.client.particle.DripParticle$WaterFallProvider",
            "XXX.client.particle.DustParticle",
            "XXX.client.particle.DustParticle$Provider",
            "XXX.client.particle.EnchantmentTableParticle$1",
            "XXX.client.particle.EnchantmentTableParticle$Provider",
            "XXX.client.particle.EndRodParticle$1",
            "XXX.client.particle.ExplodeParticle",
            "XXX.client.particle.FallingDustParticle",
            "XXX.client.particle.FallingDustParticle$Provider",
            "XXX.client.particle.FireworkParticles$1",
            "XXX.client.particle.FireworkParticles$OverlayParticle",
            "XXX.client.particle.FireworkParticles$SparkProvider",
            "XXX.client.particle.FlameParticle",
            "XXX.client.particle.FlameParticle$Provider",
            "XXX.client.particle.HeartParticle$1",
            "XXX.client.particle.HeartParticle$Provider",
            "XXX.client.particle.HugeExplosionParticle$1",
            "XXX.client.particle.HugeExplosionSeedParticle",
            "XXX.client.particle.HugeExplosionSeedParticle$Provider",
            "XXX.client.particle.LargeSmokeParticle",
            "XXX.client.particle.LavaParticle",
            "XXX.client.particle.LavaParticle$Provider",
            "XXX.client.particle.MobAppearanceParticle$1",
            "XXX.client.particle.NoRenderParticle",
            "XXX.client.particle.NoteParticle$1",
            "XXX.client.particle.Particle",
            "XXX.client.particle.ParticleEngine",
            "XXX.client.particle.ParticleEngine$MutableSpriteSet",
            "XXX.client.particle.ParticleProvider",
            "XXX.client.particle.ParticleRenderType$1",
            "XXX.client.particle.ParticleRenderType$3",
            "XXX.client.particle.ParticleRenderType$5",
            "XXX.client.particle.PlayerCloudParticle",
            "XXX.client.particle.PlayerCloudParticle$Provider",
            "XXX.client.particle.PortalParticle",
            "XXX.client.particle.ReversePortalParticle",
            "XXX.client.particle.ReversePortalParticle$ReversePortalProvider",
            "XXX.client.particle.SimpleAnimatedParticle",
            "XXX.client.particle.SmokeParticle",
            "XXX.client.particle.SoulParticle",
            "XXX.client.particle.SoulParticle$Provider",
            "XXX.client.particle.SpellParticle$1",
            "XXX.client.particle.SpellParticle$InstantProvider",
            "XXX.client.particle.SpellParticle$Provider",
            "XXX.client.particle.SpitParticle",
            "XXX.client.particle.SpitParticle$Provider",
            "XXX.client.particle.SplashParticle$1",
            "XXX.client.particle.SpriteSet",
            "XXX.client.particle.SquidInkParticle$1",
            "XXX.client.particle.SuspendedParticle",
            "XXX.client.particle.SuspendedParticle$CrimsonSporeProvider",
            "XXX.client.particle.SuspendedParticle$WarpedSporeProvider",
            "XXX.client.particle.SuspendedTownParticle$1",
            "XXX.client.particle.SuspendedTownParticle$DolphinSpeedProvider",
            "XXX.client.particle.SuspendedTownParticle$Provider",
            "XXX.client.particle.TerrainParticle$Provider",
            "XXX.client.particle.TotemParticle",
            "XXX.client.particle.TotemParticle$Provider",
            "XXX.client.particle.WakeParticle",
            "XXX.client.particle.WakeParticle$Provider",
            "XXX.client.particle.WaterCurrentDownParticle$1",
            "XXX.client.particle.WaterDropParticle",
            "XXX.client.particle.WhiteAshParticle",
            "XXX.client.particle.package-info",
            "XXX.client.player.Input",
            "XXX.client.player.LocalPlayer",
            "XXX.client.player.RemotePlayer",
            "XXX.player.inventory.package-info",
            "XXX.client.renderer.BiomeColors",
            "XXX.client.renderer.ChunkBufferBuilderPack",
            "XXX.client.renderer.EffectInstance",
            "XXX.client.renderer.FaceInfo$1",
            "XXX.client.renderer.FaceInfo$VertexInfo",
            "XXX.client.renderer.FogRenderer$FogMode",
            "XXX.client.renderer.ItemBlockRenderTypes",
            "XXX.client.renderer.ItemInHandRenderer$1",
            "XXX.client.renderer.LevelRenderer",
            "XXX.client.renderer.LevelRenderer$RenderChunkInfo",
            "XXX.client.renderer.MultiBufferSource",
            "XXX.client.renderer.OutlineBufferSource",
            "XXX.client.renderer.OutlineBufferSource$EntityOutlineGenerator",
            "XXX.client.renderer.PostChain",
            "XXX.client.renderer.Rect2i",
            "XXX.client.renderer.RenderStateShard",
            "XXX.client.renderer.RenderStateShard$BooleanStateShard",
            "XXX.client.renderer.RenderStateShard$DepthTestStateShard",
            "XXX.client.renderer.RenderStateShard$FogStateShard",
            "XXX.client.renderer.RenderStateShard$LightmapStateShard",
            "XXX.client.renderer.RenderStateShard$OffsetTexturingStateShard",
            "XXX.client.renderer.RenderStateShard$OverlayStateShard",
            "XXX.client.renderer.RenderStateShard$ShadeModelStateShard",
            "XXX.client.renderer.RenderStateShard$TexturingStateShard",
            "XXX.client.renderer.RenderStateShard$WriteMaskStateShard",
            "XXX.client.renderer.RenderType$1",
            "XXX.client.renderer.RenderType$CompositeRenderType$EqualsStrategy",
            "XXX.client.renderer.RenderType$CompositeState$CompositeStateBuilder",
            "XXX.client.renderer.RunningTrimmedMean",
            "XXX.client.renderer.Sheets",
            "XXX.client.renderer.SpriteCoordinateExpander",
            "XXX.client.renderer.VirtualScreen",
            "XXX.renderer.block.BlockModelShaper",
            "XXX.renderer.block.BlockRenderDispatcher$1",
            "XXX.renderer.block.ModelBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$AdjacencyInfo",
            "XXX.renderer.block.ModelBlockRenderer$AmbientVertexRemap",
            "XXX.renderer.block.ModelBlockRenderer$Cache$1",
            "XXX.renderer.block.ModelBlockRenderer$SizeInfo",
            "XXX.block.model.BlockElement",
            "XXX.block.model.BlockElement$Deserializer",
            "XXX.block.model.BlockElementFace$Deserializer",
            "XXX.block.model.BlockFaceUV",
            "XXX.block.model.BlockModel",
            "XXX.block.model.BlockModel$GuiLight",
            "XXX.block.model.BlockModelDefinition",
            "XXX.block.model.BlockModelDefinition$Deserializer",
            "XXX.block.model.FaceBakery",
            "XXX.block.model.ItemModelGenerator",
            "XXX.block.model.ItemModelGenerator$Span",
            "XXX.block.model.ItemOverride",
            "XXX.block.model.ItemOverrides",
            "XXX.block.model.ItemTransform$Deserializer",
            "XXX.block.model.ItemTransforms$1",
            "XXX.block.model.ItemTransforms$TransformType",
            "XXX.block.model.MultiVariant$Deserializer",
            "XXX.block.model.Variant$Deserializer",
            "XXX.model.multipart.Condition",
            "XXX.model.multipart.MultiPart",
            "XXX.model.multipart.OrCondition",
            "XXX.model.multipart.Selector$Deserializer",
            "XXX.block.model.package-info",
            "XXX.block.statemap.package-info",
            "XXX.renderer.blockentity.BeaconRenderer",
            "XXX.renderer.blockentity.BellRenderer",
            "XXX.renderer.blockentity.BlockEntityRenderer",
            "XXX.renderer.blockentity.CampfireRenderer",
            "XXX.renderer.blockentity.ConduitRenderer",
            "XXX.renderer.blockentity.LecternRenderer",
            "XXX.renderer.blockentity.ShulkerBoxRenderer",
            "XXX.renderer.blockentity.SignRenderer$SignModel",
            "XXX.renderer.blockentity.SkullBlockRenderer$1",
            "XXX.renderer.blockentity.StructureBlockRenderer",
            "XXX.renderer.blockentity.TheEndGatewayRenderer",
            "XXX.renderer.blockentity.package-info",
            "XXX.renderer.chunk.ChunkRenderDispatcher$ChunkTaskResult",
            "XXX.renderer.chunk.ChunkRenderDispatcher$CompiledChunk$1",
            "XXX.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ChunkCompileTask",
            "XXX.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ResortTransparencyTask",
            "XXX.renderer.chunk.VisGraph",
            "XXX.renderer.chunk.VisibilitySet",
            "XXX.renderer.culling.Frustum",
            "XXX.renderer.debug.BeeDebugRenderer",
            "XXX.renderer.debug.BeeDebugRenderer$HiveInfo",
            "XXX.renderer.debug.BrainDebugRenderer$BrainDump",
            "XXX.renderer.debug.CaveDebugRenderer",
            "XXX.renderer.debug.ChunkDebugRenderer",
            "XXX.renderer.debug.ChunkDebugRenderer$ChunkData",
            "XXX.renderer.debug.DebugRenderer",
            "XXX.renderer.debug.GameTestDebugRenderer",
            "XXX.renderer.debug.GoalSelectorDebugRenderer",
            "XXX.renderer.debug.HeightMapRenderer",
            "XXX.renderer.debug.LightDebugRenderer",
            "XXX.renderer.debug.PathfindingRenderer",
            "XXX.renderer.debug.SolidFaceRenderer",
            "XXX.renderer.debug.VillageSectionsDebugRenderer",
            "XXX.renderer.debug.WorldGenAttemptRenderer",
            "XXX.renderer.entity.AbstractHorseRenderer",
            "XXX.renderer.entity.AreaEffectCloudRenderer",
            "XXX.renderer.entity.ArrowRenderer",
            "XXX.renderer.entity.BeeRenderer",
            "XXX.renderer.entity.BoatRenderer",
            "XXX.renderer.entity.CaveSpiderRenderer",
            "XXX.renderer.entity.ChickenRenderer",
            "XXX.renderer.entity.CowRenderer",
            "XXX.renderer.entity.DolphinRenderer",
            "XXX.renderer.entity.DrownedRenderer",
            "XXX.renderer.entity.EndCrystalRenderer",
            "XXX.renderer.entity.EnderDragonRenderer$DragonModel",
            "XXX.renderer.entity.EndermiteRenderer",
            "XXX.renderer.entity.EntityRenderer",
            "XXX.renderer.entity.EvokerRenderer",
            "XXX.renderer.entity.ExperienceOrbRenderer",
            "XXX.renderer.entity.FireworkEntityRenderer",
            "XXX.renderer.entity.FoxRenderer",
            "XXX.renderer.entity.GiantMobRenderer",
            "XXX.renderer.entity.HoglinRenderer",
            "XXX.renderer.entity.HumanoidMobRenderer",
            "XXX.renderer.entity.IllagerRenderer",
            "XXX.renderer.entity.IllusionerRenderer$1",
            "XXX.renderer.entity.ItemEntityRenderer",
            "XXX.renderer.entity.ItemRenderer",
            "XXX.renderer.entity.LightningBoltRenderer",
            "XXX.renderer.entity.LivingEntityRenderer$1",
            "XXX.renderer.entity.LlamaSpitRenderer",
            "XXX.renderer.entity.MinecartRenderer",
            "XXX.renderer.entity.MushroomCowRenderer",
            "XXX.renderer.entity.PaintingRenderer",
            "XXX.renderer.entity.ParrotRenderer",
            "XXX.renderer.entity.PigRenderer",
            "XXX.renderer.entity.PillagerRenderer",
            "XXX.renderer.entity.PufferfishRenderer",
            "XXX.renderer.entity.RavagerRenderer",
            "XXX.renderer.entity.SalmonRenderer",
            "XXX.renderer.entity.ShulkerBulletRenderer",
            "XXX.renderer.entity.SilverfishRenderer",
            "XXX.renderer.entity.SlimeRenderer",
            "XXX.renderer.entity.SpectralArrowRenderer",
            "XXX.renderer.entity.SquidRenderer",
            "XXX.renderer.entity.StriderRenderer",
            "XXX.renderer.entity.ThrownTridentRenderer",
            "XXX.renderer.entity.TntMinecartRenderer",
            "XXX.renderer.entity.TropicalFishRenderer",
            "XXX.renderer.entity.UndeadHorseRenderer",
            "XXX.renderer.entity.VillagerRenderer",
            "XXX.renderer.entity.VindicatorRenderer$1",
            "XXX.renderer.entity.WitchRenderer",
            "XXX.renderer.entity.WitherSkeletonRenderer",
            "XXX.renderer.entity.WolfRenderer",
            "XXX.renderer.entity.ZombieRenderer",
            "XXX.entity.layers.AbstractArmorLayer",
            "XXX.entity.layers.BeeStingerLayer",
            "XXX.entity.layers.CarriedBlockLayer",
            "XXX.entity.layers.CreeperPowerLayer",
            "XXX.entity.layers.CustomHeadLayer",
            "XXX.entity.layers.DolphinCarryingItemLayer",
            "XXX.entity.layers.ElytraLayer",
            "XXX.entity.layers.EnergySwirlLayer",
            "XXX.entity.layers.FoxHeldItemLayer",
            "XXX.entity.layers.HorseMarkingLayer",
            "XXX.entity.layers.HumanoidArmorLayer$1",
            "XXX.entity.layers.IronGolemFlowerLayer",
            "XXX.entity.layers.LlamaDecorLayer",
            "XXX.entity.layers.PandaHoldsItemLayer",
            "XXX.entity.layers.PhantomEyesLayer",
            "XXX.entity.layers.RenderLayer",
            "XXX.entity.layers.SheepFurLayer",
            "XXX.entity.layers.SlimeOuterLayer",
            "XXX.entity.layers.SpiderEyesLayer",
            "XXX.entity.layers.StrayClothingLayer",
            "XXX.entity.layers.TropicalFishPatternLayer",
            "XXX.entity.layers.WitchItemLayer",
            "XXX.entity.layers.WolfCollarLayer",
            "XXX.renderer.entity.package-info",
            "XXX.entity.player.package-info",
            "XXX.renderer.texture.AbstractTexture",
            "XXX.renderer.texture.DynamicTexture",
            "XXX.renderer.texture.MipmapGenerator",
            "XXX.renderer.texture.OverlayTexture",
            "XXX.renderer.texture.SimpleTexture",
            "XXX.renderer.texture.Stitcher",
            "XXX.renderer.texture.Stitcher$Region",
            "XXX.renderer.texture.StitcherException",
            "XXX.renderer.texture.TextureAtlas$Preparations",
            "XXX.renderer.texture.TextureAtlasSprite$1",
            "XXX.renderer.texture.TextureAtlasSprite$InterpolationData",
            "XXX.renderer.texture.Tickable",
            "XXX.client.resources.AssetIndex",
            "XXX.client.resources.ClientPackSource$1",
            "XXX.client.resources.DefaultClientResourcePack",
            "XXX.client.resources.DirectAssetIndex",
            "XXX.client.resources.GrassColorReloadListener",
            "XXX.client.resources.LegacyStuffWrapper",
            "XXX.client.resources.PackAdapterV4",
            "XXX.client.resources.SkinManager",
            "XXX.client.resources.SkinManager$SkinTextureCallback",
            "XXX.client.resources.TextureAtlasHolder",
            "XXX.resources.language.I18n",
            "XXX.resources.language.LanguageManager",
            "XXX.resources.language.package-info",
            "XXX.metadata.animation.AnimationMetadataSection",
            "XXX.metadata.animation.AnimationMetadataSectionSerializer",
            "XXX.metadata.animation.VillagerMetaDataSection$Hat",
            "XXX.metadata.animation.package-info",
            "XXX.metadata.language.LanguageMetadataSectionSerializer",
            "XXX.resources.metadata.package-info",
            "XXX.metadata.texture.TextureMetadataSectionSerializer",
            "XXX.resources.model.BakedModel",
            "XXX.resources.model.BuiltInModel",
            "XXX.resources.model.ModelBakery",
            "XXX.resources.model.ModelBakery$ModelGroupKey",
            "XXX.resources.model.ModelResourceLocation",
            "XXX.resources.model.MultiPartBakedModel",
            "XXX.resources.model.SimpleBakedModel",
            "XXX.resources.model.UnbakedModel",
            "XXX.resources.model.WeightedBakedModel$Builder",
            "XXX.resources.model.package-info",
            "XXX.resources.sounds.AbstractSoundInstance",
            "XXX.resources.sounds.AmbientSoundHandler",
            "XXX.resources.sounds.BeeFlyingSoundInstance",
            "XXX.resources.sounds.BiomeAmbientSoundsHandler",
            "XXX.resources.sounds.BubbleColumnAmbientSoundHandler",
            "XXX.resources.sounds.EntityBoundSoundInstance",
            "XXX.resources.sounds.MinecartSoundInstance",
            "XXX.resources.sounds.SimpleSoundInstance",
            "XXX.resources.sounds.Sound$Type",
            "XXX.resources.sounds.SoundEventRegistrationSerializer",
            "XXX.resources.sounds.SoundInstance$Attenuation",
            "XXX.resources.sounds.UnderwaterAmbientSoundHandler",
            "XXX.resources.sounds.UnderwaterAmbientSoundInstances$SubSound",
            "XXX.resources.sounds.package-info",
            "XXX.client.searchtree.ReloadableIdSearchTree",
            "XXX.client.searchtree.ReloadableSearchTree",
            "XXX.client.searchtree.SearchRegistry",
            "XXX.client.searchtree.SearchTree",
            "XXX.client.searchtree.SuffixArray$1",
            "XXX.client.server.IntegratedPlayerList",
            "XXX.client.server.LanServer",
            "XXX.client.server.LanServerDetection$LanServerDetector",
            "XXX.client.server.LanServerPinger",
            "XXX.client.skins.package-info",
            "XXX.client.sounds.ChannelAccess",
            "XXX.client.sounds.LoopingAudioStream",
            "XXX.client.sounds.LoopingAudioStream$AudioStreamProvider",
            "XXX.client.sounds.MusicManager",
            "XXX.arguments.blocks.BlockPredicateArgument",
            "XXX.arguments.blocks.BlockPredicateArgument$BlockPredicate",
            "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate",
            "XXX.arguments.blocks.BlockStateParser",
            "XXX.arguments.coordinates.BlockPosArgument",
            "XXX.arguments.coordinates.Coordinates",
            "XXX.arguments.coordinates.RotationArgument",
            "XXX.arguments.coordinates.Vec2Argument",
            "XXX.arguments.coordinates.WorldCoordinate",
            "XXX.arguments.coordinates.package-info",
            "XXX.arguments.item.FunctionArgument$1",
            "XXX.arguments.item.FunctionArgument$Result",
            "XXX.arguments.item.ItemInput",
            "XXX.arguments.item.ItemPredicateArgument",
            "XXX.arguments.item.ItemPredicateArgument$Result",
            "XXX.arguments.item.package-info",
            "XXX.arguments.selector.EntitySelector",
            "XXX.selector.options.EntitySelectorOptions",
            "XXX.selector.options.EntitySelectorOptions$Modifier",
            "XXX.selector.options.package-info",
            "XXX.commands.exceptions.package-info",
            "XXX.commands.synchronization.ArgumentSerializer",
            "XXX.commands.synchronization.ArgumentTypes$1",
            "XXX.commands.synchronization.EmptyArgumentSerializer",
            "XXX.commands.synchronization.SuggestionProviders$Wrapper",
            "XXX.synchronization.brigadier.DoubleArgumentSerializer",
            "XXX.synchronization.brigadier.IntegerArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer",
            "XXX.synchronization.brigadier.package-info",
            "XXX.minecraft.core.AxisCycle",
            "XXX.minecraft.core.AxisCycle$2",
            "XXX.minecraft.core.BlockMath",
            "XXX.minecraft.core.BlockPos$1",
            "XXX.minecraft.core.BlockPos$3",
            "XXX.minecraft.core.BlockPos$MutableBlockPos",
            "XXX.minecraft.core.BlockSourceImpl",
            "XXX.minecraft.core.DefaultedRegistry",
            "XXX.minecraft.core.Direction$1",
            "XXX.minecraft.core.Direction$Axis$1",
            "XXX.minecraft.core.Direction$Axis$3",
            "XXX.minecraft.core.Direction$Plane",
            "XXX.minecraft.core.FrontAndTop",
            "XXX.minecraft.core.IdMap",
            "XXX.minecraft.core.LocatableSource",
            "XXX.minecraft.core.MapFiller",
            "XXX.minecraft.core.NonNullList",
            "XXX.minecraft.core.PositionImpl",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.minecraft.core.SerializableLong",
            "XXX.minecraft.core.Source",
            "XXX.minecraft.core.WritableRegistry",
            "XXX.core.dispenser.BoatDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$10",
            "XXX.core.dispenser.DispenseItemBehavior$12",
            "XXX.core.dispenser.DispenseItemBehavior$14",
            "XXX.core.dispenser.DispenseItemBehavior$16",
            "XXX.core.dispenser.DispenseItemBehavior$18",
            "XXX.core.dispenser.DispenseItemBehavior$2",
            "XXX.core.dispenser.DispenseItemBehavior$21",
            "XXX.core.dispenser.DispenseItemBehavior$23",
            "XXX.core.dispenser.DispenseItemBehavior$25",
            "XXX.core.dispenser.DispenseItemBehavior$4",
            "XXX.core.dispenser.DispenseItemBehavior$6",
            "XXX.core.dispenser.DispenseItemBehavior$7$1",
            "XXX.core.dispenser.DispenseItemBehavior$8$1",
            "XXX.core.dispenser.OptionalDispenseItemBehavior",
            "XXX.core.dispenser.ShulkerBoxDispenseBehavior",
            "XXX.minecraft.core.package-info",
            "XXX.core.particles.BlockParticleOption$1",
            "XXX.core.particles.DustParticleOptions$1",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.HashCache",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.HusbandryAdvancements",
            "XXX.data.advancements.StoryAdvancements",
            "XXX.data.advancements.package-info",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.ChestLoot",
            "XXX.data.loot.FishingLoot",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.PropertyValue",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BlockTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.gametest.framework.BeforeBatch",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestRunner$1",
            "XXX.gametest.framework.GameTestSequence$Condition",
            "XXX.gametest.framework.GameTestServer$1",
            "XXX.gametest.framework.GameTestTimeoutException",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.TeamcityTestReporter",
            "XXX.gametest.framework.TestCommand",
            "XXX.gametest.framework.TestFunction",
            "XXX.gametest.framework.TestReporter",
            "XXX.minecraft.locale.Language",
            "XXX.minecraft.nbt.ByteArrayTag",
            "XXX.minecraft.nbt.ByteTag",
            "XXX.minecraft.nbt.ByteTag$Cache",
            "XXX.minecraft.nbt.CompoundTag",
            "XXX.minecraft.nbt.DoubleTag",
            "XXX.minecraft.nbt.EndTag",
            "XXX.minecraft.nbt.FloatTag",
            "XXX.minecraft.nbt.IntArrayTag",
            "XXX.minecraft.nbt.IntTag",
            "XXX.minecraft.nbt.IntTag$Cache",
            "XXX.minecraft.nbt.ListTag$1",
            "XXX.minecraft.nbt.LongArrayTag$1",
            "XXX.minecraft.nbt.LongTag$1",
            "XXX.minecraft.nbt.NbtAccounter",
            "XXX.minecraft.nbt.NbtIo",
            "XXX.minecraft.nbt.NbtUtils",
            "XXX.minecraft.nbt.ShortTag",
            "XXX.minecraft.nbt.ShortTag$Cache",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.TagParser",
            "XXX.minecraft.nbt.TagType$1",
            "XXX.minecraft.nbt.package-info",
            "XXX.minecraft.network.CipherDecoder",
            "XXX.minecraft.network.CompressionDecoder",
            "XXX.minecraft.network.Connection",
            "XXX.minecraft.network.Connection$2",
            "XXX.minecraft.network.ConnectionProtocol",
            "XXX.minecraft.network.ConnectionProtocol$PacketSet",
            "XXX.minecraft.network.FriendlyByteBuf",
            "XXX.minecraft.network.PacketEncoder",
            "XXX.minecraft.network.SkipPacketException",
            "XXX.minecraft.network.Varint21LengthFieldPrepender",
            "XXX.network.chat.ChatType",
            "XXX.network.chat.ClickEvent$Action",
            "XXX.network.chat.Component$1",
            "XXX.network.chat.ComponentUtils",
            "XXX.network.chat.HoverEvent",
            "XXX.network.chat.KeybindComponent",
            "XXX.network.chat.TextComponent",
            "XXX.network.chat.TranslatableFormatException",
            "XXX.minecraft.network.package-info",
            "XXX.network.protocol.PacketFlow",
            "XXX.protocol.game.ClientGamePacketListener",
            "XXX.protocol.game.ClientboundAddExperienceOrbPacket",
            "XXX.protocol.game.ClientboundAddMobPacket",
            "XXX.protocol.game.ClientboundAddPlayerPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.realms.NarrationHelper",
            "XXX.minecraft.realms.RealmsConnect",
            "XXX.minecraft.realms.RealmsLabel",
            "XXX.minecraft.realms.RealmsScreen",
            "XXX.minecraft.realms.RepeatedNarrator",
            "XXX.minecraft.realms.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.minecraft.resources.ResourceLocation$Serializer",
            "XXX.minecraft.server.Bootstrap",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.DebugMobSpawningCommand",
            "XXX.server.commands.DefaultGameModeCommands",
            "XXX.server.commands.EffectCommands",
            "XXX.server.commands.EnchantCommand",
            "XXX.server.commands.ExecuteCommand$CommandNumericPredicate",
            "XXX.server.commands.ExperienceCommand",
            "XXX.server.commands.FillCommand",
            "XXX.server.commands.ForceLoadCommand",
            "XXX.server.commands.GameModeCommand",
            "XXX.server.commands.GameRuleCommand$1",
            "XXX.server.commands.HelpCommand",
            "XXX.server.commands.KillCommand",
            "XXX.server.commands.LocateBiomeCommand",
            "XXX.server.commands.LootCommand",
            "XXX.server.commands.LootCommand$DropConsumer",
            "XXX.server.commands.MsgCommand",
            "XXX.server.commands.PardonCommand",
            "XXX.server.commands.ParticleCommand",
            "XXX.server.commands.PublishCommand",
            "XXX.server.commands.RecipeCommand",
            "XXX.server.commands.ReplaceItemCommand",
            "XXX.server.commands.SaveOffCommand",
            "XXX.server.commands.SayCommand",
            "XXX.server.commands.ScoreboardCommand",
            "XXX.server.commands.SetBlockCommand",
            "XXX.server.commands.SetBlockCommand$Mode",
            "XXX.server.commands.SetSpawnCommand",
            "XXX.server.commands.SpectateCommand",
            "XXX.server.commands.SpreadPlayersCommand$Position",
            "XXX.server.commands.StopSoundCommand",
            "XXX.server.commands.TagCommand",
            "XXX.server.commands.TeamMsgCommand",
            "XXX.server.commands.TeleportCommand$LookAt",
            "XXX.server.commands.TimeCommand",
            "XXX.server.commands.TriggerCommand",
            "XXX.server.commands.WhitelistCommand",
            "XXX.commands.data.BlockDataAccessor",
            "XXX.commands.data.DataAccessor",
            "XXX.commands.data.DataCommands$DataManipulator",
            "XXX.commands.data.DataCommands$DataProvider",
            "XXX.commands.data.EntityDataAccessor$1",
            "XXX.commands.data.StorageDataAccessor$1",
            "XXX.server.commands.package-info",
            "XXX.server.dedicated.DedicatedServer",
            "XXX.server.dedicated.DedicatedServer$2",
            "XXX.server.dedicated.DedicatedServerSettings",
            "XXX.server.dedicated.ServerWatchdog$1",
            "XXX.server.dedicated.Settings$1",
            "XXX.server.dedicated.package-info",
            "XXX.server.gui.MinecraftServerGui$1",
            "XXX.server.gui.PlayerListComponent",
            "XXX.server.gui.package-info",
            "XXX.server.level.ChunkHolder",
            "XXX.server.level.ChunkHolder$ChunkLoadingFailure",
            "XXX.server.level.ChunkHolder$FullChunkStatus",
            "XXX.server.level.ChunkHolder$PlayerProvider",
            "XXX.server.level.ChunkMap$1",
            "XXX.server.level.ChunkMap$DistanceManager",
            "XXX.server.level.ChunkTaskPriorityQueue",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Release",
            "XXX.server.level.ColumnPos",
            "XXX.server.level.DerivedServerLevel",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerChunkCache$1",
            "XXX.server.level.ServerEntity",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.server.network.ServerStatusPacketListenerImpl",
            "XXX.minecraft.server.package-info",
            "XXX.server.packs.FileResourcePack",
            "XXX.server.packs.Pack",
            "XXX.server.packs.ResourcePackFileNotFoundException",
            "XXX.packs.metadata.MetadataSectionSerializer",
            "XXX.metadata.pack.PackMetadataSectionSerializer",
            "XXX.packs.metadata.package-info",
            "XXX.packs.repository.FolderRepositorySource",
            "XXX.packs.repository.PackRepository",
            "XXX.packs.repository.ServerPacksSource",
            "XXX.packs.repository.UnopenedPack$Position",
            "XXX.packs.repository.package-info",
            "XXX.packs.resources.FallbackResourceManager$LeakedResourceWarningInputStream",
            "XXX.packs.resources.PreparableReloadListener$PreparationBarrier",
            "XXX.packs.resources.ProfiledReloadInstance$1",
            "XXX.packs.resources.ReloadInstance",
            "XXX.packs.resources.Resource",
            "XXX.packs.resources.ResourceManagerReloadListener",
            "XXX.packs.resources.SimplePreparableReloadListener",
            "XXX.packs.resources.SimpleReloadInstance$1",
            "XXX.packs.resources.SimpleReloadableResourceManager",
            "XXX.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure",
            "XXX.packs.resources.package-info",
            "XXX.server.players.GameProfileCache",
            "XXX.server.players.GameProfileCache$2",
            "XXX.server.players.GameProfileCache$Serializer",
            "XXX.server.players.IpBanListEntry",
            "XXX.server.players.OldUsersConverter$1",
            "XXX.server.players.OldUsersConverter$3",
            "XXX.server.players.OldUsersConverter$5",
            "XXX.server.players.PlayerList",
            "XXX.server.players.ServerOpList",
            "XXX.server.players.StoredUserEntry",
            "XXX.server.players.UserBanList",
            "XXX.server.players.UserWhiteList",
            "XXX.server.players.package-info",
            "XXX.server.rcon.PktUtils",
            "XXX.server.rcon.package-info",
            "XXX.rcon.thread.QueryThreadGs4",
            "XXX.rcon.thread.RconClient",
            "XXX.rcon.thread.package-info",
            "XXX.minecraft.sounds.SoundEvents",
            "XXX.minecraft.sounds.package-info",
            "XXX.minecraft.stats.ServerRecipeBook",
            "XXX.minecraft.stats.Stat",
            "XXX.minecraft.stats.StatType",
            "XXX.minecraft.stats.StatsCounter",
            "XXX.minecraft.tags.BlockTags",
            "XXX.minecraft.tags.FluidTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.StaticTagHelper$Wrapper",
            "XXX.minecraft.tags.Tag",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.tags.package-info",
            "XXX.minecraft.util.ClassInstanceMultiMap",
            "XXX.minecraft.util.Crypt",
            "XXX.minecraft.util.CsvOutput$1",
            "XXX.minecraft.util.CubicSampler",
            "XXX.minecraft.util.Deserializer",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HttpUtil",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.LimitedCapacityList",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory",
            "XXX.minecraft.util.Mth",
            "XXX.minecraft.util.RewindableStream",
            "XXX.minecraft.util.Serializable",
            "XXX.minecraft.util.SmoothDouble",
            "XXX.minecraft.util.SortedArraySet$1",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.world.level.GameRules$IntegerValue",
            "XXX.world.level.GameRules$Type",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkGeneratorType",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.GlobalPalette",
            "XXX.level.chunk.ImposterProtoChunk",
            "XXX.level.chunk.LevelChunk$EntityCreationType",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.chunk.UpgradeData$1",
            "XXX.level.chunk.UpgradeData$BlockFixers",
            "XXX.level.chunk.UpgradeData$BlockFixers$2",
            "XXX.level.chunk.UpgradeData$BlockFixers$4",
            "XXX.level.chunk.package-info",
            "XXX.chunk.storage.ChunkStorage",
            "XXX.chunk.storage.IOWorker$1",
            "XXX.chunk.storage.OldChunkStorage",
            "XXX.chunk.storage.RegionBitmap",
            "XXX.chunk.storage.RegionFile$ChunkBuffer",
            "XXX.chunk.storage.RegionFileStorage",
            "XXX.chunk.storage.RegionFileVersion$StreamWrapper",
            "XXX.chunk.storage.package-info",
            "XXX.level.dimension.DimensionType",
            "XXX.level.dimension.NetherDimension$1",
            "XXX.dimension.end.DragonRespawnAnimation",
            "XXX.dimension.end.DragonRespawnAnimation$2",
            "XXX.dimension.end.DragonRespawnAnimation$4",
            "XXX.dimension.end.EndDragonFight",
            "XXX.dimension.end.package-info",
            "XXX.level.levelgen.ChunkGeneratorProvider",
            "XXX.level.levelgen.DebugGeneratorSettings",
            "XXX.level.levelgen.FlatLevelSource",
            "XXX.level.levelgen.GenerationStep",
            "XXX.level.levelgen.GenerationStep$Decoration",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NetherGeneratorSettings",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.OverworldLevelSource",
            "XXX.level.levelgen.PhantomSpawner",
            "XXX.level.levelgen.TheEndLevelSource",
            "XXX.levelgen.carver.CanyonWorldCarver",
            "XXX.levelgen.carver.CaveWorldCarver",
            "XXX.levelgen.carver.NetherWorldCarver",
            "XXX.levelgen.carver.UnderwaterCanyonWorldCarver",
            "XXX.levelgen.carver.WorldCarver",
            "XXX.levelgen.feature.AbstractFlowerFeature",
            "XXX.levelgen.feature.AbstractSmallTreeFeature",
            "XXX.levelgen.feature.BambooFeature",
            "XXX.levelgen.feature.BasaltPillarFeature",
            "XXX.levelgen.feature.BastionFeature",
            "XXX.levelgen.feature.BastionHoglinStablePools",
            "XXX.levelgen.feature.BastionPieces",
            "XXX.levelgen.feature.BastionSharedPools",
            "XXX.levelgen.feature.BlockBlobFeature",
            "XXX.levelgen.feature.BlueIceFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature",
            "XXX.levelgen.feature.ChorusPlantFeature",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.DarkOakFeature",
            "XXX.levelgen.feature.FancyTreeFeature$FoliageCoords",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.levelgen.feature.MegaPineTreeFeature",
            "XXX.feature.configurations.MegaTreeConfiguration",
            "XXX.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder",
            "XXX.feature.foliageplacers.AcaciaFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.FluidStateImpl",
            "XXX.level.material.LavaFluid",
            "XXX.level.material.LavaFluid$Source",
            "XXX.level.material.Material$Builder",
            "XXX.level.material.PushReaction",
            "XXX.level.material.WaterFluid$Flowing",
            "XXX.level.material.package-info",
            "XXX.newbiome.area.AreaFactory",
            "XXX.newbiome.area.package-info",
            "XXX.newbiome.context.Context",
            "XXX.newbiome.context.package-info",
            "XXX.newbiome.layer.AddEdgeLayer",
            "XXX.newbiome.layer.AddEdgeLayer$HeatIce",
            "XXX.newbiome.layer.AddIslandLayer",
            "XXX.newbiome.layer.AddSnowLayer",
            "XXX.newbiome.layer.BiomeInitLayer",
            "XXX.newbiome.layer.Layer",
            "XXX.newbiome.layer.OceanLayer",
            "XXX.newbiome.layer.RareBiomeLargeLayer",
            "XXX.newbiome.layer.RegionHillsLayer",
            "XXX.newbiome.layer.RiverInitLayer",
            "XXX.newbiome.layer.RiverMixerLayer",
            "XXX.newbiome.layer.SmoothLayer",
            "XXX.newbiome.layer.ZoomLayer$1",
            "XXX.layer.traits.AreaTransformer0",
            "XXX.layer.traits.AreaTransformer2",
            "XXX.layer.traits.C0Transformer",
            "XXX.layer.traits.CastleTransformer",
            "XXX.layer.traits.DimensionOffset1Transformer",
            "XXX.layer.traits.PixelTransformer",
            "XXX.world.level.package-info",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.level.pathfinder.WalkNodeEvaluator",
            "XXX.level.redstone.Redstone",
            "XXX.level.saveddata.SaveDataDirtyRunnable",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.saveddata.maps.package-info",
            "XXX.level.storage.CommandStorage",
            "XXX.level.storage.DerivedLevelData",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.storage.loot.BinomialDistributionGenerator",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.ConstantIntValue$Serializer",
            "XXX.storage.loot.IntLimiter$1",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.RandomIntGenerators",
            "XXX.storage.loot.RandomValueBounds$Serializer",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.CompositeEntryBase$Serializer",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$2",
            "XXX.loot.functions.CopyNbtFunction$Serializer",
            "XXX.loot.functions.EnchantRandomlyFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.EnchantWithLevelsFunction$1",
            "XXX.loot.functions.EnchantWithLevelsFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$1",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LimitCount$Serializer",
            "XXX.loot.functions.LootItemConditionalFunction$Builder",
            "XXX.loot.functions.LootItemConditionalFunction$Serializer",
            "XXX.loot.functions.LootItemFunction$Builder",
            "XXX.loot.functions.LootItemFunctions",
            "XXX.loot.functions.LootingEnchantFunction",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetContainerContents",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetContainerLootTable$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNameFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SetStewEffectFunction$Builder",
            "XXX.loot.functions.SmeltItemFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.parameters.LootContextParamSet$Builder",
            "XXX.loot.parameters.LootContextParams",
            "XXX.loot.predicates.AlternativeLootItemCondition",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.BonusLevelTableCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.DamageSourceCondition$Serializer",
            "XXX.loot.predicates.EntityHasScoreCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.InvertedLootItemCondition$1",
            "XXX.loot.predicates.LocationCheck",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Builder",
            "XXX.loot.predicates.LootItemCondition",
            "XXX.loot.predicates.LootItemCondition$Serializer",
            "XXX.loot.predicates.LootItemConditions$Serializer",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$1",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$1",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.TimeCheck$Builder",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.storage.threaded.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue",
            "XXX.level.timers.TimerQueue$Event",
            "XXX.minecraft.world.package-info",
            "XXX.world.phys.BlockHitResult",
            "XXX.world.phys.HitResult",
            "XXX.world.phys.PosAndRot",
            "XXX.world.phys.Vec3",
            "XXX.phys.shapes.ArrayVoxelShape",
            "XXX.phys.shapes.BitSetDiscreteVoxelShape",
            "XXX.phys.shapes.CollisionContext",
            "XXX.phys.shapes.CubeVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape",
            "XXX.phys.shapes.DiscreteVoxelShape$IntLineConsumer",
            "XXX.phys.shapes.EntityCollisionContext$1",
            "XXX.phys.shapes.IndexMerger",
            "XXX.phys.shapes.IndirectMerger",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape",
            "XXX.phys.shapes.package-info",
            "XXX.world.scores.PlayerTeam",
            "XXX.world.scores.Scoreboard",
            "XXX.world.scores.Team",
            "XXX.world.scores.Team$Visibility",
            "XXX.scores.criteria.ObjectiveCriteria$RenderType",
            "XXX.world.scores.package-info"
          ],
          "removed": [
            "XXX.mojang.realmsclient.RealmsMainScreen$NewsButton",
            "XXX.mojang.realmsclient.RealmsMainScreen$RealmSelectionList",
            "XXX.mojang.realmsclient.RealmsMainScreen$ShowPopupButton",
            "XXX.mojang.realmsclient.Unit",
            "XXX.realmsclient.client.FileDownload$1",
            "XXX.realmsclient.client.FileDownload$ProgressListener",
            "XXX.realmsclient.client.FileUpload",
            "XXX.realmsclient.client.Ping",
            "XXX.realmsclient.client.RealmsClient",
            "XXX.realmsclient.client.RealmsClient$Environment",
            "XXX.realmsclient.client.RealmsError",
            "XXX.realmsclient.client.Request$Delete",
            "XXX.realmsclient.client.Request$Post",
            "XXX.realmsclient.client.UploadStatus",
            "XXX.realmsclient.dto.BackupList",
            "XXX.realmsclient.dto.Ops",
            "XXX.realmsclient.dto.PendingInvitesList",
            "XXX.realmsclient.dto.PlayerInfo",
            "XXX.realmsclient.dto.RealmsNews",
            "XXX.realmsclient.dto.RealmsServer$McoServerComparator",
            "XXX.realmsclient.dto.RealmsServer$WorldType",
            "XXX.realmsclient.dto.RealmsServerList",
            "XXX.realmsclient.dto.RealmsServerPlayerList",
            "XXX.realmsclient.dto.RealmsWorldOptions",
            "XXX.realmsclient.dto.ReflectionBasedSerialization",
            "XXX.realmsclient.dto.Subscription",
            "XXX.realmsclient.dto.UploadInfo",
            "XXX.realmsclient.dto.WorldDownload",
            "XXX.realmsclient.dto.WorldTemplate$WorldTemplateType",
            "XXX.realmsclient.exception.RealmsDefaultUncaughtExceptionHandler",
            "XXX.realmsclient.exception.RealmsServiceException",
            "XXX.realmsclient.gui.ErrorCallback",
            "XXX.minecraft.client.ComponentCollector",
            "XXX.minecraft.client.DebugQueryHandler",
            "XXX.minecraft.client.Game",
            "XXX.minecraft.client.GuiMessage",
            "XXX.minecraft.client.KeyMapping",
            "XXX.minecraft.client.StringDecomposer",
            "XXX.minecraft.client.StringSplitter",
            "XXX.minecraft.client.StringSplitter$FlatComponents",
            "XXX.minecraft.client.StringSplitter$LineComponent",
            "XXX.minecraft.client.StringSplitter$WidthLimitedCharSink",
            "XXX.client.gui.Font$StringRenderOutput",
            "XXX.client.gui.GuiComponent",
            "XXX.client.gui.MapRenderer$1",
            "XXX.gui.chat.ChatListener",
            "XXX.gui.chat.OverlayChatListener",
            "XXX.gui.chat.package-info",
            "XXX.gui.components.AbstractOptionSliderButton",
            "XXX.gui.components.AbstractSelectionList$1",
            "XXX.gui.components.AbstractSelectionList$TrackedList",
            "XXX.gui.components.AbstractWidget",
            "XXX.gui.components.Button",
            "XXX.gui.components.ChatComponent",
            "XXX.gui.components.CommandSuggestions",
            "XXX.gui.components.CommandSuggestions$SuggestionsList",
            "XXX.gui.components.ContainerObjectSelectionList",
            "XXX.gui.components.DebugScreenOverlay",
            "XXX.gui.components.EditBox",
            "XXX.gui.components.LerpingBossEvent",
            "XXX.gui.components.LockIconButton",
            "XXX.gui.components.ObjectSelectionList",
            "XXX.gui.components.OptionButton",
            "XXX.gui.components.OptionsList$Entry",
            "XXX.gui.components.PlayerTabOverlay$1",
            "XXX.gui.components.ScrolledSelectionList",
            "XXX.gui.components.StateSwitchingButton",
            "XXX.gui.components.SubtitleOverlay$Subtitle",
            "XXX.gui.components.VolumeSlider",
            "XXX.components.events.AbstractContainerEventHandler",
            "XXX.components.events.GuiEventListener",
            "XXX.gui.components.package-info",
            "XXX.components.spectator.package-info",
            "XXX.components.toasts.RecipeToast",
            "XXX.components.toasts.SystemToast$SystemToastIds",
            "XXX.components.toasts.Toast$Visibility",
            "XXX.components.toasts.ToastComponent$1",
            "XXX.components.toasts.TutorialToast",
            "XXX.components.toasts.package-info",
            "XXX.gui.font.FontManager",
            "XXX.screens.inventory.BookEditScreen$DisplayCache",
            "XXX.screens.worldselection.CreateWorldScreen$SelectedGameMode",
            "XXX.screens.worldselection.EditGameRulesScreen$BooleanRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$CategoryRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$IntegerRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleList",
            "XXX.client.map.Map$4",
            "XXX.client.model.AbstractZombieModel",
            "XXX.client.model.AnimationUtils",
            "XXX.client.model.ArmorStandArmorModel",
            "XXX.client.model.BatModel",
            "XXX.client.model.BlazeModel",
            "XXX.client.model.BookModel",
            "XXX.client.model.ChestedHorseModel",
            "XXX.client.model.CodModel",
            "XXX.client.model.ColorableListModel",
            "XXX.client.model.CreeperModel",
            "XXX.client.model.DrownedModel",
            "XXX.client.model.EndermanModel",
            "XXX.client.model.EntityModel",
            "XXX.client.model.FoxModel",
            "XXX.client.model.GiantZombieModel",
            "XXX.client.model.HeadedModel",
            "XXX.client.model.HorseModel",
            "XXX.client.model.HumanoidModel",
            "XXX.client.model.HumanoidModel$ArmPose",
            "XXX.client.model.IronGolemModel",
            "XXX.client.model.LeashKnotModel",
            "XXX.client.model.LlamaModel",
            "XXX.client.model.MinecartModel",
            "XXX.client.model.ModelUtils",
            "XXX.client.model.PandaModel",
            "XXX.client.model.ParrotModel$1",
            "XXX.client.model.PhantomModel",
            "XXX.client.model.PiglinModel",
            "XXX.client.model.PolarBearModel",
            "XXX.client.model.PufferfishMidModel",
            "XXX.client.model.QuadrupedModel",
            "XXX.client.model.RavagerModel",
            "XXX.client.model.SheepFurModel",
            "XXX.client.model.ShieldModel",
            "XXX.client.model.ShulkerModel",
            "XXX.client.model.SkeletonModel",
            "XXX.client.model.SlimeModel",
            "XXX.client.model.SpiderModel",
            "XXX.client.model.StriderModel",
            "XXX.client.model.TropicalFishModelA",
            "XXX.client.model.TurtleModel",
            "XXX.client.model.VillagerHeadModel",
            "XXX.client.model.WitchModel",
            "XXX.client.model.WolfModel",
            "XXX.client.model.ZombieVillagerModel",
            "XXX.model.dragon.package-info",
            "XXX.model.geom.ModelPart$Cube",
            "XXX.model.geom.ModelPart$Vertex",
            "XXX.client.model.package-info",
            "XXX.client.multiplayer.ClientAdvancements$Listener",
            "XXX.client.multiplayer.ClientChunkCache$1",
            "XXX.client.multiplayer.ClientHandshakePacketListenerImpl",
            "XXX.client.multiplayer.ClientLevel$1",
            "XXX.client.multiplayer.ClientPacketListener$1",
            "XXX.client.multiplayer.MultiPlayerGameMode",
            "XXX.client.multiplayer.ServerAddress",
            "XXX.client.multiplayer.ServerData$ServerPackStatus",
            "XXX.client.multiplayer.ServerStatusPinger",
            "XXX.client.multiplayer.ServerStatusPinger$2",
            "XXX.client.multiplayer.package-info",
            "XXX.client.particle.AshParticle",
            "XXX.client.particle.AttackSweepParticle",
            "XXX.client.particle.AttackSweepParticle$Provider",
            "XXX.client.particle.BarrierParticle$1",
            "XXX.client.particle.BaseAshSmokeParticle",
            "XXX.client.particle.BreakingItemParticle$1",
            "XXX.client.particle.BreakingItemParticle$SlimeProvider",
            "XXX.client.particle.BubbleColumnUpParticle",
            "XXX.client.particle.BubbleColumnUpParticle$Provider",
            "XXX.client.particle.BubbleParticle$1",
            "XXX.client.particle.BubblePopParticle",
            "XXX.client.particle.BubblePopParticle$Provider",
            "XXX.client.particle.CampfireSmokeParticle$1",
            "XXX.client.particle.CampfireSmokeParticle$SignalProvider",
            "XXX.client.particle.CritParticle$1",
            "XXX.client.particle.CritParticle$MagicProvider",
            "XXX.client.particle.DragonBreathParticle",
            "XXX.client.particle.DragonBreathParticle$Provider",
            "XXX.client.particle.DripParticle$1",
            "XXX.client.particle.DripParticle$DripHangParticle",
            "XXX.client.particle.DripParticle$FallAndLandParticle",
            "XXX.client.particle.DripParticle$HoneyFallAndLandParticle",
            "XXX.client.particle.DripParticle$HoneyHangProvider",
            "XXX.client.particle.DripParticle$LavaFallProvider",
            "XXX.client.particle.DripParticle$LavaLandProvider",
            "XXX.client.particle.DripParticle$ObsidianTearFallProvider",
            "XXX.client.particle.DripParticle$ObsidianTearLandProvider",
            "XXX.client.particle.DripParticle$WaterHangProvider",
            "XXX.client.particle.DustParticle$1",
            "XXX.client.particle.EnchantmentTableParticle",
            "XXX.client.particle.EnchantmentTableParticle$NautilusProvider",
            "XXX.client.particle.EndRodParticle",
            "XXX.client.particle.EndRodParticle$Provider",
            "XXX.client.particle.ExplodeParticle$Provider",
            "XXX.client.particle.FallingDustParticle$1",
            "XXX.client.particle.FireworkParticles",
            "XXX.client.particle.FireworkParticles$FlashProvider",
            "XXX.client.particle.FireworkParticles$SparkParticle",
            "XXX.client.particle.FireworkParticles$Starter",
            "XXX.client.particle.FlameParticle$1",
            "XXX.client.particle.HeartParticle",
            "XXX.client.particle.HeartParticle$AngryVillagerProvider",
            "XXX.client.particle.HugeExplosionParticle",
            "XXX.client.particle.HugeExplosionParticle$Provider",
            "XXX.client.particle.HugeExplosionSeedParticle$1",
            "XXX.client.particle.ItemPickupParticle",
            "XXX.client.particle.LargeSmokeParticle$Provider",
            "XXX.client.particle.LavaParticle$1",
            "XXX.client.particle.MobAppearanceParticle",
            "XXX.client.particle.MobAppearanceParticle$Provider",
            "XXX.client.particle.NoteParticle",
            "XXX.client.particle.NoteParticle$Provider",
            "XXX.client.particle.ParticleDescription",
            "XXX.client.particle.ParticleEngine$1",
            "XXX.client.particle.ParticleEngine$SpriteParticleRegistration",
            "XXX.client.particle.ParticleRenderType",
            "XXX.client.particle.ParticleRenderType$2",
            "XXX.client.particle.ParticleRenderType$4",
            "XXX.client.particle.ParticleRenderType$6",
            "XXX.client.particle.PlayerCloudParticle$1",
            "XXX.client.particle.PlayerCloudParticle$SneezeProvider",
            "XXX.client.particle.PortalParticle$Provider",
            "XXX.client.particle.ReversePortalParticle$1",
            "XXX.client.particle.RisingParticle",
            "XXX.client.particle.SingleQuadParticle",
            "XXX.client.particle.SmokeParticle$Provider",
            "XXX.client.particle.SoulParticle$1",
            "XXX.client.particle.SpellParticle",
            "XXX.client.particle.SpellParticle$AmbientMobProvider",
            "XXX.client.particle.SpellParticle$MobProvider",
            "XXX.client.particle.SpellParticle$WitchProvider",
            "XXX.client.particle.SpitParticle$1",
            "XXX.client.particle.SplashParticle",
            "XXX.client.particle.SplashParticle$Provider",
            "XXX.client.particle.SquidInkParticle",
            "XXX.client.particle.SquidInkParticle$Provider",
            "XXX.client.particle.SuspendedParticle$1",
            "XXX.client.particle.SuspendedParticle$UnderwaterProvider",
            "XXX.client.particle.SuspendedTownParticle",
            "XXX.client.particle.SuspendedTownParticle$ComposterFillProvider",
            "XXX.client.particle.SuspendedTownParticle$HappyVillagerProvider",
            "XXX.client.particle.TerrainParticle",
            "XXX.client.particle.TextureSheetParticle",
            "XXX.client.particle.TotemParticle$1",
            "XXX.client.particle.TrackingEmitter",
            "XXX.client.particle.WakeParticle$1",
            "XXX.client.particle.WaterCurrentDownParticle",
            "XXX.client.particle.WaterCurrentDownParticle$Provider",
            "XXX.client.particle.WaterDropParticle$Provider",
            "XXX.client.particle.WhiteAshParticle$Provider",
            "XXX.client.player.AbstractClientPlayer",
            "XXX.client.player.KeyboardInput",
            "XXX.client.player.LocalPlayer$1",
            "XXX.player.inventory.Hotbar",
            "XXX.client.player.package-info",
            "XXX.client.renderer.BlockEntityWithoutLevelRenderer",
            "XXX.client.renderer.CubeMap",
            "XXX.client.renderer.FaceInfo",
            "XXX.client.renderer.FaceInfo$Constants",
            "XXX.client.renderer.FogRenderer",
            "XXX.client.renderer.GameRenderer",
            "XXX.client.renderer.ItemInHandRenderer",
            "XXX.client.renderer.ItemModelShaper",
            "XXX.client.renderer.LevelRenderer$1",
            "XXX.client.renderer.LightTexture",
            "XXX.client.renderer.MultiBufferSource$BufferSource",
            "XXX.client.renderer.OutlineBufferSource$1",
            "XXX.client.renderer.PanoramaRenderer",
            "XXX.client.renderer.PostPass",
            "XXX.client.renderer.RenderBuffers",
            "XXX.client.renderer.RenderStateShard$AlphaStateShard",
            "XXX.client.renderer.RenderStateShard$CullStateShard",
            "XXX.client.renderer.RenderStateShard$DiffuseLightingStateShard",
            "XXX.client.renderer.RenderStateShard$LayeringStateShard",
            "XXX.client.renderer.RenderStateShard$LineStateShard",
            "XXX.client.renderer.RenderStateShard$OutputStateShard",
            "XXX.client.renderer.RenderStateShard$PortalTexturingStateShard",
            "XXX.client.renderer.RenderStateShard$TextureStateShard",
            "XXX.client.renderer.RenderStateShard$TransparencyStateShard",
            "XXX.client.renderer.RenderType",
            "XXX.client.renderer.RenderType$CompositeRenderType",
            "XXX.client.renderer.RenderType$CompositeState",
            "XXX.client.renderer.RenderType$OutlineProperty",
            "XXX.client.renderer.ScreenEffectRenderer",
            "XXX.client.renderer.Sheets$1",
            "XXX.client.renderer.ViewArea",
            "XXX.renderer.banner.package-info",
            "XXX.renderer.block.BlockRenderDispatcher",
            "XXX.renderer.block.LiquidBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$1",
            "XXX.renderer.block.ModelBlockRenderer$AmbientOcclusionFace",
            "XXX.renderer.block.ModelBlockRenderer$Cache",
            "XXX.renderer.block.ModelBlockRenderer$Cache$2",
            "XXX.block.model.BakedQuad",
            "XXX.block.model.BlockElement$1",
            "XXX.block.model.BlockElementFace",
            "XXX.block.model.BlockElementRotation",
            "XXX.block.model.BlockFaceUV$Deserializer",
            "XXX.block.model.BlockModel$Deserializer",
            "XXX.block.model.BlockModel$LoopException",
            "XXX.block.model.BlockModelDefinition$Context",
            "XXX.block.model.BlockModelDefinition$MissingVariantException",
            "XXX.block.model.FaceBakery$1",
            "XXX.block.model.ItemModelGenerator$1",
            "XXX.block.model.ItemModelGenerator$SpanFacing",
            "XXX.block.model.ItemOverride$Deserializer",
            "XXX.block.model.ItemTransform",
            "XXX.block.model.ItemTransforms",
            "XXX.block.model.ItemTransforms$Deserializer",
            "XXX.block.model.MultiVariant",
            "XXX.block.model.Variant",
            "XXX.model.multipart.AndCondition",
            "XXX.model.multipart.KeyValueCondition",
            "XXX.model.multipart.MultiPart$Deserializer",
            "XXX.model.multipart.Selector",
            "XXX.model.multipart.package-info",
            "XXX.renderer.block.package-info",
            "XXX.renderer.blockentity.BannerRenderer",
            "XXX.renderer.blockentity.BedRenderer",
            "XXX.renderer.blockentity.BlockEntityRenderDispatcher",
            "XXX.renderer.blockentity.BrightnessCombiner",
            "XXX.renderer.blockentity.ChestRenderer",
            "XXX.renderer.blockentity.EnchantTableRenderer",
            "XXX.renderer.blockentity.PistonHeadRenderer",
            "XXX.renderer.blockentity.SignRenderer",
            "XXX.renderer.blockentity.SkullBlockRenderer",
            "XXX.renderer.blockentity.SpawnerRenderer",
            "XXX.renderer.blockentity.StructureBlockRenderer$1",
            "XXX.renderer.blockentity.TheEndPortalRenderer",
            "XXX.renderer.chunk.ChunkRenderDispatcher",
            "XXX.renderer.chunk.ChunkRenderDispatcher$CompiledChunk",
            "XXX.renderer.chunk.ChunkRenderDispatcher$RenderChunk",
            "XXX.renderer.chunk.ChunkRenderDispatcher$RenderChunk$RebuildTask",
            "XXX.renderer.chunk.RenderChunkRegion",
            "XXX.renderer.chunk.VisGraph$1",
            "XXX.renderer.chunk.package-info",
            "XXX.renderer.culling.package-info",
            "XXX.renderer.debug.BeeDebugRenderer$BeeInfo",
            "XXX.renderer.debug.BrainDebugRenderer",
            "XXX.renderer.debug.BrainDebugRenderer$PoiInfo",
            "XXX.renderer.debug.ChunkBorderRenderer",
            "XXX.renderer.debug.ChunkDebugRenderer$1",
            "XXX.renderer.debug.CollisionBoxRenderer",
            "XXX.renderer.debug.DebugRenderer$SimpleDebugRenderer",
            "XXX.renderer.debug.GameTestDebugRenderer$Marker",
            "XXX.renderer.debug.GoalSelectorDebugRenderer$DebugGoal",
            "XXX.renderer.debug.HeightMapRenderer$1",
            "XXX.renderer.debug.NeighborsUpdateRenderer",
            "XXX.renderer.debug.RaidDebugRenderer",
            "XXX.renderer.debug.StructureRenderer",
            "XXX.renderer.debug.WaterDebugRenderer",
            "XXX.renderer.debug.package-info",
            "XXX.renderer.entity.AbstractZombieRenderer",
            "XXX.renderer.entity.ArmorStandRenderer",
            "XXX.renderer.entity.BatRenderer",
            "XXX.renderer.entity.BlazeRenderer",
            "XXX.renderer.entity.CatRenderer",
            "XXX.renderer.entity.ChestedHorseRenderer",
            "XXX.renderer.entity.CodRenderer",
            "XXX.renderer.entity.CreeperRenderer",
            "XXX.renderer.entity.DragonFireballRenderer",
            "XXX.renderer.entity.ElderGuardianRenderer",
            "XXX.renderer.entity.EnderDragonRenderer",
            "XXX.renderer.entity.EndermanRenderer",
            "XXX.renderer.entity.EntityRenderDispatcher",
            "XXX.renderer.entity.EvokerFangsRenderer",
            "XXX.renderer.entity.EvokerRenderer$1",
            "XXX.renderer.entity.FallingBlockRenderer",
            "XXX.renderer.entity.FishingHookRenderer",
            "XXX.renderer.entity.GhastRenderer",
            "XXX.renderer.entity.GuardianRenderer",
            "XXX.renderer.entity.HorseRenderer",
            "XXX.renderer.entity.HuskRenderer",
            "XXX.renderer.entity.IllusionerRenderer",
            "XXX.renderer.entity.IronGolemRenderer",
            "XXX.renderer.entity.ItemFrameRenderer",
            "XXX.renderer.entity.LeashKnotRenderer",
            "XXX.renderer.entity.LivingEntityRenderer",
            "XXX.renderer.entity.LlamaRenderer",
            "XXX.renderer.entity.MagmaCubeRenderer",
            "XXX.renderer.entity.MobRenderer",
            "XXX.renderer.entity.OcelotRenderer",
            "XXX.renderer.entity.PandaRenderer",
            "XXX.renderer.entity.PhantomRenderer",
            "XXX.renderer.entity.PiglinRenderer",
            "XXX.renderer.entity.PolarBearRenderer",
            "XXX.renderer.entity.RabbitRenderer",
            "XXX.renderer.entity.RenderLayerParent",
            "XXX.renderer.entity.SheepRenderer",
            "XXX.renderer.entity.ShulkerRenderer",
            "XXX.renderer.entity.SkeletonRenderer",
            "XXX.renderer.entity.SnowGolemRenderer",
            "XXX.renderer.entity.SpiderRenderer",
            "XXX.renderer.entity.StrayRenderer",
            "XXX.renderer.entity.ThrownItemRenderer",
            "XXX.renderer.entity.TippableArrowRenderer",
            "XXX.renderer.entity.TntRenderer",
            "XXX.renderer.entity.TurtleRenderer",
            "XXX.renderer.entity.VexRenderer",
            "XXX.renderer.entity.VindicatorRenderer",
            "XXX.renderer.entity.WanderingTraderRenderer",
            "XXX.renderer.entity.WitherBossRenderer",
            "XXX.renderer.entity.WitherSkullRenderer",
            "XXX.renderer.entity.ZoglinRenderer",
            "XXX.renderer.entity.ZombieVillagerRenderer",
            "XXX.entity.layers.ArrowLayer",
            "XXX.entity.layers.CapeLayer",
            "XXX.entity.layers.CatCollarLayer",
            "XXX.entity.layers.CrossedArmsItemLayer",
            "XXX.entity.layers.Deadmau5EarsLayer",
            "XXX.entity.layers.DrownedOuterLayer",
            "XXX.entity.layers.EnderEyesLayer",
            "XXX.entity.layers.EyesLayer",
            "XXX.entity.layers.HorseArmorLayer",
            "XXX.entity.layers.HumanoidArmorLayer",
            "XXX.entity.layers.IronGolemCrackinessLayer",
            "XXX.entity.layers.ItemInHandLayer",
            "XXX.entity.layers.MushroomCowMushroomLayer",
            "XXX.entity.layers.ParrotOnShoulderLayer",
            "XXX.entity.layers.PiglinArmorLayer",
            "XXX.entity.layers.SaddleLayer",
            "XXX.entity.layers.ShulkerHeadLayer",
            "XXX.entity.layers.SnowGolemHeadLayer",
            "XXX.entity.layers.SpinAttackEffectLayer",
            "XXX.entity.layers.StuckInBodyLayer",
            "XXX.entity.layers.VillagerProfessionLayer",
            "XXX.entity.layers.WitherArmorLayer",
            "XXX.entity.layers.package-info",
            "XXX.entity.player.PlayerRenderer",
            "XXX.client.renderer.package-info",
            "XXX.renderer.texture.AtlasSet",
            "XXX.renderer.texture.HttpTexture",
            "XXX.renderer.texture.MissingTextureAtlasSprite",
            "XXX.renderer.texture.PreloadedTexture",
            "XXX.renderer.texture.SimpleTexture$TextureImage",
            "XXX.renderer.texture.Stitcher$Holder",
            "XXX.renderer.texture.Stitcher$SpriteLoader",
            "XXX.renderer.texture.TextureAtlas",
            "XXX.renderer.texture.TextureAtlasSprite",
            "XXX.renderer.texture.TextureAtlasSprite$Info",
            "XXX.renderer.texture.TextureManager",
            "XXX.renderer.texture.package-info",
            "XXX.client.resources.ClientPackSource",
            "XXX.client.resources.ClientPackSource$2",
            "XXX.client.resources.DefaultPlayerSkin",
            "XXX.client.resources.FoliageColorReloadListener",
            "XXX.client.resources.LegacyResourcePackAdapter",
            "XXX.client.resources.MobEffectTextureManager",
            "XXX.client.resources.PaintingTextureManager",
            "XXX.client.resources.SkinManager$1",
            "XXX.client.resources.SplashManager",
            "XXX.client.resources.UnopenedResourcePack",
            "XXX.resources.language.Language",
            "XXX.resources.language.Locale",
            "XXX.metadata.animation.AnimationFrame",
            "XXX.metadata.animation.AnimationMetadataSection$1",
            "XXX.metadata.animation.VillagerMetaDataSection",
            "XXX.metadata.animation.VillagerMetadataSectionSerializer",
            "XXX.metadata.language.LanguageMetadataSection",
            "XXX.metadata.language.package-info",
            "XXX.metadata.texture.TextureMetadataSection",
            "XXX.metadata.texture.package-info",
            "XXX.resources.model.BlockModelRotation",
            "XXX.resources.model.Material",
            "XXX.resources.model.ModelBakery$BlockStateDefinitionException",
            "XXX.resources.model.ModelManager",
            "XXX.resources.model.ModelState",
            "XXX.resources.model.MultiPartBakedModel$Builder",
            "XXX.resources.model.SimpleBakedModel$Builder",
            "XXX.resources.model.WeightedBakedModel",
            "XXX.resources.model.WeightedBakedModel$WeightedModel",
            "XXX.client.resources.package-info",
            "XXX.resources.sounds.AbstractTickableSoundInstance",
            "XXX.resources.sounds.BeeAggressiveSoundInstance",
            "XXX.resources.sounds.BeeSoundInstance",
            "XXX.resources.sounds.BiomeAmbientSoundsHandler$LoopSoundInstance",
            "XXX.resources.sounds.ElytraOnPlayerSoundInstance",
            "XXX.resources.sounds.GuardianAttackSoundInstance",
            "XXX.resources.sounds.RidingMinecartSoundInstance",
            "XXX.resources.sounds.Sound",
            "XXX.resources.sounds.SoundEventRegistration",
            "XXX.resources.sounds.SoundInstance",
            "XXX.resources.sounds.TickableSoundInstance",
            "XXX.resources.sounds.UnderwaterAmbientSoundInstances",
            "XXX.resources.sounds.UnderwaterAmbientSoundInstances$UnderwaterAmbientSoundInstance",
            "XXX.client.searchtree.MutableSearchTree",
            "XXX.client.searchtree.ReloadableIdSearchTree$IntersectionIterator",
            "XXX.client.searchtree.ReloadableSearchTree$MergingUniqueIterator",
            "XXX.client.searchtree.SearchRegistry$Key",
            "XXX.client.searchtree.SuffixArray",
            "XXX.client.searchtree.package-info",
            "XXX.client.server.IntegratedServer",
            "XXX.client.server.LanServerDetection",
            "XXX.client.server.LanServerDetection$LanServerList",
            "XXX.client.server.package-info",
            "XXX.client.sounds.AudioStream",
            "XXX.client.sounds.ChannelAccess$ChannelHandle",
            "XXX.client.sounds.LoopingAudioStream$1",
            "XXX.client.sounds.LoopingAudioStream$NoCloseBuffer",
            "XXX.arguments.blocks.BlockInput",
            "XXX.arguments.blocks.BlockPredicateArgument$1",
            "XXX.arguments.blocks.BlockPredicateArgument$Result",
            "XXX.arguments.blocks.BlockStateArgument",
            "XXX.arguments.blocks.package-info",
            "XXX.arguments.coordinates.ColumnPosArgument",
            "XXX.arguments.coordinates.LocalCoordinates",
            "XXX.arguments.coordinates.SwizzleArgument",
            "XXX.arguments.coordinates.Vec3Argument",
            "XXX.arguments.coordinates.WorldCoordinates",
            "XXX.arguments.item.FunctionArgument",
            "XXX.arguments.item.FunctionArgument$2",
            "XXX.arguments.item.ItemArgument",
            "XXX.arguments.item.ItemParser",
            "XXX.arguments.item.ItemPredicateArgument$ItemPredicate",
            "XXX.arguments.item.ItemPredicateArgument$TagPredicate",
            "XXX.commands.arguments.package-info",
            "XXX.arguments.selector.EntitySelectorParser",
            "XXX.selector.options.EntitySelectorOptions$1",
            "XXX.selector.options.EntitySelectorOptions$Option",
            "XXX.arguments.selector.package-info",
            "XXX.minecraft.commands.package-info",
            "XXX.commands.synchronization.ArgumentTypes",
            "XXX.commands.synchronization.ArgumentTypes$Entry",
            "XXX.commands.synchronization.SuggestionProviders",
            "XXX.synchronization.brigadier.BrigadierArgumentSerializers",
            "XXX.synchronization.brigadier.FloatArgumentSerializer",
            "XXX.synchronization.brigadier.LongArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer$1",
            "XXX.commands.synchronization.package-info",
            "XXX.minecraft.core.AxisCycle$1",
            "XXX.minecraft.core.AxisCycle$3",
            "XXX.minecraft.core.BlockPos",
            "XXX.minecraft.core.BlockPos$2",
            "XXX.minecraft.core.BlockPos$4",
            "XXX.minecraft.core.BlockSource",
            "XXX.minecraft.core.Cursor3D",
            "XXX.minecraft.core.Direction",
            "XXX.minecraft.core.Direction$Axis",
            "XXX.minecraft.core.Direction$Axis$2",
            "XXX.minecraft.core.Direction$AxisDirection",
            "XXX.minecraft.core.Direction8",
            "XXX.minecraft.core.GlobalPos",
            "XXX.minecraft.core.IdMapper",
            "XXX.minecraft.core.Location",
            "XXX.minecraft.core.MappedRegistry",
            "XXX.minecraft.core.Position",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableBoolean",
            "XXX.minecraft.core.SerializableUUID",
            "XXX.minecraft.core.Vec3i",
            "XXX.core.dispenser.AbstractProjectileDispenseBehavior",
            "XXX.core.dispenser.DefaultDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$1",
            "XXX.core.dispenser.DispenseItemBehavior$11",
            "XXX.core.dispenser.DispenseItemBehavior$13",
            "XXX.core.dispenser.DispenseItemBehavior$15",
            "XXX.core.dispenser.DispenseItemBehavior$17",
            "XXX.core.dispenser.DispenseItemBehavior$19",
            "XXX.core.dispenser.DispenseItemBehavior$20",
            "XXX.core.dispenser.DispenseItemBehavior$22",
            "XXX.core.dispenser.DispenseItemBehavior$24",
            "XXX.core.dispenser.DispenseItemBehavior$3",
            "XXX.core.dispenser.DispenseItemBehavior$5",
            "XXX.core.dispenser.DispenseItemBehavior$7",
            "XXX.core.dispenser.DispenseItemBehavior$8",
            "XXX.core.dispenser.DispenseItemBehavior$9",
            "XXX.core.dispenser.ShearsDispenseItemBehavior",
            "XXX.core.dispenser.package-info",
            "XXX.core.particles.BlockParticleOption",
            "XXX.core.particles.DustParticleOptions",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.Main",
            "XXX.data.advancements.AdventureAdvancements",
            "XXX.data.advancements.NetherAdvancements",
            "XXX.data.advancements.TheEndAdvancements",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLoot",
            "XXX.data.loot.EntityLoot",
            "XXX.data.loot.GiftLoot",
            "XXX.data.loot.PiglinBarterLoot",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.Condition$1",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.models.blockstates.PropertyDispatch$1",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.FinishedRecipe",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.GameTestSequence",
            "XXX.gametest.framework.GameTestServer",
            "XXX.gametest.framework.GameTestTicker",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.StructureUtils",
            "XXX.gametest.framework.TestClassNameArgument",
            "XXX.gametest.framework.TestCommand$TestSummaryDisplayer",
            "XXX.gametest.framework.TestFunctionArgument",
            "XXX.gametest.framework.package-info",
            "XXX.minecraft.locale.package-info",
            "XXX.minecraft.nbt.ByteArrayTag$1",
            "XXX.minecraft.nbt.ByteTag$1",
            "XXX.minecraft.nbt.CollectionTag",
            "XXX.minecraft.nbt.CompoundTag$1",
            "XXX.minecraft.nbt.DoubleTag$1",
            "XXX.minecraft.nbt.EndTag$1",
            "XXX.minecraft.nbt.FloatTag$1",
            "XXX.minecraft.nbt.IntArrayTag$1",
            "XXX.minecraft.nbt.IntTag$1",
            "XXX.minecraft.nbt.ListTag",
            "XXX.minecraft.nbt.LongArrayTag",
            "XXX.minecraft.nbt.LongTag",
            "XXX.minecraft.nbt.LongTag$Cache",
            "XXX.minecraft.nbt.NbtAccounter$1",
            "XXX.minecraft.nbt.NbtOps",
            "XXX.minecraft.nbt.NumericTag",
            "XXX.minecraft.nbt.ShortTag$1",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.Tag",
            "XXX.minecraft.nbt.TagType",
            "XXX.minecraft.nbt.TagTypes",
            "XXX.minecraft.network.CipherBase",
            "XXX.minecraft.network.CipherEncoder",
            "XXX.minecraft.network.CompressionEncoder",
            "XXX.minecraft.network.Connection$1",
            "XXX.minecraft.network.Connection$PacketHolder",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder",
            "XXX.minecraft.network.PacketDecoder",
            "XXX.minecraft.network.PacketListener",
            "XXX.minecraft.network.Varint21FrameDecoder",
            "XXX.network.chat.BaseComponent",
            "XXX.network.chat.ClickEvent",
            "XXX.network.chat.CommonComponents",
            "XXX.network.chat.Component$ContentConsumer",
            "XXX.network.chat.Component$StyledContentConsumer",
            "XXX.network.chat.ContextAwareComponent",
            "XXX.network.chat.HoverEvent$Action",
            "XXX.network.chat.HoverEvent$ItemStackInfo",
            "XXX.network.chat.MutableComponent",
            "XXX.network.chat.TextColor",
            "XXX.network.chat.TranslatableComponent",
            "XXX.network.chat.package-info",
            "XXX.network.protocol.Packet",
            "XXX.network.protocol.PacketUtils",
            "XXX.protocol.game.ClientboundAddEntityPacket",
            "XXX.protocol.game.ClientboundAddGlobalEntityPacket",
            "XXX.protocol.game.ClientboundAddPaintingPacket",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundChunkBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquippedItemPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookUpdatePacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.realms.DisconnectedRealmsScreen",
            "XXX.minecraft.realms.RealmsBridge",
            "XXX.minecraft.realms.RealmsConnect$1",
            "XXX.minecraft.realms.RealmsObjectSelectionList",
            "XXX.minecraft.realms.RealmsServerAddress",
            "XXX.minecraft.realms.RepeatedNarrator$Params",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.ServerPlaceSmeltingRecipe",
            "XXX.minecraft.resources.ResourceLocation",
            "XXX.minecraft.resources.package-info",
            "XXX.minecraft.server.Bootstrap$1",
            "XXX.server.commands.AttributeCommand",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.DebugPathCommand",
            "XXX.server.commands.DifficultyCommand",
            "XXX.server.commands.EmoteCommands",
            "XXX.server.commands.ExecuteCommand",
            "XXX.server.commands.ExecuteCommand$CommandPredicate",
            "XXX.server.commands.ExperienceCommand$Type",
            "XXX.server.commands.FillCommand$Mode",
            "XXX.server.commands.FunctionCommand",
            "XXX.server.commands.GameRuleCommand",
            "XXX.server.commands.GiveCommand",
            "XXX.server.commands.KickCommand",
            "XXX.server.commands.ListPlayersCommand",
            "XXX.server.commands.LocateCommand",
            "XXX.server.commands.LootCommand$Callback",
            "XXX.server.commands.LootCommand$TailProvider",
            "XXX.server.commands.OpCommand",
            "XXX.server.commands.PardonIpCommand",
            "XXX.server.commands.PlaySoundCommand",
            "XXX.server.commands.RaidCommand",
            "XXX.server.commands.ReloadCommand",
            "XXX.server.commands.SaveAllCommand",
            "XXX.server.commands.SaveOnCommand",
            "XXX.server.commands.ScheduleCommand",
            "XXX.server.commands.SeedCommand",
            "XXX.server.commands.SetBlockCommand$Filter",
            "XXX.server.commands.SetPlayerIdleTimeoutCommand",
            "XXX.server.commands.SetWorldSpawnCommand",
            "XXX.server.commands.SpreadPlayersCommand",
            "XXX.server.commands.StopCommand",
            "XXX.server.commands.SummonCommand",
            "XXX.server.commands.TeamCommand",
            "XXX.server.commands.TeleportCommand",
            "XXX.server.commands.TellRawCommand",
            "XXX.server.commands.TitleCommand",
            "XXX.server.commands.WeatherCommand",
            "XXX.server.commands.WorldBorderCommand",
            "XXX.commands.data.BlockDataAccessor$1",
            "XXX.commands.data.DataCommands",
            "XXX.commands.data.DataCommands$DataManipulatorDecorator",
            "XXX.commands.data.EntityDataAccessor",
            "XXX.commands.data.StorageDataAccessor",
            "XXX.commands.data.package-info",
            "XXX.server.dedicated.DedicatedPlayerList",
            "XXX.server.dedicated.DedicatedServer$1",
            "XXX.server.dedicated.DedicatedServerProperties",
            "XXX.server.dedicated.ServerWatchdog",
            "XXX.server.dedicated.Settings",
            "XXX.server.dedicated.Settings$MutableValue",
            "XXX.server.gui.MinecraftServerGui",
            "XXX.server.gui.MinecraftServerGui$2",
            "XXX.server.gui.StatsComponent",
            "XXX.server.level.BlockDestructionProgress",
            "XXX.server.level.ChunkHolder$1",
            "XXX.server.level.ChunkHolder$ChunkLoadingFailure$1",
            "XXX.server.level.ChunkHolder$LevelChangeListener",
            "XXX.server.level.ChunkMap",
            "XXX.server.level.ChunkMap$2",
            "XXX.server.level.ChunkMap$TrackedEntity",
            "XXX.server.level.ChunkTaskPriorityQueueSorter",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Message",
            "XXX.server.level.ChunkTracker",
            "XXX.server.level.DemoMode",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.FeatureSimulator",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerChunkCache$MainThreadExecutor",
            "XXX.server.level.ServerLevel",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.server.network.package-info",
            "XXX.server.packs.AbstractResourcePack",
            "XXX.server.packs.FolderResourcePack",
            "XXX.server.packs.PackType",
            "XXX.server.packs.VanillaPack",
            "XXX.metadata.pack.PackMetadataSection",
            "XXX.metadata.pack.package-info",
            "XXX.server.packs.package-info",
            "XXX.packs.repository.PackCompatibility",
            "XXX.packs.repository.RepositorySource",
            "XXX.packs.repository.UnopenedPack",
            "XXX.packs.repository.UnopenedPack$UnopenedPackConstructor",
            "XXX.packs.resources.FallbackResourceManager",
            "XXX.packs.resources.PreparableReloadListener",
            "XXX.packs.resources.ProfiledReloadInstance",
            "XXX.packs.resources.ProfiledReloadInstance$State",
            "XXX.packs.resources.ReloadableResourceManager",
            "XXX.packs.resources.ResourceManager",
            "XXX.packs.resources.SimpleJsonResourceReloadListener",
            "XXX.packs.resources.SimpleReloadInstance",
            "XXX.packs.resources.SimpleReloadInstance$StateFactory",
            "XXX.packs.resources.SimpleReloadableResourceManager$FailingReloadInstance",
            "XXX.packs.resources.SimpleResource",
            "XXX.server.players.BanListEntry",
            "XXX.server.players.GameProfileCache$1",
            "XXX.server.players.GameProfileCache$GameProfileInfo",
            "XXX.server.players.IpBanList",
            "XXX.server.players.OldUsersConverter",
            "XXX.server.players.OldUsersConverter$2",
            "XXX.server.players.OldUsersConverter$4",
            "XXX.server.players.OldUsersConverter$ConversionError",
            "XXX.server.players.PlayerList$1",
            "XXX.server.players.ServerOpListEntry",
            "XXX.server.players.StoredUserList",
            "XXX.server.players.UserBanListEntry",
            "XXX.server.players.UserWhiteListEntry",
            "XXX.server.rcon.NetworkDataOutputStream",
            "XXX.server.rcon.RconConsoleSource",
            "XXX.rcon.thread.GenericThread",
            "XXX.rcon.thread.QueryThreadGs4$RequestChallenge",
            "XXX.rcon.thread.RconThread",
            "XXX.minecraft.sounds.Music",
            "XXX.minecraft.sounds.SoundEvent",
            "XXX.minecraft.sounds.SoundSource",
            "XXX.minecraft.stats.RecipeBook",
            "XXX.minecraft.stats.ServerStatsCounter",
            "XXX.minecraft.stats.StatFormatter",
            "XXX.minecraft.stats.Stats",
            "XXX.minecraft.stats.package-info",
            "XXX.minecraft.tags.EntityTypeTags",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.StaticTagHelper$1",
            "XXX.minecraft.tags.SynchronizableTagCollection",
            "XXX.minecraft.tags.Tag$1",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagManager",
            "XXX.minecraft.util.BitStorage",
            "XXX.minecraft.util.CrudeIncrementalIntIdentityHashBiMap",
            "XXX.minecraft.util.CsvOutput",
            "XXX.minecraft.util.CsvOutput$Builder",
            "XXX.minecraft.util.CubicSampler$Vec3Fetcher",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.InsensitiveStringMap",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.LinearCongruentialGenerator",
            "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory$1",
            "XXX.minecraft.util.ProgressListener",
            "XXX.minecraft.util.RewindableStream$1",
            "XXX.minecraft.util.Serializer",
            "XXX.minecraft.util.SortedArraySet",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.util.datafix.OminousBannerRenameFix",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.datafix.fixes.BitStorageAlignFix",
            "XXX.world.level.GameRules$GameRuleTypeVisitor",
            "XXX.world.level.GameRules$Key",
            "XXX.world.level.GameRules$Value",
            "XXX.level.border.WorldBorder$Settings",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkGeneratorFactory",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.FeatureAccess",
            "XXX.level.chunk.HashMapPalette",
            "XXX.level.chunk.LevelChunk",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.chunk.UpgradeData$BlockFixer",
            "XXX.level.chunk.UpgradeData$BlockFixers$1",
            "XXX.level.chunk.UpgradeData$BlockFixers$3",
            "XXX.level.chunk.UpgradeData$BlockFixers$5",
            "XXX.chunk.storage.ChunkSerializer",
            "XXX.chunk.storage.IOWorker",
            "XXX.chunk.storage.IOWorker$PendingStore",
            "XXX.chunk.storage.OldChunkStorage$OldLevelChunk",
            "XXX.chunk.storage.RegionFile",
            "XXX.chunk.storage.RegionFile$CommitOp",
            "XXX.chunk.storage.RegionFileVersion",
            "XXX.chunk.storage.SectionStorage",
            "XXX.level.dimension.Dimension",
            "XXX.level.dimension.NetherDimension",
            "XXX.level.dimension.NormalDimension",
            "XXX.dimension.end.DragonRespawnAnimation$1",
            "XXX.dimension.end.DragonRespawnAnimation$3",
            "XXX.dimension.end.DragonRespawnAnimation$5",
            "XXX.dimension.end.TheEndDimension",
            "XXX.level.dimension.package-info",
            "XXX.level.levelgen.ChunkGeneratorSettings",
            "XXX.level.levelgen.DebugLevelSource",
            "XXX.level.levelgen.FlatLevelSource$FlatLevelBiomeWrapper",
            "XXX.level.levelgen.GenerationStep$Carving",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NetherLevelSource",
            "XXX.level.levelgen.OverworldGeneratorSettings",
            "XXX.level.levelgen.PatrolSpawner",
            "XXX.level.levelgen.TheEndGeneratorSettings",
            "XXX.level.levelgen.WorldgenRandom",
            "XXX.levelgen.carver.CarverConfiguration",
            "XXX.levelgen.carver.ConfiguredWorldCarver",
            "XXX.levelgen.carver.NoneCarverConfiguration",
            "XXX.levelgen.carver.UnderwaterCaveWorldCarver",
            "XXX.levelgen.carver.package-info",
            "XXX.levelgen.feature.AbstractHugeMushroomFeature",
            "XXX.levelgen.feature.BasaltColumnsFeature",
            "XXX.levelgen.feature.BastionBridgePools",
            "XXX.levelgen.feature.BastionFeature$FeatureStart",
            "XXX.levelgen.feature.BastionHousingUnitsPools",
            "XXX.levelgen.feature.BastionPieces$BastionPiece",
            "XXX.levelgen.feature.BastionTreasureRoomPools",
            "XXX.levelgen.feature.BlockPileFeature",
            "XXX.levelgen.feature.BonusChestFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart",
            "XXX.levelgen.feature.ConfiguredFeature",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.feature.featuresize.FeatureSize",
            "XXX.feature.featuresize.ThreeLayersFeatureSize",
            "XXX.feature.featuresize.package-info",
            "XXX.feature.foliageplacers.BlobFoliagePlacer",
            "XXX.feature.foliageplacers.DarkOakFoliagePlacer",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.MegaPineFoliagePlacer",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.StructureTemplatePools",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.material.Fluids",
            "XXX.level.material.LavaFluid$Flowing",
            "XXX.level.material.Material",
            "XXX.level.material.MaterialColor",
            "XXX.level.material.WaterFluid",
            "XXX.level.material.WaterFluid$Source",
            "XXX.newbiome.area.Area",
            "XXX.newbiome.area.LazyArea",
            "XXX.newbiome.context.BigContext",
            "XXX.newbiome.context.LazyAreaContext",
            "XXX.newbiome.layer.AddDeepOceanLayer",
            "XXX.newbiome.layer.AddEdgeLayer$CoolWarm",
            "XXX.newbiome.layer.AddEdgeLayer$IntroduceSpecial",
            "XXX.newbiome.layer.AddMushroomIslandLayer",
            "XXX.newbiome.layer.BiomeEdgeLayer",
            "XXX.newbiome.layer.IslandLayer",
            "XXX.newbiome.layer.Layers",
            "XXX.newbiome.layer.OceanMixerLayer",
            "XXX.newbiome.layer.RareBiomeSpotLayer",
            "XXX.newbiome.layer.RemoveTooMuchOceanLayer",
            "XXX.newbiome.layer.RiverLayer",
            "XXX.newbiome.layer.ShoreLayer",
            "XXX.newbiome.layer.ZoomLayer",
            "XXX.newbiome.layer.package-info",
            "XXX.layer.traits.AreaTransformer1",
            "XXX.layer.traits.BishopTransformer",
            "XXX.layer.traits.C1Transformer",
            "XXX.layer.traits.DimensionOffset0Transformer",
            "XXX.layer.traits.DimensionTransformer",
            "XXX.layer.traits.package-info",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.pathfinder.TurtleNodeEvaluator",
            "XXX.level.pathfinder.package-info",
            "XXX.level.redstone.package-info",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.saveddata.maps.MapItemSavedData$HoldingPlayer",
            "XXX.level.saveddata.package-info",
            "XXX.level.storage.CommandStorage$Container",
            "XXX.level.storage.DimensionDataStorage",
            "XXX.level.storage.LevelResource",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BinomialDistributionGenerator$Serializer",
            "XXX.storage.loot.ConstantIntValue",
            "XXX.storage.loot.IntLimiter",
            "XXX.storage.loot.IntLimiter$Serializer",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.RandomIntGenerator",
            "XXX.storage.loot.RandomValueBounds",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntries$Serializer",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$DataSource",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$1",
            "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3",
            "XXX.loot.functions.EnchantRandomlyFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.EnchantWithLevelsFunction$Builder",
            "XXX.loot.functions.ExplorationMapFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootItemConditionalFunction",
            "XXX.loot.functions.LootItemConditionalFunction$DummyBuilder",
            "XXX.loot.functions.LootItemFunction",
            "XXX.loot.functions.LootItemFunction$Serializer",
            "XXX.loot.functions.LootItemFunctions$Serializer",
            "XXX.loot.functions.LootingEnchantFunction$1",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$1",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetContainerLootTable$1",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetItemCountFunction$Serializer",
            "XXX.loot.functions.SetItemDamageFunction$1",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNameFunction$1",
            "XXX.loot.functions.SetNbtFunction",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.SetStewEffectFunction$1",
            "XXX.loot.functions.SetStewEffectFunction$Serializer",
            "XXX.loot.functions.SmeltItemFunction$1",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.parameters.LootContextParamSet$1",
            "XXX.loot.parameters.LootContextParamSets",
            "XXX.loot.parameters.package-info",
            "XXX.loot.predicates.AlternativeLootItemCondition$1",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.BonusLevelTableCondition$1",
            "XXX.loot.predicates.ConditionReference",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.InvertedLootItemCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemCondition$Builder",
            "XXX.loot.predicates.LootItemConditions",
            "XXX.loot.predicates.LootItemEntityPropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.TimeCheck$Serializer",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks",
            "XXX.level.timers.TimerQueue$1",
            "XXX.level.timers.package-info",
            "XXX.world.phys.AABB",
            "XXX.world.phys.EntityHitResult",
            "XXX.world.phys.HitResult$Type",
            "XXX.world.phys.Vec2",
            "XXX.world.phys.package-info",
            "XXX.phys.shapes.ArrayVoxelShape$1",
            "XXX.phys.shapes.BooleanOp",
            "XXX.phys.shapes.CubePointRange",
            "XXX.phys.shapes.DiscreteCubeMerger",
            "XXX.phys.shapes.DiscreteVoxelShape$IntFaceConsumer",
            "XXX.phys.shapes.EntityCollisionContext",
            "XXX.phys.shapes.IdenticalMerger",
            "XXX.phys.shapes.IndexMerger$IndexConsumer",
            "XXX.phys.shapes.IntPointRange",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.WorldRegionIndirectVoxelShape",
            "XXX.world.scores.Objective",
            "XXX.world.scores.Score",
            "XXX.world.scores.ScoreboardSaveData",
            "XXX.world.scores.Team$CollisionRule",
            "XXX.scores.criteria.ObjectiveCriteria",
            "XXX.scores.criteria.package-info"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.blaze3d.platform.InputConstants \u001b[2;31m-2M\u001b[0m",
          "XXX.blaze3d.platform.InputConstants$Key \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.realmsclient.gui.RowButton \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gui.screens.RealmsBackupInfoScreen$BackupInfoList \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.RealmsBackupScreen$Entry \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.gui.screens.RealmsClientOutdatedScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsCreateRealmScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsInviteScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsNotificationsScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.RealmsParentalConsentScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsPendingInvitesScreen$Entry$AcceptRowButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsPendingInvitesScreen$PendingInvitationSelectionList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsPlayerScreen$Entry \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.gui.screens.RealmsResetNormalWorldScreen \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.RealmsResetWorldScreen$FrameButton \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.RealmsSelectFileToUploadScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsSelectFileToUploadScreen$WorldSelectionList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsSelectWorldTemplateScreen$WorldTemplateObjectSelectionList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsSlotOptionsScreen \u001b[2;32m+10M\u001b[0m \u001b[2;31m-10M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.RealmsSubscriptionInfoScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsTermsScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.util.task.LongRunningTask \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "net.minecraft.SharedConstants \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.Minecraft \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.client.NarratorStatus \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.client.Options \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.client.ProgressOption \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.Screenshot \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.font.FontSet \u001b[2;32m+7M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.gui.font.TextFieldHelper \u001b[2;32m+28M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.font.providers.BitmapProvider \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.font.providers.LegacyUnicodeBitmapsProvider \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.AlertScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gui.screens.ChatScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.ConfirmLinkScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.ConnectScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.CreateBuffetWorldScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.CreateFlatWorldScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.DeathScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.DirectJoinServerScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.EditServerScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.GenericDirtMessageScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LanguageSelectScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LoadingOverlay \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.MouseSettingsScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.PresetFlatWorldScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.ProgressScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.Screen \u001b[2;32m+7M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.gui.screens.SkinCustomizationScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.TitleScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.WinScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.screens.achievement.StatsScreen$GeneralStatisticsList$Entry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.achievement.StatsScreen$MobsStatisticsList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.advancements.AdvancementTab \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.controls.ControlList$KeyEntry$1 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.screens.controls.ControlsScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.AbstractCommandBlockEditScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.AbstractContainerScreen \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.inventory.AnvilScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.inventory.BeaconScreen$BeaconConfirmButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.BeaconScreen$BeaconScreenButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.inventory.BookEditScreen$Pos2i \u001b[2;32m+1M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.inventory.BrewingStandScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.ContainerScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.EffectRenderingInventoryScreen \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.screens.inventory.EnchantmentScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.GrindstoneScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.HorseInventoryScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.ItemCombinerScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.inventory.JigsawBlockEditScreen$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.MerchantScreen$TradeOfferButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.PageButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.SignEditScreen \u001b[2;32m+6M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.screens.inventory.StructureBlockEditScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.multiplayer.SafetyScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.screens.multiplayer.ServerSelectionList$NetworkServerEntry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.recipebook.AbstractFurnaceRecipeBookComponent \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.recipebook.GhostRecipe \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.recipebook.OverlayRecipeComponent \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.recipebook.RecipeBookComponent \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.screens.recipebook.RecipeBookTabButton \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.recipebook.SmokingRecipeBookComponent \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.resourcepacks.ResourcePackSelectScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.resourcepacks.lists.ResourcePackList$ResourcePackEntry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen$1 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen$3 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen$5 \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen$7 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.worldselection.EditWorldScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.worldselection.SelectWorldScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.screens.worldselection.WorldSelectionList$WorldListEntry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.spectator.PlayerMenuItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.spectator.SpectatorMenu$CloseSpectatorItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.spectator.categories.TeleportToPlayerMenuCategory \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.spectator.categories.TeleportToTeamMenuCategory$TeamSelectionItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.client.map.Map \u001b[2;32m+13M\u001b[0m \u001b[2;31m-10M\u001b[0m | \u001b[2;32m+5P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.client.map.Map$2 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.commands.Commands \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.commands.SharedSuggestionProvider \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.arguments.ResourceLocationArgument \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.network.chat.NbtComponent$BlockNbtComponent \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.network.chat.NbtComponent$StorageNbtComponent \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.network.chat.SelectorComponent \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.network.chat.Style$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-23M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.server.MinecraftServer$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.util.worldupdate.WorldUpgrader \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.entity.EntityType \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.world.entity.LivingEntity \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.ai.attributes.AttributeMap \u001b[2;32m+3M\u001b[0m",
          "XXX.entity.player.Player \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.world.inventory.RecipeHolder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.ItemStack \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.RecordItem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.GameRules \u001b[2;32m+9M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.world.level.GameRules$BooleanValue \u001b[2;32m+4M\u001b[0m",
          "XXX.world.level.LevelSettings \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+3P\u001b[0m",
          "XXX.level.biome.Biome \u001b[2;32m+8M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.level.biome.BiomeDefaultFeatures \u001b[2;32m+26P\u001b[0m \u001b[2;31m-23P\u001b[0m",
          "XXX.level.biome.BiomeSpecialEffects \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.biome.BiomeSpecialEffects$Builder \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.biome.MultiNoiseBiomeSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.level.block.AbstractSkullBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.Block \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.Blocks \u001b[2;32m+3P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.level.block.CocoaBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.RespawnAnchorBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.block.entity.AbstractFurnaceBlockEntity \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.border.WorldBorder \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.feature.DeltaFeature \u001b[2;32m+1P\u001b[0m",
          "XXX.levelgen.feature.TreeFeature \u001b[2;32m+22M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.TreeConfiguration$TreeConfigurationBuilder \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.feature.foliageplacers.FoliagePlacer \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.feature.trunkplacers.StraightTrunkPlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.trunkplacers.TrunkPlacerType \u001b[2;32m+4P\u001b[0m",
          "XXX.structure.templatesystem.StructureManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.platform.InputConstants",
        "differences": {
          "added": [
            "String translateKeyCode(int)",
            "String translateScanCode(int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.platform.InputConstants$Key",
        "differences": {
          "added": [
            "Map access$100()"
          ],
          "removed": [
            "Component getDisplayName()",
            "Component lambda$new$0(InputConstants$Type,int,String)",
            "Map access$200()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.RowButton",
        "differences": {
          "added": [
            "void drawForRowAt(int,int,int,int)",
            "void drawButtonsInRow(List,RealmsObjectSelectionList,int,int,int,int)"
          ],
          "removed": [
            "void drawForRowAt(PoseStack,int,int,int,int)",
            "void drawButtonsInRow(PoseStack,List,RealmsObjectSelectionList,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsBackupInfoScreen$BackupInfoList",
        "differences": {
          "added": [
            "void renderItem(int,int,int,int,int,int,float)",
            "void render(int,int,float)"
          ],
          "removed": [
            "void renderItem(PoseStack,int,int,int,int,int,int,float)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsBackupScreen$Entry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)",
            "void renderBackupItem(Backup,int,int,int,int)",
            "void drawRestore(int,int,int,int)",
            "void drawInfo(int,int,int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)",
            "void renderBackupItem(PoseStack,Backup,int,int,int,int)",
            "void drawRestore(PoseStack,int,int,int,int)",
            "void drawInfo(PoseStack,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsClientOutdatedScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsCreateRealmScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsInviteScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsNotificationsScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void drawIcons(int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void drawIcons(PoseStack,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsParentalConsentScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsPendingInvitesScreen$Entry$AcceptRowButton",
        "differences": {
          "added": [
            "void draw(int,int,boolean)"
          ],
          "removed": [
            "void draw(PoseStack,int,int,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsPendingInvitesScreen$PendingInvitationSelectionList",
        "differences": {
          "added": [
            "void renderBackground()"
          ],
          "removed": [
            "void renderBackground(PoseStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsPlayerScreen$Entry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)",
            "void renderInvitedItem(PlayerInfo,int,int,int,int)",
            "void lambda$renderInvitedItem$0(int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)",
            "void renderInvitedItem(PoseStack,PlayerInfo,int,int,int,int)",
            "void lambda$renderInvitedItem$0(PoseStack,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsResetNormalWorldScreen",
        "differences": {
          "added": [
            "void <init>(RealmsResetWorldScreen,String)",
            "void render(int,int,float)",
            "String levelTypeTitle()",
            "String generateStructuresTitle()"
          ],
          "removed": [
            "void <init>(RealmsResetWorldScreen,Component)",
            "void render(PoseStack,int,int,float)",
            "Component levelTypeTitle()",
            "Component generateStructuresTitle()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsResetWorldScreen$FrameButton",
        "differences": {
          "added": [
            "void <init>(RealmsResetWorldScreen,int,int,String,ResourceLocation,Button$OnPress)",
            "void renderButton(int,int,float)"
          ],
          "removed": [
            "void <init>(RealmsResetWorldScreen,int,int,Component,ResourceLocation,Button$OnPress)",
            "void renderButton(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectFileToUploadScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectFileToUploadScreen$WorldSelectionList",
        "differences": {
          "added": [
            "void renderBackground()"
          ],
          "removed": [
            "void renderBackground(PoseStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectWorldTemplateScreen$WorldTemplateObjectSelectionList",
        "differences": {
          "added": [
            "void renderBackground()"
          ],
          "removed": [
            "void renderBackground(PoseStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSlotOptionsScreen",
        "differences": {
          "added": [
            "String difficultyTitle()",
            "String gameModeTitle()",
            "String pvpTitle()",
            "String spawnAnimalsTitle()",
            "String spawnMonstersTitle()",
            "String spawnNPCsTitle()",
            "String commandBlocksTitle()",
            "String forceGameModeTitle()",
            "String getOnOff(boolean)",
            "void render(int,int,float)"
          ],
          "removed": [
            "Component difficultyTitle()",
            "Component gameModeTitle()",
            "Component pvpTitle()",
            "Component spawnAnimalsTitle()",
            "Component spawnMonstersTitle()",
            "Component spawnNPCsTitle()",
            "Component commandBlocksTitle()",
            "Component forceGameModeTitle()",
            "Component getOnOff(boolean)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSubscriptionInfoScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsTermsScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.util.task.LongRunningTask",
        "differences": {
          "added": [
            "void error(String)"
          ],
          "removed": [
            "void error(Component)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.SharedConstants",
        "differences": {
          "added": [
            "String filterUnicodeSupplementary(String)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.Minecraft",
        "differences": {
          "added": [
            "void renderFpsMeter(ProfileResults)",
            "void selectLevel(String,String,LevelSettings)",
            "MusicManager$Music getSituationalMusic()",
            "FontManager getFontManager()",
            "void lambda$grabHugeScreenshot$31(File,Style)",
            "void lambda$grabPanoramixScreenshot$30(File,Style)"
          ],
          "removed": [
            "void selectMainFont(boolean)",
            "void renderFpsMeter(PoseStack,ProfileResults)",
            "void selectLevel(String,LevelSettings)",
            "Music getSituationalMusic()",
            "Style lambda$grabHugeScreenshot$31(File,Style)",
            "Style lambda$grabPanoramixScreenshot$30(File,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.NarratorStatus",
        "differences": {
          "added": [
            "String getKey()"
          ],
          "removed": [
            "Component getName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.ProgressOption",
        "differences": {
          "added": [
            "String getMessage(Options)"
          ],
          "removed": [
            "Component getMessage(Options)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.Screenshot",
        "differences": {
          "added": [
            "void lambda$null$1(File,Style)"
          ],
          "removed": [
            "Style lambda$null$1(File,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.FontSet",
        "differences": {
          "added": [
            "GlyphInfo getGlyphInfo(char)",
            "RawGlyph getRaw(char)",
            "BakedGlyph getGlyph(char)",
            "BakedGlyph lambda$getGlyph$3(int)",
            "GlyphInfo lambda$getGlyphInfo$2(int)",
            "CharList lambda$reload$1(int)"
          ],
          "removed": [
            "GlyphInfo getGlyphInfo(int)",
            "RawGlyph getRaw(int)",
            "BakedGlyph getGlyph(int)",
            "BakedGlyph lambda$getGlyph$4(int)",
            "GlyphInfo lambda$getGlyphInfo$3(int)",
            "void lambda$reload$2(List,Set,int)",
            "IntList lambda$null$1(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.TextFieldHelper",
        "differences": {
          "added": [
            "void <init>(Minecraft,Supplier,Consumer,int)",
            "String getSelected()",
            "void deleteSelection()"
          ],
          "removed": [
            "void <init>(Supplier,Consumer,Supplier,Consumer,Predicate)",
            "Supplier createClipboardGetter(Minecraft)",
            "String getClipboardContents(Minecraft)",
            "Consumer createClipboardSetter(Minecraft)",
            "void setClipboardContents(Minecraft,String)",
            "int clampToMsgLength(int)",
            "void insertText(String,String)",
            "void resetSelectionIfNeeded(boolean)",
            "void moveByChars(int)",
            "void moveByChars(int,boolean)",
            "void moveByWords(int)",
            "void moveByWords(int,boolean)",
            "void removeCharsFromCursor(int)",
            "void cut()",
            "void paste()",
            "void copy()",
            "void selectAll()",
            "String getSelected(String)",
            "String deleteSelection(String)",
            "void setStart(boolean)",
            "void setEnd(boolean)",
            "void setCursorPos(int)",
            "void setCursorPos(int,boolean)",
            "void setSelectionPos(int)",
            "void setSelectionRange(int,int)",
            "boolean isSelecting()",
            "void lambda$createClipboardSetter$1(Minecraft,String)",
            "String lambda$createClipboardGetter$0(Minecraft)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.providers.BitmapProvider",
        "differences": {
          "added": [
            "void <init>(NativeImage,Char2ObjectMap)",
            "RawGlyph getGlyph(char)"
          ],
          "removed": [
            "void <init>(NativeImage,Int2ObjectMap)",
            "RawGlyph getGlyph(int)",
            "IntSet getSupportedGlyphs()",
            "void <init>(NativeImage,Int2ObjectMap,BitmapProvider$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.providers.LegacyUnicodeBitmapsProvider",
        "differences": {
          "added": [
            "ResourceLocation getSheetLocation(char)",
            "RawGlyph getGlyph(char)"
          ],
          "removed": [
            "ResourceLocation getSheetLocation(int)",
            "RawGlyph getGlyph(int)",
            "IntSet getSupportedGlyphs()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.AlertScreen",
        "differences": {
          "added": [
            "void <init>(Runnable,Component,Component,String)",
            "void render(int,int,float)"
          ],
          "removed": [
            "void <init>(Runnable,Component,Component,Component)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.ChatScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.ConfirmLinkScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.ConnectScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.CreateBuffetWorldScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "Component createGeneratorString(int)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.CreateFlatWorldScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.DeathScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.DirectJoinServerScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.EditServerScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "Component createServerButtonText(ServerData$ServerPackStatus)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.GenericDirtMessageScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LanguageSelectScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LoadingOverlay",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void drawProgressBar(int,int,int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void drawProgressBar(PoseStack,int,int,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.MouseSettingsScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.PresetFlatWorldScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void preset(String,ItemLike,Biome,List,FlatLayerInfo[])"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void preset(Component,ItemLike,Biome,List,FlatLayerInfo[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.ProgressScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.Screen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderTooltip(ItemStack,int,int)",
            "void renderTooltip(String,int,int)",
            "void renderTooltip(List,int,int)",
            "void renderComponentHoverEffect(Component,int,int)",
            "void renderBackground()",
            "void renderBackground(int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderTooltip(PoseStack,ItemStack,int,int)",
            "void renderTooltip(PoseStack,Component,int,int)",
            "void renderTooltip(PoseStack,List,int,int)",
            "void renderComponentHoverEffect(PoseStack,Component,int,int)",
            "void renderBackground(PoseStack)",
            "void renderBackground(PoseStack,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.SkinCustomizationScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "String getMessage(PlayerModelPart)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "Component getMessage(PlayerModelPart)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.TitleScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.WinScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.achievement.StatsScreen$GeneralStatisticsList$Entry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.achievement.StatsScreen$MobsStatisticsList",
        "differences": {
          "added": [
            "void renderBackground()"
          ],
          "removed": [
            "void renderBackground(PoseStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.advancements.AdvancementTab",
        "differences": {
          "added": [
            "String getTitle()",
            "void drawTab(int,int,boolean)",
            "void drawContents()",
            "void drawTooltips(int,int,int,int)"
          ],
          "removed": [
            "Component getTitle()",
            "void drawTab(PoseStack,int,int,boolean)",
            "void drawContents(PoseStack)",
            "void drawTooltips(PoseStack,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.controls.ControlList$KeyEntry$1",
        "differences": {
          "added": [
            "void <init>(ControlList$KeyEntry,int,int,int,int,String,Button$OnPress,ControlList,KeyMapping)",
            "String getNarrationMessage()"
          ],
          "removed": [
            "void <init>(ControlList$KeyEntry,int,int,int,int,Component,Button$OnPress,ControlList,KeyMapping,Component)",
            "MutableComponent createNarrationMessage()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.controls.ControlsScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.AbstractCommandBlockEditScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.AbstractContainerScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderTooltip(int,int)",
            "void renderLabels(int,int)",
            "void renderSlot(Slot)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderTooltip(PoseStack,int,int)",
            "void renderLabels(PoseStack,int,int)",
            "void renderSlot(PoseStack,Slot)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.AnvilScreen",
        "differences": {
          "added": [
            "void renderLabels(int,int)",
            "void renderFg(int,int,float)"
          ],
          "removed": [
            "void renderLabels(PoseStack,int,int)",
            "void renderFg(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BeaconScreen$BeaconConfirmButton",
        "differences": {
          "added": [
            "void renderToolTip(int,int)"
          ],
          "removed": [
            "void renderToolTip(PoseStack,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BeaconScreen$BeaconScreenButton",
        "differences": {
          "added": [
            "void renderButton(int,int,float)"
          ],
          "removed": [
            "void renderButton(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BookEditScreen$Pos2i",
        "differences": {
          "added": [
            "void <init>(BookEditScreen)",
            "void <init>(BookEditScreen,int,int)",
            "int access$000(BookEditScreen$Pos2i)",
            "int access$100(BookEditScreen$Pos2i)",
            "int access$102(BookEditScreen$Pos2i,int)",
            "int access$002(BookEditScreen$Pos2i,int)"
          ],
          "removed": [
            "void <init>(int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BrewingStandScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderLabels(int,int)",
            "void renderBg(float,int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderLabels(PoseStack,int,int)",
            "void renderBg(PoseStack,float,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.ContainerScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderLabels(int,int)",
            "void renderBg(float,int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderLabels(PoseStack,int,int)",
            "void renderBg(PoseStack,float,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.EffectRenderingInventoryScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderEffects()",
            "void renderBackgrounds(int,int,Iterable)",
            "void renderIcons(int,int,Iterable)",
            "void renderLabels(int,int,Iterable)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderEffects(PoseStack)",
            "void renderBackgrounds(PoseStack,int,int,Iterable)",
            "void renderIcons(PoseStack,int,int,Iterable)",
            "void renderLabels(PoseStack,int,int,Iterable)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.EnchantmentScreen",
        "differences": {
          "added": [
            "void renderLabels(int,int)",
            "void renderBg(float,int,int)",
            "void render(int,int,float)"
          ],
          "removed": [
            "void renderLabels(PoseStack,int,int)",
            "void renderBg(PoseStack,float,int,int)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.GrindstoneScreen",
        "differences": {
          "added": [
            "void renderLabels(int,int)",
            "void render(int,int,float)",
            "void renderBg(float,int,int)"
          ],
          "removed": [
            "void renderLabels(PoseStack,int,int)",
            "void render(PoseStack,int,int,float)",
            "void renderBg(PoseStack,float,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.HorseInventoryScreen",
        "differences": {
          "added": [
            "void renderLabels(int,int)",
            "void renderBg(float,int,int)",
            "void render(int,int,float)"
          ],
          "removed": [
            "void renderLabels(PoseStack,int,int)",
            "void renderBg(PoseStack,float,int,int)",
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.ItemCombinerScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderFg(int,int,float)",
            "void renderBg(float,int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderFg(PoseStack,int,int,float)",
            "void renderBg(PoseStack,float,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.JigsawBlockEditScreen$1",
        "differences": {
          "added": [
            "void <init>(JigsawBlockEditScreen,int,int,int,int,String,double)"
          ],
          "removed": [
            "void <init>(JigsawBlockEditScreen,int,int,int,int,Component,double)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.MerchantScreen$TradeOfferButton",
        "differences": {
          "added": [
            "void renderToolTip(int,int)"
          ],
          "removed": [
            "void renderToolTip(PoseStack,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.PageButton",
        "differences": {
          "added": [
            "void renderButton(int,int,float)"
          ],
          "removed": [
            "void renderButton(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.SignEditScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "String lambda$render$3(Component)",
            "void lambda$init$2(String)",
            "String lambda$init$1()",
            "void lambda$init$0(Button)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "boolean lambda$init$4(String)",
            "void lambda$init$3(String)",
            "String lambda$init$2()",
            "void lambda$init$1(Button)",
            "void lambda$new$0(String[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.StructureBlockEditScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.multiplayer.SafetyScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.multiplayer.ServerSelectionList$NetworkServerEntry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.AbstractFurnaceRecipeBookComponent",
        "differences": {
          "added": [
            "String getFilterButtonTooltip()",
            "void renderGhostRecipe(int,int,boolean,float)"
          ],
          "removed": [
            "Component getFilterButtonTooltip()",
            "void renderGhostRecipe(PoseStack,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.GhostRecipe",
        "differences": {
          "added": [
            "void render(Minecraft,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,Minecraft,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.OverlayRecipeComponent",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void nineInchSprite(int,int,int,int,int,int)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void nineInchSprite(PoseStack,int,int,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.RecipeBookComponent",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void renderTooltip(int,int,int,int)",
            "String getFilterButtonTooltip()",
            "void renderGhostRecipeTooltip(int,int,int,int)",
            "void renderGhostRecipe(int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void renderTooltip(PoseStack,int,int,int,int)",
            "Component getFilterButtonTooltip()",
            "void renderGhostRecipeTooltip(PoseStack,int,int,int,int)",
            "void renderGhostRecipe(PoseStack,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.RecipeBookTabButton",
        "differences": {
          "added": [
            "void renderButton(int,int,float)"
          ],
          "removed": [
            "void renderButton(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.SmokingRecipeBookComponent",
        "differences": {
          "added": [
            "String getRecipeFilterName()"
          ],
          "removed": [
            "Component getRecipeFilterName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.resourcepacks.ResourcePackSelectScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.resourcepacks.lists.ResourcePackList$ResourcePackEntry",
        "differences": {
          "added": [
            "String getDescription()",
            "String getName()",
            "void render(int,int,int,int,int,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$1",
        "differences": {
          "added": [
            "void <init>(CreateWorldScreen,Font,int,int,int,int,String)",
            "String getNarrationMessage()"
          ],
          "removed": [
            "void <init>(CreateWorldScreen,Font,int,int,int,int,Component)",
            "MutableComponent createNarrationMessage()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$3",
        "differences": {
          "added": [
            "void <init>(CreateWorldScreen,int,int,int,int,String,Button$OnPress)",
            "String getMessage()",
            "String getNarrationMessage()"
          ],
          "removed": [
            "void <init>(CreateWorldScreen,int,int,int,int,Component,Button$OnPress)",
            "Component getMessage()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$5",
        "differences": {
          "added": [
            "void <init>(CreateWorldScreen,int,int,int,int,String,Button$OnPress)",
            "String getMessage()",
            "String getNarrationMessage()"
          ],
          "removed": [
            "void <init>(CreateWorldScreen,int,int,int,int,Component,Button$OnPress)",
            "Component getMessage()",
            "MutableComponent createNarrationMessage()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$7",
        "differences": {
          "added": [
            "void <clinit>()"
          ],
          "removed": [
            "void <init>(CreateWorldScreen,int,int,int,int,Component,Button$OnPress)",
            "Component getMessage()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.EditWorldScreen",
        "differences": {
          "added": [
            "void render(int,int,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.SelectWorldScreen",
        "differences": {
          "added": [
            "void render(int,int,float)",
            "void setToolTip(String)"
          ],
          "removed": [
            "void render(PoseStack,int,int,float)",
            "void setToolTip(List)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.WorldSelectionList$WorldListEntry",
        "differences": {
          "added": [
            "void render(int,int,int,int,int,int,int,boolean,float)"
          ],
          "removed": [
            "void render(PoseStack,int,int,int,int,int,int,int,boolean,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.PlayerMenuItem",
        "differences": {
          "added": [
            "void renderIcon(float,int)"
          ],
          "removed": [
            "void renderIcon(PoseStack,float,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.SpectatorMenu$CloseSpectatorItem",
        "differences": {
          "added": [
            "void renderIcon(float,int)"
          ],
          "removed": [
            "void renderIcon(PoseStack,float,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.categories.TeleportToPlayerMenuCategory",
        "differences": {
          "added": [
            "void renderIcon(float,int)"
          ],
          "removed": [
            "void renderIcon(PoseStack,float,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.categories.TeleportToTeamMenuCategory$TeamSelectionItem",
        "differences": {
          "added": [
            "void renderIcon(float,int)"
          ],
          "removed": [
            "void renderIcon(PoseStack,float,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.map.Map",
        "differences": {
          "added": [
            "void <init>(int,int,int)",
            "int access$102(Map,int)",
            "int access$200(Map)",
            "int access$302(Map,int)",
            "int access$100(Map)",
            "int access$300(Map)",
            "boolean access$402(Map,boolean)",
            "Layer access$500(Map)",
            "String access$802(Map,String)",
            "String access$002(Map,String)"
          ],
          "removed": [
            "void <init>(int,int,double)",
            "void updateIndicators()",
            "double getNewScale()",
            "String access$102(Map,String)",
            "OptionalLong access$202(Map,OptionalLong)",
            "boolean access$302(Map,boolean)",
            "double access$400(Map)",
            "double access$500(Map)",
            "double access$502(Map,double)",
            "double access$402(Map,double)",
            "int access$602(Map,int)",
            "int access$702(Map,int)",
            "boolean access$802(Map,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.map.Map$2",
        "differences": {
          "added": [
            "void mouseDragged(MouseEvent)",
            "void mouseMoved(MouseEvent)"
          ],
          "removed": [
            "void mouseWheelMoved(MouseWheelEvent)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.Commands",
        "differences": {
          "added": [
            "void lambda$performCommand$3(Component,Style)",
            "void lambda$performCommand$2(String,Style)"
          ],
          "removed": [
            "Style lambda$performCommand$3(MutableComponent,Style)",
            "Style lambda$performCommand$2(String,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.SharedSuggestionProvider",
        "differences": {
          "added": [
            "boolean matches(String,String)"
          ],
          "removed": [
            "boolean matchesSubStr(String,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.ResourceLocationArgument",
        "differences": {
          "added": [
            "CommandSyntaxException lambda$getRecipe$3(ResourceLocation)"
          ],
          "removed": [
            "Attribute getAttribute(CommandContext,String)",
            "CommandSyntaxException lambda$getAttribute$5(ResourceLocation)",
            "CommandSyntaxException lambda$getRecipe$4(ResourceLocation)",
            "Message lambda$static$3(Object)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.NbtComponent$BlockNbtComponent",
        "differences": {
          "added": [
            "Component copy()"
          ],
          "removed": [
            "NbtComponent$BlockNbtComponent toMutable()",
            "BaseComponent toMutable()",
            "MutableComponent toMutable()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.NbtComponent$StorageNbtComponent",
        "differences": {
          "added": [
            "Component copy()"
          ],
          "removed": [
            "NbtComponent$StorageNbtComponent toMutable()",
            "BaseComponent toMutable()",
            "MutableComponent toMutable()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.SelectorComponent",
        "differences": {
          "added": [
            "Component resolve(CommandSourceStack,Entity,int)",
            "SelectorComponent copy()",
            "Component copy()"
          ],
          "removed": [
            "MutableComponent resolve(CommandSourceStack,Entity,int)",
            "SelectorComponent toMutable()",
            "BaseComponent toMutable()",
            "MutableComponent toMutable()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.Style$1",
        "differences": {
          "added": [
            "void <init>()",
            "ChatFormatting getColor()",
            "boolean isBold()",
            "boolean isItalic()",
            "boolean isStrikethrough()",
            "boolean isUnderlined()",
            "boolean isObfuscated()",
            "ClickEvent getClickEvent()",
            "HoverEvent getHoverEvent()",
            "String getInsertion()",
            "Style setColor(ChatFormatting)",
            "Style setBold(Boolean)",
            "Style setItalic(Boolean)",
            "Style setStrikethrough(Boolean)",
            "Style setUnderlined(Boolean)",
            "Style setObfuscated(Boolean)",
            "Style setClickEvent(ClickEvent)",
            "Style setHoverEvent(HoverEvent)",
            "Style inheritFrom(Style)",
            "String toString()",
            "Style copy()",
            "Style flatCopy()",
            "String getLegacyFormatCodes()"
          ],
          "removed": [
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.MinecraftServer$1",
        "differences": {
          "added": [
            "void <init>(MinecraftServer)"
          ],
          "removed": [
            "void <init>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.worldupdate.WorldUpgrader",
        "differences": {
          "added": [
            "void <init>(LevelStorageSource$LevelStorageAccess,LevelData,boolean)"
          ],
          "removed": [
            "void <init>(LevelStorageSource$LevelStorageAccess,DataFixer,WorldData,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EntityType",
        "differences": {
          "added": [
            "void <init>(EntityType$EntityFactory,MobCategory,boolean,boolean,boolean,boolean,int,int,EntityDimensions)",
            "int chunkRange()"
          ],
          "removed": [
            "void <init>(EntityType$EntityFactory,MobCategory,boolean,boolean,boolean,boolean,int,int,EntityDimensions,int,int)",
            "int clientTrackingRange()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.LivingEntity",
        "differences": {
          "added": [
            "void updateSprintingState()",
            "void doSoulSpeedParticles()"
          ],
          "removed": [
            "boolean canSpawnSoulSpeedParticle()",
            "void spawnSoulSpeedParticle()",
            "boolean onSoulSpeedBlock()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.attributes.AttributeMap",
        "differences": {
          "added": [],
          "removed": [
            "boolean hasAttribute(Attribute)",
            "boolean hasModifier(Attribute,UUID)",
            "double getModifierValue(Attribute,UUID)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.player.Player",
        "differences": {
          "added": [
            "Component decorateDisplayNameComponent(Component)",
            "void lambda$decorateDisplayNameComponent$4(String,Style)"
          ],
          "removed": [
            "boolean onSoulSpeedBlock()",
            "MutableComponent decorateDisplayNameComponent(MutableComponent)",
            "Style lambda$decorateDisplayNameComponent$4(String,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.RecipeHolder",
        "differences": {
          "added": [
            "void awardAndReset(Player)"
          ],
          "removed": [
            "void awardUsedRecipes(Player)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ItemStack",
        "differences": {
          "added": [
            "void setFramed(ItemFrame)",
            "void lambda$getDisplayName$3(CompoundTag,Style)",
            "Component lambda$expandBlockState$2(Component)"
          ],
          "removed": [
            "void setEntityRepresentation(Entity)",
            "Entity getEntityRepresentation()",
            "Style lambda$getDisplayName$3(Style)",
            "MutableComponent lambda$expandBlockState$2(MutableComponent)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.RecordItem",
        "differences": {
          "added": [
            "Component getDisplayName()"
          ],
          "removed": [
            "MutableComponent getDisplayName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules",
        "differences": {
          "added": [
            "GameRules$Key register(String,GameRules$Type)",
            "void cap(GameRules$GameRuleTypeVisitor,GameRules$Key,GameRules$Type)",
            "void lambda$visitGameRuleTypes$6(GameRules$GameRuleTypeVisitor,GameRules$Key,GameRules$Type)"
          ],
          "removed": [
            "GameRules$Key register(String,GameRules$Category,GameRules$Type)",
            "void <init>(Map)",
            "GameRules copy()",
            "void callVisitorCap(GameRules$GameRuleTypeVisitor,GameRules$Key,GameRules$Type)",
            "void assignFrom(GameRules,MinecraftServer)",
            "void assignCap(GameRules$Key,GameRules,MinecraftServer)",
            "void lambda$assignFrom$8(GameRules,MinecraftServer,GameRules$Key)",
            "void lambda$visitGameRuleTypes$7(GameRules$GameRuleTypeVisitor,GameRules$Key,GameRules$Type)",
            "GameRules$Value lambda$copy$6(Map$Entry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$BooleanValue",
        "differences": {
          "added": [],
          "removed": [
            "GameRules$BooleanValue copy()",
            "void setFrom(GameRules$BooleanValue,MinecraftServer)",
            "void setFrom(GameRules$Value,MinecraftServer)",
            "GameRules$Value copy()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LevelSettings",
        "differences": {
          "added": [
            "void <init>(long,GameType,boolean,boolean,ChunkGeneratorProvider)",
            "void <init>(LevelData)",
            "boolean isGenerateMapFeatures()"
          ],
          "removed": [
            "void <init>(String,long,GameType,boolean,boolean,Difficulty,ChunkGeneratorProvider)",
            "void <init>(String,long,GameType,boolean,boolean,Difficulty,ChunkGeneratorProvider,GameRules)",
            "boolean shouldGenerateMapFeatures()",
            "String getLevelName()",
            "Difficulty getDifficulty()",
            "GameRules getGameRules()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome",
        "differences": {
          "added": [
            "float getFitness(Biome$ClimateParameters)",
            "Pair lambda$serialize$12(DynamicOps,Map$Entry)",
            "Object lambda$null$11(DynamicOps,Biome$SpawnerData)",
            "Pair lambda$serialize$10(DynamicOps,Map$Entry)",
            "Object lambda$null$8(DynamicOps,ConfiguredFeature)",
            "Pair lambda$serialize$7(DynamicOps,Map$Entry)",
            "Object lambda$null$6(DynamicOps,ConfiguredWorldCarver)",
            "Float lambda$getFitness$5(Biome$ClimateParameters,Biome$ClimateParameters)"
          ],
          "removed": [
            "Optional getBackgroundMusic()",
            "Stream optimalParameters()",
            "Pair lambda$serialize$11(DynamicOps,Map$Entry)",
            "Object lambda$null$10(DynamicOps,Biome$SpawnerData)",
            "Pair lambda$serialize$8(DynamicOps,Map$Entry)",
            "Object lambda$null$7(DynamicOps,ConfiguredFeature)",
            "Pair lambda$serialize$6(DynamicOps,Map$Entry)",
            "Object lambda$null$5(DynamicOps,ConfiguredWorldCarver)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeSpecialEffects",
        "differences": {
          "added": [
            "void <init>(int,int,int,Optional,Optional,Optional,Optional)",
            "void <init>(int,int,int,Optional,Optional,Optional,Optional,BiomeSpecialEffects$1)"
          ],
          "removed": [
            "void <init>(int,int,int,Optional,Optional,Optional,Optional,Optional)",
            "Optional getBackgroundMusic()",
            "void <init>(int,int,int,Optional,Optional,Optional,Optional,Optional,BiomeSpecialEffects$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeSpecialEffects$Builder",
        "differences": {
          "added": [],
          "removed": [
            "BiomeSpecialEffects$Builder backgroundMusic(Music)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.MultiNoiseBiomeSource",
        "differences": {
          "added": [
            "Float lambda$getNoiseBiome$0(Biome$ClimateParameters,Biome)"
          ],
          "removed": [
            "Float lambda$getNoiseBiome$0(Biome$ClimateParameters,Pair)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AbstractSkullBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.Block",
        "differences": {
          "added": [
            "Component getName()"
          ],
          "removed": [
            "MutableComponent getName()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.CocoaBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.RespawnAnchorBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean canSetSpawn(Level)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity",
        "differences": {
          "added": [
            "void awardAndReset(Player)",
            "void awardResetAndExperience(Player)",
            "void createExperience(Player,int,float)",
            "void lambda$awardResetAndExperience$1(List,Player,Object2IntMap$Entry,Recipe)"
          ],
          "removed": [
            "void awardUsedRecipes(Player)",
            "void awardUsedRecipesAndPopExperience(Player)",
            "List getRecipesToAwardAndPopExperience(Level,Vec3)",
            "void createExperience(Level,Vec3,int,float)",
            "void lambda$getRecipesToAwardAndPopExperience$1(List,Level,Vec3,Object2IntMap$Entry,Recipe)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.border.WorldBorder",
        "differences": {
          "added": [
            "void saveWorldBorderData(LevelData)",
            "void readBorderData(LevelData)"
          ],
          "removed": [
            "WorldBorder$Settings createSettings()",
            "void applySettings(WorldBorder$Settings)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.TreeFeature",
        "differences": {
          "added": [
            "boolean doPlace(LevelSimulatedRW,Random,BlockPos,Set,Set,BoundingBox,SmallTreeConfiguration)",
            "void lambda$doPlace$0(SmallTreeConfiguration,LevelSimulatedRW,Random,int,int,Set,BlockPos,Integer)"
          ],
          "removed": [
            "boolean isFree(LevelSimulatedReader,BlockPos)",
            "boolean isVine(LevelSimulatedReader,BlockPos)",
            "boolean isBlockWater(LevelSimulatedReader,BlockPos)",
            "boolean isAirOrLeaves(LevelSimulatedReader,BlockPos)",
            "boolean isGrassOrDirtOrFarmland(LevelSimulatedReader,BlockPos)",
            "boolean isReplaceablePlant(LevelSimulatedReader,BlockPos)",
            "void setBlockKnownShape(LevelWriter,BlockPos,BlockState)",
            "boolean validTreePos(LevelSimulatedRW,BlockPos)",
            "void setBlock(LevelWriter,BlockPos,BlockState)",
            "boolean place(LevelAccessor,StructureFeatureManager,ChunkGenerator,Random,BlockPos,TreeConfiguration)",
            "DiscreteVoxelShape updateLeaves(LevelAccessor,BoundingBox,Set,Set)",
            "void simulate(FeatureSimulator,Random,BlockPos,TreeConfiguration)",
            "boolean place(LevelAccessor,StructureFeatureManager,ChunkGenerator,Random,BlockPos,FeatureConfiguration)",
            "void simulate(FeatureSimulator,Random,BlockPos,FeatureConfiguration)",
            "void lambda$place$7(LevelAccessor,Random,List,List,Set,BoundingBox,TreeDecorator)",
            "void lambda$doPlace$6(TreeConfiguration,LevelSimulatedRW,Random,int,int,int,Set,FoliagePlacer$FoliageAttachment)",
            "boolean lambda$isReplaceablePlant$5(BlockState)",
            "boolean lambda$isGrassOrDirtOrFarmland$4(BlockState)",
            "boolean lambda$isAirOrLeaves$3(BlockState)",
            "boolean lambda$isBlockWater$2(BlockState)",
            "boolean lambda$isVine$1(BlockState)",
            "boolean lambda$isFree$0(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder",
        "differences": {
          "added": [
            "void <init>(BlockStateProvider,BlockStateProvider)",
            "TreeConfiguration$TreeConfigurationBuilder baseHeight(int)"
          ],
          "removed": [
            "void <init>(BlockStateProvider,BlockStateProvider,FoliagePlacer,TrunkPlacer,FeatureSize)",
            "TreeConfiguration$TreeConfigurationBuilder maxWaterDepth(int)",
            "TreeConfiguration$TreeConfigurationBuilder ignoreVines()",
            "TreeConfiguration$TreeConfigurationBuilder heightmap(Heightmap$Types)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer",
        "differences": {
          "added": [
            "void placeLeavesRow(LevelSimulatedRW,Random,SmallTreeConfiguration,BlockPos,int,int,int,Set)",
            "void placeLeaf(LevelSimulatedRW,Random,BlockPos,SmallTreeConfiguration,Set)"
          ],
          "removed": [
            "void createFoliage(LevelSimulatedRW,Random,TreeConfiguration,int,FoliagePlacer$FoliageAttachment,int,int,Set)",
            "int foliageRadius(Random,int)",
            "int offset(Random)",
            "boolean shouldSkipLocationSigned(Random,int,int,int,int,boolean)",
            "void placeLeavesRow(LevelSimulatedRW,Random,TreeConfiguration,BlockPos,int,Set,int,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer",
        "differences": {
          "added": [
            "Map placeTrunk(LevelSimulatedRW,Random,int,BlockPos,int,Set,BoundingBox,SmallTreeConfiguration)"
          ],
          "removed": [
            "List placeTrunk(LevelSimulatedRW,Random,int,BlockPos,Set,BoundingBox,TreeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager",
        "differences": {
          "added": [
            "void <init>(MinecraftServer,File,DataFixer)"
          ],
          "removed": [
            "void <init>(MinecraftServer,LevelStorageSource$LevelStorageAccess,DataFixer)"
          ]
        }
      }
    }
  ]
}