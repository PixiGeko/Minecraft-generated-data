{
  "version_data": [
    {
      "type": "table",
      "value": {
        "previousLabel": "21w18a",
        "currentLabel": "21w19a",
        "values": [
          {
            "key": "World version",
            "previous": "2713",
            "current": "2714"
          },
          {
            "key": "Protocol version",
            "previous": "1073741850",
            "current": "1073741851"
          }
        ]
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Libraries",
        "id": "version-data-libraries",
        "size": 3
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "com.mojang:blocklist V1.0.5"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "table",
      "value": {
        "title": "Versions",
        "previousLabel": "21w18a",
        "currentLabel": "21w19a",
        "values": [
          {
            "key": "com.mojang:patchy",
            "previous": "1.3.9",
            "current": "2.0.5"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          }
        ]
      }
    }
  ],
  "commands": [
    {
      "type": "entries",
      "value": {
        "name": "item",
        "differences": {
          "added": [
            "item replace block <pos: block_pos> <slot: item_slot> with <item: item_stack> <count: integer>",
            "item replace block <pos: block_pos> <slot: item_slot> from block <source: block_pos> <sourceSlot: item_slot> <modifier: resource_location>",
            "item replace block <pos: block_pos> <slot: item_slot> from entity <source: entity> <sourceSlot: item_slot> <modifier: resource_location>",
            "item replace entity <targets: entity> <slot: item_slot> with <item: item_stack> <count: integer>",
            "item replace entity <targets: entity> <slot: item_slot> from block <source: block_pos> <sourceSlot: item_slot> <modifier: resource_location>",
            "item replace entity <targets: entity> <slot: item_slot> from entity <source: entity> <sourceSlot: item_slot> <modifier: resource_location>",
            "item modify block <pos: block_pos> <slot: item_slot> <modifier: resource_location>",
            "item modify entity <targets: entity> <slot: item_slot> <modifier: resource_location>"
          ],
          "removed": [
            "item block <pos: block_pos> <slot: item_slot> replace <item: item_stack> <count: integer>",
            "item block <pos: block_pos> <slot: item_slot> modify <modifier: resource_location>",
            "item block <pos: block_pos> <slot: item_slot> copy block <source: block_pos> <sourceSlot: item_slot> <modifier: resource_location>",
            "item block <pos: block_pos> <slot: item_slot> copy entity <source: entity> <sourceSlot: item_slot> <modifier: resource_location>",
            "item entity <targets: entity> <slot: item_slot> replace <item: item_stack> <count: integer>",
            "item entity <targets: entity> <slot: item_slot> modify <modifier: resource_location>",
            "item entity <targets: entity> <slot: item_slot> copy block <source: block_pos> <sourceSlot: item_slot> <modifier: resource_location>",
            "item entity <targets: entity> <slot: item_slot> copy entity <source: entity> <sourceSlot: item_slot> <modifier: resource_location>"
          ]
        }
      }
    }
  ],
  "recipes": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [],
          "removed": [
            "black_candle.json",
            "blue_candle.json",
            "brown_candle.json",
            "bundle.json",
            "candle.json",
            "cyan_candle.json",
            "gray_candle.json",
            "green_candle.json",
            "light_blue_candle.json",
            "light_gray_candle.json",
            "lime_candle.json",
            "magenta_candle.json",
            "orange_candle.json",
            "pink_candle.json",
            "purple_candle.json",
            "red_candle.json",
            "white_candle.json",
            "yellow_candle.json"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "copper_ingot.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m none -> copper_ingot"
        ]
      }
    }
  ],
  "translations": [
    {
      "type": "entries",
      "value": {
        "name": "Keys",
        "differences": {
          "added": [
            "disconnect.unknownHost: Unknown host"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "text",
      "value": {
        "title": "Changes",
        "values": [
          {
            "key": "block.minecraft.white_candle_cake",
            "previous": "White Candle Cake",
            "current": "Cake with White Candle"
          },
          {
            "key": "block.minecraft.orange_candle_cake",
            "previous": "Orange Candle Cake",
            "current": "Cake with Orange Candle"
          },
          {
            "key": "block.minecraft.magenta_candle_cake",
            "previous": "Magenta Candle Cake",
            "current": "Cake with Magenta Candle"
          },
          {
            "key": "block.minecraft.light_blue_candle_cake",
            "previous": "Light Blue Candle Cake",
            "current": "Cake with Light Blue Candle"
          },
          {
            "key": "block.minecraft.yellow_candle_cake",
            "previous": "Yellow Candle Cake",
            "current": "Cake with Yellow Candle"
          },
          {
            "key": "block.minecraft.lime_candle_cake",
            "previous": "Lime Candle Cake",
            "current": "Cake with Lime Candle"
          },
          {
            "key": "block.minecraft.pink_candle_cake",
            "previous": "Pink Candle Cake",
            "current": "Cake with Pink Candle"
          },
          {
            "key": "block.minecraft.gray_candle_cake",
            "previous": "Gray Candle Cake",
            "current": "Cake with Gray Candle"
          },
          {
            "key": "block.minecraft.light_gray_candle_cake",
            "previous": "Light Gray Candle Cake",
            "current": "Cake with Light Gray Candle"
          },
          {
            "key": "block.minecraft.cyan_candle_cake",
            "previous": "Cyan Candle Cake",
            "current": "Cake with Cyan Candle"
          },
          {
            "key": "block.minecraft.purple_candle_cake",
            "previous": "Purple Candle Cake",
            "current": "Cake with Purple Candle"
          },
          {
            "key": "block.minecraft.blue_candle_cake",
            "previous": "Blue Candle Cake",
            "current": "Cake with Blue Candle"
          },
          {
            "key": "block.minecraft.brown_candle_cake",
            "previous": "Brown Candle Cake",
            "current": "Cake with Brown Candle"
          },
          {
            "key": "block.minecraft.green_candle_cake",
            "previous": "Green Candle Cake",
            "current": "Cake with Green Candle"
          },
          {
            "key": "block.minecraft.red_candle_cake",
            "previous": "Red Candle Cake",
            "current": "Cake with Red Candle"
          },
          {
            "key": "block.minecraft.black_candle_cake",
            "previous": "Black Candle Cake",
            "current": "Cake with Black Candle"
          }
        ]
      }
    }
  ],
  "file_structure": [
    {
      "type": "entries",
      "value": {
        "name": "data",
        "differences": {
          "added": [
            "minecraft/tags/blocks/mineable/axe.json",
            "minecraft/tags/blocks/mineable/hoe.json",
            "minecraft/tags/blocks/mineable/pickaxe.json",
            "minecraft/tags/blocks/mineable/shovel.json",
            "minecraft/tags/blocks/needs_diamond_tool.json",
            "minecraft/tags/blocks/needs_iron_tool.json",
            "minecraft/tags/blocks/needs_stone_tool.json"
          ],
          "removed": [
            "minecraft/advancements/recipes/decorations/black_candle.json",
            "minecraft/advancements/recipes/decorations/blue_candle.json",
            "minecraft/advancements/recipes/decorations/brown_candle.json",
            "minecraft/advancements/recipes/decorations/candle.json",
            "minecraft/advancements/recipes/decorations/cyan_candle.json",
            "minecraft/advancements/recipes/decorations/gray_candle.json",
            "minecraft/advancements/recipes/decorations/green_candle.json",
            "minecraft/advancements/recipes/decorations/light_blue_candle.json",
            "minecraft/advancements/recipes/decorations/light_gray_candle.json",
            "minecraft/advancements/recipes/decorations/lime_candle.json",
            "minecraft/advancements/recipes/decorations/magenta_candle.json",
            "minecraft/advancements/recipes/decorations/orange_candle.json",
            "minecraft/advancements/recipes/decorations/pink_candle.json",
            "minecraft/advancements/recipes/decorations/purple_candle.json",
            "minecraft/advancements/recipes/decorations/red_candle.json",
            "minecraft/advancements/recipes/decorations/white_candle.json",
            "minecraft/advancements/recipes/decorations/yellow_candle.json",
            "minecraft/advancements/recipes/tools/bundle.json",
            "minecraft/recipes/black_candle.json",
            "minecraft/recipes/blue_candle.json",
            "minecraft/recipes/brown_candle.json",
            "minecraft/recipes/bundle.json",
            "minecraft/recipes/candle.json",
            "minecraft/recipes/cyan_candle.json",
            "minecraft/recipes/gray_candle.json",
            "minecraft/recipes/green_candle.json",
            "minecraft/recipes/light_blue_candle.json",
            "minecraft/recipes/light_gray_candle.json",
            "minecraft/recipes/lime_candle.json",
            "minecraft/recipes/magenta_candle.json",
            "minecraft/recipes/orange_candle.json",
            "minecraft/recipes/pink_candle.json",
            "minecraft/recipes/purple_candle.json",
            "minecraft/recipes/red_candle.json",
            "minecraft/recipes/white_candle.json",
            "minecraft/recipes/yellow_candle.json"
          ]
        }
      }
    }
  ],
  "misc": [
    {
      "type": "entries",
      "value": {
        "name": "splashes",
        "differences": {
          "added": [
            "Now Java 16!"
          ],
          "removed": [
            "Now Java 8!"
          ]
        }
      }
    }
  ],
  "mappings": [
    {
      "type": "title",
      "value": {
        "title": "Server",
        "id": "server-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.minecraft.advancements.Advancement$1",
            "XXX.minecraft.advancements.AdvancementList",
            "XXX.minecraft.advancements.AdvancementProgress",
            "XXX.minecraft.advancements.AdvancementRewards",
            "XXX.minecraft.advancements.CriteriaTriggers",
            "XXX.minecraft.advancements.CriterionProgress",
            "XXX.minecraft.advancements.CriterionTrigger$Listener",
            "XXX.minecraft.advancements.DisplayInfo",
            "XXX.minecraft.advancements.RequirementsStrategy",
            "XXX.advancements.critereon.AbstractCriterionTriggerInstance",
            "XXX.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance",
            "XXX.advancements.critereon.BlockPredicate$Builder",
            "XXX.advancements.critereon.BredAnimalsTrigger$TriggerInstance",
            "XXX.advancements.critereon.BrewedPotionTrigger$TriggerInstance",
            "XXX.advancements.critereon.ChangeDimensionTrigger$TriggerInstance",
            "XXX.advancements.critereon.ChanneledLightningTrigger$TriggerInstance",
            "XXX.advancements.critereon.ConstructBeaconTrigger$TriggerInstance",
            "XXX.advancements.critereon.ConsumeItemTrigger$TriggerInstance",
            "XXX.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance",
            "XXX.advancements.critereon.DamagePredicate$Builder",
            "XXX.advancements.critereon.DamageSourcePredicate$Builder",
            "XXX.advancements.critereon.DistancePredicate",
            "XXX.advancements.critereon.EffectsChangedTrigger$TriggerInstance",
            "XXX.advancements.critereon.EnchantedItemTrigger$TriggerInstance",
            "XXX.advancements.critereon.EnterBlockTrigger",
            "XXX.advancements.critereon.EntityEquipmentPredicate",
            "XXX.advancements.critereon.EntityFlagsPredicate",
            "XXX.advancements.critereon.EntityHurtPlayerTrigger",
            "XXX.advancements.critereon.EntityPredicate",
            "XXX.advancements.critereon.LightPredicate$1",
            "XXX.advancements.critereon.LocationPredicate",
            "XXX.advancements.critereon.LocationTrigger",
            "XXX.advancements.critereon.LootTableTrigger",
            "XXX.advancements.critereon.MinMaxBounds",
            "XXX.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory",
            "XXX.advancements.critereon.MinMaxBounds$Ints",
            "XXX.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate",
            "XXX.advancements.critereon.NetherTravelTrigger",
            "XXX.advancements.critereon.PlacedBlockTrigger",
            "XXX.advancements.critereon.PlayerHurtEntityTrigger",
            "XXX.advancements.critereon.PlayerInteractTrigger",
            "XXX.advancements.critereon.PlayerPredicate",
            "XXX.advancements.critereon.StatePropertiesPredicate$Builder",
            "XXX.advancements.critereon.StatePropertiesPredicate$PropertyMatcher",
            "XXX.advancements.critereon.SummonedEntityTrigger",
            "XXX.advancements.critereon.TameAnimalTrigger",
            "XXX.advancements.critereon.TargetBlockTrigger",
            "XXX.advancements.critereon.TickTrigger",
            "XXX.advancements.critereon.TradeTrigger",
            "XXX.advancements.critereon.UsedEnderEyeTrigger",
            "XXX.advancements.critereon.UsedTotemTrigger",
            "XXX.advancements.critereon.WrappedMinMaxBounds",
            "XXX.minecraft.advancements.package-info",
            "XXX.minecraft.commands.CommandFunction",
            "XXX.minecraft.commands.CommandFunction$CommandEntry",
            "XXX.minecraft.commands.CommandFunction$FunctionEntry",
            "XXX.minecraft.commands.CommandSource",
            "XXX.minecraft.commands.CommandSourceStack",
            "XXX.minecraft.commands.Commands$CommandSelection",
            "XXX.minecraft.commands.SharedSuggestionProvider",
            "XXX.commands.arguments.AngleArgument",
            "XXX.arguments.blocks.BlockPredicateArgument$BlockPredicate",
            "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate",
            "XXX.arguments.blocks.BlockStateParser",
            "XXX.arguments.coordinates.BlockPosArgument",
            "XXX.arguments.coordinates.Coordinates",
            "XXX.arguments.coordinates.RotationArgument",
            "XXX.arguments.coordinates.Vec2Argument",
            "XXX.arguments.coordinates.WorldCoordinate",
            "XXX.arguments.coordinates.package-info",
            "XXX.arguments.item.FunctionArgument$1",
            "XXX.arguments.item.FunctionArgument$Result",
            "XXX.arguments.item.ItemInput",
            "XXX.arguments.item.ItemPredicateArgument",
            "XXX.arguments.item.ItemPredicateArgument$Result",
            "XXX.arguments.item.package-info",
            "XXX.arguments.selector.EntitySelector",
            "XXX.arguments.selector.EntitySelectorParser",
            "XXX.selector.options.EntitySelectorOptions$1",
            "XXX.commands.synchronization.ArgumentTypes$1",
            "XXX.commands.synchronization.EmptyArgumentSerializer",
            "XXX.commands.synchronization.SuggestionProviders$Wrapper",
            "XXX.synchronization.brigadier.DoubleArgumentSerializer",
            "XXX.synchronization.brigadier.IntegerArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer",
            "XXX.synchronization.brigadier.package-info",
            "XXX.minecraft.core.AxisCycle",
            "XXX.minecraft.core.AxisCycle$2",
            "XXX.minecraft.core.BlockMath",
            "XXX.minecraft.core.BlockPos$1",
            "XXX.minecraft.core.BlockPos$3",
            "XXX.minecraft.core.BlockPos$5",
            "XXX.minecraft.core.BlockSource",
            "XXX.minecraft.core.Cursor3D",
            "XXX.minecraft.core.Direction",
            "XXX.minecraft.core.Direction$Axis",
            "XXX.minecraft.core.Direction$Axis$2",
            "XXX.minecraft.core.Direction$AxisDirection",
            "XXX.minecraft.core.Direction8",
            "XXX.minecraft.core.GlobalPos",
            "XXX.minecraft.core.IdMapper",
            "XXX.minecraft.core.MappedRegistry$RegistryEntry",
            "XXX.minecraft.core.Position",
            "XXX.minecraft.core.QuartPos",
            "XXX.minecraft.core.RegistryAccess",
            "XXX.minecraft.core.RegistryAccess$RegistryHolder",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableUUID",
            "XXX.minecraft.core.WritableRegistry",
            "XXX.core.dispenser.AbstractProjectileDispenseBehavior",
            "XXX.core.dispenser.DefaultDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$1",
            "XXX.core.dispenser.DispenseItemBehavior$11",
            "XXX.core.dispenser.DispenseItemBehavior$13",
            "XXX.core.dispenser.DispenseItemBehavior$15",
            "XXX.core.dispenser.DispenseItemBehavior$17",
            "XXX.core.dispenser.DispenseItemBehavior$19",
            "XXX.core.dispenser.DispenseItemBehavior$20",
            "XXX.core.dispenser.DispenseItemBehavior$22",
            "XXX.core.dispenser.DispenseItemBehavior$24",
            "XXX.core.dispenser.DispenseItemBehavior$26",
            "XXX.core.dispenser.DispenseItemBehavior$4",
            "XXX.core.dispenser.DispenseItemBehavior$6",
            "XXX.core.dispenser.DispenseItemBehavior$7$1",
            "XXX.core.dispenser.DispenseItemBehavior$8$1",
            "XXX.core.dispenser.OptionalDispenseItemBehavior",
            "XXX.core.dispenser.ShulkerBoxDispenseBehavior",
            "XXX.minecraft.core.package-info",
            "XXX.core.particles.BlockParticleOption$1",
            "XXX.core.particles.DustColorTransitionOptions$1",
            "XXX.core.particles.DustParticleOptions$1",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleGroup",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.VibrationParticleOption",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.BlockFamily",
            "XXX.models.blockstates.Condition$CompositeCondition",
            "XXX.models.blockstates.Condition$TerminalCondition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.PropertyDispatch$C1",
            "XXX.models.blockstates.PropertyDispatch$C3",
            "XXX.models.blockstates.PropertyDispatch$C5",
            "XXX.models.blockstates.PropertyDispatch$QuadFunction",
            "XXX.models.blockstates.Selector",
            "XXX.models.blockstates.VariantProperties",
            "XXX.models.blockstates.VariantProperty",
            "XXX.models.blockstates.package-info",
            "XXX.models.model.ModelLocationUtils",
            "XXX.models.model.ModelTemplates",
            "XXX.models.model.TextureSlot",
            "XXX.models.model.TexturedModel$Provider",
            "XXX.data.models.package-info",
            "XXX.data.recipes.FinishedRecipe",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.recipes.UpgradeRecipeBuilder$Result",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.structures.SnbtToNbt$TaskResult",
            "XXX.data.structures.package-info",
            "XXX.data.tags.EntityTypeTagsProvider",
            "XXX.data.tags.GameEventTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder",
            "XXX.minecraft.network.PacketDecoder",
            "XXX.minecraft.network.PacketListener",
            "XXX.minecraft.network.SkipPacketException",
            "XXX.minecraft.network.Varint21LengthFieldPrepender",
            "XXX.network.chat.ChatType",
            "XXX.network.chat.ClickEvent$Action",
            "XXX.network.chat.Component",
            "XXX.network.chat.ComponentUtils",
            "XXX.network.chat.FormattedText",
            "XXX.network.chat.FormattedText$2",
            "XXX.network.chat.FormattedText$4",
            "XXX.network.chat.FormattedText$StyledContentConsumer",
            "XXX.network.chat.HoverEvent$Action",
            "XXX.network.chat.HoverEvent$ItemStackInfo",
            "XXX.network.chat.MutableComponent",
            "XXX.network.chat.NbtComponent$BlockNbtComponent",
            "XXX.network.chat.NbtComponent$StorageNbtComponent",
            "XXX.network.chat.SelectorComponent",
            "XXX.network.chat.Style$1",
            "XXX.network.chat.SubStringSource",
            "XXX.network.chat.TextComponent",
            "XXX.network.chat.TranslatableFormatException",
            "XXX.minecraft.network.package-info",
            "XXX.network.protocol.PacketFlow",
            "XXX.protocol.game.ClientGamePacketListener",
            "XXX.protocol.game.ClientboundAddExperienceOrbPacket",
            "XXX.protocol.game.ClientboundAddPaintingPacket",
            "XXX.protocol.game.ClientboundAddVibrationSignalPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$AddOperation",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundBossEventPacket$UpdateNameOperation",
            "XXX.protocol.game.ClientboundBossEventPacket$UpdatePropertiesOperation",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundClearTitlesPacket",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatEndPacket",
            "XXX.protocol.game.ClientboundPlayerCombatKillPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ServerboundRecipeBookSeenRecipePacket",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.minecraft.resources.RegistryDataPackCodec",
            "XXX.minecraft.resources.RegistryLookupCodec",
            "XXX.minecraft.resources.RegistryReadOps$1",
            "XXX.minecraft.server.ChainedJsonException$Entry",
            "XXX.minecraft.server.DebugLoggedPrintStream",
            "XXX.minecraft.server.LoggedPrintStream",
            "XXX.minecraft.server.Main$1",
            "XXX.minecraft.server.MinecraftServer$1",
            "XXX.minecraft.server.PlayerAdvancements",
            "XXX.minecraft.server.RunningOnDifferentThreadException",
            "XXX.minecraft.server.ServerFunctionLibrary",
            "XXX.minecraft.server.ServerFunctionManager$1",
            "XXX.server.commands.AdvancementCommands$Action",
            "XXX.server.commands.AdvancementCommands$Action$2",
            "XXX.server.commands.AttributeCommand",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.SpreadPlayersCommand$Position",
            "XXX.server.commands.StopSoundCommand",
            "XXX.server.commands.TagCommand",
            "XXX.server.commands.TeamMsgCommand",
            "XXX.server.commands.TeleportCommand$LookAt",
            "XXX.server.commands.TimeCommand",
            "XXX.server.commands.TriggerCommand",
            "XXX.server.commands.WhitelistCommand",
            "XXX.commands.data.BlockDataAccessor",
            "XXX.commands.data.DataAccessor",
            "XXX.commands.data.DataCommands$DataManipulator",
            "XXX.commands.data.DataCommands$DataProvider",
            "XXX.commands.data.EntityDataAccessor$1",
            "XXX.commands.data.StorageDataAccessor$1",
            "XXX.server.commands.package-info",
            "XXX.server.dedicated.DedicatedServer",
            "XXX.server.dedicated.DedicatedServerProperties",
            "XXX.server.dedicated.ServerWatchdog",
            "XXX.server.dedicated.Settings",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Release",
            "XXX.server.level.ColumnPos",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerLevel$EntityCallbacks",
            "XXX.server.level.ServerPlayer$1",
            "XXX.server.level.ServerPlayer$3",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerGamePacketListenerImpl$2",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.server.network.ServerStatusPacketListenerImpl",
            "XXX.server.network.TextFilter$1",
            "XXX.server.network.TextFilterClient",
            "XXX.packs.resources.ProfiledReloadInstance$1",
            "XXX.packs.resources.ReloadInstance",
            "XXX.packs.resources.Resource",
            "XXX.packs.resources.ResourceManager$Empty",
            "XXX.packs.resources.ResourceProvider",
            "XXX.packs.resources.SimplePreparableReloadListener",
            "XXX.packs.resources.SimpleReloadInstance$1",
            "XXX.packs.resources.SimpleReloadableResourceManager",
            "XXX.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure",
            "XXX.packs.resources.package-info",
            "XXX.server.players.GameProfileCache",
            "XXX.server.players.GameProfileCache$GameProfileInfo",
            "XXX.server.players.IpBanListEntry",
            "XXX.server.players.OldUsersConverter$1",
            "XXX.server.players.OldUsersConverter$3",
            "XXX.server.players.OldUsersConverter$5",
            "XXX.server.players.PlayerList",
            "XXX.server.players.ServerOpList",
            "XXX.server.players.SleepStatus",
            "XXX.server.players.StoredUserList",
            "XXX.server.players.UserBanListEntry",
            "XXX.server.players.UserWhiteListEntry",
            "XXX.server.rcon.NetworkDataOutputStream",
            "XXX.server.rcon.RconConsoleSource",
            "XXX.rcon.thread.GenericThread",
            "XXX.rcon.thread.QueryThreadGs4$RequestChallenge",
            "XXX.rcon.thread.RconThread",
            "XXX.minecraft.sounds.Music",
            "XXX.minecraft.sounds.SoundEvent",
            "XXX.minecraft.sounds.SoundSource",
            "XXX.minecraft.stats.RecipeBook",
            "XXX.minecraft.stats.RecipeBookSettings$TypeSettings",
            "XXX.minecraft.stats.ServerStatsCounter",
            "XXX.minecraft.stats.StatFormatter",
            "XXX.minecraft.stats.Stats",
            "XXX.minecraft.stats.package-info",
            "XXX.minecraft.tags.EntityTypeTags",
            "XXX.minecraft.tags.GameEventTags",
            "XXX.minecraft.tags.SerializationTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.Tag$OptionalTagEntry",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.tags.TagCollection$NetworkPayload",
            "XXX.minecraft.tags.TagContainer$1",
            "XXX.minecraft.tags.TagContainer$CollectionConsumer",
            "XXX.minecraft.tags.TagManager",
            "XXX.minecraft.util.CsvOutput$1",
            "XXX.minecraft.util.CubicSampler",
            "XXX.minecraft.util.DebugBuffer",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.ExtraCodecs",
            "XXX.minecraft.util.FastColor",
            "XXX.minecraft.util.FormattedCharSequence",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HeapDumper",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.StringRepresentable$2",
            "XXX.minecraft.util.ThreadingDetector",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.datafix.fixes.AbstractArrowPickupFix",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.datafix.fixes.BitStorageAlignFix",
            "XXX.datafix.fixes.BlockEntityBlockStateFix",
            "XXX.datafix.fixes.BlockEntityIdFix",
            "XXX.datafix.fixes.BlockEntityKeepPacked",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix",
            "XXX.datafix.fixes.BlockEntityUUIDFix",
            "XXX.datafix.fixes.BlockRenameFix",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw",
            "XXX.datafix.fixes.BlockStateData",
            "XXX.datafix.fixes.CatTypeFix",
            "XXX.datafix.fixes.ChunkBiomeFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$DataLayer",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Section",
            "XXX.datafix.fixes.ChunkStatusFix",
            "XXX.datafix.fixes.ChunkStructuresTemplateRenameFix",
            "XXX.datafix.fixes.ColorlessShulkerEntityFix",
            "XXX.datafix.fixes.EntityArmorStandSilentFix",
            "XXX.datafix.fixes.EntityCatSplitFix",
            "XXX.datafix.fixes.EntityCustomNameToComponentFix",
            "XXX.datafix.fixes.EntityEquipmentToArmorAndHandFix",
            "XXX.datafix.fixes.EntityHorseSaddleFix",
            "XXX.datafix.fixes.EntityIdFix",
            "XXX.datafix.fixes.EntityMinecartIdentifiersFix",
            "XXX.datafix.fixes.EntityPaintingMotiveFix",
            "XXX.datafix.fixes.EntityPufferfishRenameFix",
            "XXX.datafix.fixes.EntityRedundantChanceTagsFix",
            "XXX.datafix.fixes.EntityRidingToPassengersFix",
            "XXX.datafix.fixes.EntityShulkerRotationFix",
            "XXX.datafix.fixes.EntityStringUuidFix",
            "XXX.datafix.fixes.EntityTippedArrowFix",
            "XXX.datafix.fixes.EntityWolfColorFix",
            "XXX.datafix.fixes.EntityZombieVillagerTypeFix",
            "XXX.datafix.fixes.ForcePoiRebuild",
            "XXX.datafix.fixes.GossipUUIDFix",
            "XXX.datafix.fixes.IglooMetadataRemovalFix",
            "XXX.datafix.fixes.ItemCustomNameToComponentFix",
            "XXX.datafix.fixes.ItemLoreFix",
            "XXX.datafix.fixes.ItemRenameFix",
            "XXX.datafix.fixes.ItemShulkerBoxColorFix",
            "XXX.datafix.fixes.ItemStackEnchantmentNamesFix",
            "XXX.datafix.fixes.ItemStackSpawnEggFix",
            "XXX.datafix.fixes.ItemStackUUIDFix",
            "XXX.datafix.fixes.ItemWrittenBookPagesStrictJsonFix",
            "XXX.datafix.fixes.JigsawRotationFix",
            "XXX.datafix.fixes.LeavesFix$LeavesSection",
            "XXX.datafix.fixes.LevelDataGeneratorOptionsFix",
            "XXX.datafix.fixes.LevelUUIDFix",
            "XXX.datafix.fixes.MemoryExpiryDataFix",
            "XXX.datafix.fixes.MobSpawnerEntityIdentifiersFix",
            "XXX.datafix.fixes.NewVillageFix",
            "XXX.datafix.fixes.ObjectiveRenderTypeFix",
            "XXX.datafix.fixes.OminousBannerRenameFix",
            "XXX.datafix.fixes.OptionsForceVBOFix",
            "XXX.datafix.fixes.OptionsKeyTranslationFix",
            "XXX.datafix.fixes.OptionsRenameFieldFix",
            "XXX.datafix.fixes.PoiTypeRename",
            "XXX.datafix.fixes.RecipesRenameFix",
            "XXX.datafix.fixes.RedstoneWireConnectionsFix",
            "XXX.datafix.fixes.RemoveGolemGossipFix",
            "XXX.datafix.fixes.RenamedCoralFansFix",
            "XXX.datafix.fixes.ReorganizePoi",
            "XXX.datafix.fixes.SavedDataUUIDFix",
            "XXX.datafix.fixes.SimpleEntityRenameFix",
            "XXX.datafix.fixes.StatsCounterFix",
            "XXX.datafix.fixes.StriderGravityFix",
            "XXX.datafix.fixes.TeamDisplayNameFix",
            "XXX.datafix.fixes.TrappedChestBlockEntityFix$TrappedChestSection",
            "XXX.datafix.fixes.VillagerFollowRangeFix",
            "XXX.datafix.fixes.VillagerTradeFix",
            "XXX.datafix.fixes.WorldGenSettingsFix",
            "XXX.datafix.fixes.WriteAndReadFix",
            "XXX.datafix.fixes.package-info",
            "XXX.datafix.schemas.NamespacedSchema",
            "XXX.datafix.schemas.V100",
            "XXX.datafix.schemas.V1022",
            "XXX.datafix.schemas.V107",
            "XXX.datafix.schemas.V135",
            "XXX.datafix.schemas.V1451",
            "XXX.datafix.schemas.V1451_2",
            "XXX.datafix.schemas.V1451_4",
            "XXX.datafix.schemas.V1451_6",
            "XXX.datafix.schemas.V1460",
            "XXX.datafix.schemas.V1466",
            "XXX.datafix.schemas.V1481",
            "XXX.datafix.schemas.V1486",
            "XXX.datafix.schemas.V1800",
            "XXX.datafix.schemas.V1904",
            "XXX.datafix.schemas.V1909",
            "XXX.datafix.schemas.V1928",
            "XXX.datafix.schemas.V1931",
            "XXX.datafix.schemas.V2501",
            "XXX.datafix.schemas.V2505",
            "XXX.datafix.schemas.V2519",
            "XXX.datafix.schemas.V2551",
            "XXX.datafix.schemas.V2571",
            "XXX.datafix.schemas.V2686",
            "XXX.datafix.schemas.V2704",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$1",
            "XXX.util.random.WeightedEntry$IntrusiveBase",
            "XXX.util.random.WeightedRandom",
            "XXX.util.random.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.valueproviders.BiasedToBottomInt",
            "XXX.util.valueproviders.ClampedNormalFloat",
            "XXX.util.valueproviders.ConstantInt",
            "XXX.util.valueproviders.FloatProviderType",
            "XXX.util.valueproviders.IntProviderType",
            "XXX.util.valueproviders.UniformFloat",
            "XXX.util.valueproviders.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.MenuProvider",
            "XXX.minecraft.world.SimpleContainer",
            "XXX.minecraft.world.Snooper",
            "XXX.minecraft.world.SnooperPopulator",
            "XXX.minecraft.world.WorldlyContainerHolder",
            "XXX.world.damagesource.CombatEntry",
            "XXX.world.damagesource.CombatTracker",
            "XXX.world.damagesource.EntityDamageSource",
            "XXX.world.damagesource.package-info",
            "XXX.world.effect.AttackDamageMobEffect",
            "XXX.world.effect.InstantenousMobEffect",
            "XXX.world.effect.MobEffectCategory",
            "XXX.world.effect.MobEffectUtil",
            "XXX.world.effect.MobEffects$1",
            "XXX.world.entity.AgeableMob",
            "XXX.world.entity.AreaEffectCloud",
            "XXX.world.entity.Entity$1",
            "XXX.world.entity.Entity$MovementEmission",
            "XXX.world.entity.EntityDimensions",
            "XXX.world.entity.EntitySelector",
            "XXX.world.entity.EntityType",
            "XXX.world.entity.EntityType$Builder",
            "XXX.world.entity.EquipmentSlot",
            "XXX.world.entity.ExperienceOrb",
            "XXX.world.entity.GlowSquid",
            "XXX.world.entity.ItemBasedSteering",
            "XXX.world.entity.LightningBolt",
            "XXX.world.entity.LivingEntity$1",
            "XXX.world.entity.Mob",
            "XXX.world.entity.MobCategory",
            "XXX.world.entity.MobType",
            "XXX.world.entity.NeutralMob",
            "XXX.world.entity.PathfinderMob",
            "XXX.world.entity.PlayerRideableJumping",
            "XXX.world.entity.PowerableMob",
            "XXX.world.entity.Saddleable",
            "XXX.world.entity.SlotAccess",
            "XXX.world.entity.SlotAccess$2",
            "XXX.world.entity.SpawnGroupData",
            "XXX.world.entity.SpawnPlacements$Data",
            "XXX.world.entity.SpawnPlacements$Type",
            "XXX.entity.ai.Brain",
            "XXX.entity.ai.Brain$MemoryValue",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AcquirePoi$JitteredLinearRetry",
            "XXX.ai.behavior.AnimalPanic",
            "XXX.ai.behavior.BabyFollowAdult",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.CrossbowAttack",
            "XXX.ai.behavior.DismountOrSkipMounting",
            "XXX.ai.behavior.EntityTracker",
            "XXX.ai.behavior.FollowTemptation",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.ShufflingList$WeightedEntry",
            "XXX.ai.behavior.SleepInBed",
            "XXX.ai.behavior.StartAttacking",
            "XXX.ai.behavior.StopAttackingIfTargetInvalid",
            "XXX.ai.behavior.StrollAroundPoi",
            "XXX.ai.behavior.StrollToPoiList",
            "XXX.ai.behavior.TradeWithVillager",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WorkAtComposter",
            "XXX.ai.behavior.YieldJobSite",
            "XXX.ai.control.BodyRotationControl",
            "XXX.ai.control.FlyingMoveControl",
            "XXX.ai.control.LookControl",
            "XXX.ai.control.MoveControl$Operation",
            "XXX.ai.control.SmoothSwimmingMoveControl",
            "XXX.ai.goal.AvoidEntityGoal",
            "XXX.ai.goal.BoatGoals",
            "XXX.ai.goal.BreathAirGoal",
            "XXX.ai.goal.CatLieOnBedGoal",
            "XXX.ai.goal.DolphinJumpGoal",
            "XXX.ai.goal.EatBlockGoal",
            "XXX.ai.goal.FloatGoal",
            "XXX.ai.goal.FollowFlockLeaderGoal",
            "XXX.ai.goal.FollowOwnerGoal",
            "XXX.ai.goal.Goal",
            "XXX.ai.goal.GoalSelector",
            "XXX.ai.goal.GoalSelector$2",
            "XXX.ai.goal.InteractGoal",
            "XXX.ai.goal.LandOnOwnersShoulderGoal",
            "XXX.ai.goal.LlamaFollowCaravanGoal",
            "XXX.ai.goal.LookAtTradingPlayerGoal",
            "XXX.ai.goal.MoveBackToVillageGoal",
            "XXX.ai.goal.MoveToBlockGoal",
            "XXX.ai.goal.MoveTowardsTargetGoal",
            "XXX.ai.goal.OfferFlowerGoal",
            "XXX.ai.goal.PanicGoal",
            "XXX.ai.goal.RandomLookAroundGoal",
            "XXX.ai.goal.RandomSwimmingGoal",
            "XXX.ai.goal.RangedBowAttackGoal",
            "XXX.ai.goal.RangedCrossbowAttackGoal$CrossbowState",
            "XXX.ai.goal.RestrictSunGoal",
            "XXX.ai.goal.SitWhenOrderedToGoal",
            "XXX.ai.goal.SwellGoal",
            "XXX.ai.goal.TradeWithPlayerGoal",
            "XXX.ai.goal.UseItemGoal",
            "XXX.ai.goal.WaterAvoidingRandomStrollGoal",
            "XXX.ai.goal.ZombieAttackGoal",
            "XXX.goal.target.DefendVillageTargetGoal",
            "XXX.goal.target.NearestAttackableTargetGoal",
            "XXX.goal.target.NearestHealableRaiderTargetGoal",
            "XXX.goal.target.OwnerHurtByTargetGoal",
            "XXX.goal.target.ResetUniversalAngerTargetGoal",
            "XXX.goal.target.package-info",
            "XXX.ai.gossip.GossipContainer$1",
            "XXX.entity.animal.Dolphin$DolphinSwimToTreasureGoal",
            "XXX.entity.animal.Dolphin$PlayWithItemsGoal",
            "XXX.entity.animal.Fox",
            "XXX.entity.animal.Squid$SquidFleeGoal",
            "XXX.entity.animal.TropicalFish",
            "XXX.entity.animal.Turtle$TurtleBreedGoal",
            "XXX.entity.animal.Turtle$TurtleGoToWaterGoal",
            "XXX.entity.animal.Turtle$TurtleMoveControl",
            "XXX.entity.animal.Turtle$TurtlePathNavigation",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.animal.axolotl.Axolotl",
            "XXX.animal.axolotl.Axolotl$AxolotlLookControl",
            "XXX.animal.axolotl.Axolotl$AxolotlPathNavigation",
            "XXX.animal.axolotl.AxolotlAi",
            "XXX.animal.axolotl.ValidatePlayDead",
            "XXX.animal.goat.Goat",
            "XXX.animal.horse.Llama$1",
            "XXX.animal.horse.Llama$LlamaGroupData",
            "XXX.animal.horse.Markings",
            "XXX.animal.horse.SkeletonHorse",
            "XXX.animal.horse.TraderLlama",
            "XXX.animal.horse.Variant",
            "XXX.animal.horse.package-info",
            "XXX.entity.boss.EnderDragonPart",
            "XXX.boss.enderdragon.EnderDragon",
            "XXX.enderdragon.phases.AbstractDragonPhaseInstance",
            "XXX.enderdragon.phases.DragonChargePlayerPhase",
            "XXX.enderdragon.phases.DragonHoldingPatternPhase",
            "XXX.enderdragon.phases.DragonLandingApproachPhase",
            "XXX.enderdragon.phases.DragonPhaseInstance",
            "XXX.enderdragon.phases.DragonSittingFlamingPhase",
            "XXX.enderdragon.phases.DragonStrafePlayerPhase",
            "XXX.enderdragon.phases.EnderDragonPhase",
            "XXX.enderdragon.phases.package-info",
            "XXX.boss.wither.WitherBoss",
            "XXX.boss.wither.package-info",
            "XXX.entity.decoration.ArmorStand$1",
            "XXX.entity.decoration.HangingEntity",
            "XXX.entity.decoration.ItemFrame",
            "XXX.entity.decoration.ItemFrame$2",
            "XXX.entity.decoration.Motive",
            "XXX.entity.decoration.package-info",
            "XXX.entity.item.ItemEntity",
            "XXX.entity.item.package-info",
            "XXX.entity.monster.AbstractIllager$IllagerArmPose",
            "XXX.entity.monster.AbstractSkeleton",
            "XXX.entity.monster.Blaze",
            "XXX.entity.monster.CaveSpider",
            "XXX.entity.monster.CrossbowAttackMob",
            "XXX.entity.monster.Drowned$DrownedAttackGoal",
            "XXX.entity.monster.Drowned$DrownedGoToWaterGoal",
            "XXX.entity.monster.Drowned$DrownedSwimUpGoal",
            "XXX.entity.monster.ElderGuardian",
            "XXX.entity.monster.EnderMan$EndermanFreezeWhenLookedAt",
            "XXX.entity.monster.EnderMan$EndermanLookForPlayerGoal",
            "XXX.entity.monster.Endermite",
            "XXX.entity.monster.Evoker",
            "XXX.entity.monster.Illusioner$1",
            "XXX.entity.monster.Illusioner$IllusionerMirrorSpellGoal",
            "XXX.entity.monster.Monster",
            "XXX.entity.monster.PatrollingMonster$LongDistancePatrolGoal",
            "XXX.entity.monster.Phantom$1",
            "XXX.entity.monster.Ravager$RavagerMeleeAttackGoal",
            "XXX.entity.monster.Ravager$RavagerNodeEvaluator",
            "XXX.entity.monster.Shulker$1",
            "XXX.entity.monster.Strider$1",
            "XXX.entity.monster.Strider$StriderPathNavigation",
            "XXX.entity.monster.Vex$VexChargeAttackGoal",
            "XXX.entity.monster.Vex$VexMoveControl",
            "XXX.entity.monster.Vindicator",
            "XXX.entity.monster.Vindicator$VindicatorJohnnyAttackGoal",
            "XXX.entity.monster.Witch",
            "XXX.entity.monster.Zoglin",
            "XXX.entity.monster.Zombie$ZombieAttackTurtleEggGoal",
            "XXX.entity.monster.ZombieVillager",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspisciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.entity.player.Player$BedSleepingProblem",
            "XXX.entity.player.StackedContents",
            "XXX.entity.player.package-info",
            "XXX.entity.projectile.AbstractArrow$1",
            "XXX.entity.projectile.AbstractHurtingProjectile",
            "XXX.entity.projectile.DragonFireball",
            "XXX.entity.projectile.EyeOfEnder",
            "XXX.entity.projectile.FireworkRocketEntity",
            "XXX.entity.projectile.FishingHook$1",
            "XXX.entity.projectile.FishingHook$OpenWaterType",
            "XXX.entity.projectile.LargeFireball",
            "XXX.entity.projectile.Projectile",
            "XXX.entity.projectile.ShulkerBullet",
            "XXX.entity.projectile.Snowball",
            "XXX.entity.projectile.ThrowableItemProjectile",
            "XXX.entity.projectile.ThrownEgg",
            "XXX.entity.projectile.ThrownExperienceBottle",
            "XXX.entity.projectile.ThrownTrident",
            "XXX.entity.projectile.package-info",
            "XXX.entity.raid.Raid$1",
            "XXX.entity.raid.Raid$RaiderType",
            "XXX.entity.raid.Raider$HoldGroundAttackGoal",
            "XXX.entity.raid.Raider$RaiderCelebration",
            "XXX.entity.raid.Raids",
            "XXX.entity.schedule.Activity",
            "XXX.entity.schedule.Schedule",
            "XXX.entity.schedule.ScheduleBuilder$ActivityTransition",
            "XXX.entity.schedule.package-info",
            "XXX.entity.vehicle.AbstractMinecart$1",
            "XXX.entity.vehicle.AbstractMinecartContainer",
            "XXX.entity.vehicle.Boat",
            "XXX.entity.vehicle.Boat$Status",
            "XXX.entity.vehicle.DismountHelper",
            "XXX.entity.vehicle.MinecartChest",
            "XXX.entity.vehicle.MinecartCommandBlock$MinecartCommandBase",
            "XXX.entity.vehicle.MinecartHopper",
            "XXX.entity.vehicle.MinecartSpawner$1",
            "XXX.entity.vehicle.package-info",
            "XXX.world.food.FoodData",
            "XXX.world.food.FoodProperties$1",
            "XXX.world.item.ItemCooldowns$1",
            "XXX.world.item.ItemFrameItem",
            "XXX.world.item.ItemStack",
            "XXX.world.item.ItemUtils",
            "XXX.world.item.KnowledgeBookItem",
            "XXX.world.item.LingeringPotionItem",
            "XXX.world.item.MilkBucketItem",
            "XXX.world.item.MinecartItem$1",
            "XXX.world.item.NameTagItem",
            "XXX.world.item.PlayerHeadItem",
            "XXX.world.item.ProjectileWeaponItem",
            "XXX.world.item.RecordItem",
            "XXX.world.item.ScaffoldingBlockItem",
            "XXX.world.item.ShearsItem",
            "XXX.world.item.ShovelItem",
            "XXX.world.item.SimpleFoiledItem",
            "XXX.world.item.SolidBucketItem",
            "XXX.world.item.SpectralArrowItem",
            "XXX.world.item.SpyglassItem",
            "XXX.world.item.SuspiciousStewItem",
            "XXX.world.item.ThrowablePotionItem",
            "XXX.world.item.TieredItem",
            "XXX.world.item.TippedArrowItem",
            "XXX.world.item.TooltipFlag$Default",
            "XXX.world.item.UseAnim",
            "XXX.world.item.WaterLilyBlockItem",
            "XXX.world.item.WritableBookItem",
            "XXX.item.alchemy.Potion",
            "XXX.item.alchemy.PotionBrewing$Mix",
            "XXX.item.alchemy.Potions",
            "XXX.item.context.BlockPlaceContext",
            "XXX.item.context.DirectionalPlaceContext$1",
            "XXX.item.context.package-info",
            "XXX.item.crafting.ArmorDyeRecipe",
            "XXX.item.crafting.BlastingRecipe",
            "XXX.item.crafting.CampfireCookingRecipe",
            "XXX.item.crafting.CustomRecipe",
            "XXX.item.crafting.FireworkStarFadeRecipe",
            "XXX.item.crafting.Ingredient",
            "XXX.world.level.ChunkTickList$ScheduledTick",
            "XXX.world.level.ClipContext",
            "XXX.world.level.ClipContext$Fluid",
            "XXX.world.level.CollisionGetter",
            "XXX.world.level.ColorResolver",
            "XXX.world.level.CustomSpawner",
            "XXX.world.level.EmptyBlockGetter",
            "XXX.world.level.EntityBasedExplosionDamageCalculator",
            "XXX.world.level.Explosion",
            "XXX.world.level.ExplosionDamageCalculator",
            "XXX.world.level.ForcedChunksSavedData",
            "XXX.world.level.GameRules$1",
            "XXX.level.biome.BiomeGenerationSettings$Builder",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.BiomeSpecialEffects",
            "XXX.level.biome.MobSpawnSettings$1",
            "XXX.level.biome.MobSpawnSettings$MobSpawnCost",
            "XXX.level.biome.MultiNoiseBiomeSource",
            "XXX.block.entity.BeehiveBlockEntity$1",
            "XXX.block.entity.BeehiveBlockEntity$BeeReleaseStatus",
            "XXX.block.entity.BellBlockEntity$ResonationEndAction",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.ChestLidController",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.ContainerOpenersCounter",
            "XXX.block.entity.DispenserBlockEntity",
            "XXX.block.entity.EnchantmentTableBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity$1",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.SculkSensorBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$1",
            "XXX.block.entity.SignBlockEntity",
            "XXX.block.entity.SmokerBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity$1",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.block.state.StateHolder",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.state.properties.AttachFace",
            "XXX.state.properties.BedPart",
            "XXX.state.properties.BlockStateProperties",
            "XXX.state.properties.ChestType",
            "XXX.state.properties.DirectionProperty",
            "XXX.state.properties.DoubleBlockHalf",
            "XXX.state.properties.EnumProperty",
            "XXX.state.properties.IntegerProperty",
            "XXX.state.properties.PistonType",
            "XXX.state.properties.Property$1",
            "XXX.level.border.WorldBorder$1",
            "XXX.level.border.WorldBorder$MovingBorderExtent",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.BulkSectionAccess",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.EmptyLevelChunk$EmptyChunkBiomeContainer",
            "XXX.level.chunk.GlobalPalette",
            "XXX.level.chunk.ImposterProtoChunk",
            "XXX.level.chunk.LevelChunk$1",
            "XXX.level.chunk.LevelChunk$EntityCreationType",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.entity.PersistentEntitySectionManager$1",
            "XXX.level.entity.PersistentEntitySectionManager$ChunkLoadStatus",
            "XXX.level.entity.TransientEntitySectionManager$1",
            "XXX.levelgen.feature.LargeDripstoneFeature$LargeDripstone",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoiseEffect",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.levelgen.feature.ReplaceBlobsFeature",
            "XXX.levelgen.feature.RootSystemFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$FeatureStart",
            "XXX.levelgen.feature.ScatteredOreFeature",
            "XXX.levelgen.feature.SeagrassFeature",
            "XXX.levelgen.feature.ShipwreckFeature$FeatureStart",
            "XXX.levelgen.feature.SimpleRandomSelectorFeature",
            "XXX.levelgen.feature.SnowAndFreezeFeature",
            "XXX.levelgen.feature.SpikeFeature$1",
            "XXX.feature.configurations.OreConfiguration$1",
            "XXX.feature.configurations.OreConfiguration$TargetBlockState",
            "XXX.feature.configurations.RandomBooleanFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.BendingTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.levelgen.heightproviders.BiasedToBottomHeight",
            "XXX.levelgen.heightproviders.HeightProvider",
            "XXX.levelgen.heightproviders.TrapezoidHeight",
            "XXX.levelgen.heightproviders.VeryBiasedToBottomHeight",
            "XXX.level.levelgen.package-info",
            "XXX.levelgen.placement.CarvingMaskDecoratorConfiguration",
            "XXX.levelgen.placement.CaveSurface",
            "XXX.levelgen.placement.ChanceDecorator",
            "XXX.levelgen.placement.ConfiguredDecorator",
            "XXX.levelgen.placement.CountNoiseDecorator",
            "XXX.levelgen.placement.DarkOakTreePlacementDecorator",
            "XXX.levelgen.placement.DecoratedDecoratorConfiguration",
            "XXX.levelgen.placement.EndGatewayPlacementDecorator",
            "XXX.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration",
            "XXX.levelgen.placement.HeightmapDoubleDecorator",
            "XXX.levelgen.placement.LakeLavaPlacementDecorator",
            "XXX.levelgen.placement.NoiseCountFactorDecoratorConfiguration",
            "XXX.levelgen.placement.RangeDecorator",
            "XXX.levelgen.placement.Spread32Decorator",
            "XXX.levelgen.placement.VerticalDecorator",
            "XXX.levelgen.placement.WaterDepthThresholdDecorator",
            "XXX.placement.nether.package-info",
            "XXX.levelgen.structure.BoundingBox",
            "XXX.levelgen.structure.BuriedTreasurePieces",
            "XXX.levelgen.structure.DesertPyramidPiece",
            "XXX.levelgen.structure.EndCityPieces$1",
            "XXX.levelgen.structure.EndCityPieces$3",
            "XXX.levelgen.structure.EndCityPieces$EndCityPiece",
            "XXX.levelgen.structure.IglooPieces",
            "XXX.levelgen.structure.JunglePyramidPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorList",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.material.FogType",
            "XXX.level.material.LavaFluid$Flowing",
            "XXX.level.material.Material",
            "XXX.level.material.MaterialColor",
            "XXX.level.material.WaterFluid",
            "XXX.level.material.WaterFluid$Source",
            "XXX.newbiome.area.Area",
            "XXX.newbiome.area.LazyArea",
            "XXX.newbiome.context.BigContext",
            "XXX.newbiome.context.LazyAreaContext",
            "XXX.newbiome.layer.AddDeepOceanLayer",
            "XXX.newbiome.layer.AddEdgeLayer$CoolWarm",
            "XXX.newbiome.layer.AddEdgeLayer$IntroduceSpecial",
            "XXX.newbiome.layer.AddMushroomIslandLayer",
            "XXX.newbiome.layer.BiomeEdgeLayer",
            "XXX.newbiome.layer.IslandLayer",
            "XXX.newbiome.layer.LayerBiomes",
            "XXX.newbiome.layer.Layers$Category",
            "XXX.newbiome.layer.OceanMixerLayer",
            "XXX.newbiome.layer.RareBiomeSpotLayer",
            "XXX.newbiome.layer.RemoveTooMuchOceanLayer",
            "XXX.newbiome.layer.RiverLayer",
            "XXX.newbiome.layer.ShoreLayer",
            "XXX.newbiome.layer.ZoomLayer",
            "XXX.newbiome.layer.package-info",
            "XXX.layer.traits.AreaTransformer1",
            "XXX.layer.traits.BishopTransformer",
            "XXX.layer.traits.C1Transformer",
            "XXX.layer.traits.DimensionOffset0Transformer",
            "XXX.layer.traits.DimensionTransformer",
            "XXX.layer.traits.package-info",
            "XXX.level.pathfinder.AmphibiousNodeEvaluator",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.level.pathfinder.package-info",
            "XXX.level.portal.PortalInfo",
            "XXX.level.portal.package-info",
            "XXX.level.redstone.package-info",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.level.storage.CommandStorage$Container",
            "XXX.level.storage.DimensionDataStorage",
            "XXX.level.storage.LevelResource",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.GsonAdapterFactory$1",
            "XXX.storage.loot.IntRange$IntChecker",
            "XXX.storage.loot.IntRange$Serializer",
            "XXX.storage.loot.ItemModifierManager$FunctionSequence",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.PredicateManager$1",
            "XXX.storage.loot.Serializer",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetBannerPatternFunction",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetEnchantmentsFunction$1",
            "XXX.loot.functions.SetEnchantmentsFunction$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.ConditionReference$1",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.LocationCheck$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.ValueCheckCondition$1",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.providers.nbt.StorageNbtProvider$Serializer",
            "XXX.providers.number.BinomialDistributionGenerator",
            "XXX.providers.number.ConstantValue$1",
            "XXX.providers.number.ConstantValue$Serializer",
            "XXX.providers.number.NumberProvider",
            "XXX.providers.number.ScoreboardValue",
            "XXX.providers.number.UniformGenerator$1",
            "XXX.providers.number.package-info",
            "XXX.providers.score.ContextScoreboardNameProvider$1",
            "XXX.providers.score.FixedScoreboardNameProvider$1",
            "XXX.providers.score.LootScoreProviderType",
            "XXX.providers.score.ScoreboardNameProviders",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue"
          ],
          "removed": [
            "XXX.minecraft.advancements.Advancement$Builder",
            "XXX.minecraft.advancements.AdvancementList$Listener",
            "XXX.minecraft.advancements.AdvancementProgress$Serializer",
            "XXX.minecraft.advancements.AdvancementRewards$Builder",
            "XXX.minecraft.advancements.Criterion",
            "XXX.minecraft.advancements.CriterionTrigger",
            "XXX.minecraft.advancements.CriterionTriggerInstance",
            "XXX.minecraft.advancements.FrameType",
            "XXX.minecraft.advancements.TreeNodePosition",
            "XXX.advancements.critereon.BeeNestDestroyedTrigger",
            "XXX.advancements.critereon.BlockPredicate",
            "XXX.advancements.critereon.BredAnimalsTrigger",
            "XXX.advancements.critereon.BrewedPotionTrigger",
            "XXX.advancements.critereon.ChangeDimensionTrigger",
            "XXX.advancements.critereon.ChanneledLightningTrigger",
            "XXX.advancements.critereon.ConstructBeaconTrigger",
            "XXX.advancements.critereon.ConsumeItemTrigger",
            "XXX.advancements.critereon.CuredZombieVillagerTrigger",
            "XXX.advancements.critereon.DamagePredicate",
            "XXX.advancements.critereon.DamageSourcePredicate",
            "XXX.advancements.critereon.DeserializationContext",
            "XXX.advancements.critereon.EffectsChangedTrigger",
            "XXX.advancements.critereon.EnchantedItemTrigger",
            "XXX.advancements.critereon.EnchantmentPredicate",
            "XXX.advancements.critereon.EnterBlockTrigger$TriggerInstance",
            "XXX.advancements.critereon.EntityEquipmentPredicate$Builder",
            "XXX.advancements.critereon.EntityFlagsPredicate$Builder",
            "XXX.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance",
            "XXX.advancements.critereon.LightPredicate$Builder",
            "XXX.advancements.critereon.LocationPredicate$Builder",
            "XXX.advancements.critereon.LocationTrigger$TriggerInstance",
            "XXX.advancements.critereon.LootTableTrigger$TriggerInstance",
            "XXX.advancements.critereon.MinMaxBounds$BoundsFactory",
            "XXX.advancements.critereon.MinMaxBounds$Floats",
            "XXX.advancements.critereon.MobEffectsPredicate",
            "XXX.advancements.critereon.NbtPredicate",
            "XXX.advancements.critereon.NetherTravelTrigger$TriggerInstance",
            "XXX.advancements.critereon.PlacedBlockTrigger$TriggerInstance",
            "XXX.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance",
            "XXX.advancements.critereon.PlayerInteractTrigger$TriggerInstance",
            "XXX.advancements.critereon.StatePropertiesPredicate$ExactPropertyMatcher",
            "XXX.advancements.critereon.StatePropertiesPredicate$RangedPropertyMatcher",
            "XXX.advancements.critereon.SummonedEntityTrigger$TriggerInstance",
            "XXX.advancements.critereon.TameAnimalTrigger$TriggerInstance",
            "XXX.advancements.critereon.TargetBlockTrigger$TriggerInstance",
            "XXX.advancements.critereon.TickTrigger$TriggerInstance",
            "XXX.advancements.critereon.TradeTrigger$TriggerInstance",
            "XXX.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance",
            "XXX.advancements.critereon.UsedTotemTrigger$TriggerInstance",
            "XXX.advancements.critereon.package-info",
            "XXX.minecraft.commands.BrigadierExceptions",
            "XXX.minecraft.commands.CommandFunction$CacheableFunction",
            "XXX.minecraft.commands.CommandFunction$Entry",
            "XXX.minecraft.commands.CommandRuntimeException",
            "XXX.minecraft.commands.CommandSource$1",
            "XXX.minecraft.commands.Commands",
            "XXX.minecraft.commands.Commands$ParseFunction",
            "XXX.minecraft.commands.SharedSuggestionProvider$TextCoordinates",
            "XXX.arguments.blocks.BlockPredicateArgument$Result",
            "XXX.arguments.blocks.BlockStateArgument",
            "XXX.arguments.blocks.package-info",
            "XXX.arguments.coordinates.ColumnPosArgument",
            "XXX.arguments.coordinates.LocalCoordinates",
            "XXX.arguments.coordinates.SwizzleArgument",
            "XXX.arguments.coordinates.Vec3Argument",
            "XXX.arguments.coordinates.WorldCoordinates",
            "XXX.arguments.item.FunctionArgument",
            "XXX.arguments.item.FunctionArgument$2",
            "XXX.arguments.item.ItemArgument",
            "XXX.arguments.item.ItemParser",
            "XXX.arguments.item.ItemPredicateArgument$ItemPredicate",
            "XXX.arguments.item.ItemPredicateArgument$TagPredicate",
            "XXX.commands.arguments.package-info",
            "XXX.arguments.selector.EntitySelector$1",
            "XXX.selector.options.EntitySelectorOptions",
            "XXX.commands.synchronization.ArgumentTypes$Entry",
            "XXX.commands.synchronization.SuggestionProviders",
            "XXX.synchronization.brigadier.BrigadierArgumentSerializers",
            "XXX.synchronization.brigadier.FloatArgumentSerializer",
            "XXX.synchronization.brigadier.LongArgumentSerializer",
            "XXX.synchronization.brigadier.StringArgumentSerializer$1",
            "XXX.commands.synchronization.package-info",
            "XXX.minecraft.core.AxisCycle$1",
            "XXX.minecraft.core.AxisCycle$3",
            "XXX.minecraft.core.BlockPos",
            "XXX.minecraft.core.BlockPos$2",
            "XXX.minecraft.core.BlockPos$4",
            "XXX.minecraft.core.BlockPos$MutableBlockPos",
            "XXX.minecraft.core.BlockSourceImpl",
            "XXX.minecraft.core.DefaultedRegistry",
            "XXX.minecraft.core.Direction$1",
            "XXX.minecraft.core.Direction$Axis$1",
            "XXX.minecraft.core.Direction$Axis$3",
            "XXX.minecraft.core.Direction$Plane",
            "XXX.minecraft.core.FrontAndTop",
            "XXX.minecraft.core.IdMap",
            "XXX.minecraft.core.MappedRegistry",
            "XXX.minecraft.core.NonNullList",
            "XXX.minecraft.core.PositionImpl",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.RegistryAccess$RegistryData",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.minecraft.core.Vec3i",
            "XXX.core.cauldron.CauldronInteraction",
            "XXX.core.dispenser.BoatDispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior",
            "XXX.core.dispenser.DispenseItemBehavior$10",
            "XXX.core.dispenser.DispenseItemBehavior$12",
            "XXX.core.dispenser.DispenseItemBehavior$14",
            "XXX.core.dispenser.DispenseItemBehavior$16",
            "XXX.core.dispenser.DispenseItemBehavior$18",
            "XXX.core.dispenser.DispenseItemBehavior$2",
            "XXX.core.dispenser.DispenseItemBehavior$21",
            "XXX.core.dispenser.DispenseItemBehavior$23",
            "XXX.core.dispenser.DispenseItemBehavior$25",
            "XXX.core.dispenser.DispenseItemBehavior$3",
            "XXX.core.dispenser.DispenseItemBehavior$5",
            "XXX.core.dispenser.DispenseItemBehavior$7",
            "XXX.core.dispenser.DispenseItemBehavior$8",
            "XXX.core.dispenser.DispenseItemBehavior$9",
            "XXX.core.dispenser.ShearsDispenseItemBehavior",
            "XXX.core.dispenser.package-info",
            "XXX.core.particles.BlockParticleOption",
            "XXX.core.particles.DustColorTransitionOptions",
            "XXX.core.particles.DustParticleOptions",
            "XXX.core.particles.DustParticleOptionsBase",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.core.particles.VibrationParticleOption$1",
            "XXX.minecraft.data.BlockFamilies",
            "XXX.models.blockstates.Condition$Operation",
            "XXX.models.blockstates.MultiPartGenerator",
            "XXX.models.blockstates.PropertyDispatch$C2",
            "XXX.models.blockstates.PropertyDispatch$C4",
            "XXX.models.blockstates.PropertyDispatch$PentaFunction",
            "XXX.models.blockstates.PropertyDispatch$TriFunction",
            "XXX.models.blockstates.Variant",
            "XXX.models.blockstates.VariantProperties$Rotation",
            "XXX.models.blockstates.VariantProperty$Value",
            "XXX.models.model.DelegatedModel",
            "XXX.models.model.ModelTemplate",
            "XXX.models.model.TextureMapping",
            "XXX.models.model.TexturedModel",
            "XXX.models.model.package-info",
            "XXX.minecraft.data.package-info",
            "XXX.data.recipes.RecipeBuilder",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.UpgradeRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$StructureConversionException",
            "XXX.data.structures.StructureUpdater",
            "XXX.data.tags.BlockTagsProvider",
            "XXX.data.tags.FluidTagsProvider",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.minecraft.network.ConnectionProtocol$PacketSet",
            "XXX.minecraft.network.FriendlyByteBuf",
            "XXX.minecraft.network.PacketEncoder",
            "XXX.minecraft.network.RateKickingConnection",
            "XXX.minecraft.network.Varint21FrameDecoder",
            "XXX.network.chat.BaseComponent",
            "XXX.network.chat.ClickEvent",
            "XXX.network.chat.CommonComponents",
            "XXX.network.chat.Component$Serializer",
            "XXX.network.chat.ContextAwareComponent",
            "XXX.network.chat.FormattedText$1",
            "XXX.network.chat.FormattedText$3",
            "XXX.network.chat.FormattedText$ContentConsumer",
            "XXX.network.chat.HoverEvent",
            "XXX.network.chat.HoverEvent$EntityTooltipInfo",
            "XXX.network.chat.KeybindComponent",
            "XXX.network.chat.NbtComponent",
            "XXX.network.chat.NbtComponent$EntityNbtComponent",
            "XXX.network.chat.ScoreComponent",
            "XXX.network.chat.Style",
            "XXX.network.chat.Style$Serializer",
            "XXX.network.chat.TextColor",
            "XXX.network.chat.TranslatableComponent",
            "XXX.network.chat.package-info",
            "XXX.network.protocol.Packet",
            "XXX.network.protocol.PacketUtils",
            "XXX.protocol.game.ClientboundAddEntityPacket",
            "XXX.protocol.game.ClientboundAddMobPacket",
            "XXX.protocol.game.ClientboundAddPlayerPacket",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundBossEventPacket$Handler",
            "XXX.protocol.game.ClientboundBossEventPacket$OperationType",
            "XXX.protocol.game.ClientboundBossEventPacket$UpdateProgressOperation",
            "XXX.protocol.game.ClientboundBossEventPacket$UpdateStyleOperation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundPingPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatEnterPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ServerboundRecipeBookChangeSettingsPacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscate",
            "net.minecraft.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.resources.DelegatingOps",
            "XXX.minecraft.resources.RegistryFileCodec",
            "XXX.minecraft.resources.RegistryReadOps",
            "XXX.minecraft.server.ConsoleInput",
            "XXX.minecraft.server.Eula",
            "XXX.minecraft.server.Main",
            "XXX.minecraft.server.MinecraftServer",
            "XXX.minecraft.server.MinecraftServer$2",
            "XXX.minecraft.server.PlayerAdvancements$1",
            "XXX.minecraft.server.ServerAdvancementManager",
            "XXX.minecraft.server.ServerFunctionManager",
            "XXX.server.commands.AdvancementCommands$Action$1",
            "XXX.server.commands.AdvancementCommands$Mode",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.StopCommand",
            "XXX.server.commands.SummonCommand",
            "XXX.server.commands.TeamCommand",
            "XXX.server.commands.TeleportCommand",
            "XXX.server.commands.TellRawCommand",
            "XXX.server.commands.TitleCommand",
            "XXX.server.commands.WeatherCommand",
            "XXX.server.commands.WorldBorderCommand",
            "XXX.commands.data.BlockDataAccessor$1",
            "XXX.commands.data.DataCommands",
            "XXX.commands.data.DataCommands$DataManipulatorDecorator",
            "XXX.commands.data.EntityDataAccessor",
            "XXX.commands.data.StorageDataAccessor",
            "XXX.commands.data.package-info",
            "XXX.server.dedicated.DedicatedPlayerList",
            "XXX.server.dedicated.DedicatedServer$1",
            "XXX.server.dedicated.DedicatedServerSettings",
            "XXX.server.dedicated.ServerWatchdog$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Message",
            "XXX.server.level.ChunkTracker",
            "XXX.server.level.DemoMode",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerRespawnLogic",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ServerPlayer$2",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerConnectionListener$LatencySimulator$DelayedMessage",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerGamePacketListenerImpl$EntityInteraction",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.server.network.ServerPlayerConnection",
            "XXX.server.network.TextFilter",
            "XXX.server.network.TextFilter$FilteredText",
            "XXX.packs.resources.ProfiledReloadInstance$State",
            "XXX.packs.resources.ReloadableResourceManager",
            "XXX.packs.resources.ResourceManager",
            "XXX.packs.resources.ResourceManagerReloadListener",
            "XXX.packs.resources.SimpleJsonResourceReloadListener",
            "XXX.packs.resources.SimpleReloadInstance",
            "XXX.packs.resources.SimpleReloadInstance$StateFactory",
            "XXX.packs.resources.SimpleReloadableResourceManager$FailingReloadInstance",
            "XXX.packs.resources.SimpleResource",
            "XXX.server.players.BanListEntry",
            "XXX.server.players.GameProfileCache$1",
            "XXX.server.players.IpBanList",
            "XXX.server.players.OldUsersConverter",
            "XXX.server.players.OldUsersConverter$2",
            "XXX.server.players.OldUsersConverter$4",
            "XXX.server.players.OldUsersConverter$ConversionError",
            "XXX.server.players.PlayerList$1",
            "XXX.server.players.ServerOpListEntry",
            "XXX.server.players.StoredUserEntry",
            "XXX.server.players.UserBanList",
            "XXX.server.players.UserWhiteList",
            "XXX.server.players.package-info",
            "XXX.server.rcon.PktUtils",
            "XXX.server.rcon.package-info",
            "XXX.rcon.thread.QueryThreadGs4",
            "XXX.rcon.thread.RconClient",
            "XXX.rcon.thread.package-info",
            "XXX.minecraft.sounds.Musics",
            "XXX.minecraft.sounds.SoundEvents",
            "XXX.minecraft.sounds.package-info",
            "XXX.minecraft.stats.RecipeBookSettings",
            "XXX.minecraft.stats.ServerRecipeBook",
            "XXX.minecraft.stats.Stat",
            "XXX.minecraft.stats.StatType",
            "XXX.minecraft.stats.StatsCounter",
            "XXX.minecraft.tags.BlockTags",
            "XXX.minecraft.tags.FluidTags",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.SetTag",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$OptionalElementEntry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagCollection$1",
            "XXX.minecraft.tags.TagContainer",
            "XXX.minecraft.tags.TagContainer$Builder",
            "XXX.minecraft.tags.TagLoader",
            "XXX.minecraft.util.CsvOutput$Builder",
            "XXX.minecraft.util.CubicSampler$Vec3Fetcher",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.ExtraCodecs$XorCodec",
            "XXX.minecraft.util.FastColor$ARGB32",
            "XXX.minecraft.util.FormattedCharSink",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.StringDecomposer",
            "XXX.minecraft.util.StringRepresentable$1",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.PackedBitStorage",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.datafix.fixes.BlockEntityBannerColorFix",
            "XXX.datafix.fixes.BlockEntityCustomNameToComponentFix",
            "XXX.datafix.fixes.BlockEntityJukeboxFix",
            "XXX.datafix.fixes.BlockEntityShulkerBoxColorFix",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix$1",
            "XXX.datafix.fixes.BlockNameFlatteningFix",
            "XXX.datafix.fixes.BlockRenameFix$1",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw$1",
            "XXX.datafix.fixes.BlockStateStructureTemplateFix",
            "XXX.datafix.fixes.CauldronRenameFix",
            "XXX.datafix.fixes.ChunkLightRemoveFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$1",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk",
            "XXX.datafix.fixes.ChunkStatusFix2",
            "XXX.datafix.fixes.ChunkToProtochunkFix",
            "XXX.datafix.fixes.DyeItemRenameFix",
            "XXX.datafix.fixes.EntityBlockStateFix",
            "XXX.datafix.fixes.EntityCodSalmonFix",
            "XXX.datafix.fixes.EntityElderGuardianSplitFix",
            "XXX.datafix.fixes.EntityHealthFix",
            "XXX.datafix.fixes.EntityHorseSplitFix",
            "XXX.datafix.fixes.EntityItemFrameDirectionFix",
            "XXX.datafix.fixes.EntityPaintingItemFrameDirectionFix",
            "XXX.datafix.fixes.EntityProjectileOwnerFix",
            "XXX.datafix.fixes.EntityRavagerRenameFix",
            "XXX.datafix.fixes.EntityRenameFix",
            "XXX.datafix.fixes.EntityShulkerColorFix",
            "XXX.datafix.fixes.EntitySkeletonSplitFix",
            "XXX.datafix.fixes.EntityTheRenameningFix",
            "XXX.datafix.fixes.EntityUUIDFix",
            "XXX.datafix.fixes.EntityZombieSplitFix",
            "XXX.datafix.fixes.EntityZombifiedPiglinRenameFix",
            "XXX.datafix.fixes.FurnaceRecipeFix",
            "XXX.datafix.fixes.HeightmapRenamingFix",
            "XXX.datafix.fixes.ItemBannerColorFix",
            "XXX.datafix.fixes.ItemIdFix",
            "XXX.datafix.fixes.ItemPotionFix",
            "XXX.datafix.fixes.ItemRenameFix$1",
            "XXX.datafix.fixes.ItemSpawnEggFix",
            "XXX.datafix.fixes.ItemStackMapIdFix",
            "XXX.datafix.fixes.ItemStackTheFlatteningFix",
            "XXX.datafix.fixes.ItemWaterPotionFix",
            "XXX.datafix.fixes.JigsawPropertiesFix",
            "XXX.datafix.fixes.LeavesFix",
            "XXX.datafix.fixes.LeavesFix$Section",
            "XXX.datafix.fixes.LevelFlatGeneratorInfoFix",
            "XXX.datafix.fixes.MapIdFix",
            "XXX.datafix.fixes.MissingDimensionFix",
            "XXX.datafix.fixes.NamedEntityFix",
            "XXX.datafix.fixes.ObjectiveDisplayNameFix",
            "XXX.datafix.fixes.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.fixes.OptionsAddTextBackgroundFix",
            "XXX.datafix.fixes.OptionsKeyLwjgl3Fix",
            "XXX.datafix.fixes.OptionsLowerCaseLanguageFix",
            "XXX.datafix.fixes.PlayerUUIDFix",
            "XXX.datafix.fixes.RecipesFix",
            "XXX.datafix.fixes.RecipesRenameningFix",
            "XXX.datafix.fixes.References",
            "XXX.datafix.fixes.RenameBiomesFix",
            "XXX.datafix.fixes.RenamedCoralFix",
            "XXX.datafix.fixes.SavedDataFeaturePoolElementFix",
            "XXX.datafix.fixes.SavedDataVillageCropFix",
            "XXX.datafix.fixes.SimplestEntityRenameFix",
            "XXX.datafix.fixes.StatsRenameFix",
            "XXX.datafix.fixes.StructureReferenceCountFix",
            "XXX.datafix.fixes.TrappedChestBlockEntityFix",
            "XXX.datafix.fixes.VillagerDataFix",
            "XXX.datafix.fixes.VillagerRebuildLevelAndXpFix",
            "XXX.datafix.fixes.WallPropertyFix",
            "XXX.datafix.fixes.WorldGenSettingsFix$StructureFeatureConfiguration",
            "XXX.datafix.fixes.ZombieVillagerRebuildXpFix",
            "XXX.util.datafix.package-info",
            "XXX.datafix.schemas.NamespacedSchema$1",
            "XXX.datafix.schemas.V102",
            "XXX.datafix.schemas.V106",
            "XXX.datafix.schemas.V1125",
            "XXX.datafix.schemas.V143",
            "XXX.datafix.schemas.V1451_1",
            "XXX.datafix.schemas.V1451_3",
            "XXX.datafix.schemas.V1451_5",
            "XXX.datafix.schemas.V1451_7",
            "XXX.datafix.schemas.V1460$1",
            "XXX.datafix.schemas.V1470",
            "XXX.datafix.schemas.V1483",
            "XXX.datafix.schemas.V1510",
            "XXX.datafix.schemas.V1801",
            "XXX.datafix.schemas.V1906",
            "XXX.datafix.schemas.V1920",
            "XXX.datafix.schemas.V1929",
            "XXX.datafix.schemas.V2100",
            "XXX.datafix.schemas.V2502",
            "XXX.datafix.schemas.V2509",
            "XXX.datafix.schemas.V2522",
            "XXX.datafix.schemas.V2568",
            "XXX.datafix.schemas.V2684",
            "XXX.datafix.schemas.V2688",
            "XXX.datafix.schemas.V2707",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.util.random.WeightedEntry$Wrapper",
            "XXX.util.random.WeightedRandomList",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.valueproviders.ClampedInt",
            "XXX.util.valueproviders.ConstantFloat",
            "XXX.util.valueproviders.FloatProvider",
            "XXX.util.valueproviders.IntProvider",
            "XXX.util.valueproviders.TrapezoidFloat",
            "XXX.util.valueproviders.UniformInt",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.minecraft.world.SimpleMenuProvider",
            "XXX.minecraft.world.Snooper$1",
            "XXX.minecraft.world.WorldlyContainer",
            "XXX.world.damagesource.BadRespawnPointDamage",
            "XXX.world.damagesource.CombatRules",
            "XXX.world.damagesource.DamageSource",
            "XXX.world.damagesource.IndirectEntityDamageSource",
            "XXX.world.effect.AbsoptionMobEffect",
            "XXX.world.effect.HealthBoostMobEffect",
            "XXX.world.effect.MobEffect",
            "XXX.world.effect.MobEffectInstance",
            "XXX.world.effect.MobEffects",
            "XXX.world.effect.package-info",
            "XXX.world.entity.AgeableMob$AgeableMobGroupData",
            "XXX.world.entity.Entity",
            "XXX.world.entity.Entity$MoveFunction",
            "XXX.world.entity.Entity$RemovalReason",
            "XXX.world.entity.EntityEvent",
            "XXX.world.entity.EntitySelector$MobCanWearArmorEntitySelector",
            "XXX.world.entity.EntityType$1",
            "XXX.world.entity.EntityType$EntityFactory",
            "XXX.world.entity.EquipmentSlot$Type",
            "XXX.world.entity.FlyingMob",
            "XXX.world.entity.HumanoidArm",
            "XXX.world.entity.ItemSteerable",
            "XXX.world.entity.LivingEntity",
            "XXX.world.entity.Marker",
            "XXX.world.entity.Mob$1",
            "XXX.world.entity.MobSpawnType",
            "XXX.world.entity.MoverType",
            "XXX.world.entity.OwnableEntity",
            "XXX.world.entity.PlayerRideable",
            "XXX.world.entity.Pose",
            "XXX.world.entity.ReputationEventHandler",
            "XXX.world.entity.Shearable",
            "XXX.world.entity.SlotAccess$1",
            "XXX.world.entity.SlotAccess$3",
            "XXX.world.entity.SpawnPlacements",
            "XXX.world.entity.SpawnPlacements$SpawnPredicate",
            "XXX.world.entity.TamableAnimal",
            "XXX.entity.ai.Brain$1",
            "XXX.entity.ai.Brain$Provider",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.CountDownCooldownTicks",
            "XXX.ai.behavior.CrossbowAttack$CrossbowState",
            "XXX.ai.behavior.DoNothing",
            "XXX.ai.behavior.EraseMemoryIf",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.ShufflingList$WeightedEntry$1",
            "XXX.ai.behavior.SocializeAtBell",
            "XXX.ai.behavior.StartCelebratingIfTargetDead",
            "XXX.ai.behavior.StopBeingAngryIfTargetDead",
            "XXX.ai.behavior.StrollToPoi",
            "XXX.ai.behavior.Swim",
            "XXX.ai.behavior.TryFindWater",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WorkAtPoi",
            "XXX.ai.behavior.package-info",
            "XXX.ai.control.Control",
            "XXX.ai.control.JumpControl",
            "XXX.ai.control.MoveControl",
            "XXX.ai.control.SmoothSwimmingLookControl",
            "XXX.ai.control.package-info",
            "XXX.ai.goal.BegGoal",
            "XXX.ai.goal.BreakDoorGoal",
            "XXX.ai.goal.BreedGoal",
            "XXX.ai.goal.CatSitOnBlockGoal",
            "XXX.ai.goal.DoorInteractGoal",
            "XXX.ai.goal.FleeSunGoal",
            "XXX.ai.goal.FollowBoatGoal",
            "XXX.ai.goal.FollowMobGoal",
            "XXX.ai.goal.FollowParentGoal",
            "XXX.ai.goal.Goal$Flag",
            "XXX.ai.goal.GoalSelector$1",
            "XXX.ai.goal.GolemRandomStrollInVillageGoal",
            "XXX.ai.goal.JumpGoal",
            "XXX.ai.goal.LeapAtTargetGoal",
            "XXX.ai.goal.LookAtPlayerGoal",
            "XXX.ai.goal.MeleeAttackGoal",
            "XXX.ai.goal.MoveThroughVillageGoal",
            "XXX.ai.goal.MoveTowardsRestrictionGoal",
            "XXX.ai.goal.OcelotAttackGoal",
            "XXX.ai.goal.OpenDoorGoal",
            "XXX.ai.goal.PathfindToRaidGoal",
            "XXX.ai.goal.RandomStrollGoal",
            "XXX.ai.goal.RangedAttackGoal",
            "XXX.ai.goal.RangedCrossbowAttackGoal",
            "XXX.ai.goal.RemoveBlockGoal",
            "XXX.ai.goal.RunAroundLikeCrazyGoal",
            "XXX.ai.goal.StrollThroughVillageGoal",
            "XXX.ai.goal.TemptGoal",
            "XXX.ai.goal.TryFindWaterGoal",
            "XXX.ai.goal.WaterAvoidingRandomFlyingGoal",
            "XXX.ai.goal.WrappedGoal",
            "XXX.ai.goal.package-info",
            "XXX.goal.target.HurtByTargetGoal",
            "XXX.goal.target.NearestAttackableWitchTargetGoal",
            "XXX.goal.target.NonTameRandomTargetGoal",
            "XXX.goal.target.OwnerHurtTargetGoal",
            "XXX.goal.target.TargetGoal",
            "XXX.ai.gossip.GossipContainer",
            "XXX.entity.animal.Dolphin$DolphinSwimWithPlayerGoal",
            "XXX.entity.animal.FlyingAnimal",
            "XXX.entity.animal.Squid$SquidRandomMovementGoal",
            "XXX.entity.animal.Turtle$TurtleGoHomeGoal",
            "XXX.entity.animal.Turtle$TurtleLayEggGoal",
            "XXX.entity.animal.Turtle$TurtlePanicGoal",
            "XXX.entity.animal.Turtle$TurtleRandomStrollGoal",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.axolotl.Axolotl$AxolotlGroupData",
            "XXX.animal.axolotl.Axolotl$AxolotlMoveControl",
            "XXX.animal.axolotl.Axolotl$Variant",
            "XXX.animal.axolotl.PlayDead",
            "XXX.animal.axolotl.package-info",
            "XXX.animal.horse.Llama$LlamaAttackWolfGoal",
            "XXX.animal.horse.Llama$LlamaHurtByTargetGoal",
            "XXX.animal.horse.Mule",
            "XXX.animal.horse.SkeletonTrapGoal",
            "XXX.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal",
            "XXX.animal.horse.ZombieHorse",
            "XXX.entity.animal.package-info",
            "XXX.boss.enderdragon.EndCrystal",
            "XXX.boss.enderdragon.package-info",
            "XXX.enderdragon.phases.AbstractDragonSittingPhase",
            "XXX.enderdragon.phases.DragonDeathPhase",
            "XXX.enderdragon.phases.DragonHoverPhase",
            "XXX.enderdragon.phases.DragonLandingPhase",
            "XXX.enderdragon.phases.DragonSittingAttackingPhase",
            "XXX.enderdragon.phases.DragonSittingScanningPhase",
            "XXX.enderdragon.phases.DragonTakeoffPhase",
            "XXX.enderdragon.phases.EnderDragonPhaseManager",
            "XXX.entity.boss.package-info",
            "XXX.boss.wither.WitherBoss$WitherDoNothingGoal",
            "XXX.entity.decoration.ArmorStand",
            "XXX.entity.decoration.GlowItemFrame",
            "XXX.entity.decoration.HangingEntity$1",
            "XXX.entity.decoration.ItemFrame$1",
            "XXX.entity.decoration.LeashFenceKnotEntity",
            "XXX.entity.decoration.Painting",
            "XXX.entity.item.FallingBlockEntity",
            "XXX.entity.item.PrimedTnt",
            "XXX.entity.monster.AbstractIllager",
            "XXX.entity.monster.AbstractIllager$RaiderOpenDoorGoal",
            "XXX.entity.monster.AbstractSkeleton$1",
            "XXX.entity.monster.Blaze$BlazeAttackGoal",
            "XXX.entity.monster.Creeper",
            "XXX.entity.monster.Drowned",
            "XXX.entity.monster.Drowned$DrownedGoToBeachGoal",
            "XXX.entity.monster.Drowned$DrownedMoveControl",
            "XXX.entity.monster.Drowned$DrownedTridentAttackGoal",
            "XXX.entity.monster.EnderMan",
            "XXX.entity.monster.EnderMan$EndermanLeaveBlockGoal",
            "XXX.entity.monster.EnderMan$EndermanTakeBlockGoal",
            "XXX.entity.monster.Enemy",
            "XXX.entity.monster.Illusioner$IllusionerBlindnessSpellGoal",
            "XXX.entity.monster.MagmaCube",
            "XXX.entity.monster.PatrollingMonster",
            "XXX.entity.monster.Phantom",
            "XXX.entity.monster.Ravager$RavagerNavigation",
            "XXX.entity.monster.Shulker",
            "XXX.entity.monster.Strider$StriderGoToLavaGoal",
            "XXX.entity.monster.Vex",
            "XXX.entity.monster.Vex$VexCopyOwnerTargetGoal",
            "XXX.entity.monster.Vex$VexRandomMoveGoal",
            "XXX.entity.monster.Vindicator$VindicatorBreakDoorGoal",
            "XXX.entity.monster.Vindicator$VindicatorMeleeAttackGoal",
            "XXX.entity.monster.WitherSkeleton",
            "XXX.entity.monster.Zombie",
            "XXX.entity.monster.Zombie$ZombieGroupData",
            "XXX.entity.monster.ZombifiedPiglin",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.entity.player.Player$1",
            "XXX.entity.player.PlayerModelPart",
            "XXX.entity.player.StackedContents$RecipePicker",
            "XXX.entity.projectile.AbstractArrow",
            "XXX.entity.projectile.AbstractArrow$Pickup",
            "XXX.entity.projectile.Arrow",
            "XXX.entity.projectile.EvokerFangs",
            "XXX.entity.projectile.Fireball",
            "XXX.entity.projectile.FishingHook",
            "XXX.entity.projectile.FishingHook$FishHookState",
            "XXX.entity.projectile.ItemSupplier",
            "XXX.entity.projectile.LlamaSpit",
            "XXX.entity.projectile.ProjectileUtil",
            "XXX.entity.projectile.SmallFireball",
            "XXX.entity.projectile.SpectralArrow",
            "XXX.entity.projectile.ThrowableProjectile",
            "XXX.entity.projectile.ThrownEnderpearl",
            "XXX.entity.projectile.ThrownPotion",
            "XXX.entity.projectile.WitherSkull",
            "XXX.entity.raid.Raid",
            "XXX.entity.raid.Raid$RaidStatus",
            "XXX.entity.raid.Raider",
            "XXX.entity.raid.Raider$ObtainRaidLeaderBannerGoal",
            "XXX.entity.raid.Raider$RaiderMoveThroughVillageGoal",
            "XXX.entity.raid.package-info",
            "XXX.entity.schedule.Keyframe",
            "XXX.entity.schedule.ScheduleBuilder",
            "XXX.entity.schedule.Timeline",
            "XXX.entity.vehicle.AbstractMinecart",
            "XXX.entity.vehicle.AbstractMinecart$Type",
            "XXX.entity.vehicle.AbstractMinecartContainer$1",
            "XXX.entity.vehicle.Boat$1",
            "XXX.entity.vehicle.Boat$Type",
            "XXX.entity.vehicle.Minecart",
            "XXX.entity.vehicle.MinecartCommandBlock",
            "XXX.entity.vehicle.MinecartFurnace",
            "XXX.entity.vehicle.MinecartSpawner",
            "XXX.entity.vehicle.MinecartTNT",
            "XXX.world.food.FoodConstants",
            "XXX.world.food.FoodProperties",
            "XXX.world.item.ItemCooldowns$CooldownInstance",
            "XXX.world.item.ItemNameBlockItem",
            "XXX.world.item.ItemStack$TooltipPart",
            "XXX.world.item.Items",
            "XXX.world.item.LeadItem",
            "XXX.world.item.MapItem",
            "XXX.world.item.MinecartItem",
            "XXX.world.item.MobBucketItem",
            "XXX.world.item.PickaxeItem",
            "XXX.world.item.PotionItem",
            "XXX.world.item.Rarity",
            "XXX.world.item.SaddleItem",
            "XXX.world.item.ServerItemCooldowns",
            "XXX.world.item.ShieldItem",
            "XXX.world.item.SignItem",
            "XXX.world.item.SnowballItem",
            "XXX.world.item.SpawnEggItem",
            "XXX.world.item.SplashPotionItem",
            "XXX.world.item.StandingAndWallBlockItem",
            "XXX.world.item.SwordItem",
            "XXX.world.item.Tier",
            "XXX.world.item.Tiers",
            "XXX.world.item.TooltipFlag",
            "XXX.world.item.TridentItem",
            "XXX.world.item.Vanishable",
            "XXX.world.item.Wearable",
            "XXX.world.item.WrittenBookItem",
            "XXX.item.alchemy.PotionBrewing",
            "XXX.item.alchemy.PotionUtils",
            "XXX.item.alchemy.package-info",
            "XXX.item.context.DirectionalPlaceContext",
            "XXX.item.context.UseOnContext",
            "XXX.item.crafting.AbstractCookingRecipe",
            "XXX.item.crafting.BannerDuplicateRecipe",
            "XXX.item.crafting.BookCloningRecipe",
            "XXX.item.crafting.CraftingRecipe",
            "XXX.item.crafting.FireworkRocketRecipe",
            "XXX.item.crafting.FireworkStarRecipe",
            "XXX.world.level.ClipBlockStateContext",
            "XXX.world.level.ClipContext$Block",
            "XXX.world.level.ClipContext$ShapeGetter",
            "XXX.world.level.CollisionSpliterator",
            "XXX.world.level.CommonLevelAccessor",
            "XXX.world.level.DataPackConfig",
            "XXX.world.level.EmptyTickList",
            "XXX.world.level.EntityGetter",
            "XXX.world.level.Explosion$BlockInteraction",
            "XXX.world.level.FoliageColor",
            "XXX.world.level.GameRules",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.MobSpawnSettings$Builder",
            "XXX.level.biome.MobSpawnSettings$SpawnerData",
            "XXX.block.entity.BeehiveBlockEntity$BeeData",
            "XXX.block.entity.BellBlockEntity",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BlockEntityTicker",
            "XXX.block.entity.BlockEntityType$BlockEntitySupplier",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.ChestBlockEntity$1",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.DaylightDetectorBlockEntity",
            "XXX.block.entity.DropperBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$AnimationStatus",
            "XXX.block.entity.SkullBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity",
            "XXX.block.entity.StructureBlockEntity",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickingBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.AzaleaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.StateHolder$1",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.state.properties.BambooLeaves",
            "XXX.state.properties.BellAttachType",
            "XXX.state.properties.BooleanProperty",
            "XXX.state.properties.ComparatorMode",
            "XXX.state.properties.DoorHingeSide",
            "XXX.state.properties.DripstoneThickness",
            "XXX.state.properties.Half",
            "XXX.state.properties.NoteBlockInstrument",
            "XXX.state.properties.Property",
            "XXX.level.border.WorldBorder$BorderExtent",
            "XXX.level.border.WorldBorder$Settings",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.FeatureAccess",
            "XXX.level.chunk.HashMapPalette",
            "XXX.level.chunk.LevelChunk",
            "XXX.level.chunk.LevelChunk$BoundTickingBlockEntity",
            "XXX.level.chunk.LevelChunk$RebindableTickingBlockEntityWrapper",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.entity.PersistentEntitySectionManager$Callback",
            "XXX.level.entity.TransientEntitySectionManager",
            "XXX.levelgen.feature.LargeDripstoneFeature$WindOffsetter",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomSelectorFeature",
            "XXX.levelgen.feature.ReplaceBlockFeature",
            "XXX.levelgen.feature.RuinedPortalFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$Type",
            "XXX.levelgen.feature.SeaPickleFeature",
            "XXX.levelgen.feature.ShipwreckFeature",
            "XXX.levelgen.feature.SimpleBlockFeature",
            "XXX.levelgen.feature.SmallDripstoneFeature",
            "XXX.levelgen.feature.SpikeFeature",
            "XXX.feature.configurations.OreConfiguration$Predicates",
            "XXX.feature.configurations.ProbabilityFeatureConfiguration",
            "XXX.feature.configurations.RandomFeatureConfiguration",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.flat.package-info",
            "XXX.levelgen.heightproviders.ConstantHeight",
            "XXX.levelgen.heightproviders.HeightProviderType",
            "XXX.levelgen.heightproviders.UniformHeight",
            "XXX.levelgen.heightproviders.package-info",
            "XXX.levelgen.placement.CarvingMaskDecorator",
            "XXX.levelgen.placement.CaveDecoratorConfiguration",
            "XXX.levelgen.placement.CaveSurfaceDecorator",
            "XXX.levelgen.placement.ChanceDecoratorConfiguration",
            "XXX.levelgen.placement.CountDecorator",
            "XXX.levelgen.placement.CountWithExtraChanceDecorator",
            "XXX.levelgen.placement.DecoratedDecorator",
            "XXX.levelgen.placement.DecorationContext",
            "XXX.levelgen.placement.FeatureDecorator",
            "XXX.levelgen.placement.HeightmapDecorator",
            "XXX.levelgen.placement.IcebergPlacementDecorator",
            "XXX.levelgen.placement.NoiseBasedDecorator",
            "XXX.levelgen.placement.NopePlacementDecorator",
            "XXX.levelgen.placement.RepeatingDecorator",
            "XXX.levelgen.placement.SquareDecorator",
            "XXX.levelgen.placement.WaterDepthThresholdConfiguration",
            "XXX.placement.nether.CountMultiLayerDecorator",
            "XXX.levelgen.placement.package-info",
            "XXX.levelgen.structure.BoundingBox$1",
            "XXX.levelgen.structure.BuriedTreasurePieces$BuriedTreasurePiece",
            "XXX.levelgen.structure.EndCityPieces",
            "XXX.levelgen.structure.EndCityPieces$2",
            "XXX.levelgen.structure.EndCityPieces$4",
            "XXX.levelgen.structure.EndCityPieces$SectionGenerator",
            "XXX.levelgen.structure.IglooPieces$IglooPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LavaSubmergedBlockProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.BlendedNoise",
            "XXX.levelgen.synth.NoiseUtils",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.Fluids",
            "XXX.level.material.LavaFluid",
            "XXX.level.material.LavaFluid$Source",
            "XXX.level.material.Material$Builder",
            "XXX.level.material.PushReaction",
            "XXX.level.material.WaterFluid$Flowing",
            "XXX.level.material.package-info",
            "XXX.newbiome.area.AreaFactory",
            "XXX.newbiome.area.package-info",
            "XXX.newbiome.context.Context",
            "XXX.newbiome.context.package-info",
            "XXX.newbiome.layer.AddEdgeLayer",
            "XXX.newbiome.layer.AddEdgeLayer$HeatIce",
            "XXX.newbiome.layer.AddIslandLayer",
            "XXX.newbiome.layer.AddSnowLayer",
            "XXX.newbiome.layer.BiomeInitLayer",
            "XXX.newbiome.layer.Layer",
            "XXX.newbiome.layer.Layers",
            "XXX.newbiome.layer.OceanLayer",
            "XXX.newbiome.layer.RareBiomeLargeLayer",
            "XXX.newbiome.layer.RegionHillsLayer",
            "XXX.newbiome.layer.RiverInitLayer",
            "XXX.newbiome.layer.RiverMixerLayer",
            "XXX.newbiome.layer.SmoothLayer",
            "XXX.newbiome.layer.ZoomLayer$1",
            "XXX.layer.traits.AreaTransformer0",
            "XXX.layer.traits.AreaTransformer2",
            "XXX.layer.traits.C0Transformer",
            "XXX.layer.traits.CastleTransformer",
            "XXX.layer.traits.DimensionOffset1Transformer",
            "XXX.layer.traits.PixelTransformer",
            "XXX.world.level.package-info",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.pathfinder.WalkNodeEvaluator",
            "XXX.level.portal.PortalForcer",
            "XXX.level.portal.PortalShape",
            "XXX.level.redstone.Redstone",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.level.storage.DerivedLevelData",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.LevelSummary$BackupStatus",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.GsonAdapterFactory",
            "XXX.storage.loot.IntRange$IntLimiter",
            "XXX.storage.loot.ItemModifierManager",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.PredicateManager$CompositePredicate",
            "XXX.storage.loot.SerializerType",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetEnchantmentsFunction$Builder",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.ValueCheckCondition$Serializer",
            "XXX.providers.nbt.package-info",
            "XXX.providers.number.ConstantValue$InlineSerializer",
            "XXX.providers.number.LootNumberProviderType",
            "XXX.providers.number.NumberProviders",
            "XXX.providers.number.UniformGenerator$Serializer",
            "XXX.providers.score.ContextScoreboardNameProvider",
            "XXX.providers.score.FixedScoreboardNameProvider$Serializer",
            "XXX.providers.score.ScoreboardNameProvider",
            "XXX.providers.score.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.mojang.math.SymmetricGroup3 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "net.minecraft.ChatFormatting \u001b[2;32m+1M\u001b[0m",
          "net.minecraft.Util \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "net.minecraft.Util$OS \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.FilledBucketTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.RecipeUnlockedTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.SlideDownBlockTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.StatePropertiesPredicate \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.arguments.AngleArgument$SingleAngle \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.arguments.EntityAnchorArgument$Anchor \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.arguments.NbtPathArgument \u001b[2;31m-1M\u001b[0m",
          "XXX.commands.arguments.ScoreHolderArgument \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.arguments.blocks.BlockPredicateArgument \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.selector.options.EntitySelectorOptions$Option \u001b[2;31m-1M\u001b[0m",
          "XXX.data.models.BlockModelGenerators \u001b[2;32m+40M\u001b[0m \u001b[2;31m-66M\u001b[0m",
          "XXX.models.blockstates.MultiPartGenerator$Entry \u001b[2;31m-1M\u001b[0m",
          "XXX.data.tags.TagsProvider$TagAppender \u001b[2;31m-1M\u001b[0m",
          "XXX.gametest.framework.GameTestBatchRunner \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.gametest.framework.GameTestSequence \u001b[2;31m-1M\u001b[0m",
          "XXX.gametest.framework.TestCommand \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.ListTag \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.LongTag \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.NbtOps \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.network.Connection$PacketHolder \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.ClientboundCommandsPacket$Entry \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument \u001b[2;32m+1M\u001b[0m",
          "XXX.protocol.game.ClientboundRecipePacket$State \u001b[2;32m+1M\u001b[0m",
          "XXX.protocol.game.ClientboundUpdateAttributesPacket \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.DebugPackets \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.protocol.game.ServerboundInteractPacket \u001b[2;31m-1M\u001b[0m",
          "XXX.protocol.game.ServerboundInteractPacket$InteractionAtLocationAction \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.server.ServerFunctionManager$QueuedCommand \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.DebugCommand$Tracer \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.EmoteCommands \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.server.commands.ExecuteCommand \u001b[2;32m+20M\u001b[0m \u001b[2;31m-20M\u001b[0m",
          "XXX.server.commands.ExperienceCommand$Type \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.FillCommand$Mode \u001b[2;32m+1M\u001b[0m",
          "XXX.server.commands.GameRuleCommand \u001b[2;31m-2M\u001b[0m",
          "XXX.server.commands.LootCommand \u001b[2;32m+10M\u001b[0m \u001b[2;31m-10M\u001b[0m",
          "XXX.server.commands.SeedCommand \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.dedicated.Settings$MutableValue \u001b[2;31m-1M\u001b[0m",
          "XXX.server.gui.MinecraftServerGui \u001b[2;31m-2M\u001b[0m",
          "XXX.server.level.ChunkHolder$FullChunkStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.server.level.ChunkTaskPriorityQueue \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerChunkCache$MainThreadExecutor \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerLevel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.server.network.TextFilterClient$RequestFailedException \u001b[2;31m-1M\u001b[0m",
          "XXX.packs.repository.Pack$Position \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.tags.StaticTagHelper$Wrapper \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.tags.Tag \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.tags.TagManager$LoaderInfo \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.util.SortedArraySet \u001b[2;31m-3M\u001b[0m",
          "XXX.util.profiling.ActiveProfiler$PathEntry \u001b[2;31m-5M\u001b[0m",
          "XXX.profiling.registry.MeasurementCategory \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.behavior.GateBehavior$RunningPolicy \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.PoiCompetitorScan \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.PrepareRamNearestTarget \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.ShufflingList \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.sensing.NearestVisibleLivingEntitySensor \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.targeting.TargetingConditions \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.ai.util.HoverRandomPos \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.village.poi.PoiRecord \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.Bee \u001b[2;32m+23M\u001b[0m \u001b[2;31m-43M\u001b[0m",
          "XXX.entity.animal.Bee$BaseBeeGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Bee$BeeGoToHiveGoal \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.animal.Bee$BeeGrowCropGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Bee$BeeLocateHiveGoal \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.Bee$BeePollinateGoal \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Dolphin \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Ocelot \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Panda$Gene \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Parrot \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Pufferfish \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.animal.Rabbit \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Squid \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.TropicalFish$Pattern \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.animal.Turtle \u001b[2;32m+2M\u001b[0m \u001b[2;31m-13M\u001b[0m",
          "XXX.animal.goat.Goat$GoatNodeEvaluator \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Evoker$EvokerAttackSpellGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Evoker$EvokerSummonSpellGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Guardian \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Phantom$PhantomAttackPlayerTargetGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Ravager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Slime \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.SpellcasterIllager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.inventory.ClickAction \u001b[2;32m+1M\u001b[0m",
          "XXX.world.inventory.GrindstoneMenu \u001b[2;31m-1M\u001b[0m",
          "XXX.world.inventory.RecipeBookType \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.ArmorMaterials \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.DiggerItem \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.HoeItem \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.Item$Properties \u001b[2;31m-7M\u001b[0m",
          "XXX.item.crafting.Ingredient$ItemValue \u001b[2;31m-1M\u001b[0m",
          "XXX.item.crafting.RecipeManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.item.crafting.UpgradeRecipe \u001b[2;31m-3M\u001b[0m",
          "XXX.item.enchantment.EnchantmentCategory \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.item.enchantment.ProtectionEnchantment$Type \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.GameRules$Category \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.GameRules$IntegerValue \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.GameRules$Type \u001b[2;31m-2M\u001b[0m",
          "XXX.world.level.LightLayer \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.NaturalSpawner$SpawnState \u001b[2;31m-4M\u001b[0m",
          "XXX.world.level.StructureFeatureManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.biome.AmbientMoodSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.biome.Biome \u001b[2;32m+14M\u001b[0m \u001b[2;31m-16M\u001b[0m",
          "XXX.level.biome.Biome$ClimateParameters \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.biome.Biome$Precipitation \u001b[2;32m+1M\u001b[0m",
          "XXX.level.biome.BiomeGenerationSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.biome.FuzzyOffsetConstantColumnBiomeZoomer \u001b[2;32m+1M\u001b[0m",
          "XXX.level.biome.MultiNoiseBiomeSource$PresetInstance \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.biome.OverworldBiomeSource \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.block.ComposterBlock \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.DoubleBlockCombiner$BlockType \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.LightBlock \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.PowderSnowBlock \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.PressurePlateBlock$Sensitivity \u001b[2;32m+1M\u001b[0m",
          "XXX.block.entity.BannerPattern \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.BarrelBlockEntity \u001b[2;31m-2M\u001b[0m",
          "XXX.state.properties.RailShape \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.SculkSensorPhase \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.StairsShape \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.Tilt \u001b[2;32m+1M\u001b[0m",
          "XXX.level.border.BorderStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.chunk.storage.IOWorker$PendingStore \u001b[2;31m-3M\u001b[0m",
          "XXX.chunk.storage.RegionFile \u001b[2;31m-1M\u001b[0m",
          "XXX.chunk.storage.SectionStorage \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.entity.Visibility \u001b[2;32m+1M\u001b[0m",
          "XXX.level.gameevent.BlockPositionSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.gameevent.EntityPositionSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Aquifer$NoiseBasedAquifer$AquiferStatus \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Cavifier$QuantizedSpaghettiRarity \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Column$Line \u001b[2;31m-1M\u001b[0m",
          "XXX.level.levelgen.GenerationStep$Carving \u001b[2;32m+1M\u001b[0m",
          "XXX.level.levelgen.GeodeBlockSettings \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.level.levelgen.GeodeLayerSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.levelgen.Heightmap$Types \u001b[2;32m+1M\u001b[0m",
          "XXX.level.levelgen.NoiseBasedChunkGenerator \u001b[2;32m+3M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.level.levelgen.WorldGenSettings \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.carver.CarverConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.feature.FossilFeatureConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.levelgen.feature.HugeFungusConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.levelgen.feature.JigsawFeature \u001b[2;31m-3M\u001b[0m",
          "XXX.levelgen.feature.SpikeFeature$SpikeCacheLoader \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.WeightedConfiguredFeature \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.DiskConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.feature.configurations.EndGatewayConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.GeodeConfiguration \u001b[2;32m+13M\u001b[0m \u001b[2;31m-13M\u001b[0m",
          "XXX.feature.configurations.GrowingPlantConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.feature.configurations.HugeMushroomFeatureConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.LargeDripstoneConfiguration \u001b[2;32m+9M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.feature.configurations.MineshaftConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.OceanRuinConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.ReplaceBlockConfiguration \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.configurations.RootSystemConfiguration \u001b[2;32m+12M\u001b[0m \u001b[2;31m-12M\u001b[0m",
          "XXX.feature.configurations.SpikeConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.TreeConfiguration \u001b[2;32m+9M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.feature.configurations.UnderwaterMagmaConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.featuresize.TwoLayersFeatureSize \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.foliageplacers.MegaJungleFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.foliageplacers.PineFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.foliageplacers.SpruceFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.JunglePyramidPiece$MossStoneSelector \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.MineShaftPieces \u001b[2;31m-2M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$RoomDefinition \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.structure.RuinedPortalPiece$VerticalPlacement \u001b[2;32m+1M\u001b[0m",
          "XXX.levelgen.structure.ShipwreckPieces \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces \u001b[2;31m-3M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces$SmoothStoneSelector \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType \u001b[2;32m+1M\u001b[0m",
          "XXX.saveddata.maps.MapItemSavedData$HoldingPlayer \u001b[2;31m-4M\u001b[0m",
          "XXX.storage.loot.IntRange \u001b[2;31m-3M\u001b[0m",
          "XXX.storage.loot.LootPool \u001b[2;31m-6M\u001b[0m",
          "XXX.loot.entries.EmptyLootItem \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.entries.LootPoolSingletonContainer \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.ApplyExplosionDecay \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.CopyNbtFunction$CopyOperation \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.EnchantRandomlyFunction \u001b[2;31m-2M\u001b[0m",
          "XXX.loot.functions.ExplorationMapFunction \u001b[2;31m-7M\u001b[0m",
          "XXX.loot.functions.LootingEnchantFunction \u001b[2;31m-4M\u001b[0m",
          "XXX.loot.functions.SetBannerPatternFunction$Builder \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.SetContainerContents \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.functions.SetItemDamageFunction \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.functions.SmeltItemFunction \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.predicates.AlternativeLootItemCondition \u001b[2;31m-2M\u001b[0m",
          "XXX.loot.predicates.EntityHasScoreCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.predicates.LootItemEntityPropertyCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.providers.nbt.StorageNbtProvider \u001b[2;31m-2M\u001b[0m",
          "XXX.level.timers.TimerQueue$Event \u001b[2;31m-1M\u001b[0m",
          "XXX.phys.shapes.Shapes \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.world.scores.Team$CollisionRule \u001b[2;32m+1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.math.SymmetricGroup3",
        "differences": {
          "added": [
            "boolean lambda$null$0(int[],SymmetricGroup3)"
          ],
          "removed": [
            "boolean lambda$static$0(int[],SymmetricGroup3)",
            "SymmetricGroup3[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.ChatFormatting",
        "differences": {
          "added": [],
          "removed": [
            "ChatFormatting[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.Util",
        "differences": {
          "added": [
            "void lambda$null$8(CompletableFuture,List,int,Object,Throwable)",
            "List lambda$null$6(List,List)",
            "List lambda$null$4(Object,List)",
            "Logger access$100()"
          ],
          "removed": [
            "void lambda$sequenceFailFast$8(CompletableFuture,List,int,Object,Throwable)",
            "List lambda$sequence$6(List,List)",
            "List lambda$sequence$4(Object,List)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.Util$OS",
        "differences": {
          "added": [
            "void <init>(String,int,Util$1)"
          ],
          "removed": [
            "Util$OS[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.FilledBucketTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.RecipeUnlockedTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.SlideDownBlockTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.StatePropertiesPredicate",
        "differences": {
          "added": [
            "void <init>(List,StatePropertiesPredicate$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.AngleArgument$SingleAngle",
        "differences": {
          "added": [
            "void <init>(float,boolean,AngleArgument$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.EntityAnchorArgument$Anchor",
        "differences": {
          "added": [
            "Map access$000()"
          ],
          "removed": [
            "EntityAnchorArgument$Anchor[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.NbtPathArgument",
        "differences": {
          "added": [
            "Predicate access$000(CompoundTag)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.ScoreHolderArgument",
        "differences": {
          "added": [
            "void lambda$null$0(CommandContext,SuggestionsBuilder)",
            "boolean access$000(ScoreHolderArgument)"
          ],
          "removed": [
            "void lambda$static$0(CommandContext,SuggestionsBuilder)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.blocks.BlockPredicateArgument",
        "differences": {
          "added": [
            "CommandSyntaxException lambda$null$2(ResourceLocation)"
          ],
          "removed": [
            "CommandSyntaxException lambda$parse$2(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option",
        "differences": {
          "added": [
            "void <init>(EntitySelectorOptions$Modifier,Predicate,Component,EntitySelectorOptions$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.BlockModelGenerators",
        "differences": {
          "added": [
            "void lambda$run$51(SpawnEggItem)",
            "void lambda$run$50(BlockFamily)",
            "Variant lambda$createJigsaw$49(FrontAndTop)",
            "Variant lambda$createRespawnAnchor$48(ResourceLocation[],Integer)",
            "void lambda$createMultiface$47(Block,MultiPartGenerator,ResourceLocation,BooleanProperty,Function)",
            "void lambda$static$46(HashMap)",
            "Variant lambda$null$45(ResourceLocation)",
            "Variant lambda$null$44(ResourceLocation)",
            "Variant lambda$null$43(ResourceLocation)",
            "Variant lambda$null$42(ResourceLocation)",
            "Variant lambda$null$41(ResourceLocation)",
            "Variant lambda$null$40(ResourceLocation)",
            "List lambda$createTurtleEgg$39(Integer,Integer)",
            "Variant lambda$createTripwireHook$38(Boolean,Boolean)",
            "Variant lambda$createSweetBerryBush$37(Integer)",
            "Variant lambda$createStructureBlock$36(StructureMode)",
            "Variant lambda$createSnowBlocks$35(ResourceLocation,Integer)",
            "Variant lambda$createRepeater$34(Integer,Boolean,Boolean)",
            "Variant lambda$createSculkSensor$33(ResourceLocation,ResourceLocation,SculkSensorPhase)",
            "void lambda$createGrassBlocks$32(ResourceLocation,TextureMapping)",
            "void lambda$createGrassBlocks$31(ResourceLocation,TextureMapping)",
            "Variant lambda$createSoulFire$30(Variant)",
            "Variant lambda$createSoulFire$29(Variant)",
            "Variant lambda$createSoulFire$28(Variant)",
            "Variant lambda$createSoulFire$27(Variant)",
            "Variant lambda$createFire$25(Variant)",
            "Variant lambda$createFire$24(Variant)",
            "Variant lambda$createFire$23(Variant)",
            "Variant lambda$createFire$22(Variant)",
            "Variant lambda$wrapModels$19(ResourceLocation)",
            "TextureMapping lambda$createChorusFlower$18(TextureMapping,ResourceLocation)",
            "void lambda$createFurnace$17(ResourceLocation,TextureMapping)",
            "Variant lambda$createCropBlock$16(int[],Int2ObjectMap,Block,Integer)",
            "ResourceLocation lambda$null$15(Block,int,int)",
            "Variant lambda$createEmptyOrFullDispatch$14(Comparable,Variant,Variant,Comparable)",
            "void lambda$createBarrel$13(ResourceLocation,TextureMapping)",
            "Variant lambda$createBambooModels$12(String,int)",
            "TextureMapping lambda$createCommandBlock$11(TextureMapping,ResourceLocation)",
            "Variant lambda$createActiveRail$10(ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,Boolean,RailShape)",
            "Variant lambda$createStems$9(Block,TextureMapping,Integer)",
            "void lambda$static$8(Object,Block)",
            "void lambda$static$7(Object,Block)",
            "void lambda$static$6(Object,Block)",
            "void lambda$static$5(Object,Block)",
            "BiConsumer access$000(BlockModelGenerators)",
            "Map access$100(BlockModelGenerators)",
            "Consumer access$200(BlockModelGenerators)",
            "MultiVariantGenerator access$300(Block,ResourceLocation)",
            "void access$400(BlockModelGenerators,Block,ResourceLocation)",
            "BlockStateGenerator access$500(Block,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$600(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$700(Block,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$800(Block,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$900(Block,ResourceLocation,ResourceLocation)",
            "void access$1000(BlockModelGenerators,Item)",
            "void access$1100(BlockModelGenerators,Block)",
            "BlockStateGenerator access$1200(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$1300(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "Map access$1400(BlockModelGenerators)",
            "void access$1500(BlockModelGenerators,Block)",
            "List access$1600(BlockModelGenerators)",
            "void access$1700(BlockModelGenerators,Block)",
            "void access$1800(BlockModelGenerators,Block)",
            "Map access$1900()",
            "BlockStateGenerator access$2000(Block,ResourceLocation)",
            "BlockStateGenerator access$2100(Block,ResourceLocation,ResourceLocation)"
          ],
          "removed": [
            "void lambda$run$47(SpawnEggItem)",
            "void lambda$run$46(BlockFamily)",
            "Variant lambda$createJigsaw$45(FrontAndTop)",
            "Variant lambda$createRespawnAnchor$44(ResourceLocation[],Integer)",
            "void lambda$createMultiface$43(Block,MultiPartGenerator,ResourceLocation,BooleanProperty,Function)",
            "void lambda$static$42(HashMap)",
            "Variant lambda$static$41(ResourceLocation)",
            "Variant lambda$static$40(ResourceLocation)",
            "Variant lambda$static$39(ResourceLocation)",
            "Variant lambda$static$38(ResourceLocation)",
            "Variant lambda$static$37(ResourceLocation)",
            "Variant lambda$static$36(ResourceLocation)",
            "List lambda$createTurtleEgg$35(Integer,Integer)",
            "Variant lambda$createTripwireHook$34(Boolean,Boolean)",
            "Variant lambda$createSweetBerryBush$33(Integer)",
            "Variant lambda$createStructureBlock$32(StructureMode)",
            "Variant lambda$createSnowBlocks$31(ResourceLocation,Integer)",
            "Variant lambda$createRepeater$30(Integer,Boolean,Boolean)",
            "Variant lambda$createSculkSensor$29(ResourceLocation,ResourceLocation,SculkSensorPhase)",
            "void lambda$createGrassBlocks$28(ResourceLocation,TextureMapping)",
            "void lambda$createGrassBlocks$27(ResourceLocation,TextureMapping)",
            "Variant lambda$createSoulFire$25(Variant)",
            "Variant lambda$createSoulFire$24(Variant)",
            "Variant lambda$createSoulFire$23(Variant)",
            "Variant lambda$createSoulFire$22(Variant)",
            "Variant lambda$createFire$19(Variant)",
            "Variant lambda$createFire$18(Variant)",
            "Variant lambda$createFire$17(Variant)",
            "Variant lambda$createFire$16(Variant)",
            "Variant lambda$wrapModels$15(ResourceLocation)",
            "TextureMapping lambda$createChorusFlower$14(TextureMapping,ResourceLocation)",
            "void lambda$createFurnace$13(ResourceLocation,TextureMapping)",
            "Variant lambda$createCropBlock$12(int[],Int2ObjectMap,Block,Integer)",
            "ResourceLocation lambda$createCropBlock$11(Block,int,int)",
            "Variant lambda$createEmptyOrFullDispatch$10(Comparable,Variant,Variant,Comparable)",
            "void lambda$createBarrel$9(ResourceLocation,TextureMapping)",
            "Variant lambda$createBambooModels$8(String,int)",
            "TextureMapping lambda$createCommandBlock$7(TextureMapping,ResourceLocation)",
            "Variant lambda$createActiveRail$6(ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,Boolean,RailShape)",
            "Variant lambda$createStems$5(Block,TextureMapping,Integer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.MultiPartGenerator$Entry",
        "differences": {
          "added": [
            "void <init>(List,MultiPartGenerator$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.tags.TagsProvider$TagAppender",
        "differences": {
          "added": [
            "void <init>(Tag$Builder,Registry,String,TagsProvider$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.GameTestBatchRunner",
        "differences": {
          "added": [
            "GameTestInfo lambda$null$0(Rotation,ServerLevel,TestFunction)",
            "ServerLevel access$000(GameTestBatchRunner)",
            "void access$100(GameTestBatchRunner,int)"
          ],
          "removed": [
            "GameTestInfo lambda$new$0(Rotation,ServerLevel,TestFunction)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.GameTestSequence",
        "differences": {
          "added": [
            "GameTestInfo access$000(GameTestSequence)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.TestCommand",
        "differences": {
          "added": [
            "void access$000(ServerLevel,MultipleTestTracker)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.ListTag",
        "differences": {
          "added": [
            "void <init>(List,byte,ListTag$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.LongTag",
        "differences": {
          "added": [
            "void <init>(long,LongTag$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.NbtOps",
        "differences": {
          "added": [
            "void lambda$null$7(BiConsumer,CompoundTag,String)"
          ],
          "removed": [
            "void lambda$getMapEntries$7(BiConsumer,CompoundTag,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.Connection$PacketHolder",
        "differences": {
          "added": [
            "Packet access$000(Connection$PacketHolder)",
            "GenericFutureListener access$100(Connection$PacketHolder)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry",
        "differences": {
          "added": [
            "CommandNode access$000(ClientboundCommandsPacket$Entry)",
            "void <init>(ArgumentBuilder,byte,int,int[],ClientboundCommandsPacket$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
        "differences": {
          "added": [],
          "removed": [
            "ClientboundPlayerPositionPacket$RelativeArgument[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundRecipePacket$State",
        "differences": {
          "added": [],
          "removed": [
            "ClientboundRecipePacket$State[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket",
        "differences": {
          "added": [
            "void lambda$null$2(FriendlyByteBuf,AttributeModifier)",
            "AttributeModifier lambda$null$0(FriendlyByteBuf)"
          ],
          "removed": [
            "void lambda$write$2(FriendlyByteBuf,AttributeModifier)",
            "AttributeModifier lambda$new$0(FriendlyByteBuf)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.DebugPackets",
        "differences": {
          "added": [
            "void lambda$null$6(List,String,GossipType,Integer)"
          ],
          "removed": [
            "void lambda$writeBrain$6(List,String,GossipType,Integer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ServerboundInteractPacket",
        "differences": {
          "added": [
            "ServerboundInteractPacket$Action access$400()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ServerboundInteractPacket$InteractionAtLocationAction",
        "differences": {
          "added": [
            "void <init>(InteractionHand,Vec3,ServerboundInteractPacket$1)",
            "void <init>(FriendlyByteBuf,ServerboundInteractPacket$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.ServerFunctionManager$QueuedCommand",
        "differences": {
          "added": [
            "int access$400(ServerFunctionManager$QueuedCommand)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.DebugCommand$Tracer",
        "differences": {
          "added": [
            "void <init>(PrintWriter,DebugCommand$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.EmoteCommands",
        "differences": {
          "added": [
            "void lambda$null$1(CommandContext,MinecraftServer,ServerPlayer,Entity,TextFilter$FilteredText)",
            "Component lambda$null$0(ServerPlayer,Component,Component,ServerPlayer)"
          ],
          "removed": [
            "void lambda$register$1(CommandContext,MinecraftServer,ServerPlayer,Entity,TextFilter$FilteredText)",
            "Component lambda$register$0(ServerPlayer,Component,Component,ServerPlayer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.ExecuteCommand",
        "differences": {
          "added": [
            "int lambda$null$53(DataCommands$DataProvider,CommandContext)",
            "Collection lambda$null$52(boolean,DataCommands$DataProvider,CommandContext)",
            "boolean lambda$null$46(Integer,Integer)",
            "boolean lambda$null$44(Integer,Integer)",
            "boolean lambda$null$42(Integer,Integer)",
            "boolean lambda$null$40(Integer,Integer)",
            "Tag lambda$null$36(IntFunction,int)",
            "CommandSourceStack lambda$null$32(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$31(CommandContext,int)",
            "CommandSourceStack lambda$null$30(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$29(CommandContext,int)",
            "CommandSourceStack lambda$null$28(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$27(CommandContext,int)",
            "CommandSourceStack lambda$null$26(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$25(CommandContext,int)",
            "CommandSourceStack lambda$null$24(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$23(CommandContext,int)",
            "CommandSourceStack lambda$null$22(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$21(CommandContext,int)",
            "void lambda$null$2(ResultConsumer,ResultConsumer,CommandContext,boolean,int)"
          ],
          "removed": [
            "int lambda$addConditionals$53(DataCommands$DataProvider,CommandContext)",
            "Collection lambda$addConditionals$52(boolean,DataCommands$DataProvider,CommandContext)",
            "boolean lambda$addConditionals$46(Integer,Integer)",
            "boolean lambda$addConditionals$44(Integer,Integer)",
            "boolean lambda$addConditionals$42(Integer,Integer)",
            "boolean lambda$addConditionals$40(Integer,Integer)",
            "Tag lambda$storeData$36(IntFunction,int)",
            "CommandSourceStack lambda$wrapStores$32(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$31(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$30(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$29(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$28(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$27(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$26(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$25(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$24(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$23(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$22(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$21(CommandContext,int)",
            "void lambda$static$2(ResultConsumer,ResultConsumer,CommandContext,boolean,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.ExperienceCommand$Type",
        "differences": {
          "added": [
            "ToIntFunction access$000(ExperienceCommand$Type)"
          ],
          "removed": [
            "ExperienceCommand$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.FillCommand$Mode",
        "differences": {
          "added": [],
          "removed": [
            "FillCommand$Mode[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.GameRuleCommand",
        "differences": {
          "added": [
            "int access$000(CommandContext,GameRules$Key)",
            "int access$100(CommandSourceStack,GameRules$Key)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.LootCommand",
        "differences": {
          "added": [
            "int lambda$null$13(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$12(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$11(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$10(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$9(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$8(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$7(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$6(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$5(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$4(LootCommand$DropConsumer,CommandContext)"
          ],
          "removed": [
            "int lambda$register$13(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$12(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$11(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$10(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$9(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$8(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$7(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$6(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$5(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$4(LootCommand$DropConsumer,CommandContext)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.SeedCommand",
        "differences": {
          "added": [
            "Style lambda$null$1(long,Style)"
          ],
          "removed": [
            "Style lambda$register$1(long,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.Settings$MutableValue",
        "differences": {
          "added": [
            "void <init>(Settings,String,Object,Function,Settings$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.gui.MinecraftServerGui",
        "differences": {
          "added": [
            "AtomicBoolean access$000(MinecraftServerGui)",
            "void access$100(MinecraftServerGui)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkHolder$FullChunkStatus",
        "differences": {
          "added": [],
          "removed": [
            "ChunkHolder$FullChunkStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkTaskPriorityQueue",
        "differences": {
          "added": [
            "Either lambda$null$5(long)"
          ],
          "removed": [
            "Either lambda$pop$5(long)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerChunkCache$MainThreadExecutor",
        "differences": {
          "added": [
            "void <init>(ServerChunkCache,Level,ServerChunkCache$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerLevel",
        "differences": {
          "added": [
            "void lambda$null$18(BlockPos,PoiType)",
            "void lambda$null$16(BlockPos)",
            "EntityTickList access$100(ServerLevel)",
            "List access$200(ServerLevel)",
            "Set access$300(ServerLevel)",
            "Int2ObjectMap access$400(ServerLevel)"
          ],
          "removed": [
            "void lambda$onBlockStateChange$18(BlockPos,PoiType)",
            "void lambda$onBlockStateChange$16(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.network.TextFilterClient$RequestFailedException",
        "differences": {
          "added": [
            "void <init>(String,TextFilterClient$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.Pack$Position",
        "differences": {
          "added": [],
          "removed": [
            "Pack$Position[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.StaticTagHelper$Wrapper",
        "differences": {
          "added": [
            "void <init>(ResourceLocation,StaticTagHelper$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.Tag",
        "differences": {
          "added": [
            "DataResult lambda$null$2(Tag)",
            "DataResult lambda$null$0(ResourceLocation)"
          ],
          "removed": [
            "DataResult lambda$codec$2(Tag)",
            "DataResult lambda$codec$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagManager$LoaderInfo",
        "differences": {
          "added": [
            "void <init>(StaticTagHelper,CompletableFuture,TagManager$1)",
            "CompletableFuture access$100(TagManager$LoaderInfo)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.LowerCaseEnumTypeAdapterFactory",
        "differences": {
          "added": [
            "String access$000(LowerCaseEnumTypeAdapterFactory,Object)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.SortedArraySet",
        "differences": {
          "added": [
            "int access$000(SortedArraySet)",
            "Object[] access$100(SortedArraySet)",
            "void access$200(SortedArraySet,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.profiling.ActiveProfiler$PathEntry",
        "differences": {
          "added": [
            "long access$000(ActiveProfiler$PathEntry)",
            "long access$002(ActiveProfiler$PathEntry,long)",
            "long access$100(ActiveProfiler$PathEntry)",
            "long access$102(ActiveProfiler$PathEntry,long)",
            "Object2LongOpenHashMap access$200(ActiveProfiler$PathEntry)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.profiling.registry.MeasurementCategory",
        "differences": {
          "added": [],
          "removed": [
            "MeasurementCategory[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy",
        "differences": {
          "added": [
            "void <init>(String,int,GateBehavior$1)"
          ],
          "removed": [
            "GateBehavior$RunningPolicy[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.PoiCompetitorScan",
        "differences": {
          "added": [
            "boolean lambda$null$0(GlobalPos,PoiType,Villager)"
          ],
          "removed": [
            "boolean lambda$start$0(GlobalPos,PoiType,Villager)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget",
        "differences": {
          "added": [
            "boolean lambda$null$0(PathfinderMob,LivingEntity)"
          ],
          "removed": [
            "boolean lambda$start$0(PathfinderMob,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.ShufflingList",
        "differences": {
          "added": [
            "double lambda$shuffle$2(Object)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.sensing.NearestVisibleLivingEntitySensor",
        "differences": {
          "added": [
            "boolean lambda$null$0(LivingEntity,LivingEntity)"
          ],
          "removed": [
            "boolean lambda$getNearestEntity$0(LivingEntity,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.targeting.TargetingConditions",
        "differences": {
          "added": [
            "void <init>()",
            "TargetingConditions allowInvulnerable()",
            "TargetingConditions allowSameTeam()",
            "TargetingConditions allowUnseeable()",
            "TargetingConditions allowNonAttackable()"
          ],
          "removed": [
            "void <init>(boolean)",
            "TargetingConditions forCombat()",
            "TargetingConditions forNonCombat()",
            "TargetingConditions ignoreLineOfSight()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.util.HoverRandomPos",
        "differences": {
          "added": [
            "boolean lambda$null$0(PathfinderMob,BlockPos)"
          ],
          "removed": [
            "boolean lambda$getPos$0(PathfinderMob,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.village.poi.PoiRecord",
        "differences": {
          "added": [
            "Integer lambda$null$2(PoiRecord)",
            "PoiType lambda$null$1(PoiRecord)",
            "BlockPos lambda$null$0(PoiRecord)"
          ],
          "removed": [
            "Integer lambda$codec$2(PoiRecord)",
            "PoiType lambda$codec$1(PoiRecord)",
            "BlockPos lambda$codec$0(PoiRecord)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee",
        "differences": {
          "added": [
            "Bee$BeePollinateGoal access$700(Bee)",
            "Random access$1000(Bee)",
            "boolean access$1400(Bee)",
            "BlockPos access$1500(Bee)",
            "boolean access$1600(Bee,BlockPos,int)",
            "boolean access$1800(Bee)",
            "PathNavigation access$1900(Bee)",
            "PathNavigation access$2000(Bee)",
            "PathNavigation access$2200(Bee)",
            "boolean access$2400(Bee,BlockPos)",
            "void access$2500(Bee,BlockPos)",
            "PathNavigation access$2600(Bee)",
            "PathNavigation access$2700(Bee)",
            "PathNavigation access$2800(Bee)",
            "PathNavigation access$2900(Bee)",
            "BlockPos access$1502(Bee,BlockPos)",
            "int access$3002(Bee,int)",
            "PathNavigation access$3100(Bee)",
            "BlockPos access$3200(Bee)",
            "boolean access$3300(Bee,BlockPos)",
            "PathNavigation access$3400(Bee)",
            "PathNavigation access$3500(Bee)",
            "BlockPos access$3202(Bee,BlockPos)",
            "PathNavigation access$3600(Bee)",
            "int access$3700(Bee)",
            "int access$3800(Bee)",
            "PathNavigation access$3900(Bee)",
            "int access$3802(Bee,int)",
            "Random access$4000(Bee)",
            "Random access$4100(Bee)",
            "void access$4200(Bee,boolean)",
            "PathNavigation access$4300(Bee)",
            "Random access$4400(Bee)",
            "PathNavigation access$4500(Bee)",
            "Random access$4600(Bee)",
            "Random access$4700(Bee)",
            "int access$3000(Bee)",
            "Bee$BeeGoToHiveGoal access$4800(Bee)",
            "boolean access$5100(Bee,BlockPos)",
            "int access$5200(Bee)",
            "Random access$5300(Bee)",
            "Random access$5400(Bee)",
            "void access$5500(Bee)"
          ],
          "removed": [
            "PathNavigation access$000(Bee)",
            "Random access$100(Bee)",
            "PathNavigation access$200(Bee)",
            "PathNavigation access$300(Bee)",
            "PathNavigation access$400(Bee)",
            "PathNavigation access$500(Bee)",
            "PathNavigation access$600(Bee)",
            "PathNavigation access$700(Bee)",
            "PathNavigation access$800(Bee)",
            "PathNavigation access$1000(Bee)",
            "PathNavigation access$1400(Bee)",
            "PathNavigation access$1500(Bee)",
            "PathNavigation access$1600(Bee)",
            "PathNavigation access$1700(Bee)",
            "PathNavigation access$1800(Bee)",
            "Random access$1900(Bee)",
            "Random access$2000(Bee)",
            "Random access$2200(Bee)",
            "Random access$2400(Bee)",
            "Random access$2500(Bee)",
            "Random access$2600(Bee)",
            "Random access$2700(Bee)",
            "Random access$2800(Bee)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BaseBeeGoal",
        "differences": {
          "added": [
            "void <init>(Bee,Bee$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal",
        "differences": {
          "added": [
            "int access$300(Bee$BeeGoToHiveGoal)",
            "List access$500(Bee$BeeGoToHiveGoal)",
            "boolean access$4900(Bee$BeeGoToHiveGoal,BlockPos)",
            "void access$5000(Bee$BeeGoToHiveGoal)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeGrowCropGoal",
        "differences": {
          "added": [
            "void <init>(Bee,Bee$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeLocateHiveGoal",
        "differences": {
          "added": [
            "double lambda$findNearbyHivesWithSpace$2(BlockPos,BlockPos)",
            "boolean lambda$findNearbyHivesWithSpace$1(Bee,BlockPos)",
            "void <init>(Bee,Bee$1)"
          ],
          "removed": [
            "double lambda$findNearbyHivesWithSpace$1(BlockPos,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeePollinateGoal",
        "differences": {
          "added": [
            "boolean access$600(Bee$BeePollinateGoal)",
            "void access$800(Bee$BeePollinateGoal)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Dolphin",
        "differences": {
          "added": [
            "Random access$300(Dolphin)",
            "TargetingConditions access$400()"
          ],
          "removed": [
            "Random access$000(Dolphin)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Ocelot",
        "differences": {
          "added": [
            "boolean access$000(Ocelot)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Panda$Gene",
        "differences": {
          "added": [
            "Panda$Gene access$000(Panda$Gene,Panda$Gene)"
          ],
          "removed": [
            "Panda$Gene[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Parrot",
        "differences": {
          "added": [
            "Map access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Pufferfish",
        "differences": {
          "added": [
            "int access$002(Pufferfish,int)",
            "int access$102(Pufferfish,int)",
            "TargetingConditions access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Rabbit",
        "differences": {
          "added": [
            "boolean access$300(Rabbit)",
            "int access$402(Rabbit,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Squid",
        "differences": {
          "added": [
            "boolean access$100(Squid)"
          ],
          "removed": [
            "boolean canBeLeashed(Player)",
            "boolean access$000(Squid)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.TropicalFish$Pattern",
        "differences": {
          "added": [],
          "removed": [
            "TropicalFish$Pattern[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Turtle",
        "differences": {
          "added": [
            "Random access$300(Turtle)",
            "void access$400(Turtle,BlockPos)",
            "void access$500(Turtle,boolean)",
            "BlockPos access$600(Turtle)",
            "BlockPos access$700(Turtle)",
            "void access$800(Turtle,boolean)",
            "void access$900(Turtle,boolean)",
            "int access$1000(Turtle)",
            "void access$1100(Turtle,boolean)",
            "Random access$1200(Turtle)",
            "int access$1008(Turtle)",
            "boolean access$1300(Turtle)",
            "boolean access$1400(Turtle)"
          ],
          "removed": [
            "Random access$000(Turtle)",
            "Random access$100(Turtle)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.goat.Goat$GoatNodeEvaluator",
        "differences": {
          "added": [
            "void <init>(Goat$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Evoker$EvokerAttackSpellGoal",
        "differences": {
          "added": [
            "void <init>(Evoker,Evoker$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Evoker$EvokerSummonSpellGoal",
        "differences": {
          "added": [
            "void <init>(Evoker,Evoker$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Guardian",
        "differences": {
          "added": [
            "void access$000(Guardian,int)",
            "void access$100(Guardian,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Phantom$PhantomAttackPlayerTargetGoal",
        "differences": {
          "added": [
            "void <init>(Phantom,Phantom$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Ravager",
        "differences": {
          "added": [
            "boolean canSee(Entity)"
          ],
          "removed": [
            "boolean hasLineOfSight(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Slime",
        "differences": {
          "added": [
            "float access$000(Slime)",
            "boolean access$100(Slime)"
          ],
          "removed": [
            "boolean access$000(Slime)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.SpellcasterIllager",
        "differences": {
          "added": [
            "PathNavigation access$200(SpellcasterIllager)"
          ],
          "removed": [
            "PathNavigation access$000(SpellcasterIllager)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.ClickAction",
        "differences": {
          "added": [],
          "removed": [
            "ClickAction[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.GrindstoneMenu",
        "differences": {
          "added": [
            "Container access$000(GrindstoneMenu)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.RecipeBookType",
        "differences": {
          "added": [],
          "removed": [
            "RecipeBookType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ArmorMaterials",
        "differences": {
          "added": [],
          "removed": [
            "ArmorMaterials[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.DiggerItem",
        "differences": {
          "added": [
            "void <init>(float,float,Tier,Set,Item$Properties)"
          ],
          "removed": [
            "void <init>(float,float,Tier,Tag,Item$Properties)",
            "boolean isCorrectToolForDrops(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.Item$Properties",
        "differences": {
          "added": [
            "CreativeModeTab access$000(Item$Properties)",
            "Rarity access$100(Item$Properties)",
            "Item access$200(Item$Properties)",
            "int access$300(Item$Properties)",
            "int access$400(Item$Properties)",
            "FoodProperties access$500(Item$Properties)",
            "boolean access$600(Item$Properties)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.Ingredient$ItemValue",
        "differences": {
          "added": [
            "void <init>(ItemStack,Ingredient$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.RecipeManager",
        "differences": {
          "added": [
            "Map lambda$null$10(RecipeType)"
          ],
          "removed": [
            "Map lambda$replaceRecipes$10(RecipeType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.UpgradeRecipe",
        "differences": {
          "added": [
            "Ingredient access$000(UpgradeRecipe)",
            "Ingredient access$100(UpgradeRecipe)",
            "ItemStack access$200(UpgradeRecipe)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.enchantment.EnchantmentCategory",
        "differences": {
          "added": [
            "void <init>(String,int,EnchantmentCategory$1)"
          ],
          "removed": [
            "EnchantmentCategory[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.enchantment.ProtectionEnchantment$Type",
        "differences": {
          "added": [],
          "removed": [
            "ProtectionEnchantment$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$Category",
        "differences": {
          "added": [],
          "removed": [
            "GameRules$Category[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$IntegerValue",
        "differences": {
          "added": [
            "GameRules$Type access$100(int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$Type",
        "differences": {
          "added": [
            "BiConsumer access$300(GameRules$Type)",
            "void <init>(Supplier,Function,BiConsumer,GameRules$VisitorCaller,GameRules$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LightLayer",
        "differences": {
          "added": [],
          "removed": [
            "LightLayer[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.NaturalSpawner$SpawnState",
        "differences": {
          "added": [
            "void <init>(int,Object2IntOpenHashMap,PotentialCalculator,NaturalSpawner$1)",
            "boolean access$300(NaturalSpawner$SpawnState,MobCategory)",
            "void access$400(NaturalSpawner$SpawnState,Mob,ChunkAccess)",
            "boolean access$500(NaturalSpawner$SpawnState,EntityType,BlockPos,ChunkAccess)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.StructureFeatureManager",
        "differences": {
          "added": [
            "boolean lambda$null$3(BlockPos,StructurePiece)"
          ],
          "removed": [
            "boolean lambda$getStructureAt$3(BlockPos,StructurePiece)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.AmbientMoodSettings",
        "differences": {
          "added": [
            "Double lambda$null$3(AmbientMoodSettings)",
            "Integer lambda$null$2(AmbientMoodSettings)",
            "Integer lambda$null$1(AmbientMoodSettings)",
            "SoundEvent lambda$null$0(AmbientMoodSettings)"
          ],
          "removed": [
            "Double lambda$static$3(AmbientMoodSettings)",
            "Integer lambda$static$2(AmbientMoodSettings)",
            "Integer lambda$static$1(AmbientMoodSettings)",
            "SoundEvent lambda$static$0(AmbientMoodSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome",
        "differences": {
          "added": [
            "Long2FloatLinkedOpenHashMap lambda$null$16()",
            "Biome lambda$null$13(Biome$ClimateSettings,Biome$BiomeCategory,Float,Float,BiomeSpecialEffects)",
            "BiomeSpecialEffects lambda$null$12(Biome)",
            "Float lambda$null$11(Biome)",
            "Float lambda$null$10(Biome)",
            "Biome$BiomeCategory lambda$null$9(Biome)",
            "Biome$ClimateSettings lambda$null$8(Biome)",
            "MobSpawnSettings lambda$null$6(Biome)",
            "BiomeGenerationSettings lambda$null$5(Biome)",
            "BiomeSpecialEffects lambda$null$4(Biome)",
            "Float lambda$null$3(Biome)",
            "Float lambda$null$2(Biome)",
            "Biome$BiomeCategory lambda$null$1(Biome)",
            "Biome$ClimateSettings lambda$null$0(Biome)",
            "PerlinSimplexNoise access$100()",
            "void <init>(Biome$ClimateSettings,Biome$BiomeCategory,float,float,BiomeSpecialEffects,BiomeGenerationSettings,MobSpawnSettings,Biome$1)"
          ],
          "removed": [
            "Long2FloatLinkedOpenHashMap lambda$new$16()",
            "Biome lambda$static$13(Biome$ClimateSettings,Biome$BiomeCategory,Float,Float,BiomeSpecialEffects)",
            "BiomeSpecialEffects lambda$static$12(Biome)",
            "Float lambda$static$11(Biome)",
            "Float lambda$static$10(Biome)",
            "Biome$BiomeCategory lambda$static$9(Biome)",
            "Biome$ClimateSettings lambda$static$8(Biome)",
            "MobSpawnSettings lambda$static$6(Biome)",
            "BiomeGenerationSettings lambda$static$5(Biome)",
            "BiomeSpecialEffects lambda$static$4(Biome)",
            "Float lambda$static$3(Biome)",
            "Float lambda$static$2(Biome)",
            "Biome$BiomeCategory lambda$static$1(Biome)",
            "Biome$ClimateSettings lambda$static$0(Biome)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome$ClimateParameters",
        "differences": {
          "added": [
            "Float lambda$null$4(Biome$ClimateParameters)",
            "Float lambda$null$3(Biome$ClimateParameters)",
            "Float lambda$null$2(Biome$ClimateParameters)",
            "Float lambda$null$1(Biome$ClimateParameters)",
            "Float lambda$null$0(Biome$ClimateParameters)"
          ],
          "removed": [
            "Float lambda$static$4(Biome$ClimateParameters)",
            "Float lambda$static$3(Biome$ClimateParameters)",
            "Float lambda$static$2(Biome$ClimateParameters)",
            "Float lambda$static$1(Biome$ClimateParameters)",
            "Float lambda$static$0(Biome$ClimateParameters)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome$Precipitation",
        "differences": {
          "added": [],
          "removed": [
            "Biome$Precipitation[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeGenerationSettings",
        "differences": {
          "added": [
            "List lambda$null$4(BiomeGenerationSettings)",
            "List lambda$null$3(BiomeGenerationSettings)",
            "Map lambda$null$2(BiomeGenerationSettings)",
            "Supplier lambda$null$1(BiomeGenerationSettings)",
            "void <init>(Supplier,Map,List,List,BiomeGenerationSettings$1)"
          ],
          "removed": [
            "List lambda$static$4(BiomeGenerationSettings)",
            "List lambda$static$3(BiomeGenerationSettings)",
            "Map lambda$static$2(BiomeGenerationSettings)",
            "Supplier lambda$static$1(BiomeGenerationSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer",
        "differences": {
          "added": [],
          "removed": [
            "FuzzyOffsetConstantColumnBiomeZoomer[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.MultiNoiseBiomeSource$PresetInstance",
        "differences": {
          "added": [
            "DataResult lambda$null$2(MultiNoiseBiomeSource$Preset)",
            "DataResult lambda$null$1(ResourceLocation)",
            "DataResult lambda$null$0(ResourceLocation)",
            "void <init>(MultiNoiseBiomeSource$Preset,Registry,long,MultiNoiseBiomeSource$1)"
          ],
          "removed": [
            "DataResult lambda$static$2(MultiNoiseBiomeSource$Preset)",
            "DataResult lambda$static$1(ResourceLocation)",
            "DataResult lambda$static$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.OverworldBiomeSource",
        "differences": {
          "added": [
            "Biome lambda$null$5(Registry,ResourceKey)",
            "Registry lambda$null$3(OverworldBiomeSource)",
            "Boolean lambda$null$2(OverworldBiomeSource)",
            "Boolean lambda$null$1(OverworldBiomeSource)",
            "Long lambda$null$0(OverworldBiomeSource)"
          ],
          "removed": [
            "Biome lambda$new$5(Registry,ResourceKey)",
            "Registry lambda$static$3(OverworldBiomeSource)",
            "Boolean lambda$static$2(OverworldBiomeSource)",
            "Boolean lambda$static$1(OverworldBiomeSource)",
            "Long lambda$static$0(OverworldBiomeSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ComposterBlock",
        "differences": {
          "added": [
            "BlockState access$000(BlockState,LevelAccessor,BlockPos)",
            "BlockState access$100(BlockState,LevelAccessor,BlockPos,ItemStack)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DoubleBlockCombiner$BlockType",
        "differences": {
          "added": [],
          "removed": [
            "DoubleBlockCombiner$BlockType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.PowderSnowBlock",
        "differences": {
          "added": [
            "void spawnPowderSnowParticles(Level,Vec3)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.PressurePlateBlock$Sensitivity",
        "differences": {
          "added": [],
          "removed": [
            "PressurePlateBlock$Sensitivity[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BannerPattern",
        "differences": {
          "added": [
            "String access$000(BannerPattern)"
          ],
          "removed": [
            "BannerPattern[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BarrelBlockEntity",
        "differences": {
          "added": [
            "void access$000(BarrelBlockEntity,BlockState,SoundEvent)",
            "void access$100(BarrelBlockEntity,BlockState,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.RailShape",
        "differences": {
          "added": [],
          "removed": [
            "RailShape[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.SculkSensorPhase",
        "differences": {
          "added": [],
          "removed": [
            "SculkSensorPhase[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.StairsShape",
        "differences": {
          "added": [],
          "removed": [
            "StairsShape[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.Tilt",
        "differences": {
          "added": [],
          "removed": [
            "Tilt[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.border.BorderStatus",
        "differences": {
          "added": [],
          "removed": [
            "BorderStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.IOWorker$PendingStore",
        "differences": {
          "added": [
            "CompoundTag access$000(IOWorker$PendingStore)",
            "CompletableFuture access$100(IOWorker$PendingStore)",
            "CompoundTag access$002(IOWorker$PendingStore,CompoundTag)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.RegionFile",
        "differences": {
          "added": [
            "RegionFileVersion access$000(RegionFile)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.SectionStorage",
        "differences": {
          "added": [
            "void lambda$null$1(long)"
          ],
          "removed": [
            "void lambda$readColumn$1(long)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.entity.Visibility",
        "differences": {
          "added": [],
          "removed": [
            "Visibility[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.BlockPositionSource",
        "differences": {
          "added": [
            "Optional lambda$null$0(BlockPositionSource)",
            "Optional access$000(BlockPositionSource)"
          ],
          "removed": [
            "Optional lambda$static$0(BlockPositionSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.EntityPositionSource",
        "differences": {
          "added": [
            "Integer lambda$null$0(EntityPositionSource)",
            "int access$000(EntityPositionSource)"
          ],
          "removed": [
            "Integer lambda$static$0(EntityPositionSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Aquifer$NoiseBasedAquifer$AquiferStatus",
        "differences": {
          "added": [
            "int access$000(Aquifer$NoiseBasedAquifer$AquiferStatus)",
            "BlockState access$100(Aquifer$NoiseBasedAquifer$AquiferStatus)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Cavifier$QuantizedSpaghettiRarity",
        "differences": {
          "added": [
            "double access$000(double)",
            "double access$100(double)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Column$Line",
        "differences": {
          "added": [
            "Column$Line access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GenerationStep$Carving",
        "differences": {
          "added": [],
          "removed": [
            "GenerationStep$Carving[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GeodeBlockSettings",
        "differences": {
          "added": [
            "List lambda$null$5(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$4(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$3(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$2(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$1(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$0(GeodeBlockSettings)"
          ],
          "removed": [
            "List lambda$static$5(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$4(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$3(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$2(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$1(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$0(GeodeBlockSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GeodeLayerSettings",
        "differences": {
          "added": [
            "Double lambda$null$3(GeodeLayerSettings)",
            "Double lambda$null$2(GeodeLayerSettings)",
            "Double lambda$null$1(GeodeLayerSettings)",
            "Double lambda$null$0(GeodeLayerSettings)"
          ],
          "removed": [
            "Double lambda$static$3(GeodeLayerSettings)",
            "Double lambda$static$2(GeodeLayerSettings)",
            "Double lambda$static$1(GeodeLayerSettings)",
            "Double lambda$static$0(GeodeLayerSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Heightmap$Types",
        "differences": {
          "added": [],
          "removed": [
            "Heightmap$Types[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator",
        "differences": {
          "added": [
            "Supplier lambda$null$2(NoiseBasedChunkGenerator)",
            "Long lambda$null$1(NoiseBasedChunkGenerator)",
            "BiomeSource lambda$null$0(NoiseBasedChunkGenerator)",
            "int access$000(NoiseBasedChunkGenerator)",
            "int access$100(NoiseBasedChunkGenerator)",
            "int access$200(NoiseBasedChunkGenerator)",
            "OreVeinifier access$300(NoiseBasedChunkGenerator)",
            "NoodleCavifier access$400(NoiseBasedChunkGenerator)"
          ],
          "removed": [
            "Supplier lambda$static$2(NoiseBasedChunkGenerator)",
            "Long lambda$static$1(NoiseBasedChunkGenerator)",
            "BiomeSource lambda$static$0(NoiseBasedChunkGenerator)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.WorldGenSettings",
        "differences": {
          "added": [
            "Optional lambda$null$0(WorldGenSettings)"
          ],
          "removed": [
            "Optional lambda$static$0(WorldGenSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$5(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Float lambda$null$4(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$3(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Integer lambda$null$2(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$1(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$0(CanyonCarverConfiguration$CanyonShapeConfiguration)"
          ],
          "removed": [
            "Float lambda$static$5(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Float lambda$static$4(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$3(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Integer lambda$static$2(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$1(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$0(CanyonCarverConfiguration$CanyonShapeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CarverConfiguration",
        "differences": {
          "added": [
            "CarverDebugSettings lambda$null$5(CarverConfiguration)",
            "Boolean lambda$null$4(CarverConfiguration)",
            "VerticalAnchor lambda$null$3(CarverConfiguration)",
            "FloatProvider lambda$null$2(CarverConfiguration)",
            "HeightProvider lambda$null$1(CarverConfiguration)",
            "Float lambda$null$0(CarverConfiguration)"
          ],
          "removed": [
            "CarverDebugSettings lambda$static$5(CarverConfiguration)",
            "Boolean lambda$static$4(CarverConfiguration)",
            "VerticalAnchor lambda$static$3(CarverConfiguration)",
            "FloatProvider lambda$static$2(CarverConfiguration)",
            "HeightProvider lambda$static$1(CarverConfiguration)",
            "Float lambda$static$0(CarverConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.FossilFeatureConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$4(FossilFeatureConfiguration)",
            "Supplier lambda$null$3(FossilFeatureConfiguration)",
            "Supplier lambda$null$2(FossilFeatureConfiguration)",
            "List lambda$null$1(FossilFeatureConfiguration)",
            "List lambda$null$0(FossilFeatureConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$4(FossilFeatureConfiguration)",
            "Supplier lambda$static$3(FossilFeatureConfiguration)",
            "Supplier lambda$static$2(FossilFeatureConfiguration)",
            "List lambda$static$1(FossilFeatureConfiguration)",
            "List lambda$static$0(FossilFeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$4(HugeFungusConfiguration)",
            "BlockState lambda$null$3(HugeFungusConfiguration)",
            "BlockState lambda$null$2(HugeFungusConfiguration)",
            "BlockState lambda$null$1(HugeFungusConfiguration)",
            "BlockState lambda$null$0(HugeFungusConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$4(HugeFungusConfiguration)",
            "BlockState lambda$static$3(HugeFungusConfiguration)",
            "BlockState lambda$static$2(HugeFungusConfiguration)",
            "BlockState lambda$static$1(HugeFungusConfiguration)",
            "BlockState lambda$static$0(HugeFungusConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.JigsawFeature",
        "differences": {
          "added": [
            "int access$000(JigsawFeature)",
            "boolean access$100(JigsawFeature)",
            "boolean access$200(JigsawFeature)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SpikeFeature$SpikeCacheLoader",
        "differences": {
          "added": [
            "void <init>(SpikeFeature$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature",
        "differences": {
          "added": [
            "Float lambda$null$1(WeightedConfiguredFeature)",
            "Supplier lambda$null$0(WeightedConfiguredFeature)"
          ],
          "removed": [
            "Float lambda$static$1(WeightedConfiguredFeature)",
            "Supplier lambda$static$0(WeightedConfiguredFeature)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration",
        "differences": {
          "added": [
            "List lambda$null$3(DiskConfiguration)",
            "Integer lambda$null$2(DiskConfiguration)",
            "IntProvider lambda$null$1(DiskConfiguration)",
            "BlockState lambda$null$0(DiskConfiguration)"
          ],
          "removed": [
            "List lambda$static$3(DiskConfiguration)",
            "Integer lambda$static$2(DiskConfiguration)",
            "IntProvider lambda$static$1(DiskConfiguration)",
            "BlockState lambda$static$0(DiskConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$1(EndGatewayConfiguration)",
            "Optional lambda$null$0(EndGatewayConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$1(EndGatewayConfiguration)",
            "Optional lambda$static$0(EndGatewayConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$12(GeodeConfiguration)",
            "Double lambda$null$11(GeodeConfiguration)",
            "Integer lambda$null$10(GeodeConfiguration)",
            "Integer lambda$null$9(GeodeConfiguration)",
            "IntProvider lambda$null$8(GeodeConfiguration)",
            "IntProvider lambda$null$7(GeodeConfiguration)",
            "IntProvider lambda$null$6(GeodeConfiguration)",
            "Boolean lambda$null$5(GeodeConfiguration)",
            "Double lambda$null$4(GeodeConfiguration)",
            "Double lambda$null$3(GeodeConfiguration)",
            "GeodeCrackSettings lambda$null$2(GeodeConfiguration)",
            "GeodeLayerSettings lambda$null$1(GeodeConfiguration)",
            "GeodeBlockSettings lambda$null$0(GeodeConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$12(GeodeConfiguration)",
            "Double lambda$static$11(GeodeConfiguration)",
            "Integer lambda$static$10(GeodeConfiguration)",
            "Integer lambda$static$9(GeodeConfiguration)",
            "IntProvider lambda$static$8(GeodeConfiguration)",
            "IntProvider lambda$static$7(GeodeConfiguration)",
            "IntProvider lambda$static$6(GeodeConfiguration)",
            "Boolean lambda$static$5(GeodeConfiguration)",
            "Double lambda$static$4(GeodeConfiguration)",
            "Double lambda$static$3(GeodeConfiguration)",
            "GeodeCrackSettings lambda$static$2(GeodeConfiguration)",
            "GeodeLayerSettings lambda$static$1(GeodeConfiguration)",
            "GeodeBlockSettings lambda$static$0(GeodeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.GrowingPlantConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$4(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$null$3(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$null$2(GrowingPlantConfiguration)",
            "Direction lambda$null$1(GrowingPlantConfiguration)",
            "SimpleWeightedRandomList lambda$null$0(GrowingPlantConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$4(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$static$3(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$static$2(GrowingPlantConfiguration)",
            "Direction lambda$static$1(GrowingPlantConfiguration)",
            "SimpleWeightedRandomList lambda$static$0(GrowingPlantConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$2(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$1(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$0(HugeMushroomFeatureConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$2(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$static$1(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$static$0(HugeMushroomFeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$8(LargeDripstoneConfiguration)",
            "Integer lambda$null$7(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$6(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$5(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$4(LargeDripstoneConfiguration)",
            "Float lambda$null$3(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$2(LargeDripstoneConfiguration)",
            "IntProvider lambda$null$1(LargeDripstoneConfiguration)",
            "Integer lambda$null$0(LargeDripstoneConfiguration)"
          ],
          "removed": [
            "Float lambda$static$8(LargeDripstoneConfiguration)",
            "Integer lambda$static$7(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$6(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$5(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$4(LargeDripstoneConfiguration)",
            "Float lambda$static$3(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$2(LargeDripstoneConfiguration)",
            "IntProvider lambda$static$1(LargeDripstoneConfiguration)",
            "Integer lambda$static$0(LargeDripstoneConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration",
        "differences": {
          "added": [
            "MineshaftFeature$Type lambda$null$1(MineshaftConfiguration)",
            "Float lambda$null$0(MineshaftConfiguration)"
          ],
          "removed": [
            "MineshaftFeature$Type lambda$static$1(MineshaftConfiguration)",
            "Float lambda$static$0(MineshaftConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$2(OceanRuinConfiguration)",
            "Float lambda$null$1(OceanRuinConfiguration)",
            "OceanRuinFeature$Type lambda$null$0(OceanRuinConfiguration)"
          ],
          "removed": [
            "Float lambda$static$2(OceanRuinConfiguration)",
            "Float lambda$static$1(OceanRuinConfiguration)",
            "OceanRuinFeature$Type lambda$static$0(OceanRuinConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration",
        "differences": {
          "added": [
            "List lambda$null$0(ReplaceBlockConfiguration)"
          ],
          "removed": [
            "List lambda$static$0(ReplaceBlockConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$11(RootSystemConfiguration)",
            "Integer lambda$null$10(RootSystemConfiguration)",
            "BlockStateProvider lambda$null$9(RootSystemConfiguration)",
            "Integer lambda$null$8(RootSystemConfiguration)",
            "Integer lambda$null$7(RootSystemConfiguration)",
            "Integer lambda$null$6(RootSystemConfiguration)",
            "Integer lambda$null$5(RootSystemConfiguration)",
            "BlockStateProvider lambda$null$4(RootSystemConfiguration)",
            "ResourceLocation lambda$null$3(RootSystemConfiguration)",
            "Integer lambda$null$2(RootSystemConfiguration)",
            "Integer lambda$null$1(RootSystemConfiguration)",
            "Supplier lambda$null$0(RootSystemConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$11(RootSystemConfiguration)",
            "Integer lambda$static$10(RootSystemConfiguration)",
            "BlockStateProvider lambda$static$9(RootSystemConfiguration)",
            "Integer lambda$static$8(RootSystemConfiguration)",
            "Integer lambda$static$7(RootSystemConfiguration)",
            "Integer lambda$static$6(RootSystemConfiguration)",
            "Integer lambda$static$5(RootSystemConfiguration)",
            "BlockStateProvider lambda$static$4(RootSystemConfiguration)",
            "ResourceLocation lambda$static$3(RootSystemConfiguration)",
            "Integer lambda$static$2(RootSystemConfiguration)",
            "Integer lambda$static$1(RootSystemConfiguration)",
            "Supplier lambda$static$0(RootSystemConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration",
        "differences": {
          "added": [
            "Optional lambda$null$2(SpikeConfiguration)",
            "List lambda$null$1(SpikeConfiguration)",
            "Boolean lambda$null$0(SpikeConfiguration)"
          ],
          "removed": [
            "Optional lambda$static$2(SpikeConfiguration)",
            "List lambda$static$1(SpikeConfiguration)",
            "Boolean lambda$static$0(SpikeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$8(TreeConfiguration)",
            "Boolean lambda$null$7(TreeConfiguration)",
            "List lambda$null$6(TreeConfiguration)",
            "FeatureSize lambda$null$5(TreeConfiguration)",
            "BlockStateProvider lambda$null$4(TreeConfiguration)",
            "FoliagePlacer lambda$null$3(TreeConfiguration)",
            "BlockStateProvider lambda$null$2(TreeConfiguration)",
            "TrunkPlacer lambda$null$1(TreeConfiguration)",
            "BlockStateProvider lambda$null$0(TreeConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$8(TreeConfiguration)",
            "Boolean lambda$static$7(TreeConfiguration)",
            "List lambda$static$6(TreeConfiguration)",
            "FeatureSize lambda$static$5(TreeConfiguration)",
            "BlockStateProvider lambda$static$4(TreeConfiguration)",
            "FoliagePlacer lambda$static$3(TreeConfiguration)",
            "BlockStateProvider lambda$static$2(TreeConfiguration)",
            "TrunkPlacer lambda$static$1(TreeConfiguration)",
            "BlockStateProvider lambda$static$0(TreeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$2(UnderwaterMagmaConfiguration)",
            "Integer lambda$null$1(UnderwaterMagmaConfiguration)",
            "Integer lambda$null$0(UnderwaterMagmaConfiguration)"
          ],
          "removed": [
            "Float lambda$static$2(UnderwaterMagmaConfiguration)",
            "Integer lambda$static$1(UnderwaterMagmaConfiguration)",
            "Integer lambda$static$0(UnderwaterMagmaConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize",
        "differences": {
          "added": [
            "Integer lambda$null$2(TwoLayersFeatureSize)",
            "Integer lambda$null$1(TwoLayersFeatureSize)",
            "Integer lambda$null$0(TwoLayersFeatureSize)"
          ],
          "removed": [
            "Integer lambda$static$2(TwoLayersFeatureSize)",
            "Integer lambda$static$1(TwoLayersFeatureSize)",
            "Integer lambda$static$0(TwoLayersFeatureSize)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer",
        "differences": {
          "added": [
            "Integer lambda$null$0(MegaJungleFoliagePlacer)"
          ],
          "removed": [
            "Integer lambda$static$0(MegaJungleFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer",
        "differences": {
          "added": [
            "IntProvider lambda$null$0(PineFoliagePlacer)"
          ],
          "removed": [
            "IntProvider lambda$static$0(PineFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer",
        "differences": {
          "added": [
            "IntProvider lambda$null$0(SpruceFoliagePlacer)"
          ],
          "removed": [
            "IntProvider lambda$static$0(SpruceFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$MossStoneSelector",
        "differences": {
          "added": [
            "void <init>(JunglePyramidPiece$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.MineShaftPieces",
        "differences": {
          "added": [
            "Logger access$000()",
            "MineShaftPieces$MineShaftPiece access$100(StructurePiece,StructurePieceAccessor,Random,int,int,int,Direction,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitSimpleRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition",
        "differences": {
          "added": [
            "int access$000(OceanMonumentPieces$RoomDefinition)",
            "boolean access$102(OceanMonumentPieces$RoomDefinition,boolean)",
            "boolean access$100(OceanMonumentPieces$RoomDefinition)",
            "boolean access$902(OceanMonumentPieces$RoomDefinition,boolean)",
            "OceanMonumentPieces$RoomDefinition[] access$1000(OceanMonumentPieces$RoomDefinition)",
            "boolean[] access$1100(OceanMonumentPieces$RoomDefinition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.RuinedPortalPiece$VerticalPlacement",
        "differences": {
          "added": [],
          "removed": [
            "RuinedPortalPiece$VerticalPlacement[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.ShipwreckPieces",
        "differences": {
          "added": [
            "BlockPos access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces",
        "differences": {
          "added": [
            "StructurePiece access$000(StrongholdPieces$StartPiece,StructurePieceAccessor,Random,int,int,int,Direction,int)",
            "Class access$102(Class)",
            "StrongholdPieces$SmoothStoneSelector access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces$SmoothStoneSelector",
        "differences": {
          "added": [
            "void <init>(StrongholdPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType",
        "differences": {
          "added": [],
          "removed": [
            "StrongholdPieces$StrongholdPiece$SmallDoorType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer",
        "differences": {
          "added": [
            "void <init>(MapItemSavedData,Player,MapItemSavedData$1)",
            "Packet access$200(MapItemSavedData$HoldingPlayer,int)",
            "void access$300(MapItemSavedData$HoldingPlayer,int,int)",
            "void access$400(MapItemSavedData$HoldingPlayer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.IntRange",
        "differences": {
          "added": [
            "void <init>(NumberProvider,NumberProvider,IntRange$1)",
            "NumberProvider access$100(IntRange)",
            "NumberProvider access$200(IntRange)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.LootPool",
        "differences": {
          "added": [
            "void <init>(LootPoolEntryContainer[],LootItemCondition[],LootItemFunction[],NumberProvider,NumberProvider,LootPool$1)",
            "NumberProvider access$100(LootPool)",
            "NumberProvider access$200(LootPool)",
            "LootPoolEntryContainer[] access$300(LootPool)",
            "LootItemCondition[] access$400(LootPool)",
            "LootItemFunction[] access$500(LootPool)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.entries.EmptyLootItem",
        "differences": {
          "added": [
            "void <init>(int,int,LootItemCondition[],LootItemFunction[],EmptyLootItem$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer",
        "differences": {
          "added": [
            "BiFunction access$000(LootPoolSingletonContainer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],ApplyExplosionDecay$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation",
        "differences": {
          "added": [
            "void <init>(String,String,CopyNbtFunction$MergeStrategy,CopyNbtFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy$3",
        "differences": {
          "added": [
            "void lambda$null$0(Tag,Tag)"
          ],
          "removed": [
            "void lambda$merge$0(Tag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],Collection,EnchantRandomlyFunction$1)",
            "List access$100(EnchantRandomlyFunction)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],StructureFeature,MapDecoration$Type,byte,int,boolean,ExplorationMapFunction$1)",
            "StructureFeature access$100(ExplorationMapFunction)",
            "MapDecoration$Type access$200(ExplorationMapFunction)",
            "byte access$300(ExplorationMapFunction)",
            "int access$400(ExplorationMapFunction)",
            "boolean access$500(ExplorationMapFunction)",
            "Logger access$600()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],NumberProvider,int,LootingEnchantFunction$1)",
            "NumberProvider access$100(LootingEnchantFunction)",
            "boolean access$200(LootingEnchantFunction)",
            "int access$300(LootingEnchantFunction)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder",
        "differences": {
          "added": [
            "void <init>(boolean,SetBannerPatternFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetContainerContents",
        "differences": {
          "added": [
            "void lambda$null$0(NonNullList,LootContext,LootPoolEntry)",
            "void <init>(LootItemCondition[],List,SetContainerContents$1)",
            "List access$100(SetContainerContents)"
          ],
          "removed": [
            "void lambda$run$0(NonNullList,LootContext,LootPoolEntry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction",
        "differences": {
          "added": [
            "NumberProvider access$000(SetItemDamageFunction)",
            "boolean access$100(SetItemDamageFunction)",
            "void <init>(LootItemCondition[],NumberProvider,boolean,SetItemDamageFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SmeltItemFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],SmeltItemFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],AlternativeLootItemCondition$1)",
            "LootItemCondition[] access$100(AlternativeLootItemCondition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition",
        "differences": {
          "added": [
            "void <init>(Map,LootContext$EntityTarget,EntityHasScoreCondition$1)",
            "Map access$100(EntityHasScoreCondition)",
            "LootContext$EntityTarget access$200(EntityHasScoreCondition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition",
        "differences": {
          "added": [
            "EntityPredicate access$000(LootItemEntityPropertyCondition)",
            "LootContext$EntityTarget access$100(LootItemEntityPropertyCondition)",
            "void <init>(EntityPredicate,LootContext$EntityTarget,LootItemEntityPropertyCondition$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition",
        "differences": {
          "added": [
            "float access$000(LootItemRandomChanceWithLootingCondition)",
            "float access$100(LootItemRandomChanceWithLootingCondition)",
            "void <init>(float,float,LootItemRandomChanceWithLootingCondition$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider",
        "differences": {
          "added": [
            "ResourceLocation access$000(StorageNbtProvider)",
            "void <init>(ResourceLocation,StorageNbtProvider$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.timers.TimerQueue$Event",
        "differences": {
          "added": [
            "void <init>(long,UnsignedLong,String,TimerCallback,TimerQueue$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.Shapes",
        "differences": {
          "added": [
            "boolean lambda$null$2(IndexMerger,BooleanOp,DiscreteVoxelShape,int,DiscreteVoxelShape,int,int,int,int)",
            "boolean lambda$null$1(BooleanOp,DiscreteVoxelShape,int,int,DiscreteVoxelShape,int,int,int,int,int)"
          ],
          "removed": [
            "boolean lambda$joinIsNotEmpty$2(IndexMerger,BooleanOp,DiscreteVoxelShape,int,DiscreteVoxelShape,int,int,int,int)",
            "boolean lambda$joinIsNotEmpty$1(BooleanOp,DiscreteVoxelShape,int,int,DiscreteVoxelShape,int,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.scores.Team$CollisionRule",
        "differences": {
          "added": [],
          "removed": [
            "Team$CollisionRule[] $values()"
          ]
        }
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Client",
        "id": "client-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.blaze3d.font.TrueTypeGlyphProvider$1",
            "XXX.blaze3d.font.package-info",
            "XXX.blaze3d.platform.ClipboardManager",
            "XXX.blaze3d.platform.DisplayData",
            "XXX.blaze3d.platform.GlConst",
            "XXX.blaze3d.platform.GlDebug$1",
            "XXX.blaze3d.platform.GlStateManager$BlendState",
            "XXX.blaze3d.platform.GlStateManager$ColorLogicState",
            "XXX.blaze3d.platform.GlStateManager$CullState",
            "XXX.blaze3d.platform.GlStateManager$DestFactor",
            "XXX.blaze3d.platform.GlStateManager$PolygonOffsetState",
            "XXX.blaze3d.platform.GlStateManager$SourceFactor",
            "XXX.blaze3d.platform.GlStateManager$StencilState",
            "XXX.blaze3d.platform.GlStateManager$Viewport",
            "XXX.blaze3d.platform.InputConstants",
            "XXX.blaze3d.platform.NativeImage$Format",
            "XXX.blaze3d.platform.NativeImage$WriteCallback",
            "XXX.blaze3d.platform.PngInfo$1",
            "XXX.blaze3d.platform.Window$WindowInitFailed",
            "XXX.blaze3d.platform.package-info",
            "XXX.blaze3d.preprocessor.GlslPreprocessor$1",
            "XXX.blaze3d.vertex.PoseStack$1",
            "XXX.blaze3d.vertex.SheetedDecalTextureGenerator",
            "XXX.blaze3d.vertex.VertexBuffer",
            "XXX.blaze3d.vertex.VertexFormat",
            "XXX.blaze3d.vertex.VertexFormat$IndexType",
            "XXX.blaze3d.vertex.VertexFormatElement",
            "XXX.blaze3d.vertex.VertexFormatElement$Usage",
            "XXX.blaze3d.vertex.VertexFormatElement$Usage$SetupState",
            "XXX.blaze3d.vertex.VertexMultiConsumer$Double",
            "XXX.blaze3d.vertex.package-info",
            "XXX.mojang.math.FieldsAreNonnullByDefault",
            "XXX.mojang.math.Matrix4f",
            "XXX.mojang.math.OctahedralGroup",
            "XXX.mojang.math.Quaternion",
            "XXX.mojang.math.Transformation",
            "XXX.mojang.math.Vector3f",
            "XXX.mojang.math.package-info",
            "XXX.mojang.realmsclient.RealmsMainScreen",
            "XXX.mojang.realmsclient.RealmsMainScreen$2",
            "XXX.mojang.realmsclient.RealmsMainScreen$4",
            "XXX.mojang.realmsclient.RealmsMainScreen$CloseButton",
            "XXX.mojang.realmsclient.RealmsMainScreen$HoveredElement",
            "XXX.mojang.realmsclient.RealmsMainScreen$PendingInvitesButton",
            "XXX.mojang.realmsclient.RealmsMainScreen$ServerEntry",
            "XXX.mojang.realmsclient.RealmsMainScreen$TrialEntry",
            "XXX.realmsclient.client.FileDownload",
            "XXX.gui.screens.UploadResult$1",
            "XXX.gui.screens.package-info",
            "XXX.gui.task.NoStartupDelay",
            "XXX.gui.task.RestartDelayCalculator",
            "XXX.mojang.realmsclient.package-info",
            "XXX.realmsclient.util.LevelType",
            "XXX.realmsclient.util.RealmsPersistence$RealmsPersistenceData",
            "XXX.realmsclient.util.RealmsTextureManager$1",
            "XXX.realmsclient.util.RealmsUtil",
            "XXX.realmsclient.util.SkinProcessor",
            "XXX.realmsclient.util.TextRenderingUtils$Line",
            "XXX.realmsclient.util.UploadTokenCache",
            "XXX.realmsclient.util.package-info",
            "XXX.util.task.ConnectTask",
            "XXX.util.task.GetServerDetailsTask",
            "XXX.util.task.OpenServerTask",
            "XXX.util.task.ResettingTemplateWorldTask",
            "XXX.util.task.RestoreTask",
            "XXX.util.task.SwitchSlotTask",
            "XXX.util.task.package-info",
            "net.minecraft.BlockUtil$FoundRectangle",
            "net.minecraft.CharPredicate",
            "net.minecraft.CrashReport",
            "net.minecraft.CrashReportCategory$Entry",
            "net.minecraft.DefaultUncaughtExceptionHandler",
            "net.minecraft.DetectedVersion",
            "net.minecraft.FileUtil",
            "net.minecraft.ReportedException",
            "net.minecraft.SharedConstants",
            "net.minecraft.Util$1",
            "net.minecraft.Util$4",
            "net.minecraft.Util$6",
            "net.minecraft.Util$8",
            "net.minecraft.Util$IdentityStrategy",
            "net.minecraft.Util$OS$1",
            "XXX.minecraft.advancements.Advancement",
            "XXX.advancements.critereon.EntityPredicate$1",
            "XXX.advancements.critereon.EntityPredicate$Composite",
            "XXX.advancements.critereon.EntityTypePredicate$1",
            "XXX.advancements.critereon.EntityTypePredicate$TypePredicate",
            "XXX.advancements.critereon.FilledBucketTrigger$TriggerInstance",
            "XXX.advancements.critereon.FishingRodHookedTrigger",
            "XXX.advancements.critereon.FluidPredicate",
            "XXX.advancements.critereon.ImpossibleTrigger",
            "XXX.advancements.critereon.InventoryChangeTrigger",
            "XXX.advancements.critereon.ItemDurabilityTrigger",
            "XXX.advancements.critereon.ItemPickedUpByEntityTrigger",
            "XXX.advancements.critereon.ItemPredicate",
            "XXX.advancements.critereon.ItemUsedOnBlockTrigger",
            "XXX.advancements.critereon.KilledByCrossbowTrigger",
            "XXX.advancements.critereon.KilledTrigger",
            "XXX.advancements.critereon.LevitationTrigger",
            "XXX.advancements.critereon.LightPredicate",
            "XXX.advancements.critereon.PlayerPredicate$1",
            "XXX.advancements.critereon.PlayerPredicate$AdvancementDonePredicate",
            "XXX.advancements.critereon.PlayerPredicate$Builder",
            "XXX.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance",
            "XXX.advancements.critereon.ShotCrossbowTrigger",
            "XXX.advancements.critereon.SimpleCriterionTrigger",
            "XXX.advancements.critereon.SlideDownBlockTrigger$TriggerInstance",
            "XXX.advancements.critereon.StatePropertiesPredicate$1",
            "XXX.minecraft.client.Camera$NearPlane",
            "XXX.minecraft.client.ClientBrandRetriever",
            "XXX.minecraft.client.CloudStatus",
            "XXX.minecraft.client.CycleOption",
            "XXX.minecraft.client.DebugQueryHandler",
            "XXX.minecraft.client.Game",
            "XXX.minecraft.client.GraphicsStatus",
            "XXX.minecraft.client.GuiMessage",
            "XXX.minecraft.client.KeyMapping",
            "XXX.minecraft.client.KeyboardHandler$1",
            "XXX.minecraft.client.Minecraft",
            "XXX.minecraft.client.Minecraft$ChatStatus",
            "XXX.minecraft.client.Minecraft$ChatStatus$2",
            "XXX.minecraft.client.Minecraft$ChatStatus$4",
            "XXX.minecraft.client.Minecraft$ServerStem",
            "XXX.minecraft.client.NarratorStatus",
            "XXX.minecraft.client.Option$1",
            "XXX.minecraft.client.Options$1",
            "XXX.minecraft.client.Options$3",
            "XXX.minecraft.client.Options$FieldAccess",
            "XXX.minecraft.client.ProgressOption",
            "XXX.minecraft.client.RecipeBookCategories$1",
            "XXX.minecraft.client.ResourceLoadStateTracker$1",
            "XXX.color.block.BlockTintCache$LatestCacheInfo",
            "XXX.color.item.ItemColor",
            "XXX.color.item.package-info",
            "XXX.client.gui.Font$StringRenderOutput",
            "XXX.client.gui.GuiComponent",
            "XXX.client.gui.MapRenderer$1",
            "XXX.gui.components.AbstractSelectionList$1",
            "XXX.gui.components.AbstractSelectionList$SelectionDirection",
            "XXX.gui.components.AbstractSliderButton",
            "XXX.gui.components.BossHealthOverlay",
            "XXX.gui.components.Button",
            "XXX.gui.components.Button$OnTooltip",
            "XXX.gui.components.Checkbox",
            "XXX.gui.components.CommandSuggestions$1",
            "XXX.gui.components.CycleButton$1",
            "XXX.gui.components.CycleButton$OnValueChange",
            "XXX.gui.components.CycleButton$ValueListSupplier",
            "XXX.gui.components.CycleButton$ValueListSupplier$2",
            "XXX.gui.components.DebugScreenOverlay$1",
            "XXX.gui.components.ImageButton",
            "XXX.gui.components.LockIconButton",
            "XXX.gui.components.MultiLineLabel",
            "XXX.gui.components.MultiLineLabel$2",
            "XXX.gui.components.ObjectSelectionList",
            "XXX.gui.components.OptionsList",
            "XXX.gui.components.PlayerTabOverlay",
            "XXX.components.toasts.ToastComponent$ToastInstance",
            "XXX.components.toasts.TutorialToast$Icons",
            "XXX.gui.font.AllMissingGlyphProvider",
            "XXX.gui.font.FontManager$1",
            "XXX.gui.font.FontTexture",
            "XXX.font.providers.BitmapProvider$1",
            "XXX.font.providers.BitmapProvider$Glyph",
            "XXX.font.providers.GlyphProviderBuilderType",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList$Entry",
            "XXX.gui.screens.CreateFlatWorldScreen$1",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemRow",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList$MobRow",
            "XXX.screens.achievement.package-info",
            "XXX.screens.advancements.AdvancementTabType",
            "XXX.screens.advancements.AdvancementWidget",
            "XXX.screens.advancements.AdvancementsScreen",
            "XXX.screens.controls.ControlList",
            "XXX.client.multiplayer.ClientChunkCache$Storage",
            "XXX.client.multiplayer.ClientLevel",
            "XXX.client.multiplayer.ClientLevel$ClientLevelData",
            "XXX.client.multiplayer.ClientLevel$MarkerParticleStatus",
            "XXX.client.multiplayer.ClientPacketListener$1",
            "XXX.client.multiplayer.MultiPlayerGameMode",
            "XXX.client.multiplayer.ServerAddress",
            "XXX.client.particle.AshParticle",
            "XXX.client.particle.AttackSweepParticle",
            "XXX.client.particle.BreakingItemParticle$Provider",
            "XXX.client.particle.BreakingItemParticle$SnowballProvider",
            "XXX.client.particle.BubbleColumnUpParticle$1",
            "XXX.client.particle.BubbleParticle$Provider",
            "XXX.client.particle.BubblePopParticle$1",
            "XXX.client.particle.CampfireSmokeParticle$CosyProvider",
            "XXX.client.particle.CritParticle",
            "XXX.client.particle.DragonBreathParticle$1",
            "XXX.client.particle.DripParticle",
            "XXX.client.particle.EnchantmentTableParticle$1",
            "XXX.client.particle.EnchantmentTableParticle$Provider",
            "XXX.client.particle.EndRodParticle$1",
            "XXX.client.particle.FallingDustParticle$Provider",
            "XXX.client.particle.FireworkParticles$1",
            "XXX.client.particle.FireworkParticles$OverlayParticle",
            "XXX.client.particle.FireworkParticles$SparkProvider",
            "XXX.client.particle.FlameParticle",
            "XXX.client.particle.GlowParticle$ElectricSparkProvider",
            "XXX.client.particle.GlowParticle$ScrapeProvider",
            "XXX.client.particle.GlowParticle$WaxOnProvider",
            "XXX.client.particle.HeartParticle$1",
            "XXX.client.particle.HugeExplosionParticle$1",
            "XXX.client.particle.HugeExplosionSeedParticle",
            "XXX.client.particle.LavaParticle$Provider",
            "XXX.client.particle.MobAppearanceParticle$1",
            "XXX.client.particle.NoteParticle$1",
            "XXX.client.particle.Particle",
            "XXX.client.particle.ParticleEngine",
            "XXX.client.particle.PlayerCloudParticle$Provider",
            "XXX.client.particle.PortalParticle",
            "XXX.client.particle.ReversePortalParticle",
            "XXX.client.particle.SoulParticle$Provider",
            "XXX.client.particle.SpellParticle$1",
            "XXX.client.particle.SpitParticle$Provider",
            "XXX.client.particle.SplashParticle$1",
            "XXX.client.particle.SquidInkParticle$1",
            "XXX.client.particle.SquidInkParticle$Provider",
            "XXX.client.particle.StationaryItemParticle$1",
            "XXX.client.particle.SuspendedParticle$1",
            "XXX.client.particle.SuspendedParticle$SporeBlossomAirProvider",
            "XXX.client.particle.SuspendedParticle$UnderwaterProvider",
            "XXX.client.particle.SuspendedTownParticle",
            "XXX.client.particle.TotemParticle$1",
            "XXX.client.particle.TrackingEmitter",
            "XXX.client.particle.VibrationSignalParticle$1",
            "XXX.client.particle.WakeParticle$Provider",
            "XXX.client.particle.WaterCurrentDownParticle$1",
            "XXX.profiling.metric.MetricSampler$MetricSamplerBuilder",
            "XXX.profiling.metric.MetricSampler$ValueIncreased",
            "XXX.profiling.metric.TaskSamplerBuilder",
            "XXX.client.profiling.package-info",
            "XXX.profiling.storage.package-info",
            "XXX.client.renderer.BlockEntityWithoutLevelRenderer",
            "XXX.client.renderer.CubeMap",
            "XXX.client.renderer.DimensionSpecialEffects$EndEffects",
            "XXX.client.renderer.DimensionSpecialEffects$OverworldEffects",
            "XXX.client.renderer.EffectInstance",
            "XXX.client.renderer.FaceInfo$1",
            "XXX.client.renderer.GpuWarnlistManager$Preparations",
            "XXX.client.renderer.ItemInHandRenderer",
            "XXX.client.renderer.ItemInHandRenderer$HandRenderSelection",
            "XXX.client.renderer.LevelRenderer",
            "XXX.client.renderer.OutlineBufferSource$EntityOutlineGenerator",
            "XXX.client.renderer.PostChain",
            "XXX.client.renderer.Rect2i",
            "XXX.client.renderer.RenderStateShard",
            "XXX.client.renderer.RenderType$1",
            "XXX.client.renderer.RenderType$CompositeState",
            "XXX.client.renderer.RenderType$OutlineProperty",
            "XXX.client.renderer.ScreenEffectRenderer",
            "XXX.client.renderer.ShaderInstance$1",
            "XXX.client.renderer.Sheets$1",
            "XXX.client.renderer.ViewArea",
            "XXX.renderer.block.BlockModelShaper",
            "XXX.renderer.block.BlockRenderDispatcher$1",
            "XXX.renderer.block.ModelBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$AdjacencyInfo",
            "XXX.renderer.block.ModelBlockRenderer$AmbientVertexRemap",
            "XXX.renderer.block.ModelBlockRenderer$Cache$1",
            "XXX.renderer.block.ModelBlockRenderer$SizeInfo",
            "XXX.block.model.BlockElement",
            "XXX.block.model.BlockElement$Deserializer",
            "XXX.block.model.BlockElementFace$Deserializer",
            "XXX.block.model.BlockFaceUV",
            "XXX.block.model.BlockModel",
            "XXX.block.model.BlockModel$GuiLight",
            "XXX.block.model.BlockModelDefinition",
            "XXX.block.model.BlockModelDefinition$Deserializer",
            "XXX.block.model.FaceBakery",
            "XXX.block.model.ItemModelGenerator",
            "XXX.block.model.ItemModelGenerator$Span",
            "XXX.block.model.ItemOverride",
            "XXX.block.model.ItemOverride$Predicate",
            "XXX.block.model.ItemOverrides$1",
            "XXX.renderer.debug.ChunkDebugRenderer$ChunkData",
            "XXX.renderer.debug.DebugRenderer",
            "XXX.renderer.debug.GameEventListenerRenderer",
            "XXX.renderer.debug.GameEventListenerRenderer$TrackedListener",
            "XXX.renderer.debug.GameTestDebugRenderer$Marker",
            "XXX.renderer.debug.GoalSelectorDebugRenderer$DebugGoal",
            "XXX.renderer.debug.HeightMapRenderer$1",
            "XXX.renderer.debug.NeighborsUpdateRenderer",
            "XXX.renderer.debug.RaidDebugRenderer",
            "XXX.renderer.debug.StructureRenderer",
            "XXX.renderer.debug.WaterDebugRenderer",
            "XXX.renderer.debug.package-info",
            "XXX.renderer.entity.AbstractZombieRenderer",
            "XXX.renderer.entity.ArrowRenderer",
            "XXX.renderer.entity.BatRenderer",
            "XXX.renderer.entity.BlazeRenderer",
            "XXX.renderer.entity.CatRenderer",
            "XXX.renderer.entity.ChestedHorseRenderer",
            "XXX.renderer.entity.CodRenderer",
            "XXX.renderer.entity.CreeperRenderer",
            "XXX.renderer.entity.DragonFireballRenderer",
            "XXX.renderer.entity.ElderGuardianRenderer",
            "XXX.renderer.entity.EnderDragonRenderer",
            "XXX.renderer.entity.EndermanRenderer",
            "XXX.renderer.entity.EntityRenderDispatcher",
            "XXX.renderer.entity.EntityRendererProvider",
            "XXX.renderer.entity.EntityRenderers",
            "XXX.renderer.entity.EvokerRenderer",
            "XXX.renderer.entity.ExperienceOrbRenderer",
            "XXX.renderer.entity.FireworkEntityRenderer",
            "XXX.renderer.entity.FoxRenderer",
            "XXX.renderer.entity.GiantMobRenderer",
            "XXX.renderer.entity.GoatRenderer",
            "XXX.renderer.entity.HoglinRenderer",
            "XXX.renderer.entity.HumanoidMobRenderer",
            "XXX.renderer.entity.IllagerRenderer",
            "XXX.renderer.entity.IllusionerRenderer$1",
            "XXX.renderer.entity.ItemEntityRenderer",
            "XXX.renderer.entity.ItemRenderer",
            "XXX.renderer.entity.LightningBoltRenderer",
            "XXX.renderer.entity.LivingEntityRenderer$1",
            "XXX.renderer.entity.LlamaSpitRenderer",
            "XXX.renderer.entity.MinecartRenderer",
            "XXX.renderer.entity.MushroomCowRenderer",
            "XXX.renderer.entity.OcelotRenderer",
            "XXX.renderer.entity.PandaRenderer",
            "XXX.renderer.entity.PhantomRenderer",
            "XXX.renderer.entity.PiglinRenderer",
            "XXX.renderer.entity.PolarBearRenderer",
            "XXX.renderer.entity.RabbitRenderer",
            "XXX.renderer.entity.RenderLayerParent",
            "XXX.renderer.entity.SheepRenderer",
            "XXX.renderer.entity.ShulkerRenderer",
            "XXX.renderer.entity.SkeletonRenderer",
            "XXX.renderer.entity.SnowGolemRenderer",
            "XXX.renderer.entity.SpiderRenderer",
            "XXX.renderer.entity.StrayRenderer",
            "XXX.renderer.entity.ThrownItemRenderer",
            "XXX.renderer.entity.TippableArrowRenderer",
            "XXX.renderer.entity.TntRenderer",
            "XXX.renderer.entity.TurtleRenderer",
            "XXX.renderer.entity.VexRenderer",
            "XXX.renderer.entity.VindicatorRenderer",
            "XXX.renderer.entity.WanderingTraderRenderer",
            "XXX.renderer.entity.WitherBossRenderer",
            "XXX.renderer.entity.WitherSkullRenderer",
            "XXX.renderer.entity.ZoglinRenderer",
            "XXX.renderer.entity.ZombieVillagerRenderer",
            "XXX.entity.layers.BeeStingerLayer",
            "XXX.entity.layers.CarriedBlockLayer",
            "XXX.entity.layers.CreeperPowerLayer",
            "XXX.entity.layers.CustomHeadLayer",
            "XXX.entity.layers.DolphinCarryingItemLayer",
            "XXX.entity.layers.ElytraLayer",
            "XXX.entity.layers.EnergySwirlLayer",
            "XXX.entity.layers.FoxHeldItemLayer",
            "XXX.entity.layers.HorseMarkingLayer",
            "XXX.entity.layers.HumanoidArmorLayer$1",
            "XXX.entity.layers.IronGolemFlowerLayer",
            "XXX.entity.layers.LlamaDecorLayer",
            "XXX.entity.layers.PandaHoldsItemLayer",
            "XXX.entity.layers.PhantomEyesLayer",
            "XXX.entity.layers.RenderLayer",
            "XXX.entity.layers.SheepFurLayer",
            "XXX.entity.layers.SlimeOuterLayer",
            "XXX.entity.layers.SpiderEyesLayer",
            "XXX.entity.layers.StrayClothingLayer",
            "XXX.entity.layers.TropicalFishPatternLayer",
            "XXX.entity.layers.WitchItemLayer",
            "XXX.entity.layers.WolfCollarLayer",
            "XXX.renderer.entity.package-info",
            "XXX.entity.player.package-info",
            "XXX.renderer.item.ItemProperties$1",
            "XXX.renderer.item.ItemProperties$CompassWobble",
            "XXX.renderer.item.package-info",
            "XXX.renderer.texture.AbstractTexture",
            "XXX.renderer.texture.DynamicTexture",
            "XXX.renderer.texture.MipmapGenerator",
            "XXX.renderer.texture.OverlayTexture",
            "XXX.renderer.texture.SimpleTexture",
            "XXX.renderer.texture.Stitcher",
            "XXX.renderer.texture.Stitcher$Region",
            "XXX.renderer.texture.StitcherException",
            "XXX.renderer.texture.TextureAtlas$Preparations",
            "XXX.renderer.texture.TextureAtlasSprite$1",
            "XXX.client.sounds.LoopingAudioStream$1",
            "XXX.client.sounds.LoopingAudioStream$NoCloseBuffer",
            "XXX.client.sounds.SoundBufferLibrary",
            "XXX.client.sounds.SoundEngineExecutor",
            "XXX.client.sounds.SoundManager",
            "XXX.client.sounds.SoundManager$2",
            "XXX.client.sounds.SoundManager$Preparations$1",
            "XXX.client.sounds.Weighted",
            "XXX.client.tutorial.BundleTutorial",
            "XXX.client.tutorial.CraftPlanksTutorialStep",
            "XXX.client.tutorial.MovementTutorialStepInstance",
            "XXX.client.tutorial.PunchTreeTutorialStepInstance",
            "XXX.client.tutorial.Tutorial$1",
            "XXX.commands.arguments.AngleArgument$SingleAngle",
            "XXX.commands.arguments.ComponentArgument",
            "XXX.commands.arguments.DimensionArgument",
            "XXX.commands.arguments.EntityAnchorArgument$Anchor",
            "XXX.commands.arguments.EntityArgument$Serializer",
            "XXX.commands.arguments.GameProfileArgument",
            "XXX.commands.arguments.GameProfileArgument$SelectorResult",
            "XXX.commands.arguments.MessageArgument",
            "XXX.commands.arguments.MessageArgument$Part",
            "XXX.commands.arguments.NbtPathArgument",
            "XXX.commands.arguments.NbtPathArgument$CompoundChildNode",
            "XXX.commands.arguments.NbtPathArgument$MatchElementNode",
            "XXX.commands.arguments.NbtPathArgument$MatchRootObjectNode",
            "XXX.commands.arguments.NbtPathArgument$Node",
            "XXX.commands.arguments.ObjectiveArgument",
            "XXX.commands.arguments.OperationArgument",
            "XXX.commands.arguments.OperationArgument$SimpleOperation",
            "XXX.commands.arguments.RangeArgument",
            "XXX.commands.arguments.RangeArgument$Ints",
            "XXX.commands.arguments.ScoreHolderArgument",
            "XXX.commands.arguments.ScoreHolderArgument$SelectorResult",
            "XXX.commands.arguments.ScoreboardSlotArgument",
            "XXX.commands.arguments.TeamArgument",
            "XXX.commands.arguments.UuidArgument",
            "XXX.arguments.blocks.BlockPredicateArgument",
            "XXX.selector.options.EntitySelectorOptions$1",
            "XXX.selector.options.EntitySelectorOptions$Option",
            "XXX.arguments.selector.package-info",
            "XXX.commands.synchronization.ArgumentSerializer",
            "XXX.commands.synchronization.ArgumentTypes$1",
            "XXX.minecraft.data.BlockFamily$Builder",
            "XXX.minecraft.data.BuiltinRegistries",
            "XXX.minecraft.data.DataProvider",
            "XXX.minecraft.data.Main",
            "XXX.data.advancements.AdventureAdvancements",
            "XXX.data.advancements.NetherAdvancements",
            "XXX.data.advancements.TheEndAdvancements",
            "XXX.data.info.BlockListReport",
            "XXX.data.info.RegistryDumpReport",
            "XXX.data.loot.BlockLoot",
            "XXX.data.loot.EntityLoot",
            "XXX.data.loot.GiftLoot",
            "XXX.data.loot.PiglinBarterLoot",
            "XXX.data.models.BlockModelGenerators",
            "XXX.data.models.BlockModelGenerators$BlockEntityModelGenerator",
            "XXX.data.models.BlockModelGenerators$BlockStateGeneratorSupplier",
            "XXX.data.models.BlockModelGenerators$WoodProvider",
            "XXX.data.models.ModelProvider",
            "XXX.models.blockstates.Condition",
            "XXX.models.blockstates.MultiPartGenerator$1",
            "XXX.models.blockstates.MultiPartGenerator$Entry",
            "XXX.models.blockstates.PropertyDispatch",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.data.worldgen.BastionBridgePools",
            "XXX.data.worldgen.BastionHousingUnitsPools",
            "XXX.data.worldgen.BastionSharedPools",
            "XXX.data.worldgen.BiomeDefaultFeatures",
            "XXX.data.worldgen.DesertVillagePools",
            "XXX.data.worldgen.Features$Configs",
            "XXX.data.worldgen.Features$States",
            "XXX.data.worldgen.PlainVillagePools",
            "XXX.data.worldgen.ProcessorLists",
            "XXX.data.worldgen.SnowyVillagePools",
            "XXX.data.worldgen.SurfaceBuilders",
            "XXX.data.worldgen.VillagePools",
            "XXX.worldgen.biome.Biomes",
            "XXX.worldgen.biome.package-info",
            "XXX.gametest.framework.BeforeBatch",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestSequence",
            "XXX.gametest.framework.GameTestServer",
            "XXX.gametest.framework.GameTestTicker",
            "XXX.gametest.framework.GlobalTestReporter",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.MultipleTestTracker$1",
            "XXX.gametest.framework.StructureUtils",
            "XXX.gametest.framework.TeamcityTestReporter",
            "XXX.gametest.framework.TestCommand",
            "XXX.gametest.framework.TestFunction",
            "XXX.gametest.framework.TestReporter",
            "XXX.minecraft.locale.Language",
            "XXX.minecraft.locale.package-info",
            "XXX.minecraft.nbt.ByteArrayTag$1",
            "XXX.minecraft.nbt.ByteTag$1",
            "XXX.minecraft.nbt.CollectionTag",
            "XXX.minecraft.nbt.CompoundTag$1",
            "XXX.minecraft.nbt.DoubleTag$1",
            "XXX.minecraft.nbt.EndTag$1",
            "XXX.minecraft.nbt.FloatTag$1",
            "XXX.minecraft.nbt.IntArrayTag$1",
            "XXX.minecraft.nbt.IntTag$1",
            "XXX.minecraft.nbt.ListTag",
            "XXX.minecraft.nbt.LongArrayTag",
            "XXX.minecraft.nbt.LongTag",
            "XXX.minecraft.nbt.LongTag$Cache",
            "XXX.minecraft.nbt.NbtAccounter$1",
            "XXX.minecraft.nbt.NbtOps",
            "XXX.minecraft.nbt.NbtOps$NbtRecordBuilder",
            "XXX.minecraft.nbt.NumericTag",
            "XXX.minecraft.nbt.ShortTag$1",
            "XXX.minecraft.nbt.SnbtPrinterTagVisitor",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.Tag",
            "XXX.minecraft.nbt.TagType",
            "XXX.minecraft.nbt.TagTypes",
            "XXX.minecraft.nbt.TextComponentTagVisitor",
            "XXX.minecraft.network.CipherBase",
            "XXX.minecraft.network.CipherEncoder",
            "XXX.minecraft.network.CompressionEncoder",
            "XXX.minecraft.network.Connection$1",
            "XXX.minecraft.network.Connection$PacketHolder",
            "XXX.minecraft.network.ConnectionProtocol$1",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action$3",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action$5",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSectionBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundSetActionBarTextPacket",
            "XXX.protocol.game.ClientboundSetBorderLerpSizePacket",
            "XXX.protocol.game.ClientboundSetBorderWarningDelayPacket",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket$Parameters",
            "XXX.protocol.game.ClientboundSetSubtitleTextPacket",
            "XXX.protocol.game.ClientboundSetTitleTextPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundInteractPacket$Handler",
            "XXX.protocol.game.ServerboundInteractPacket$InteractionAtLocationAction",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMovePlayerPacket$StatusOnly",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.minecraft.realms.RealmsServerAddress",
            "XXX.minecraft.realms.RepeatedNarrator$Params",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.package-info",
            "XXX.minecraft.resources.RegistryDataPackCodec",
            "XXX.minecraft.resources.RegistryLookupCodec",
            "XXX.minecraft.resources.RegistryReadOps$1",
            "XXX.minecraft.server.ChainedJsonException$Entry",
            "XXX.minecraft.server.DebugLoggedPrintStream",
            "XXX.minecraft.server.LoggedPrintStream",
            "XXX.minecraft.server.Main$1",
            "XXX.minecraft.server.MinecraftServer$1",
            "XXX.minecraft.server.PlayerAdvancements",
            "XXX.minecraft.server.RunningOnDifferentThreadException",
            "XXX.minecraft.server.ServerFunctionLibrary",
            "XXX.minecraft.server.ServerFunctionManager$1",
            "XXX.server.commands.AdvancementCommands$Action",
            "XXX.server.commands.AdvancementCommands$Action$2",
            "XXX.server.commands.AttributeCommand",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.SpreadPlayersCommand$Position",
            "XXX.server.commands.StopSoundCommand",
            "XXX.server.commands.TagCommand",
            "XXX.server.commands.TeamMsgCommand",
            "XXX.server.commands.TeleportCommand$LookAt",
            "XXX.server.commands.TimeCommand",
            "XXX.server.commands.TriggerCommand",
            "XXX.server.commands.WhitelistCommand",
            "XXX.commands.data.BlockDataAccessor",
            "XXX.commands.data.DataAccessor",
            "XXX.commands.data.DataCommands$DataManipulator",
            "XXX.commands.data.DataCommands$DataProvider",
            "XXX.commands.data.EntityDataAccessor$1",
            "XXX.commands.data.StorageDataAccessor$1",
            "XXX.server.commands.package-info",
            "XXX.server.dedicated.DedicatedServer",
            "XXX.server.dedicated.DedicatedServerProperties",
            "XXX.server.dedicated.ServerWatchdog",
            "XXX.server.dedicated.Settings",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Release",
            "XXX.server.level.ColumnPos",
            "XXX.server.level.DistanceManager",
            "XXX.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerLevel$EntityCallbacks",
            "XXX.server.level.ServerPlayer$1",
            "XXX.server.level.ServerPlayer$3",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerGamePacketListenerImpl$2",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.server.network.ServerStatusPacketListenerImpl",
            "XXX.server.network.TextFilter$1",
            "XXX.server.network.TextFilterClient",
            "XXX.packs.resources.ProfiledReloadInstance$1",
            "XXX.packs.resources.ReloadInstance",
            "XXX.packs.resources.Resource",
            "XXX.packs.resources.ResourceManager$Empty",
            "XXX.packs.resources.ResourceProvider",
            "XXX.packs.resources.SimplePreparableReloadListener",
            "XXX.packs.resources.SimpleReloadInstance$1",
            "XXX.packs.resources.SimpleReloadableResourceManager",
            "XXX.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure",
            "XXX.packs.resources.package-info",
            "XXX.server.players.GameProfileCache",
            "XXX.server.players.GameProfileCache$GameProfileInfo",
            "XXX.server.players.IpBanListEntry",
            "XXX.server.players.OldUsersConverter$1",
            "XXX.server.players.OldUsersConverter$3",
            "XXX.server.players.OldUsersConverter$5",
            "XXX.server.players.PlayerList",
            "XXX.server.players.ServerOpList",
            "XXX.server.players.SleepStatus",
            "XXX.server.players.StoredUserList",
            "XXX.server.players.UserBanListEntry",
            "XXX.server.players.UserWhiteListEntry",
            "XXX.server.rcon.NetworkDataOutputStream",
            "XXX.server.rcon.RconConsoleSource",
            "XXX.rcon.thread.GenericThread",
            "XXX.rcon.thread.QueryThreadGs4$RequestChallenge",
            "XXX.rcon.thread.RconThread",
            "XXX.minecraft.sounds.Music",
            "XXX.minecraft.sounds.SoundEvent",
            "XXX.minecraft.sounds.SoundSource",
            "XXX.minecraft.stats.RecipeBook",
            "XXX.minecraft.stats.RecipeBookSettings$TypeSettings",
            "XXX.minecraft.stats.ServerStatsCounter",
            "XXX.minecraft.stats.StatFormatter",
            "XXX.minecraft.stats.Stats",
            "XXX.minecraft.stats.package-info",
            "XXX.minecraft.tags.EntityTypeTags",
            "XXX.minecraft.tags.GameEventTags",
            "XXX.minecraft.tags.SerializationTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.Tag$OptionalTagEntry",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.tags.TagCollection$NetworkPayload",
            "XXX.minecraft.tags.TagContainer$1",
            "XXX.minecraft.tags.TagContainer$CollectionConsumer",
            "XXX.minecraft.tags.TagManager",
            "XXX.minecraft.util.CsvOutput$1",
            "XXX.minecraft.util.CubicSampler",
            "XXX.minecraft.util.DebugBuffer",
            "XXX.minecraft.util.DirectoryLock$LockException",
            "XXX.minecraft.util.ExtraCodecs",
            "XXX.minecraft.util.FastColor",
            "XXX.minecraft.util.FormattedCharSequence",
            "XXX.minecraft.util.FrameTimer",
            "XXX.minecraft.util.HeapDumper",
            "XXX.minecraft.util.SortedArraySet$ArrayIterator",
            "XXX.minecraft.util.StringRepresentable",
            "XXX.minecraft.util.StringRepresentable$2",
            "XXX.minecraft.util.ThreadingDetector",
            "XXX.minecraft.util.Tuple",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.datafix.fixes.AbstractArrowPickupFix",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.datafix.fixes.BitStorageAlignFix",
            "XXX.datafix.fixes.BlockEntityBlockStateFix",
            "XXX.datafix.fixes.BlockEntityIdFix",
            "XXX.datafix.fixes.BlockEntityKeepPacked",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix",
            "XXX.datafix.fixes.BlockEntityUUIDFix",
            "XXX.datafix.fixes.BlockRenameFix",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw",
            "XXX.datafix.fixes.BlockStateData",
            "XXX.datafix.fixes.CatTypeFix",
            "XXX.datafix.fixes.ChunkBiomeFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$DataLayer",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Section",
            "XXX.datafix.fixes.ChunkStatusFix",
            "XXX.datafix.fixes.ChunkStructuresTemplateRenameFix",
            "XXX.datafix.fixes.ColorlessShulkerEntityFix",
            "XXX.datafix.fixes.EntityArmorStandSilentFix",
            "XXX.datafix.fixes.EntityCatSplitFix",
            "XXX.datafix.fixes.EntityCustomNameToComponentFix",
            "XXX.datafix.fixes.EntityEquipmentToArmorAndHandFix",
            "XXX.datafix.fixes.EntityHorseSaddleFix",
            "XXX.datafix.fixes.EntityIdFix",
            "XXX.datafix.fixes.EntityMinecartIdentifiersFix",
            "XXX.datafix.fixes.EntityPaintingMotiveFix",
            "XXX.datafix.fixes.EntityPufferfishRenameFix",
            "XXX.datafix.fixes.EntityRedundantChanceTagsFix",
            "XXX.datafix.fixes.EntityRidingToPassengersFix",
            "XXX.datafix.fixes.EntityShulkerRotationFix",
            "XXX.datafix.fixes.EntityStringUuidFix",
            "XXX.datafix.fixes.EntityTippedArrowFix",
            "XXX.datafix.fixes.EntityWolfColorFix",
            "XXX.datafix.fixes.EntityZombieVillagerTypeFix",
            "XXX.datafix.fixes.ForcePoiRebuild",
            "XXX.datafix.fixes.GossipUUIDFix",
            "XXX.datafix.fixes.IglooMetadataRemovalFix",
            "XXX.datafix.fixes.ItemCustomNameToComponentFix",
            "XXX.datafix.fixes.ItemLoreFix",
            "XXX.datafix.fixes.ItemRenameFix",
            "XXX.datafix.fixes.ItemShulkerBoxColorFix",
            "XXX.datafix.fixes.ItemStackEnchantmentNamesFix",
            "XXX.datafix.fixes.ItemStackSpawnEggFix",
            "XXX.datafix.fixes.ItemStackUUIDFix",
            "XXX.datafix.fixes.ItemWrittenBookPagesStrictJsonFix",
            "XXX.datafix.fixes.JigsawRotationFix",
            "XXX.datafix.fixes.LeavesFix$LeavesSection",
            "XXX.datafix.fixes.LevelDataGeneratorOptionsFix",
            "XXX.datafix.fixes.LevelUUIDFix",
            "XXX.datafix.fixes.MemoryExpiryDataFix",
            "XXX.datafix.fixes.MobSpawnerEntityIdentifiersFix",
            "XXX.datafix.fixes.NewVillageFix",
            "XXX.datafix.fixes.ObjectiveRenderTypeFix",
            "XXX.datafix.fixes.OminousBannerRenameFix",
            "XXX.datafix.fixes.OptionsForceVBOFix",
            "XXX.datafix.fixes.OptionsKeyTranslationFix",
            "XXX.datafix.fixes.OptionsRenameFieldFix",
            "XXX.datafix.fixes.PoiTypeRename",
            "XXX.datafix.fixes.RecipesRenameFix",
            "XXX.datafix.fixes.RedstoneWireConnectionsFix",
            "XXX.datafix.fixes.RemoveGolemGossipFix",
            "XXX.datafix.fixes.RenamedCoralFansFix",
            "XXX.datafix.fixes.ReorganizePoi",
            "XXX.datafix.fixes.SavedDataUUIDFix",
            "XXX.datafix.fixes.SimpleEntityRenameFix",
            "XXX.datafix.fixes.StatsCounterFix",
            "XXX.datafix.fixes.StriderGravityFix",
            "XXX.datafix.fixes.TeamDisplayNameFix",
            "XXX.datafix.fixes.TrappedChestBlockEntityFix$TrappedChestSection",
            "XXX.datafix.fixes.VillagerFollowRangeFix",
            "XXX.datafix.fixes.VillagerTradeFix",
            "XXX.datafix.fixes.WorldGenSettingsFix",
            "XXX.datafix.fixes.WriteAndReadFix",
            "XXX.datafix.fixes.package-info",
            "XXX.datafix.schemas.NamespacedSchema",
            "XXX.datafix.schemas.V100",
            "XXX.datafix.schemas.V1022",
            "XXX.datafix.schemas.V107",
            "XXX.datafix.schemas.V135",
            "XXX.datafix.schemas.V1451",
            "XXX.datafix.schemas.V1451_2",
            "XXX.datafix.schemas.V1451_4",
            "XXX.datafix.schemas.V1451_6",
            "XXX.datafix.schemas.V1460",
            "XXX.datafix.schemas.V1466",
            "XXX.datafix.schemas.V1481",
            "XXX.datafix.schemas.V1486",
            "XXX.datafix.schemas.V1800",
            "XXX.datafix.schemas.V1904",
            "XXX.datafix.schemas.V1909",
            "XXX.datafix.schemas.V1928",
            "XXX.datafix.schemas.V1931",
            "XXX.datafix.schemas.V2501",
            "XXX.datafix.schemas.V2505",
            "XXX.datafix.schemas.V2519",
            "XXX.datafix.schemas.V2551",
            "XXX.datafix.schemas.V2571",
            "XXX.datafix.schemas.V2686",
            "XXX.datafix.schemas.V2704",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$1",
            "XXX.util.random.WeightedEntry$IntrusiveBase",
            "XXX.util.random.WeightedRandom",
            "XXX.util.random.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.valueproviders.BiasedToBottomInt",
            "XXX.util.valueproviders.ClampedNormalFloat",
            "XXX.util.valueproviders.ConstantInt",
            "XXX.util.valueproviders.FloatProviderType",
            "XXX.util.valueproviders.IntProviderType",
            "XXX.util.valueproviders.UniformFloat",
            "XXX.util.valueproviders.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.MenuProvider",
            "XXX.minecraft.world.SimpleContainer",
            "XXX.minecraft.world.Snooper",
            "XXX.minecraft.world.SnooperPopulator",
            "XXX.minecraft.world.WorldlyContainerHolder",
            "XXX.world.damagesource.CombatEntry",
            "XXX.world.damagesource.CombatTracker",
            "XXX.world.damagesource.EntityDamageSource",
            "XXX.world.damagesource.package-info",
            "XXX.world.effect.AttackDamageMobEffect",
            "XXX.world.effect.InstantenousMobEffect",
            "XXX.world.effect.MobEffectCategory",
            "XXX.world.effect.MobEffectUtil",
            "XXX.world.effect.MobEffects$1",
            "XXX.world.entity.AgeableMob",
            "XXX.world.entity.AreaEffectCloud",
            "XXX.world.entity.Entity$1",
            "XXX.world.entity.Entity$MovementEmission",
            "XXX.world.entity.EntityDimensions",
            "XXX.world.entity.EntitySelector",
            "XXX.world.entity.EntityType",
            "XXX.world.entity.EntityType$Builder",
            "XXX.world.entity.EquipmentSlot",
            "XXX.world.entity.ExperienceOrb",
            "XXX.world.entity.GlowSquid",
            "XXX.world.entity.ItemBasedSteering",
            "XXX.world.entity.LightningBolt",
            "XXX.world.entity.LivingEntity$1",
            "XXX.world.entity.Mob",
            "XXX.world.entity.MobCategory",
            "XXX.world.entity.MobType",
            "XXX.world.entity.NeutralMob",
            "XXX.world.entity.PathfinderMob",
            "XXX.world.entity.PlayerRideableJumping",
            "XXX.world.entity.PowerableMob",
            "XXX.world.entity.Saddleable",
            "XXX.world.entity.SlotAccess",
            "XXX.world.entity.SlotAccess$2",
            "XXX.world.entity.SpawnGroupData",
            "XXX.world.entity.SpawnPlacements$Data",
            "XXX.world.entity.SpawnPlacements$Type",
            "XXX.entity.ai.Brain",
            "XXX.entity.ai.Brain$MemoryValue",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AcquirePoi$JitteredLinearRetry",
            "XXX.ai.behavior.AnimalPanic",
            "XXX.ai.behavior.BabyFollowAdult",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.CrossbowAttack",
            "XXX.ai.behavior.DismountOrSkipMounting",
            "XXX.ai.behavior.EntityTracker",
            "XXX.ai.behavior.FollowTemptation",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.ShufflingList$WeightedEntry",
            "XXX.ai.behavior.SleepInBed",
            "XXX.ai.behavior.StartAttacking",
            "XXX.ai.behavior.StopAttackingIfTargetInvalid",
            "XXX.ai.behavior.StrollAroundPoi",
            "XXX.ai.behavior.StrollToPoiList",
            "XXX.ai.behavior.TradeWithVillager",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WorkAtComposter",
            "XXX.ai.behavior.YieldJobSite",
            "XXX.ai.control.BodyRotationControl",
            "XXX.ai.control.FlyingMoveControl",
            "XXX.ai.control.LookControl",
            "XXX.ai.control.MoveControl$Operation",
            "XXX.ai.control.SmoothSwimmingMoveControl",
            "XXX.ai.goal.AvoidEntityGoal",
            "XXX.ai.goal.BoatGoals",
            "XXX.ai.goal.BreathAirGoal",
            "XXX.ai.goal.CatLieOnBedGoal",
            "XXX.ai.goal.DolphinJumpGoal",
            "XXX.ai.goal.EatBlockGoal",
            "XXX.ai.goal.FloatGoal",
            "XXX.ai.goal.FollowFlockLeaderGoal",
            "XXX.ai.goal.FollowOwnerGoal",
            "XXX.ai.goal.Goal",
            "XXX.ai.goal.GoalSelector",
            "XXX.ai.goal.GoalSelector$2",
            "XXX.ai.goal.InteractGoal",
            "XXX.ai.goal.LandOnOwnersShoulderGoal",
            "XXX.ai.goal.LlamaFollowCaravanGoal",
            "XXX.ai.goal.LookAtTradingPlayerGoal",
            "XXX.ai.goal.MoveBackToVillageGoal",
            "XXX.ai.goal.MoveToBlockGoal",
            "XXX.ai.goal.MoveTowardsTargetGoal",
            "XXX.ai.goal.OfferFlowerGoal",
            "XXX.ai.goal.PanicGoal",
            "XXX.ai.goal.RandomLookAroundGoal",
            "XXX.ai.goal.RandomSwimmingGoal",
            "XXX.ai.goal.RangedBowAttackGoal",
            "XXX.ai.goal.RangedCrossbowAttackGoal$CrossbowState",
            "XXX.ai.goal.RestrictSunGoal",
            "XXX.ai.goal.SitWhenOrderedToGoal",
            "XXX.ai.goal.SwellGoal",
            "XXX.ai.goal.TradeWithPlayerGoal",
            "XXX.ai.goal.UseItemGoal",
            "XXX.ai.goal.WaterAvoidingRandomStrollGoal",
            "XXX.ai.goal.ZombieAttackGoal",
            "XXX.goal.target.DefendVillageTargetGoal",
            "XXX.goal.target.NearestAttackableTargetGoal",
            "XXX.goal.target.NearestHealableRaiderTargetGoal",
            "XXX.goal.target.OwnerHurtByTargetGoal",
            "XXX.goal.target.ResetUniversalAngerTargetGoal",
            "XXX.goal.target.package-info",
            "XXX.ai.gossip.GossipContainer$1",
            "XXX.entity.animal.Dolphin$DolphinSwimToTreasureGoal",
            "XXX.entity.animal.Dolphin$PlayWithItemsGoal",
            "XXX.entity.animal.Fox",
            "XXX.entity.animal.Squid$SquidFleeGoal",
            "XXX.entity.animal.TropicalFish",
            "XXX.entity.animal.Turtle$TurtleBreedGoal",
            "XXX.entity.animal.Turtle$TurtleGoToWaterGoal",
            "XXX.entity.animal.Turtle$TurtleMoveControl",
            "XXX.entity.animal.Turtle$TurtlePathNavigation",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.animal.axolotl.Axolotl",
            "XXX.animal.axolotl.Axolotl$AxolotlLookControl",
            "XXX.animal.axolotl.Axolotl$AxolotlPathNavigation",
            "XXX.animal.axolotl.AxolotlAi",
            "XXX.animal.axolotl.ValidatePlayDead",
            "XXX.animal.goat.Goat",
            "XXX.animal.horse.Llama$1",
            "XXX.animal.horse.Llama$LlamaGroupData",
            "XXX.animal.horse.Markings",
            "XXX.animal.horse.SkeletonHorse",
            "XXX.animal.horse.TraderLlama",
            "XXX.animal.horse.Variant",
            "XXX.animal.horse.package-info",
            "XXX.entity.boss.EnderDragonPart",
            "XXX.boss.enderdragon.EnderDragon",
            "XXX.enderdragon.phases.AbstractDragonPhaseInstance",
            "XXX.enderdragon.phases.DragonChargePlayerPhase",
            "XXX.enderdragon.phases.DragonHoldingPatternPhase",
            "XXX.enderdragon.phases.DragonLandingApproachPhase",
            "XXX.enderdragon.phases.DragonPhaseInstance",
            "XXX.enderdragon.phases.DragonSittingFlamingPhase",
            "XXX.enderdragon.phases.DragonStrafePlayerPhase",
            "XXX.enderdragon.phases.EnderDragonPhase",
            "XXX.enderdragon.phases.package-info",
            "XXX.boss.wither.WitherBoss",
            "XXX.boss.wither.package-info",
            "XXX.entity.decoration.ArmorStand$1",
            "XXX.entity.decoration.HangingEntity",
            "XXX.entity.decoration.ItemFrame",
            "XXX.entity.decoration.ItemFrame$2",
            "XXX.entity.decoration.Motive",
            "XXX.entity.decoration.package-info",
            "XXX.entity.item.ItemEntity",
            "XXX.entity.item.package-info",
            "XXX.entity.monster.AbstractIllager$IllagerArmPose",
            "XXX.entity.monster.AbstractSkeleton",
            "XXX.entity.monster.Blaze",
            "XXX.entity.monster.CaveSpider",
            "XXX.entity.monster.CrossbowAttackMob",
            "XXX.entity.monster.Drowned$DrownedAttackGoal",
            "XXX.entity.monster.Drowned$DrownedGoToWaterGoal",
            "XXX.entity.monster.Drowned$DrownedSwimUpGoal",
            "XXX.entity.monster.ElderGuardian",
            "XXX.entity.monster.EnderMan$EndermanFreezeWhenLookedAt",
            "XXX.entity.monster.EnderMan$EndermanLookForPlayerGoal",
            "XXX.entity.monster.Endermite",
            "XXX.entity.monster.Evoker",
            "XXX.entity.monster.Illusioner$1",
            "XXX.entity.monster.Illusioner$IllusionerMirrorSpellGoal",
            "XXX.entity.monster.Monster",
            "XXX.entity.monster.PatrollingMonster$LongDistancePatrolGoal",
            "XXX.entity.monster.Phantom$1",
            "XXX.entity.monster.Ravager$RavagerMeleeAttackGoal",
            "XXX.entity.monster.Ravager$RavagerNodeEvaluator",
            "XXX.entity.monster.Shulker$1",
            "XXX.entity.monster.Strider$1",
            "XXX.entity.monster.Strider$StriderPathNavigation",
            "XXX.entity.monster.Vex$VexChargeAttackGoal",
            "XXX.entity.monster.Vex$VexMoveControl",
            "XXX.entity.monster.Vindicator",
            "XXX.entity.monster.Vindicator$VindicatorJohnnyAttackGoal",
            "XXX.entity.monster.Witch",
            "XXX.entity.monster.Zoglin",
            "XXX.entity.monster.Zombie$ZombieAttackTurtleEggGoal",
            "XXX.entity.monster.ZombieVillager",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspisciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.entity.player.Player$BedSleepingProblem",
            "XXX.entity.player.StackedContents",
            "XXX.entity.player.package-info",
            "XXX.entity.projectile.AbstractArrow$1",
            "XXX.entity.projectile.AbstractHurtingProjectile",
            "XXX.entity.projectile.DragonFireball",
            "XXX.entity.projectile.EyeOfEnder",
            "XXX.entity.projectile.FireworkRocketEntity",
            "XXX.entity.projectile.FishingHook$1",
            "XXX.entity.projectile.FishingHook$OpenWaterType",
            "XXX.entity.projectile.LargeFireball",
            "XXX.entity.projectile.Projectile",
            "XXX.entity.projectile.ShulkerBullet",
            "XXX.entity.projectile.Snowball",
            "XXX.entity.projectile.ThrowableItemProjectile",
            "XXX.entity.projectile.ThrownEgg",
            "XXX.entity.projectile.ThrownExperienceBottle",
            "XXX.entity.projectile.ThrownTrident",
            "XXX.entity.projectile.package-info",
            "XXX.entity.raid.Raid$1",
            "XXX.entity.raid.Raid$RaiderType",
            "XXX.entity.raid.Raider$HoldGroundAttackGoal",
            "XXX.entity.raid.Raider$RaiderCelebration",
            "XXX.entity.raid.Raids",
            "XXX.entity.schedule.Activity",
            "XXX.entity.schedule.Schedule",
            "XXX.entity.schedule.ScheduleBuilder$ActivityTransition",
            "XXX.entity.schedule.package-info",
            "XXX.entity.vehicle.AbstractMinecart$1",
            "XXX.entity.vehicle.AbstractMinecartContainer",
            "XXX.entity.vehicle.Boat",
            "XXX.entity.vehicle.Boat$Status",
            "XXX.entity.vehicle.DismountHelper",
            "XXX.entity.vehicle.MinecartChest",
            "XXX.entity.vehicle.MinecartCommandBlock$MinecartCommandBase",
            "XXX.entity.vehicle.MinecartHopper",
            "XXX.entity.vehicle.MinecartSpawner$1",
            "XXX.entity.vehicle.package-info",
            "XXX.world.food.FoodData",
            "XXX.world.food.FoodProperties$1",
            "XXX.world.item.ItemCooldowns$1",
            "XXX.world.item.ItemFrameItem",
            "XXX.world.item.ItemStack",
            "XXX.world.item.ItemUtils",
            "XXX.world.item.KnowledgeBookItem",
            "XXX.world.item.LingeringPotionItem",
            "XXX.world.item.MilkBucketItem",
            "XXX.world.item.MinecartItem$1",
            "XXX.world.item.NameTagItem",
            "XXX.world.item.PlayerHeadItem",
            "XXX.world.item.ProjectileWeaponItem",
            "XXX.world.item.RecordItem",
            "XXX.world.item.ScaffoldingBlockItem",
            "XXX.world.item.ShearsItem",
            "XXX.world.item.ShovelItem",
            "XXX.world.item.SimpleFoiledItem",
            "XXX.world.item.SolidBucketItem",
            "XXX.world.item.SpectralArrowItem",
            "XXX.world.item.SpyglassItem",
            "XXX.world.item.SuspiciousStewItem",
            "XXX.world.item.ThrowablePotionItem",
            "XXX.world.item.TieredItem",
            "XXX.world.item.TippedArrowItem",
            "XXX.world.item.TooltipFlag$Default",
            "XXX.world.item.UseAnim",
            "XXX.world.item.WaterLilyBlockItem",
            "XXX.world.item.WritableBookItem",
            "XXX.item.alchemy.Potion",
            "XXX.item.alchemy.PotionBrewing$Mix",
            "XXX.item.alchemy.Potions",
            "XXX.item.context.BlockPlaceContext",
            "XXX.item.context.DirectionalPlaceContext$1",
            "XXX.item.context.package-info",
            "XXX.item.crafting.ArmorDyeRecipe",
            "XXX.item.crafting.BlastingRecipe",
            "XXX.item.crafting.CampfireCookingRecipe",
            "XXX.item.crafting.CustomRecipe",
            "XXX.item.crafting.FireworkStarFadeRecipe",
            "XXX.item.crafting.Ingredient",
            "XXX.world.level.ChunkTickList$ScheduledTick",
            "XXX.world.level.ClipContext",
            "XXX.world.level.ClipContext$Fluid",
            "XXX.world.level.CollisionGetter",
            "XXX.world.level.ColorResolver",
            "XXX.world.level.CustomSpawner",
            "XXX.world.level.EmptyBlockGetter",
            "XXX.world.level.EntityBasedExplosionDamageCalculator",
            "XXX.world.level.Explosion",
            "XXX.world.level.ExplosionDamageCalculator",
            "XXX.world.level.ForcedChunksSavedData",
            "XXX.world.level.GameRules$1",
            "XXX.level.biome.BiomeGenerationSettings$Builder",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.BiomeSpecialEffects",
            "XXX.level.biome.MobSpawnSettings$1",
            "XXX.level.biome.MobSpawnSettings$MobSpawnCost",
            "XXX.level.biome.MultiNoiseBiomeSource",
            "XXX.block.entity.BeehiveBlockEntity$1",
            "XXX.block.entity.BeehiveBlockEntity$BeeReleaseStatus",
            "XXX.block.entity.BellBlockEntity$ResonationEndAction",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.ChestLidController",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.ContainerOpenersCounter",
            "XXX.block.entity.DispenserBlockEntity",
            "XXX.block.entity.EnchantmentTableBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity$1",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.SculkSensorBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$1",
            "XXX.block.entity.SignBlockEntity",
            "XXX.block.entity.SmokerBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity$1",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.block.state.StateHolder",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.state.properties.AttachFace",
            "XXX.state.properties.BedPart",
            "XXX.state.properties.BlockStateProperties",
            "XXX.state.properties.ChestType",
            "XXX.state.properties.DirectionProperty",
            "XXX.state.properties.DoubleBlockHalf",
            "XXX.state.properties.EnumProperty",
            "XXX.state.properties.IntegerProperty",
            "XXX.state.properties.PistonType",
            "XXX.state.properties.Property$1",
            "XXX.level.border.WorldBorder$1",
            "XXX.level.border.WorldBorder$MovingBorderExtent",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.BulkSectionAccess",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.EmptyLevelChunk$EmptyChunkBiomeContainer",
            "XXX.level.chunk.GlobalPalette",
            "XXX.level.chunk.ImposterProtoChunk",
            "XXX.level.chunk.LevelChunk$1",
            "XXX.level.chunk.LevelChunk$EntityCreationType",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.entity.PersistentEntitySectionManager$1",
            "XXX.level.entity.PersistentEntitySectionManager$ChunkLoadStatus",
            "XXX.level.entity.TransientEntitySectionManager$1",
            "XXX.levelgen.feature.LargeDripstoneFeature$LargeDripstone",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoiseEffect",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.levelgen.feature.ReplaceBlobsFeature",
            "XXX.levelgen.feature.RootSystemFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$FeatureStart",
            "XXX.levelgen.feature.ScatteredOreFeature",
            "XXX.levelgen.feature.SeagrassFeature",
            "XXX.levelgen.feature.ShipwreckFeature$FeatureStart",
            "XXX.levelgen.feature.SimpleRandomSelectorFeature",
            "XXX.levelgen.feature.SnowAndFreezeFeature",
            "XXX.levelgen.feature.SpikeFeature$1",
            "XXX.feature.configurations.OreConfiguration$1",
            "XXX.feature.configurations.OreConfiguration$TargetBlockState",
            "XXX.feature.configurations.RandomBooleanFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.BendingTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.levelgen.heightproviders.BiasedToBottomHeight",
            "XXX.levelgen.heightproviders.HeightProvider",
            "XXX.levelgen.heightproviders.TrapezoidHeight",
            "XXX.levelgen.heightproviders.VeryBiasedToBottomHeight",
            "XXX.level.levelgen.package-info",
            "XXX.levelgen.placement.CarvingMaskDecoratorConfiguration",
            "XXX.levelgen.placement.CaveSurface",
            "XXX.levelgen.placement.ChanceDecorator",
            "XXX.levelgen.placement.ConfiguredDecorator",
            "XXX.levelgen.placement.CountNoiseDecorator",
            "XXX.levelgen.placement.DarkOakTreePlacementDecorator",
            "XXX.levelgen.placement.DecoratedDecoratorConfiguration",
            "XXX.levelgen.placement.EndGatewayPlacementDecorator",
            "XXX.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration",
            "XXX.levelgen.placement.HeightmapDoubleDecorator",
            "XXX.levelgen.placement.LakeLavaPlacementDecorator",
            "XXX.levelgen.placement.NoiseCountFactorDecoratorConfiguration",
            "XXX.levelgen.placement.RangeDecorator",
            "XXX.levelgen.placement.Spread32Decorator",
            "XXX.levelgen.placement.VerticalDecorator",
            "XXX.levelgen.placement.WaterDepthThresholdDecorator",
            "XXX.placement.nether.package-info",
            "XXX.levelgen.structure.BoundingBox",
            "XXX.levelgen.structure.BuriedTreasurePieces",
            "XXX.levelgen.structure.DesertPyramidPiece",
            "XXX.levelgen.structure.EndCityPieces$1",
            "XXX.levelgen.structure.EndCityPieces$3",
            "XXX.levelgen.structure.EndCityPieces$EndCityPiece",
            "XXX.levelgen.structure.IglooPieces",
            "XXX.levelgen.structure.JunglePyramidPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorList",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.material.FogType",
            "XXX.level.material.LavaFluid$Flowing",
            "XXX.level.material.Material",
            "XXX.level.material.MaterialColor",
            "XXX.level.material.WaterFluid",
            "XXX.level.material.WaterFluid$Source",
            "XXX.newbiome.area.Area",
            "XXX.newbiome.area.LazyArea",
            "XXX.newbiome.context.BigContext",
            "XXX.newbiome.context.LazyAreaContext",
            "XXX.newbiome.layer.AddDeepOceanLayer",
            "XXX.newbiome.layer.AddEdgeLayer$CoolWarm",
            "XXX.newbiome.layer.AddEdgeLayer$IntroduceSpecial",
            "XXX.newbiome.layer.AddMushroomIslandLayer",
            "XXX.newbiome.layer.BiomeEdgeLayer",
            "XXX.newbiome.layer.IslandLayer",
            "XXX.newbiome.layer.LayerBiomes",
            "XXX.newbiome.layer.Layers$Category",
            "XXX.newbiome.layer.OceanMixerLayer",
            "XXX.newbiome.layer.RareBiomeSpotLayer",
            "XXX.newbiome.layer.RemoveTooMuchOceanLayer",
            "XXX.newbiome.layer.RiverLayer",
            "XXX.newbiome.layer.ShoreLayer",
            "XXX.newbiome.layer.ZoomLayer",
            "XXX.newbiome.layer.package-info",
            "XXX.layer.traits.AreaTransformer1",
            "XXX.layer.traits.BishopTransformer",
            "XXX.layer.traits.C1Transformer",
            "XXX.layer.traits.DimensionOffset0Transformer",
            "XXX.layer.traits.DimensionTransformer",
            "XXX.layer.traits.package-info",
            "XXX.level.pathfinder.AmphibiousNodeEvaluator",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.level.pathfinder.package-info",
            "XXX.level.portal.PortalInfo",
            "XXX.level.portal.package-info",
            "XXX.level.redstone.package-info",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.level.storage.CommandStorage$Container",
            "XXX.level.storage.DimensionDataStorage",
            "XXX.level.storage.LevelResource",
            "XXX.level.storage.LevelStorageSource",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$1",
            "XXX.level.storage.LevelSummary",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.GsonAdapterFactory$1",
            "XXX.storage.loot.IntRange$IntChecker",
            "XXX.storage.loot.IntRange$Serializer",
            "XXX.storage.loot.ItemModifierManager$FunctionSequence",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.PredicateManager$1",
            "XXX.storage.loot.Serializer",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.EnchantRandomlyFunction$Builder",
            "XXX.loot.functions.EnchantWithLevelsFunction",
            "XXX.loot.functions.ExplorationMapFunction$Builder",
            "XXX.loot.functions.FillPlayerHead",
            "XXX.loot.functions.FunctionUserBuilder",
            "XXX.loot.functions.LimitCount$1",
            "XXX.loot.functions.LootingEnchantFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction",
            "XXX.loot.functions.SetAttributesFunction$Builder",
            "XXX.loot.functions.SetAttributesFunction$ModifierBuilder",
            "XXX.loot.functions.SetBannerPatternFunction",
            "XXX.loot.functions.SetContainerContents$Builder",
            "XXX.loot.functions.SetContainerLootTable",
            "XXX.loot.functions.SetEnchantmentsFunction$1",
            "XXX.loot.functions.SetEnchantmentsFunction$Serializer",
            "XXX.loot.functions.SetItemCountFunction$1",
            "XXX.loot.functions.SetItemDamageFunction$Serializer",
            "XXX.loot.functions.SetLoreFunction$Builder",
            "XXX.loot.functions.SetNameFunction",
            "XXX.loot.functions.SetNbtFunction$1",
            "XXX.loot.functions.SetStewEffectFunction",
            "XXX.loot.functions.SmeltItemFunction$Serializer",
            "XXX.storage.loot.package-info",
            "XXX.loot.parameters.LootContextParamSet",
            "XXX.loot.predicates.AlternativeLootItemCondition$Builder",
            "XXX.loot.predicates.BonusLevelTableCondition",
            "XXX.loot.predicates.ConditionReference$1",
            "XXX.loot.predicates.ConditionUserBuilder",
            "XXX.loot.predicates.DamageSourceCondition$1",
            "XXX.loot.predicates.EntityHasScoreCondition$Builder",
            "XXX.loot.predicates.ExplosionCondition",
            "XXX.loot.predicates.InvertedLootItemCondition",
            "XXX.loot.predicates.LocationCheck$1",
            "XXX.loot.predicates.LootItemBlockStatePropertyCondition",
            "XXX.loot.predicates.LootItemEntityPropertyCondition$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition$Serializer",
            "XXX.loot.predicates.LootItemRandomChanceCondition$1",
            "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer",
            "XXX.loot.predicates.MatchTool$Serializer",
            "XXX.loot.predicates.TimeCheck$1",
            "XXX.loot.predicates.ValueCheckCondition$1",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.providers.nbt.StorageNbtProvider$Serializer",
            "XXX.providers.number.BinomialDistributionGenerator",
            "XXX.providers.number.ConstantValue$1",
            "XXX.providers.number.ConstantValue$Serializer",
            "XXX.providers.number.NumberProvider",
            "XXX.providers.number.ScoreboardValue",
            "XXX.providers.number.UniformGenerator$1",
            "XXX.providers.number.package-info",
            "XXX.providers.score.ContextScoreboardNameProvider$1",
            "XXX.providers.score.FixedScoreboardNameProvider$1",
            "XXX.providers.score.LootScoreProviderType",
            "XXX.providers.score.ScoreboardNameProviders",
            "XXX.level.storage.package-info",
            "XXX.level.timers.FunctionCallback$Serializer",
            "XXX.level.timers.FunctionTagCallback$Serializer",
            "XXX.level.timers.TimerCallback$Serializer",
            "XXX.level.timers.TimerQueue"
          ],
          "removed": [
            "XXX.blaze3d.font.TrueTypeGlyphProvider$Glyph",
            "XXX.mojang.blaze3d.package-info",
            "XXX.blaze3d.pipeline.MainTarget$AttachmentState",
            "XXX.blaze3d.pipeline.package-info",
            "XXX.blaze3d.platform.DebugMemoryUntracker",
            "XXX.blaze3d.platform.GLX",
            "XXX.blaze3d.platform.GlDebug",
            "XXX.blaze3d.platform.GlStateManager$BooleanState",
            "XXX.blaze3d.platform.GlStateManager$ColorMask",
            "XXX.blaze3d.platform.GlStateManager$DepthState",
            "XXX.blaze3d.platform.GlStateManager$LogicOp",
            "XXX.blaze3d.platform.GlStateManager$ScissorState",
            "XXX.blaze3d.platform.GlStateManager$StencilFunc",
            "XXX.blaze3d.platform.GlStateManager$TextureState",
            "XXX.blaze3d.platform.GlUtil",
            "XXX.blaze3d.platform.NativeImage$InternalGlFormat",
            "XXX.blaze3d.platform.PngInfo",
            "XXX.blaze3d.platform.WindowEventHandler",
            "XXX.blaze3d.preprocessor.GlslPreprocessor",
            "XXX.blaze3d.vertex.PoseStack$Pose",
            "XXX.blaze3d.vertex.Tesselator",
            "XXX.blaze3d.vertex.VertexConsumer",
            "XXX.blaze3d.vertex.VertexFormat$1",
            "XXX.blaze3d.vertex.VertexFormat$Mode",
            "XXX.blaze3d.vertex.VertexFormatElement$Type",
            "XXX.blaze3d.vertex.VertexFormatElement$Usage$ClearState",
            "XXX.blaze3d.vertex.VertexMultiConsumer",
            "XXX.blaze3d.vertex.VertexMultiConsumer$Multiple",
            "XXX.mojang.math.Constants",
            "XXX.mojang.math.Matrix3f",
            "XXX.mojang.math.MethodsReturnNonnullByDefault",
            "XXX.mojang.math.OctahedralGroup$1",
            "XXX.mojang.math.SymmetricGroup3",
            "XXX.mojang.math.Vector3d",
            "XXX.mojang.math.Vector4f",
            "XXX.mojang.realmsclient.KeyCombo",
            "XXX.mojang.realmsclient.RealmsMainScreen$1",
            "XXX.mojang.realmsclient.RealmsMainScreen$3",
            "XXX.mojang.realmsclient.RealmsMainScreen$5",
            "XXX.mojang.realmsclient.RealmsMainScreen$Entry",
            "XXX.mojang.realmsclient.RealmsMainScreen$NewsButton",
            "XXX.mojang.realmsclient.RealmsMainScreen$RealmSelectionList",
            "XXX.mojang.realmsclient.RealmsMainScreen$ShowPopupButton",
            "XXX.mojang.realmsclient.Unit",
            "XXX.gui.screens.UploadResult$Builder",
            "XXX.gui.task.IntervalBasedStartupDelay",
            "XXX.gui.task.RepeatableTask",
            "XXX.gui.task.package-info",
            "XXX.realmsclient.util.JsonUtils",
            "XXX.realmsclient.util.RealmsPersistence",
            "XXX.realmsclient.util.RealmsTextureManager",
            "XXX.realmsclient.util.RealmsTextureManager$RealmsTexture",
            "XXX.realmsclient.util.RealmsUtil$1",
            "XXX.realmsclient.util.TextRenderingUtils",
            "XXX.realmsclient.util.TextRenderingUtils$LineSegment",
            "XXX.realmsclient.util.WorldGenerationInfo",
            "XXX.util.task.CloseServerTask",
            "XXX.util.task.DownloadTask",
            "XXX.util.task.LongRunningTask",
            "XXX.util.task.ResettingGeneratedWorldTask",
            "XXX.util.task.ResettingWorldTask",
            "XXX.util.task.SwitchMinigameTask",
            "XXX.util.task.WorldCreationTask",
            "net.minecraft.BlockUtil",
            "net.minecraft.BlockUtil$IntBounds",
            "net.minecraft.ChatFormatting",
            "net.minecraft.CrashReportCategory",
            "net.minecraft.CrashReportDetail",
            "net.minecraft.DefaultUncaughtExceptionHandlerWithName",
            "net.minecraft.FieldsAreNonnullByDefault",
            "net.minecraft.MethodsReturnNonnullByDefault",
            "net.minecraft.ResourceLocationException",
            "net.minecraft.Util",
            "net.minecraft.Util$3",
            "net.minecraft.Util$5",
            "net.minecraft.Util$7",
            "net.minecraft.Util$9",
            "net.minecraft.Util$OS",
            "net.minecraft.Util$OS$2",
            "XXX.advancements.critereon.EntityPredicate$Builder",
            "XXX.advancements.critereon.EntityTypePredicate",
            "XXX.advancements.critereon.EntityTypePredicate$TagPredicate",
            "XXX.advancements.critereon.FilledBucketTrigger",
            "XXX.advancements.critereon.FishingHookPredicate",
            "XXX.advancements.critereon.FishingRodHookedTrigger$TriggerInstance",
            "XXX.advancements.critereon.FluidPredicate$Builder",
            "XXX.advancements.critereon.ImpossibleTrigger$TriggerInstance",
            "XXX.advancements.critereon.InventoryChangeTrigger$TriggerInstance",
            "XXX.advancements.critereon.ItemDurabilityTrigger$TriggerInstance",
            "XXX.advancements.critereon.ItemPickedUpByEntityTrigger$TriggerInstance",
            "XXX.advancements.critereon.ItemPredicate$Builder",
            "XXX.advancements.critereon.ItemUsedOnBlockTrigger$TriggerInstance",
            "XXX.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance",
            "XXX.advancements.critereon.KilledTrigger$TriggerInstance",
            "XXX.advancements.critereon.LevitationTrigger$TriggerInstance",
            "XXX.advancements.critereon.PlayerPredicate$AdvancementCriterionsPredicate",
            "XXX.advancements.critereon.PlayerPredicate$AdvancementPredicate",
            "XXX.advancements.critereon.RecipeUnlockedTrigger",
            "XXX.advancements.critereon.SerializationContext",
            "XXX.advancements.critereon.ShotCrossbowTrigger$TriggerInstance",
            "XXX.advancements.critereon.SlideDownBlockTrigger",
            "XXX.advancements.critereon.StatePropertiesPredicate",
            "XXX.minecraft.client.CameraType",
            "XXX.minecraft.client.ClientRecipeBook",
            "XXX.minecraft.client.ComponentCollector",
            "XXX.minecraft.client.CycleOption$OptionSetter",
            "XXX.minecraft.client.FullscreenResolutionProgressOption",
            "XXX.minecraft.client.Game$Metrics",
            "XXX.minecraft.client.GraphicsStatus$1",
            "XXX.minecraft.client.HotbarManager",
            "XXX.minecraft.client.KeyboardHandler",
            "XXX.minecraft.client.LogaritmicProgressOption",
            "XXX.minecraft.client.Minecraft$1",
            "XXX.minecraft.client.Minecraft$ChatStatus$1",
            "XXX.minecraft.client.Minecraft$ChatStatus$3",
            "XXX.minecraft.client.Minecraft$ExperimentalDialogType",
            "XXX.minecraft.client.MouseHandler",
            "XXX.minecraft.client.Option",
            "XXX.minecraft.client.Options",
            "XXX.minecraft.client.Options$2",
            "XXX.minecraft.client.Options$4",
            "XXX.minecraft.client.ParticleStatus",
            "XXX.minecraft.client.RecipeBookCategories",
            "XXX.minecraft.client.ResourceLoadStateTracker",
            "XXX.color.block.package-info",
            "XXX.color.item.ItemColors",
            "XXX.client.gui.Font",
            "XXX.client.gui.Gui",
            "XXX.client.gui.MapRenderer",
            "XXX.gui.components.AbstractSelectionList$Entry",
            "XXX.gui.components.AbstractSelectionList$TrackedList",
            "XXX.gui.components.AbstractWidget",
            "XXX.gui.components.BossHealthOverlay$1",
            "XXX.gui.components.Button$OnPress",
            "XXX.gui.components.ChatComponent",
            "XXX.gui.components.CommandSuggestions",
            "XXX.gui.components.CycleButton$Builder",
            "XXX.gui.components.CycleButton$TooltipSupplier",
            "XXX.gui.components.CycleButton$ValueListSupplier$1",
            "XXX.gui.components.DebugScreenOverlay",
            "XXX.gui.components.EditBox",
            "XXX.gui.components.LerpingBossEvent",
            "XXX.gui.components.LockIconButton$Icon",
            "XXX.gui.components.MultiLineLabel$1",
            "XXX.gui.components.MultiLineLabel$TextWithWidth",
            "XXX.gui.components.ObjectSelectionList$Entry",
            "XXX.gui.components.OptionsList$Entry",
            "XXX.components.toasts.TutorialToast",
            "XXX.components.toasts.package-info",
            "XXX.gui.font.FontManager",
            "XXX.gui.font.FontSet",
            "XXX.font.providers.BitmapProvider$Builder",
            "XXX.font.providers.GlyphProviderBuilder",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList",
            "XXX.gui.screens.CreateFlatWorldScreen",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList$Entry",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemComparator",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList",
            "XXX.screens.achievement.StatsUpdateListener",
            "XXX.screens.advancements.AdvancementTab",
            "XXX.screens.advancements.AdvancementTabType$1",
            "XXX.screens.advancements.AdvancementWidgetType",
            "XXX.screens.advancements.package-info",
            "XXX.client.multiplayer.ClientHandshakePacketListenerImpl",
            "XXX.client.multiplayer.ClientLevel$1",
            "XXX.client.multiplayer.ClientLevel$EntityCallbacks",
            "XXX.client.multiplayer.ClientPacketListener",
            "XXX.client.multiplayer.ClientSuggestionProvider",
            "XXX.client.multiplayer.PlayerInfo",
            "XXX.multiplayer.resolver.ResolvedServerAddress$1",
            "XXX.multiplayer.resolver.ServerAddressResolver",
            "XXX.multiplayer.resolver.ServerRedirectHandler",
            "XXX.minecraft.client.package-info",
            "XXX.client.particle.AshParticle$Provider",
            "XXX.client.particle.BreakingItemParticle$SlimeProvider",
            "XXX.client.particle.BubbleColumnUpParticle",
            "XXX.client.particle.BubblePopParticle",
            "XXX.client.particle.CampfireSmokeParticle$SignalProvider",
            "XXX.client.particle.DragonBreathParticle$Provider",
            "XXX.client.particle.EnchantmentTableParticle$NautilusProvider",
            "XXX.client.particle.EndRodParticle",
            "XXX.client.particle.FireworkParticles",
            "XXX.client.particle.FireworkParticles$FlashProvider",
            "XXX.client.particle.FireworkParticles$SparkParticle",
            "XXX.client.particle.FireworkParticles$Starter",
            "XXX.client.particle.GlowParticle$GlowSquidProvider",
            "XXX.client.particle.GlowParticle$WaxOffProvider",
            "XXX.client.particle.HeartParticle",
            "XXX.client.particle.HugeExplosionParticle$Provider",
            "XXX.client.particle.MobAppearanceParticle",
            "XXX.client.particle.NoteParticle$Provider",
            "XXX.client.particle.ParticleDescription",
            "XXX.client.particle.PlayerCloudParticle$SneezeProvider",
            "XXX.client.particle.PortalParticle$Provider",
            "XXX.client.particle.SpellParticle",
            "XXX.client.particle.SplashParticle",
            "XXX.client.particle.SquidInkParticle$GlowInkProvider",
            "XXX.client.particle.StationaryItemParticle",
            "XXX.client.particle.SuspendedParticle$CrimsonSporeProvider",
            "XXX.client.particle.SuspendedParticle$SporeBlossomAirProvider$1",
            "XXX.client.particle.SuspendedParticle$WarpedSporeProvider",
            "XXX.client.particle.TotemParticle$Provider",
            "XXX.client.particle.VibrationSignalParticle",
            "XXX.client.particle.WaterCurrentDownParticle",
            "XXX.profiling.metric.MetricSampler$ThresholdAlerter",
            "XXX.profiling.metric.SamplerCategory",
            "XXX.profiling.metric.package-info",
            "XXX.profiling.storage.MetricsPersister",
            "XXX.client.renderer.BiomeColors",
            "XXX.client.renderer.ChunkBufferBuilderPack",
            "XXX.client.renderer.DimensionSpecialEffects",
            "XXX.client.renderer.DimensionSpecialEffects$NetherEffects",
            "XXX.client.renderer.DimensionSpecialEffects$SkyType",
            "XXX.client.renderer.FaceInfo",
            "XXX.client.renderer.ItemBlockRenderTypes",
            "XXX.client.renderer.ItemInHandRenderer$1",
            "XXX.client.renderer.ItemModelShaper",
            "XXX.client.renderer.PanoramaRenderer",
            "XXX.client.renderer.PostPass",
            "XXX.client.renderer.RenderBuffers",
            "XXX.client.renderer.RenderType$CompositeRenderType",
            "XXX.client.renderer.RenderType$CompositeState$CompositeStateBuilder",
            "XXX.client.renderer.RunningTrimmedMean",
            "XXX.client.renderer.ShaderInstance",
            "XXX.client.renderer.Sheets",
            "XXX.client.renderer.SpriteCoordinateExpander",
            "XXX.client.renderer.VirtualScreen",
            "XXX.renderer.block.BlockRenderDispatcher",
            "XXX.renderer.block.LiquidBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$1",
            "XXX.renderer.block.ModelBlockRenderer$AmbientOcclusionFace",
            "XXX.renderer.block.ModelBlockRenderer$Cache",
            "XXX.renderer.block.ModelBlockRenderer$Cache$2",
            "XXX.block.model.BakedQuad",
            "XXX.block.model.BlockElement$1",
            "XXX.block.model.BlockElementFace",
            "XXX.block.model.BlockElementRotation",
            "XXX.block.model.BlockFaceUV$Deserializer",
            "XXX.block.model.BlockModel$Deserializer",
            "XXX.block.model.BlockModel$LoopException",
            "XXX.block.model.BlockModelDefinition$Context",
            "XXX.block.model.BlockModelDefinition$MissingVariantException",
            "XXX.block.model.FaceBakery$1",
            "XXX.block.model.ItemModelGenerator$1",
            "XXX.block.model.ItemModelGenerator$SpanFacing",
            "XXX.block.model.ItemOverride$Deserializer",
            "XXX.block.model.ItemOverrides",
            "XXX.renderer.debug.CollisionBoxRenderer",
            "XXX.renderer.debug.DebugRenderer$SimpleDebugRenderer",
            "XXX.renderer.debug.GameEventListenerRenderer$TrackedGameEvent",
            "XXX.renderer.debug.GameTestDebugRenderer",
            "XXX.renderer.debug.GoalSelectorDebugRenderer",
            "XXX.renderer.debug.HeightMapRenderer",
            "XXX.renderer.debug.LightDebugRenderer",
            "XXX.renderer.debug.PathfindingRenderer",
            "XXX.renderer.debug.SolidFaceRenderer",
            "XXX.renderer.debug.VillageSectionsDebugRenderer",
            "XXX.renderer.debug.WorldGenAttemptRenderer",
            "XXX.renderer.entity.AbstractHorseRenderer",
            "XXX.renderer.entity.ArmorStandRenderer",
            "XXX.renderer.entity.AxolotlRenderer",
            "XXX.renderer.entity.BeeRenderer",
            "XXX.renderer.entity.BoatRenderer",
            "XXX.renderer.entity.CaveSpiderRenderer",
            "XXX.renderer.entity.ChickenRenderer",
            "XXX.renderer.entity.CowRenderer",
            "XXX.renderer.entity.DolphinRenderer",
            "XXX.renderer.entity.DrownedRenderer",
            "XXX.renderer.entity.EndCrystalRenderer",
            "XXX.renderer.entity.EnderDragonRenderer$DragonModel",
            "XXX.renderer.entity.EndermiteRenderer",
            "XXX.renderer.entity.EntityRenderer",
            "XXX.renderer.entity.EntityRendererProvider$Context",
            "XXX.renderer.entity.EvokerFangsRenderer",
            "XXX.renderer.entity.EvokerRenderer$1",
            "XXX.renderer.entity.FallingBlockRenderer",
            "XXX.renderer.entity.FishingHookRenderer",
            "XXX.renderer.entity.GhastRenderer",
            "XXX.renderer.entity.GlowSquidRenderer",
            "XXX.renderer.entity.GuardianRenderer",
            "XXX.renderer.entity.HorseRenderer",
            "XXX.renderer.entity.HuskRenderer",
            "XXX.renderer.entity.IllusionerRenderer",
            "XXX.renderer.entity.IronGolemRenderer",
            "XXX.renderer.entity.ItemFrameRenderer",
            "XXX.renderer.entity.LeashKnotRenderer",
            "XXX.renderer.entity.LivingEntityRenderer",
            "XXX.renderer.entity.LlamaRenderer",
            "XXX.renderer.entity.MagmaCubeRenderer",
            "XXX.renderer.entity.MobRenderer",
            "XXX.renderer.entity.NoopRenderer",
            "XXX.renderer.entity.PaintingRenderer",
            "XXX.renderer.entity.ParrotRenderer",
            "XXX.renderer.entity.PigRenderer",
            "XXX.renderer.entity.PillagerRenderer",
            "XXX.renderer.entity.PufferfishRenderer",
            "XXX.renderer.entity.RavagerRenderer",
            "XXX.renderer.entity.SalmonRenderer",
            "XXX.renderer.entity.ShulkerBulletRenderer",
            "XXX.renderer.entity.SilverfishRenderer",
            "XXX.renderer.entity.SlimeRenderer",
            "XXX.renderer.entity.SpectralArrowRenderer",
            "XXX.renderer.entity.SquidRenderer",
            "XXX.renderer.entity.StriderRenderer",
            "XXX.renderer.entity.ThrownTridentRenderer",
            "XXX.renderer.entity.TntMinecartRenderer",
            "XXX.renderer.entity.TropicalFishRenderer",
            "XXX.renderer.entity.UndeadHorseRenderer",
            "XXX.renderer.entity.VillagerRenderer",
            "XXX.renderer.entity.VindicatorRenderer$1",
            "XXX.renderer.entity.WitchRenderer",
            "XXX.renderer.entity.WitherSkeletonRenderer",
            "XXX.renderer.entity.WolfRenderer",
            "XXX.renderer.entity.ZombieRenderer",
            "XXX.entity.layers.ArrowLayer",
            "XXX.entity.layers.CapeLayer",
            "XXX.entity.layers.CatCollarLayer",
            "XXX.entity.layers.CrossedArmsItemLayer",
            "XXX.entity.layers.Deadmau5EarsLayer",
            "XXX.entity.layers.DrownedOuterLayer",
            "XXX.entity.layers.EnderEyesLayer",
            "XXX.entity.layers.EyesLayer",
            "XXX.entity.layers.HorseArmorLayer",
            "XXX.entity.layers.HumanoidArmorLayer",
            "XXX.entity.layers.IronGolemCrackinessLayer",
            "XXX.entity.layers.ItemInHandLayer",
            "XXX.entity.layers.MushroomCowMushroomLayer",
            "XXX.entity.layers.ParrotOnShoulderLayer",
            "XXX.entity.layers.PlayerItemInHandLayer",
            "XXX.entity.layers.SaddleLayer",
            "XXX.entity.layers.ShulkerHeadLayer",
            "XXX.entity.layers.SnowGolemHeadLayer",
            "XXX.entity.layers.SpinAttackEffectLayer",
            "XXX.entity.layers.StuckInBodyLayer",
            "XXX.entity.layers.VillagerProfessionLayer",
            "XXX.entity.layers.WitherArmorLayer",
            "XXX.entity.layers.package-info",
            "XXX.entity.player.PlayerRenderer",
            "XXX.renderer.item.ItemProperties",
            "XXX.renderer.item.ItemProperties$2",
            "XXX.renderer.item.ItemPropertyFunction",
            "XXX.client.renderer.package-info",
            "XXX.renderer.texture.AtlasSet",
            "XXX.renderer.texture.HttpTexture",
            "XXX.renderer.texture.MissingTextureAtlasSprite",
            "XXX.renderer.texture.PreloadedTexture",
            "XXX.renderer.texture.SimpleTexture$TextureImage",
            "XXX.renderer.texture.Stitcher$Holder",
            "XXX.renderer.texture.Stitcher$SpriteLoader",
            "XXX.renderer.texture.TextureAtlas",
            "XXX.renderer.texture.TextureAtlasSprite",
            "XXX.client.sounds.LoopingAudioStream$AudioStreamProvider",
            "XXX.client.sounds.MusicManager",
            "XXX.client.sounds.SoundEngine",
            "XXX.client.sounds.SoundEventListener",
            "XXX.client.sounds.SoundManager$1",
            "XXX.client.sounds.SoundManager$Preparations",
            "XXX.client.sounds.WeighedSoundEvents",
            "XXX.client.sounds.package-info",
            "XXX.client.tutorial.CompletedTutorialStepInstance",
            "XXX.client.tutorial.FindTreeTutorialStepInstance",
            "XXX.client.tutorial.OpenInventoryTutorialStep",
            "XXX.client.tutorial.Tutorial",
            "XXX.commands.arguments.ColorArgument",
            "XXX.commands.arguments.CompoundTagArgument",
            "XXX.commands.arguments.EntityAnchorArgument",
            "XXX.commands.arguments.EntityArgument",
            "XXX.commands.arguments.EntitySummonArgument",
            "XXX.commands.arguments.GameProfileArgument$Result",
            "XXX.commands.arguments.ItemEnchantmentArgument",
            "XXX.commands.arguments.MessageArgument$Message",
            "XXX.commands.arguments.MobEffectArgument",
            "XXX.commands.arguments.NbtPathArgument$AllElementsNode",
            "XXX.commands.arguments.NbtPathArgument$IndexedElementNode",
            "XXX.commands.arguments.NbtPathArgument$MatchObjectNode",
            "XXX.commands.arguments.NbtPathArgument$NbtPath",
            "XXX.commands.arguments.NbtTagArgument",
            "XXX.commands.arguments.ObjectiveCriteriaArgument",
            "XXX.commands.arguments.OperationArgument$Operation",
            "XXX.commands.arguments.ParticleArgument",
            "XXX.commands.arguments.RangeArgument$Floats",
            "XXX.commands.arguments.ResourceLocationArgument",
            "XXX.commands.arguments.ScoreHolderArgument$Result",
            "XXX.commands.arguments.ScoreHolderArgument$Serializer",
            "XXX.commands.arguments.SlotArgument",
            "XXX.commands.arguments.TimeArgument",
            "XXX.arguments.blocks.BlockInput",
            "XXX.selector.options.EntitySelectorOptions$Modifier",
            "XXX.selector.options.package-info",
            "XXX.minecraft.commands.package-info",
            "XXX.commands.synchronization.ArgumentTypes",
            "XXX.minecraft.data.BlockFamily$Variant",
            "XXX.minecraft.data.DataGenerator",
            "XXX.minecraft.data.HashCache",
            "XXX.data.advancements.AdvancementProvider",
            "XXX.data.advancements.HusbandryAdvancements",
            "XXX.data.advancements.StoryAdvancements",
            "XXX.data.advancements.package-info",
            "XXX.data.info.CommandsReport",
            "XXX.data.info.package-info",
            "XXX.data.loot.ChestLoot",
            "XXX.data.loot.FishingLoot",
            "XXX.data.loot.LootTableProvider",
            "XXX.data.loot.package-info",
            "XXX.data.models.BlockModelGenerators$1",
            "XXX.data.models.BlockModelGenerators$BlockFamilyProvider",
            "XXX.data.models.BlockModelGenerators$TintState",
            "XXX.data.models.ItemModelGenerators",
            "XXX.models.blockstates.BlockStateGenerator",
            "XXX.models.blockstates.MultiPartGenerator$ConditionalEntry",
            "XXX.models.blockstates.MultiVariantGenerator",
            "XXX.data.tags.package-info",
            "XXX.data.worldgen.BastionHoglinStablePools",
            "XXX.data.worldgen.BastionPieces",
            "XXX.data.worldgen.BastionTreasureRoomPools",
            "XXX.data.worldgen.Carvers",
            "XXX.data.worldgen.Features",
            "XXX.data.worldgen.Features$Decorators",
            "XXX.data.worldgen.PillagerOutpostPools",
            "XXX.data.worldgen.Pools",
            "XXX.data.worldgen.SavannaVillagePools",
            "XXX.data.worldgen.StructureFeatures",
            "XXX.data.worldgen.TaigaVillagePools",
            "XXX.worldgen.biome.BiomeReport",
            "XXX.worldgen.biome.VanillaBiomes",
            "XXX.gametest.framework.AfterBatch",
            "XXX.gametest.framework.ExhaustedAttemptsException",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestHelper$1",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.GameTestSequence$Condition",
            "XXX.gametest.framework.GameTestServer$1",
            "XXX.gametest.framework.GameTestTimeoutException",
            "XXX.gametest.framework.JUnitLikeTestReporter",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.ReportGameListener",
            "XXX.gametest.framework.StructureUtils$1",
            "XXX.gametest.framework.TestClassNameArgument",
            "XXX.gametest.framework.TestCommand$TestSummaryDisplayer",
            "XXX.gametest.framework.TestFunctionArgument",
            "XXX.gametest.framework.package-info",
            "XXX.minecraft.locale.Language$1",
            "XXX.minecraft.nbt.ByteArrayTag",
            "XXX.minecraft.nbt.ByteTag",
            "XXX.minecraft.nbt.ByteTag$Cache",
            "XXX.minecraft.nbt.CompoundTag",
            "XXX.minecraft.nbt.DoubleTag",
            "XXX.minecraft.nbt.EndTag",
            "XXX.minecraft.nbt.FloatTag",
            "XXX.minecraft.nbt.IntArrayTag",
            "XXX.minecraft.nbt.IntTag",
            "XXX.minecraft.nbt.IntTag$Cache",
            "XXX.minecraft.nbt.ListTag$1",
            "XXX.minecraft.nbt.LongArrayTag$1",
            "XXX.minecraft.nbt.LongTag$1",
            "XXX.minecraft.nbt.NbtAccounter",
            "XXX.minecraft.nbt.NbtIo",
            "XXX.minecraft.nbt.NbtOps$1",
            "XXX.minecraft.nbt.NbtUtils",
            "XXX.minecraft.nbt.ShortTag",
            "XXX.minecraft.nbt.ShortTag$Cache",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.StringTagVisitor",
            "XXX.minecraft.nbt.TagParser",
            "XXX.minecraft.nbt.TagType$1",
            "XXX.minecraft.nbt.TagVisitor",
            "XXX.minecraft.nbt.package-info",
            "XXX.minecraft.network.CipherDecoder",
            "XXX.minecraft.network.CompressionDecoder",
            "XXX.minecraft.network.Connection",
            "XXX.minecraft.network.Connection$2",
            "XXX.minecraft.network.ConnectionProtocol",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundGameEventPacket$Type",
            "XXX.protocol.game.ClientboundInitializeBorderPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action$2",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action$4",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntityPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderCenterPacket",
            "XXX.protocol.game.ClientboundSetBorderSizePacket",
            "XXX.protocol.game.ClientboundSetBorderWarningDistancePacket",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquipmentPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket$Action",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesAnimationPacket",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$1",
            "XXX.protocol.game.ServerboundInteractPacket$ActionType",
            "XXX.protocol.game.ServerboundInteractPacket$InteractionAction",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundPongPacket",
            "XXX.minecraft.realms.RepeatedNarrator",
            "XXX.minecraft.realms.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.resources.DelegatingOps",
            "XXX.minecraft.resources.RegistryFileCodec",
            "XXX.minecraft.resources.RegistryReadOps",
            "XXX.minecraft.server.ConsoleInput",
            "XXX.minecraft.server.Eula",
            "XXX.minecraft.server.Main",
            "XXX.minecraft.server.MinecraftServer",
            "XXX.minecraft.server.MinecraftServer$2",
            "XXX.minecraft.server.PlayerAdvancements$1",
            "XXX.minecraft.server.ServerAdvancementManager",
            "XXX.minecraft.server.ServerFunctionManager",
            "XXX.server.commands.AdvancementCommands$Action$1",
            "XXX.server.commands.AdvancementCommands$Mode",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.StopCommand",
            "XXX.server.commands.SummonCommand",
            "XXX.server.commands.TeamCommand",
            "XXX.server.commands.TeleportCommand",
            "XXX.server.commands.TellRawCommand",
            "XXX.server.commands.TitleCommand",
            "XXX.server.commands.WeatherCommand",
            "XXX.server.commands.WorldBorderCommand",
            "XXX.commands.data.BlockDataAccessor$1",
            "XXX.commands.data.DataCommands",
            "XXX.commands.data.DataCommands$DataManipulatorDecorator",
            "XXX.commands.data.EntityDataAccessor",
            "XXX.commands.data.StorageDataAccessor",
            "XXX.commands.data.package-info",
            "XXX.server.dedicated.DedicatedPlayerList",
            "XXX.server.dedicated.DedicatedServer$1",
            "XXX.server.dedicated.DedicatedServerSettings",
            "XXX.server.dedicated.ServerWatchdog$1",
            "XXX.server.level.ChunkTaskPriorityQueueSorter$Message",
            "XXX.server.level.ChunkTracker",
            "XXX.server.level.DemoMode",
            "XXX.server.level.DistanceManager$ChunkTicketTracker",
            "XXX.server.level.DistanceManager$PlayerTicketTracker",
            "XXX.server.level.PlayerRespawnLogic",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ServerPlayer$2",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerConnectionListener$LatencySimulator$DelayedMessage",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerGamePacketListenerImpl$EntityInteraction",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.server.network.ServerPlayerConnection",
            "XXX.server.network.TextFilter",
            "XXX.server.network.TextFilter$FilteredText",
            "XXX.packs.resources.ProfiledReloadInstance$State",
            "XXX.packs.resources.ReloadableResourceManager",
            "XXX.packs.resources.ResourceManager",
            "XXX.packs.resources.ResourceManagerReloadListener",
            "XXX.packs.resources.SimpleJsonResourceReloadListener",
            "XXX.packs.resources.SimpleReloadInstance",
            "XXX.packs.resources.SimpleReloadInstance$StateFactory",
            "XXX.packs.resources.SimpleReloadableResourceManager$FailingReloadInstance",
            "XXX.packs.resources.SimpleResource",
            "XXX.server.players.BanListEntry",
            "XXX.server.players.GameProfileCache$1",
            "XXX.server.players.IpBanList",
            "XXX.server.players.OldUsersConverter",
            "XXX.server.players.OldUsersConverter$2",
            "XXX.server.players.OldUsersConverter$4",
            "XXX.server.players.OldUsersConverter$ConversionError",
            "XXX.server.players.PlayerList$1",
            "XXX.server.players.ServerOpListEntry",
            "XXX.server.players.StoredUserEntry",
            "XXX.server.players.UserBanList",
            "XXX.server.players.UserWhiteList",
            "XXX.server.players.package-info",
            "XXX.server.rcon.PktUtils",
            "XXX.server.rcon.package-info",
            "XXX.rcon.thread.QueryThreadGs4",
            "XXX.rcon.thread.RconClient",
            "XXX.rcon.thread.package-info",
            "XXX.minecraft.sounds.Musics",
            "XXX.minecraft.sounds.SoundEvents",
            "XXX.minecraft.sounds.package-info",
            "XXX.minecraft.stats.RecipeBookSettings",
            "XXX.minecraft.stats.ServerRecipeBook",
            "XXX.minecraft.stats.Stat",
            "XXX.minecraft.stats.StatType",
            "XXX.minecraft.stats.StatsCounter",
            "XXX.minecraft.tags.BlockTags",
            "XXX.minecraft.tags.FluidTags",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.SetTag",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$OptionalElementEntry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagCollection$1",
            "XXX.minecraft.tags.TagContainer",
            "XXX.minecraft.tags.TagContainer$Builder",
            "XXX.minecraft.tags.TagLoader",
            "XXX.minecraft.util.CsvOutput$Builder",
            "XXX.minecraft.util.CubicSampler$Vec3Fetcher",
            "XXX.minecraft.util.DirectoryLock",
            "XXX.minecraft.util.ExceptionCollector",
            "XXX.minecraft.util.ExtraCodecs$XorCodec",
            "XXX.minecraft.util.FastColor$ARGB32",
            "XXX.minecraft.util.FormattedCharSink",
            "XXX.minecraft.util.GsonHelper",
            "XXX.minecraft.util.StringDecomposer",
            "XXX.minecraft.util.StringRepresentable$1",
            "XXX.minecraft.util.StringUtil",
            "XXX.minecraft.util.TimeUtil",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.PackedBitStorage",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.datafix.fixes.BlockEntityBannerColorFix",
            "XXX.datafix.fixes.BlockEntityCustomNameToComponentFix",
            "XXX.datafix.fixes.BlockEntityJukeboxFix",
            "XXX.datafix.fixes.BlockEntityShulkerBoxColorFix",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix$1",
            "XXX.datafix.fixes.BlockNameFlatteningFix",
            "XXX.datafix.fixes.BlockRenameFix$1",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw$1",
            "XXX.datafix.fixes.BlockStateStructureTemplateFix",
            "XXX.datafix.fixes.CauldronRenameFix",
            "XXX.datafix.fixes.ChunkLightRemoveFix",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$1",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection",
            "XXX.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk",
            "XXX.datafix.fixes.ChunkStatusFix2",
            "XXX.datafix.fixes.ChunkToProtochunkFix",
            "XXX.datafix.fixes.DyeItemRenameFix",
            "XXX.datafix.fixes.EntityBlockStateFix",
            "XXX.datafix.fixes.EntityCodSalmonFix",
            "XXX.datafix.fixes.EntityElderGuardianSplitFix",
            "XXX.datafix.fixes.EntityHealthFix",
            "XXX.datafix.fixes.EntityHorseSplitFix",
            "XXX.datafix.fixes.EntityItemFrameDirectionFix",
            "XXX.datafix.fixes.EntityPaintingItemFrameDirectionFix",
            "XXX.datafix.fixes.EntityProjectileOwnerFix",
            "XXX.datafix.fixes.EntityRavagerRenameFix",
            "XXX.datafix.fixes.EntityRenameFix",
            "XXX.datafix.fixes.EntityShulkerColorFix",
            "XXX.datafix.fixes.EntitySkeletonSplitFix",
            "XXX.datafix.fixes.EntityTheRenameningFix",
            "XXX.datafix.fixes.EntityUUIDFix",
            "XXX.datafix.fixes.EntityZombieSplitFix",
            "XXX.datafix.fixes.EntityZombifiedPiglinRenameFix",
            "XXX.datafix.fixes.FurnaceRecipeFix",
            "XXX.datafix.fixes.HeightmapRenamingFix",
            "XXX.datafix.fixes.ItemBannerColorFix",
            "XXX.datafix.fixes.ItemIdFix",
            "XXX.datafix.fixes.ItemPotionFix",
            "XXX.datafix.fixes.ItemRenameFix$1",
            "XXX.datafix.fixes.ItemSpawnEggFix",
            "XXX.datafix.fixes.ItemStackMapIdFix",
            "XXX.datafix.fixes.ItemStackTheFlatteningFix",
            "XXX.datafix.fixes.ItemWaterPotionFix",
            "XXX.datafix.fixes.JigsawPropertiesFix",
            "XXX.datafix.fixes.LeavesFix",
            "XXX.datafix.fixes.LeavesFix$Section",
            "XXX.datafix.fixes.LevelFlatGeneratorInfoFix",
            "XXX.datafix.fixes.MapIdFix",
            "XXX.datafix.fixes.MissingDimensionFix",
            "XXX.datafix.fixes.NamedEntityFix",
            "XXX.datafix.fixes.ObjectiveDisplayNameFix",
            "XXX.datafix.fixes.OminousBannerBlockEntityRenameFix",
            "XXX.datafix.fixes.OptionsAddTextBackgroundFix",
            "XXX.datafix.fixes.OptionsKeyLwjgl3Fix",
            "XXX.datafix.fixes.OptionsLowerCaseLanguageFix",
            "XXX.datafix.fixes.PlayerUUIDFix",
            "XXX.datafix.fixes.RecipesFix",
            "XXX.datafix.fixes.RecipesRenameningFix",
            "XXX.datafix.fixes.References",
            "XXX.datafix.fixes.RenameBiomesFix",
            "XXX.datafix.fixes.RenamedCoralFix",
            "XXX.datafix.fixes.SavedDataFeaturePoolElementFix",
            "XXX.datafix.fixes.SavedDataVillageCropFix",
            "XXX.datafix.fixes.SimplestEntityRenameFix",
            "XXX.datafix.fixes.StatsRenameFix",
            "XXX.datafix.fixes.StructureReferenceCountFix",
            "XXX.datafix.fixes.TrappedChestBlockEntityFix",
            "XXX.datafix.fixes.VillagerDataFix",
            "XXX.datafix.fixes.VillagerRebuildLevelAndXpFix",
            "XXX.datafix.fixes.WallPropertyFix",
            "XXX.datafix.fixes.WorldGenSettingsFix$StructureFeatureConfiguration",
            "XXX.datafix.fixes.ZombieVillagerRebuildXpFix",
            "XXX.util.datafix.package-info",
            "XXX.datafix.schemas.NamespacedSchema$1",
            "XXX.datafix.schemas.V102",
            "XXX.datafix.schemas.V106",
            "XXX.datafix.schemas.V1125",
            "XXX.datafix.schemas.V143",
            "XXX.datafix.schemas.V1451_1",
            "XXX.datafix.schemas.V1451_3",
            "XXX.datafix.schemas.V1451_5",
            "XXX.datafix.schemas.V1451_7",
            "XXX.datafix.schemas.V1460$1",
            "XXX.datafix.schemas.V1470",
            "XXX.datafix.schemas.V1483",
            "XXX.datafix.schemas.V1510",
            "XXX.datafix.schemas.V1801",
            "XXX.datafix.schemas.V1906",
            "XXX.datafix.schemas.V1920",
            "XXX.datafix.schemas.V1929",
            "XXX.datafix.schemas.V2100",
            "XXX.datafix.schemas.V2502",
            "XXX.datafix.schemas.V2509",
            "XXX.datafix.schemas.V2522",
            "XXX.datafix.schemas.V2568",
            "XXX.datafix.schemas.V2684",
            "XXX.datafix.schemas.V2688",
            "XXX.datafix.schemas.V2707",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.util.random.WeightedEntry$Wrapper",
            "XXX.util.random.WeightedRandomList",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.valueproviders.ClampedInt",
            "XXX.util.valueproviders.ConstantFloat",
            "XXX.util.valueproviders.FloatProvider",
            "XXX.util.valueproviders.IntProvider",
            "XXX.util.valueproviders.TrapezoidFloat",
            "XXX.util.valueproviders.UniformInt",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.minecraft.world.SimpleMenuProvider",
            "XXX.minecraft.world.Snooper$1",
            "XXX.minecraft.world.WorldlyContainer",
            "XXX.world.damagesource.BadRespawnPointDamage",
            "XXX.world.damagesource.CombatRules",
            "XXX.world.damagesource.DamageSource",
            "XXX.world.damagesource.IndirectEntityDamageSource",
            "XXX.world.effect.AbsoptionMobEffect",
            "XXX.world.effect.HealthBoostMobEffect",
            "XXX.world.effect.MobEffect",
            "XXX.world.effect.MobEffectInstance",
            "XXX.world.effect.MobEffects",
            "XXX.world.effect.package-info",
            "XXX.world.entity.AgeableMob$AgeableMobGroupData",
            "XXX.world.entity.Entity",
            "XXX.world.entity.Entity$MoveFunction",
            "XXX.world.entity.Entity$RemovalReason",
            "XXX.world.entity.EntityEvent",
            "XXX.world.entity.EntitySelector$MobCanWearArmorEntitySelector",
            "XXX.world.entity.EntityType$1",
            "XXX.world.entity.EntityType$EntityFactory",
            "XXX.world.entity.EquipmentSlot$Type",
            "XXX.world.entity.FlyingMob",
            "XXX.world.entity.HumanoidArm",
            "XXX.world.entity.ItemSteerable",
            "XXX.world.entity.LivingEntity",
            "XXX.world.entity.Marker",
            "XXX.world.entity.Mob$1",
            "XXX.world.entity.MobSpawnType",
            "XXX.world.entity.MoverType",
            "XXX.world.entity.OwnableEntity",
            "XXX.world.entity.PlayerRideable",
            "XXX.world.entity.Pose",
            "XXX.world.entity.ReputationEventHandler",
            "XXX.world.entity.Shearable",
            "XXX.world.entity.SlotAccess$1",
            "XXX.world.entity.SlotAccess$3",
            "XXX.world.entity.SpawnPlacements",
            "XXX.world.entity.SpawnPlacements$SpawnPredicate",
            "XXX.world.entity.TamableAnimal",
            "XXX.entity.ai.Brain$1",
            "XXX.entity.ai.Brain$Provider",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.CountDownCooldownTicks",
            "XXX.ai.behavior.CrossbowAttack$CrossbowState",
            "XXX.ai.behavior.DoNothing",
            "XXX.ai.behavior.EraseMemoryIf",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.ShufflingList$WeightedEntry$1",
            "XXX.ai.behavior.SocializeAtBell",
            "XXX.ai.behavior.StartCelebratingIfTargetDead",
            "XXX.ai.behavior.StopBeingAngryIfTargetDead",
            "XXX.ai.behavior.StrollToPoi",
            "XXX.ai.behavior.Swim",
            "XXX.ai.behavior.TryFindWater",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WorkAtPoi",
            "XXX.ai.behavior.package-info",
            "XXX.ai.control.Control",
            "XXX.ai.control.JumpControl",
            "XXX.ai.control.MoveControl",
            "XXX.ai.control.SmoothSwimmingLookControl",
            "XXX.ai.control.package-info",
            "XXX.ai.goal.BegGoal",
            "XXX.ai.goal.BreakDoorGoal",
            "XXX.ai.goal.BreedGoal",
            "XXX.ai.goal.CatSitOnBlockGoal",
            "XXX.ai.goal.DoorInteractGoal",
            "XXX.ai.goal.FleeSunGoal",
            "XXX.ai.goal.FollowBoatGoal",
            "XXX.ai.goal.FollowMobGoal",
            "XXX.ai.goal.FollowParentGoal",
            "XXX.ai.goal.Goal$Flag",
            "XXX.ai.goal.GoalSelector$1",
            "XXX.ai.goal.GolemRandomStrollInVillageGoal",
            "XXX.ai.goal.JumpGoal",
            "XXX.ai.goal.LeapAtTargetGoal",
            "XXX.ai.goal.LookAtPlayerGoal",
            "XXX.ai.goal.MeleeAttackGoal",
            "XXX.ai.goal.MoveThroughVillageGoal",
            "XXX.ai.goal.MoveTowardsRestrictionGoal",
            "XXX.ai.goal.OcelotAttackGoal",
            "XXX.ai.goal.OpenDoorGoal",
            "XXX.ai.goal.PathfindToRaidGoal",
            "XXX.ai.goal.RandomStrollGoal",
            "XXX.ai.goal.RangedAttackGoal",
            "XXX.ai.goal.RangedCrossbowAttackGoal",
            "XXX.ai.goal.RemoveBlockGoal",
            "XXX.ai.goal.RunAroundLikeCrazyGoal",
            "XXX.ai.goal.StrollThroughVillageGoal",
            "XXX.ai.goal.TemptGoal",
            "XXX.ai.goal.TryFindWaterGoal",
            "XXX.ai.goal.WaterAvoidingRandomFlyingGoal",
            "XXX.ai.goal.WrappedGoal",
            "XXX.ai.goal.package-info",
            "XXX.goal.target.HurtByTargetGoal",
            "XXX.goal.target.NearestAttackableWitchTargetGoal",
            "XXX.goal.target.NonTameRandomTargetGoal",
            "XXX.goal.target.OwnerHurtTargetGoal",
            "XXX.goal.target.TargetGoal",
            "XXX.ai.gossip.GossipContainer",
            "XXX.entity.animal.Dolphin$DolphinSwimWithPlayerGoal",
            "XXX.entity.animal.FlyingAnimal",
            "XXX.entity.animal.Squid$SquidRandomMovementGoal",
            "XXX.entity.animal.Turtle$TurtleGoHomeGoal",
            "XXX.entity.animal.Turtle$TurtleLayEggGoal",
            "XXX.entity.animal.Turtle$TurtlePanicGoal",
            "XXX.entity.animal.Turtle$TurtleRandomStrollGoal",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.axolotl.Axolotl$AxolotlGroupData",
            "XXX.animal.axolotl.Axolotl$AxolotlMoveControl",
            "XXX.animal.axolotl.Axolotl$Variant",
            "XXX.animal.axolotl.PlayDead",
            "XXX.animal.axolotl.package-info",
            "XXX.animal.horse.Llama$LlamaAttackWolfGoal",
            "XXX.animal.horse.Llama$LlamaHurtByTargetGoal",
            "XXX.animal.horse.Mule",
            "XXX.animal.horse.SkeletonTrapGoal",
            "XXX.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal",
            "XXX.animal.horse.ZombieHorse",
            "XXX.entity.animal.package-info",
            "XXX.boss.enderdragon.EndCrystal",
            "XXX.boss.enderdragon.package-info",
            "XXX.enderdragon.phases.AbstractDragonSittingPhase",
            "XXX.enderdragon.phases.DragonDeathPhase",
            "XXX.enderdragon.phases.DragonHoverPhase",
            "XXX.enderdragon.phases.DragonLandingPhase",
            "XXX.enderdragon.phases.DragonSittingAttackingPhase",
            "XXX.enderdragon.phases.DragonSittingScanningPhase",
            "XXX.enderdragon.phases.DragonTakeoffPhase",
            "XXX.enderdragon.phases.EnderDragonPhaseManager",
            "XXX.entity.boss.package-info",
            "XXX.boss.wither.WitherBoss$WitherDoNothingGoal",
            "XXX.entity.decoration.ArmorStand",
            "XXX.entity.decoration.GlowItemFrame",
            "XXX.entity.decoration.HangingEntity$1",
            "XXX.entity.decoration.ItemFrame$1",
            "XXX.entity.decoration.LeashFenceKnotEntity",
            "XXX.entity.decoration.Painting",
            "XXX.entity.item.FallingBlockEntity",
            "XXX.entity.item.PrimedTnt",
            "XXX.entity.monster.AbstractIllager",
            "XXX.entity.monster.AbstractIllager$RaiderOpenDoorGoal",
            "XXX.entity.monster.AbstractSkeleton$1",
            "XXX.entity.monster.Blaze$BlazeAttackGoal",
            "XXX.entity.monster.Creeper",
            "XXX.entity.monster.Drowned",
            "XXX.entity.monster.Drowned$DrownedGoToBeachGoal",
            "XXX.entity.monster.Drowned$DrownedMoveControl",
            "XXX.entity.monster.Drowned$DrownedTridentAttackGoal",
            "XXX.entity.monster.EnderMan",
            "XXX.entity.monster.EnderMan$EndermanLeaveBlockGoal",
            "XXX.entity.monster.EnderMan$EndermanTakeBlockGoal",
            "XXX.entity.monster.Enemy",
            "XXX.entity.monster.Illusioner$IllusionerBlindnessSpellGoal",
            "XXX.entity.monster.MagmaCube",
            "XXX.entity.monster.PatrollingMonster",
            "XXX.entity.monster.Phantom",
            "XXX.entity.monster.Ravager$RavagerNavigation",
            "XXX.entity.monster.Shulker",
            "XXX.entity.monster.Strider$StriderGoToLavaGoal",
            "XXX.entity.monster.Vex",
            "XXX.entity.monster.Vex$VexCopyOwnerTargetGoal",
            "XXX.entity.monster.Vex$VexRandomMoveGoal",
            "XXX.entity.monster.Vindicator$VindicatorBreakDoorGoal",
            "XXX.entity.monster.Vindicator$VindicatorMeleeAttackGoal",
            "XXX.entity.monster.WitherSkeleton",
            "XXX.entity.monster.Zombie",
            "XXX.entity.monster.Zombie$ZombieGroupData",
            "XXX.entity.monster.ZombifiedPiglin",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.entity.player.Player$1",
            "XXX.entity.player.PlayerModelPart",
            "XXX.entity.player.StackedContents$RecipePicker",
            "XXX.entity.projectile.AbstractArrow",
            "XXX.entity.projectile.AbstractArrow$Pickup",
            "XXX.entity.projectile.Arrow",
            "XXX.entity.projectile.EvokerFangs",
            "XXX.entity.projectile.Fireball",
            "XXX.entity.projectile.FishingHook",
            "XXX.entity.projectile.FishingHook$FishHookState",
            "XXX.entity.projectile.ItemSupplier",
            "XXX.entity.projectile.LlamaSpit",
            "XXX.entity.projectile.ProjectileUtil",
            "XXX.entity.projectile.SmallFireball",
            "XXX.entity.projectile.SpectralArrow",
            "XXX.entity.projectile.ThrowableProjectile",
            "XXX.entity.projectile.ThrownEnderpearl",
            "XXX.entity.projectile.ThrownPotion",
            "XXX.entity.projectile.WitherSkull",
            "XXX.entity.raid.Raid",
            "XXX.entity.raid.Raid$RaidStatus",
            "XXX.entity.raid.Raider",
            "XXX.entity.raid.Raider$ObtainRaidLeaderBannerGoal",
            "XXX.entity.raid.Raider$RaiderMoveThroughVillageGoal",
            "XXX.entity.raid.package-info",
            "XXX.entity.schedule.Keyframe",
            "XXX.entity.schedule.ScheduleBuilder",
            "XXX.entity.schedule.Timeline",
            "XXX.entity.vehicle.AbstractMinecart",
            "XXX.entity.vehicle.AbstractMinecart$Type",
            "XXX.entity.vehicle.AbstractMinecartContainer$1",
            "XXX.entity.vehicle.Boat$1",
            "XXX.entity.vehicle.Boat$Type",
            "XXX.entity.vehicle.Minecart",
            "XXX.entity.vehicle.MinecartCommandBlock",
            "XXX.entity.vehicle.MinecartFurnace",
            "XXX.entity.vehicle.MinecartSpawner",
            "XXX.entity.vehicle.MinecartTNT",
            "XXX.world.food.FoodConstants",
            "XXX.world.food.FoodProperties",
            "XXX.world.item.ItemCooldowns$CooldownInstance",
            "XXX.world.item.ItemNameBlockItem",
            "XXX.world.item.ItemStack$TooltipPart",
            "XXX.world.item.Items",
            "XXX.world.item.LeadItem",
            "XXX.world.item.MapItem",
            "XXX.world.item.MinecartItem",
            "XXX.world.item.MobBucketItem",
            "XXX.world.item.PickaxeItem",
            "XXX.world.item.PotionItem",
            "XXX.world.item.Rarity",
            "XXX.world.item.SaddleItem",
            "XXX.world.item.ServerItemCooldowns",
            "XXX.world.item.ShieldItem",
            "XXX.world.item.SignItem",
            "XXX.world.item.SnowballItem",
            "XXX.world.item.SpawnEggItem",
            "XXX.world.item.SplashPotionItem",
            "XXX.world.item.StandingAndWallBlockItem",
            "XXX.world.item.SwordItem",
            "XXX.world.item.Tier",
            "XXX.world.item.Tiers",
            "XXX.world.item.TooltipFlag",
            "XXX.world.item.TridentItem",
            "XXX.world.item.Vanishable",
            "XXX.world.item.Wearable",
            "XXX.world.item.WrittenBookItem",
            "XXX.item.alchemy.PotionBrewing",
            "XXX.item.alchemy.PotionUtils",
            "XXX.item.alchemy.package-info",
            "XXX.item.context.DirectionalPlaceContext",
            "XXX.item.context.UseOnContext",
            "XXX.item.crafting.AbstractCookingRecipe",
            "XXX.item.crafting.BannerDuplicateRecipe",
            "XXX.item.crafting.BookCloningRecipe",
            "XXX.item.crafting.CraftingRecipe",
            "XXX.item.crafting.FireworkRocketRecipe",
            "XXX.item.crafting.FireworkStarRecipe",
            "XXX.world.level.ClipBlockStateContext",
            "XXX.world.level.ClipContext$Block",
            "XXX.world.level.ClipContext$ShapeGetter",
            "XXX.world.level.CollisionSpliterator",
            "XXX.world.level.CommonLevelAccessor",
            "XXX.world.level.DataPackConfig",
            "XXX.world.level.EmptyTickList",
            "XXX.world.level.EntityGetter",
            "XXX.world.level.Explosion$BlockInteraction",
            "XXX.world.level.FoliageColor",
            "XXX.world.level.GameRules",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.MobSpawnSettings$Builder",
            "XXX.level.biome.MobSpawnSettings$SpawnerData",
            "XXX.block.entity.BeehiveBlockEntity$BeeData",
            "XXX.block.entity.BellBlockEntity",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BlockEntityTicker",
            "XXX.block.entity.BlockEntityType$BlockEntitySupplier",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.ChestBlockEntity$1",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.DaylightDetectorBlockEntity",
            "XXX.block.entity.DropperBlockEntity",
            "XXX.block.entity.EnderChestBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity",
            "XXX.block.entity.ShulkerBoxBlockEntity$AnimationStatus",
            "XXX.block.entity.SkullBlockEntity",
            "XXX.block.entity.SpawnerBlockEntity",
            "XXX.block.entity.StructureBlockEntity",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickingBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.AzaleaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.StateHolder$1",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.state.properties.BambooLeaves",
            "XXX.state.properties.BellAttachType",
            "XXX.state.properties.BooleanProperty",
            "XXX.state.properties.ComparatorMode",
            "XXX.state.properties.DoorHingeSide",
            "XXX.state.properties.DripstoneThickness",
            "XXX.state.properties.Half",
            "XXX.state.properties.NoteBlockInstrument",
            "XXX.state.properties.Property",
            "XXX.level.border.WorldBorder$BorderExtent",
            "XXX.level.border.WorldBorder$Settings",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.FeatureAccess",
            "XXX.level.chunk.HashMapPalette",
            "XXX.level.chunk.LevelChunk",
            "XXX.level.chunk.LevelChunk$BoundTickingBlockEntity",
            "XXX.level.chunk.LevelChunk$RebindableTickingBlockEntityWrapper",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.entity.PersistentEntitySectionManager$Callback",
            "XXX.level.entity.TransientEntitySectionManager",
            "XXX.levelgen.feature.LargeDripstoneFeature$WindOffsetter",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomSelectorFeature",
            "XXX.levelgen.feature.ReplaceBlockFeature",
            "XXX.levelgen.feature.RuinedPortalFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$Type",
            "XXX.levelgen.feature.SeaPickleFeature",
            "XXX.levelgen.feature.ShipwreckFeature",
            "XXX.levelgen.feature.SimpleBlockFeature",
            "XXX.levelgen.feature.SmallDripstoneFeature",
            "XXX.levelgen.feature.SpikeFeature",
            "XXX.feature.configurations.OreConfiguration$Predicates",
            "XXX.feature.configurations.ProbabilityFeatureConfiguration",
            "XXX.feature.configurations.RandomFeatureConfiguration",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.flat.package-info",
            "XXX.levelgen.heightproviders.ConstantHeight",
            "XXX.levelgen.heightproviders.HeightProviderType",
            "XXX.levelgen.heightproviders.UniformHeight",
            "XXX.levelgen.heightproviders.package-info",
            "XXX.levelgen.placement.CarvingMaskDecorator",
            "XXX.levelgen.placement.CaveDecoratorConfiguration",
            "XXX.levelgen.placement.CaveSurfaceDecorator",
            "XXX.levelgen.placement.ChanceDecoratorConfiguration",
            "XXX.levelgen.placement.CountDecorator",
            "XXX.levelgen.placement.CountWithExtraChanceDecorator",
            "XXX.levelgen.placement.DecoratedDecorator",
            "XXX.levelgen.placement.DecorationContext",
            "XXX.levelgen.placement.FeatureDecorator",
            "XXX.levelgen.placement.HeightmapDecorator",
            "XXX.levelgen.placement.IcebergPlacementDecorator",
            "XXX.levelgen.placement.NoiseBasedDecorator",
            "XXX.levelgen.placement.NopePlacementDecorator",
            "XXX.levelgen.placement.RepeatingDecorator",
            "XXX.levelgen.placement.SquareDecorator",
            "XXX.levelgen.placement.WaterDepthThresholdConfiguration",
            "XXX.placement.nether.CountMultiLayerDecorator",
            "XXX.levelgen.placement.package-info",
            "XXX.levelgen.structure.BoundingBox$1",
            "XXX.levelgen.structure.BuriedTreasurePieces$BuriedTreasurePiece",
            "XXX.levelgen.structure.EndCityPieces",
            "XXX.levelgen.structure.EndCityPieces$2",
            "XXX.levelgen.structure.EndCityPieces$4",
            "XXX.levelgen.structure.EndCityPieces$SectionGenerator",
            "XXX.levelgen.structure.IglooPieces$IglooPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LavaSubmergedBlockProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.BlendedNoise",
            "XXX.levelgen.synth.NoiseUtils",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.Fluids",
            "XXX.level.material.LavaFluid",
            "XXX.level.material.LavaFluid$Source",
            "XXX.level.material.Material$Builder",
            "XXX.level.material.PushReaction",
            "XXX.level.material.WaterFluid$Flowing",
            "XXX.level.material.package-info",
            "XXX.newbiome.area.AreaFactory",
            "XXX.newbiome.area.package-info",
            "XXX.newbiome.context.Context",
            "XXX.newbiome.context.package-info",
            "XXX.newbiome.layer.AddEdgeLayer",
            "XXX.newbiome.layer.AddEdgeLayer$HeatIce",
            "XXX.newbiome.layer.AddIslandLayer",
            "XXX.newbiome.layer.AddSnowLayer",
            "XXX.newbiome.layer.BiomeInitLayer",
            "XXX.newbiome.layer.Layer",
            "XXX.newbiome.layer.Layers",
            "XXX.newbiome.layer.OceanLayer",
            "XXX.newbiome.layer.RareBiomeLargeLayer",
            "XXX.newbiome.layer.RegionHillsLayer",
            "XXX.newbiome.layer.RiverInitLayer",
            "XXX.newbiome.layer.RiverMixerLayer",
            "XXX.newbiome.layer.SmoothLayer",
            "XXX.newbiome.layer.ZoomLayer$1",
            "XXX.layer.traits.AreaTransformer0",
            "XXX.layer.traits.AreaTransformer2",
            "XXX.layer.traits.C0Transformer",
            "XXX.layer.traits.CastleTransformer",
            "XXX.layer.traits.DimensionOffset1Transformer",
            "XXX.layer.traits.PixelTransformer",
            "XXX.world.level.package-info",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.pathfinder.WalkNodeEvaluator",
            "XXX.level.portal.PortalForcer",
            "XXX.level.portal.PortalShape",
            "XXX.level.redstone.Redstone",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.level.storage.DerivedLevelData",
            "XXX.level.storage.LevelData",
            "XXX.level.storage.LevelStorageException",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess",
            "XXX.level.storage.LevelStorageSource$LevelStorageAccess$2",
            "XXX.level.storage.LevelSummary$BackupStatus",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.GsonAdapterFactory",
            "XXX.storage.loot.IntRange$IntLimiter",
            "XXX.storage.loot.ItemModifierManager",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.PredicateManager$CompositePredicate",
            "XXX.storage.loot.SerializerType",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.EnchantRandomlyFunction$Serializer",
            "XXX.loot.functions.ExplorationMapFunction$Serializer",
            "XXX.loot.functions.FillPlayerHead$Serializer",
            "XXX.loot.functions.LimitCount",
            "XXX.loot.functions.LootingEnchantFunction$Serializer",
            "XXX.loot.functions.SetAttributesFunction$1",
            "XXX.loot.functions.SetAttributesFunction$Modifier",
            "XXX.loot.functions.SetAttributesFunction$Serializer",
            "XXX.loot.functions.SetContainerContents$Serializer",
            "XXX.loot.functions.SetEnchantmentsFunction$Builder",
            "XXX.loot.functions.SetItemCountFunction",
            "XXX.loot.functions.SetLoreFunction",
            "XXX.loot.functions.SetLoreFunction$Serializer",
            "XXX.loot.functions.SetNbtFunction$Serializer",
            "XXX.loot.functions.package-info",
            "XXX.loot.parameters.LootContextParam",
            "XXX.loot.predicates.AlternativeLootItemCondition$Serializer",
            "XXX.loot.predicates.ConditionReference$Serializer",
            "XXX.loot.predicates.DamageSourceCondition",
            "XXX.loot.predicates.EntityHasScoreCondition$Serializer",
            "XXX.loot.predicates.ExplosionCondition$Serializer",
            "XXX.loot.predicates.LocationCheck$Serializer",
            "XXX.loot.predicates.LootItemKilledByPlayerCondition",
            "XXX.loot.predicates.LootItemRandomChanceCondition",
            "XXX.loot.predicates.MatchTool",
            "XXX.loot.predicates.TimeCheck",
            "XXX.loot.predicates.ValueCheckCondition$Serializer",
            "XXX.providers.nbt.package-info",
            "XXX.providers.number.ConstantValue$InlineSerializer",
            "XXX.providers.number.LootNumberProviderType",
            "XXX.providers.number.NumberProviders",
            "XXX.providers.number.UniformGenerator$Serializer",
            "XXX.providers.score.ContextScoreboardNameProvider",
            "XXX.providers.score.FixedScoreboardNameProvider$Serializer",
            "XXX.providers.score.ScoreboardNameProvider",
            "XXX.providers.score.package-info",
            "XXX.level.timers.FunctionCallback",
            "XXX.level.timers.FunctionTagCallback",
            "XXX.level.timers.TimerCallback",
            "XXX.level.timers.TimerCallbacks"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.blaze3d.audio.OggAudioStream$OutputConcat \u001b[2;31m-1M\u001b[0m",
          "XXX.blaze3d.pipeline.RenderTarget \u001b[2;32m+6M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.blaze3d.platform.InputConstants$Key \u001b[2;31m-2M\u001b[0m",
          "XXX.blaze3d.platform.PngInfo$StbReaderBufferedChannel \u001b[2;31m-1M\u001b[0m",
          "XXX.blaze3d.platform.Window \u001b[2;32m+1M\u001b[0m",
          "XXX.blaze3d.systems.RenderSystem \u001b[2;31m-1M\u001b[0m",
          "XXX.blaze3d.systems.RenderSystem$AutoStorageIndexBuffer \u001b[2;31m-2M\u001b[0m",
          "XXX.blaze3d.vertex.BufferBuilder$SortState \u001b[2;31m-7M\u001b[0m",
          "XXX.realmsclient.client.FileDownload$ResourcePackProgressListener \u001b[2;31m-1M\u001b[0m",
          "XXX.realmsclient.client.Ping$Region \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.realmsclient.client.RealmsClient$CompatibleVersionResponse \u001b[2;32m+1M\u001b[0m",
          "XXX.realmsclient.dto.RealmsServer$WorldType \u001b[2;32m+1M\u001b[0m",
          "XXX.realmsclient.dto.WorldTemplate$WorldTemplateType \u001b[2;32m+1M\u001b[0m",
          "XXX.realmsclient.gui.RealmsDataFetcher$Task \u001b[2;32m+1M\u001b[0m",
          "XXX.realmsclient.gui.RealmsWorldSlotButton$Action \u001b[2;32m+1M\u001b[0m",
          "XXX.gui.screens.RealmsBackupInfoScreen \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.RealmsLongConfirmationScreen$Type \u001b[2;32m+1M\u001b[0m",
          "XXX.gui.screens.RealmsNotificationsScreen \u001b[2;31m-2M\u001b[0m",
          "XXX.gui.screens.RealmsPlayerScreen$UserAction \u001b[2;32m+1M\u001b[0m",
          "XXX.gui.screens.RealmsResetWorldScreen \u001b[2;31m-6M\u001b[0m",
          "XXX.gui.screens.RealmsSelectWorldTemplateScreen \u001b[2;32m+8M\u001b[0m \u001b[2;31m-26M\u001b[0m",
          "XXX.gui.screens.RealmsSelectWorldTemplateScreen$Entry \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsSettingsScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.RealmsUploadScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.advancements.Advancement$Builder \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.advancements.FrameType \u001b[2;32m+1M\u001b[0m",
          "XXX.advancements.critereon.BeeNestDestroyedTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.BredAnimalsTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.BrewedPotionTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ChangeDimensionTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ChanneledLightningTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ConstructBeaconTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ConsumeItemTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.CuredZombieVillagerTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.EffectsChangedTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.EnchantedItemTrigger \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.AmbientOcclusionStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.client.ResourceLoadStateTracker$ReloadReason \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.Screenshot \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.StringSplitter \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.StringSplitter$FlatComponents \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.client.StringSplitter$LineComponent \u001b[2;31m-2M\u001b[0m",
          "XXX.color.block.BlockTintCache \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.components.PlayerTabOverlay$PlayerInfoComparator \u001b[2;31m-1M\u001b[0m",
          "XXX.components.toasts.ToastComponent \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.font.FontTexture$Node \u001b[2;31m-3M\u001b[0m",
          "XXX.font.glyphs.WhiteGlyph \u001b[2;32m+1M\u001b[0m",
          "XXX.font.providers.LegacyUnicodeBitmapsProvider$Glyph \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.AccessibilityOptionsScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.ConnectScreen$1 \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.gui.screens.CreateFlatWorldScreen$DetailsList$Entry \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LanguageSelectScreen \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.LoadingOverlay \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.screens.PresetFlatWorldScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.screens.achievement.StatsScreen \u001b[2;32m+8M\u001b[0m \u001b[2;31m-14M\u001b[0m",
          "XXX.screens.controls.ControlList$KeyEntry \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.debug.GameModeSwitcherScreen$GameModeSlot \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.BeaconScreen \u001b[2;32m+5M\u001b[0m \u001b[2;31m-11M\u001b[0m",
          "XXX.screens.inventory.BookEditScreen \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.BookEditScreen$LineInfo \u001b[2;31m-5M\u001b[0m",
          "XXX.screens.inventory.BookViewScreen \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.CreativeModeInventoryScreen \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.inventory.JigsawBlockEditScreen \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.inventory.LecternScreen \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.inventory.MerchantScreen \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.inventory.tooltip.ClientBundleTooltip$Texture \u001b[2;32m+1M\u001b[0m",
          "XXX.screens.packs.PackSelectionModel \u001b[2;31m-4M\u001b[0m",
          "XXX.screens.recipebook.GhostRecipe \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.recipebook.OverlayRecipeComponent \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.screens.social.PlayerEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.screens.social.SocialInteractionsScreen$Page \u001b[2;32m+1M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen \u001b[2;32m+5M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.screens.worldselection.EditGameRulesScreen \u001b[2;32m+2M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.screens.worldselection.EditGameRulesScreen$RuleEntry \u001b[2;31m-1M\u001b[0m",
          "XXX.screens.worldselection.WorldGenSettingsComponent \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.worldselection.WorldSelectionList$WorldListEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.gui.spectator.SpectatorMenu \u001b[2;31m-5M\u001b[0m",
          "XXX.gui.spectator.SpectatorMenu$CloseSpectatorItem \u001b[2;31m-1M\u001b[0m",
          "XXX.client.main.Main \u001b[2;31m-1M\u001b[0m",
          "XXX.client.model.HumanoidModel$ArmPose \u001b[2;32m+1M\u001b[0m",
          "XXX.client.multiplayer.ClientChunkCache \u001b[2;31m-3M\u001b[0m",
          "XXX.client.multiplayer.ServerData$ServerPackStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.client.multiplayer.ServerStatusPinger \u001b[2;32m+2M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.client.multiplayer.ServerStatusPinger$2 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.particle.BreakingItemParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.BubbleParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.CampfireSmokeParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.DripParticle$CoolingDripHangParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.DripParticle$DripLandParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.DripParticle$FallAndLandParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.DripParticle$HoneyFallAndLandParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.FallingDustParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.GlowParticle \u001b[2;31m-2M\u001b[0m",
          "XXX.client.particle.LavaParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.ParticleEngine$MutableSpriteSet \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.PlayerCloudParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.SoulParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.SpitParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.WakeParticle \u001b[2;31m-1M\u001b[0m",
          "XXX.profiling.metric.MetricSampler \u001b[2;31m-1M\u001b[0m",
          "XXX.client.renderer.FaceInfo$VertexInfo \u001b[2;31m-1M\u001b[0m",
          "XXX.client.renderer.FogRenderer$FogMode \u001b[2;32m+1M\u001b[0m",
          "XXX.client.renderer.LevelRenderer$RenderChunkInfo \u001b[2;31m-4M\u001b[0m",
          "XXX.client.renderer.RenderStateShard$ShaderStateShard \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.model.ItemOverrides$PropertyMatcher \u001b[2;31m-1M\u001b[0m",
          "XXX.block.model.ItemTransforms$TransformType \u001b[2;32m+1M\u001b[0m",
          "XXX.model.multipart.Condition \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.model.multipart.OrCondition \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.chunk.ChunkRenderDispatcher \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.renderer.chunk.ChunkRenderDispatcher$CompiledChunk \u001b[2;31m-7M\u001b[0m",
          "XXX.renderer.chunk.ChunkRenderDispatcher$RenderChunk \u001b[2;31m-3M\u001b[0m",
          "XXX.renderer.debug.ChunkDebugRenderer \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.texture.TextureAtlasSprite$FrameInfo \u001b[2;31m-3M\u001b[0m",
          "XXX.renderer.texture.TextureAtlasSprite$InterpolationData \u001b[2;31m-2M\u001b[0m",
          "XXX.client.resources.SkinManager \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.resources.model.BlockModelRotation \u001b[2;32m+1M\u001b[0m",
          "XXX.resources.sounds.BiomeAmbientSoundsHandler \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.resources.sounds.Sound$Type \u001b[2;32m+1M\u001b[0m",
          "XXX.resources.sounds.SoundInstance$Attenuation \u001b[2;32m+1M\u001b[0m",
          "XXX.client.sounds.ChannelAccess$ChannelHandle \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.commands.CommandFunction \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.commands.Commands$CommandSelection \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate \u001b[2;31m-1M\u001b[0m",
          "XXX.arguments.item.ItemPredicateArgument \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.arguments.selector.EntitySelectorParser \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.commands.synchronization.SuggestionProviders$Wrapper \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.AxisCycle \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.Direction \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Direction$Axis \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.Direction$AxisDirection \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Direction8 \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.RegistryAccess \u001b[2;32m+2M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.minecraft.core.RegistryAccess$RegistryHolder \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.core.SectionPos \u001b[2;31m-1M\u001b[0m",
          "XXX.core.particles.VibrationParticleOption \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.data.BlockFamily \u001b[2;31m-6M\u001b[0m",
          "XXX.models.blockstates.Condition$CompositeCondition \u001b[2;31m-1M\u001b[0m",
          "XXX.models.blockstates.PropertyDispatch$C1 \u001b[2;31m-1M\u001b[0m",
          "XXX.models.blockstates.PropertyDispatch$C3 \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.models.blockstates.PropertyDispatch$C5 \u001b[2;32m+8M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.models.blockstates.VariantProperty \u001b[2;31m-2M\u001b[0m",
          "XXX.data.recipes.RecipeProvider \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.data.structures.SnbtToNbt$TaskResult \u001b[2;31m-4M\u001b[0m",
          "XXX.data.tags.TagsProvider \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.network.ConnectionProtocol$ProtocolBuilder \u001b[2;31m-2M\u001b[0m",
          "XXX.network.chat.ChatType \u001b[2;32m+1M\u001b[0m",
          "XXX.network.chat.ClickEvent$Action \u001b[2;32m+1M\u001b[0m",
          "XXX.network.chat.HoverEvent$Action \u001b[2;32m+1M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.network.chat.HoverEvent$ItemStackInfo \u001b[2;31m-3M\u001b[0m",
          "XXX.network.chat.SubStringSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.network.protocol.PacketFlow \u001b[2;32m+1M\u001b[0m",
          "XXX.protocol.game.ClientGamePacketListener \u001b[2;32m+1P\u001b[0m",
          "XXX.protocol.game.ClientboundBossEventPacket \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.ClientboundBossEventPacket$AddOperation \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.ClientboundBossEventPacket$UpdateNameOperation \u001b[2;31m-2M\u001b[0m",
          "XXX.protocol.game.ClientboundBossEventPacket$UpdatePropertiesOperation \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.realms.RealmsConnect$1 \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.server.ServerFunctionManager$QueuedCommand \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.DebugCommand$Tracer \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.EmoteCommands \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.server.commands.ExecuteCommand \u001b[2;32m+20M\u001b[0m \u001b[2;31m-20M\u001b[0m",
          "XXX.server.commands.ExperienceCommand$Type \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.commands.FillCommand$Mode \u001b[2;32m+1M\u001b[0m",
          "XXX.server.commands.GameRuleCommand \u001b[2;31m-2M\u001b[0m",
          "XXX.server.commands.LootCommand \u001b[2;32m+10M\u001b[0m \u001b[2;31m-10M\u001b[0m",
          "XXX.server.commands.SeedCommand \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.dedicated.Settings$MutableValue \u001b[2;31m-1M\u001b[0m",
          "XXX.server.gui.MinecraftServerGui \u001b[2;31m-2M\u001b[0m",
          "XXX.server.level.ChunkHolder$FullChunkStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.server.level.ChunkTaskPriorityQueue \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerChunkCache$MainThreadExecutor \u001b[2;31m-1M\u001b[0m",
          "XXX.server.level.ServerLevel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.server.network.TextFilterClient$RequestFailedException \u001b[2;31m-1M\u001b[0m",
          "XXX.packs.repository.Pack$Position \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.tags.StaticTagHelper$Wrapper \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.tags.Tag \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.tags.TagManager$LoaderInfo \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.util.LowerCaseEnumTypeAdapterFactory \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.util.SortedArraySet \u001b[2;31m-3M\u001b[0m",
          "XXX.util.profiling.ActiveProfiler$PathEntry \u001b[2;31m-5M\u001b[0m",
          "XXX.profiling.registry.MeasurementCategory \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.behavior.GateBehavior$RunningPolicy \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.PoiCompetitorScan \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.PrepareRamNearestTarget \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.behavior.ShufflingList \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.sensing.NearestVisibleLivingEntitySensor \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.targeting.TargetingConditions \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.ai.util.HoverRandomPos \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.village.poi.PoiRecord \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.Bee \u001b[2;32m+23M\u001b[0m \u001b[2;31m-43M\u001b[0m",
          "XXX.entity.animal.Bee$BaseBeeGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Bee$BeeGoToHiveGoal \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.animal.Bee$BeeGrowCropGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Bee$BeeLocateHiveGoal \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.Bee$BeePollinateGoal \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Dolphin \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Ocelot \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Panda$Gene \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Parrot \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Pufferfish \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.animal.Rabbit \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Squid \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.TropicalFish$Pattern \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.animal.Turtle \u001b[2;32m+2M\u001b[0m \u001b[2;31m-13M\u001b[0m",
          "XXX.animal.goat.Goat$GoatNodeEvaluator \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Evoker$EvokerAttackSpellGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Evoker$EvokerSummonSpellGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Guardian \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.Phantom$PhantomAttackPlayerTargetGoal \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Ravager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.monster.Slime \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.monster.SpellcasterIllager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.inventory.ClickAction \u001b[2;32m+1M\u001b[0m",
          "XXX.world.inventory.GrindstoneMenu \u001b[2;31m-1M\u001b[0m",
          "XXX.world.inventory.RecipeBookType \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.ArmorMaterials \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.DiggerItem \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.HoeItem \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.Item$Properties \u001b[2;31m-7M\u001b[0m",
          "XXX.item.crafting.Ingredient$ItemValue \u001b[2;31m-1M\u001b[0m",
          "XXX.item.crafting.RecipeManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.item.crafting.UpgradeRecipe \u001b[2;31m-3M\u001b[0m",
          "XXX.item.enchantment.EnchantmentCategory \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.item.enchantment.ProtectionEnchantment$Type \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.GameRules$Category \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.GameRules$IntegerValue \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.GameRules$Type \u001b[2;31m-2M\u001b[0m",
          "XXX.world.level.LightLayer \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.NaturalSpawner$SpawnState \u001b[2;31m-4M\u001b[0m",
          "XXX.world.level.StructureFeatureManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.biome.AmbientMoodSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.biome.Biome \u001b[2;32m+14M\u001b[0m \u001b[2;31m-16M\u001b[0m",
          "XXX.level.biome.Biome$ClimateParameters \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.biome.Biome$Precipitation \u001b[2;32m+1M\u001b[0m",
          "XXX.level.biome.BiomeGenerationSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.biome.FuzzyOffsetConstantColumnBiomeZoomer \u001b[2;32m+1M\u001b[0m",
          "XXX.level.biome.MultiNoiseBiomeSource$PresetInstance \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.biome.OverworldBiomeSource \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.level.block.ComposterBlock \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.DoubleBlockCombiner$BlockType \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.LightBlock \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.PowderSnowBlock \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.PressurePlateBlock$Sensitivity \u001b[2;32m+1M\u001b[0m",
          "XXX.block.entity.BannerPattern \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.BarrelBlockEntity \u001b[2;31m-2M\u001b[0m",
          "XXX.state.properties.RailShape \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.SculkSensorPhase \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.StairsShape \u001b[2;32m+1M\u001b[0m",
          "XXX.state.properties.Tilt \u001b[2;32m+1M\u001b[0m",
          "XXX.level.border.BorderStatus \u001b[2;32m+1M\u001b[0m",
          "XXX.chunk.storage.IOWorker$PendingStore \u001b[2;31m-3M\u001b[0m",
          "XXX.chunk.storage.RegionFile \u001b[2;31m-1M\u001b[0m",
          "XXX.chunk.storage.SectionStorage \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.entity.Visibility \u001b[2;32m+1M\u001b[0m",
          "XXX.level.gameevent.BlockPositionSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.gameevent.EntityPositionSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Aquifer$NoiseBasedAquifer$AquiferStatus \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Cavifier$QuantizedSpaghettiRarity \u001b[2;31m-2M\u001b[0m",
          "XXX.level.levelgen.Column$Line \u001b[2;31m-1M\u001b[0m",
          "XXX.level.levelgen.GenerationStep$Carving \u001b[2;32m+1M\u001b[0m",
          "XXX.level.levelgen.GeodeBlockSettings \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.level.levelgen.GeodeLayerSettings \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.levelgen.Heightmap$Types \u001b[2;32m+1M\u001b[0m",
          "XXX.level.levelgen.NoiseBasedChunkGenerator \u001b[2;32m+3M\u001b[0m \u001b[2;31m-8M\u001b[0m",
          "XXX.level.levelgen.WorldGenSettings \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.carver.CarverConfiguration \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.feature.FossilFeatureConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.levelgen.feature.HugeFungusConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.levelgen.feature.JigsawFeature \u001b[2;31m-3M\u001b[0m",
          "XXX.levelgen.feature.SpikeFeature$SpikeCacheLoader \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.feature.WeightedConfiguredFeature \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.DiskConfiguration \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.feature.configurations.EndGatewayConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.GeodeConfiguration \u001b[2;32m+13M\u001b[0m \u001b[2;31m-13M\u001b[0m",
          "XXX.feature.configurations.GrowingPlantConfiguration \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.feature.configurations.HugeMushroomFeatureConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.LargeDripstoneConfiguration \u001b[2;32m+9M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.feature.configurations.MineshaftConfiguration \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.feature.configurations.OceanRuinConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.ReplaceBlockConfiguration \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.configurations.RootSystemConfiguration \u001b[2;32m+12M\u001b[0m \u001b[2;31m-12M\u001b[0m",
          "XXX.feature.configurations.SpikeConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.configurations.TreeConfiguration \u001b[2;32m+9M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.feature.configurations.UnderwaterMagmaConfiguration \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.featuresize.TwoLayersFeatureSize \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.feature.foliageplacers.MegaJungleFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.foliageplacers.PineFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.feature.foliageplacers.SpruceFoliagePlacer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.JunglePyramidPiece$MossStoneSelector \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.MineShaftPieces \u001b[2;31m-2M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleRoom \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.OceanMonumentPieces$RoomDefinition \u001b[2;31m-6M\u001b[0m",
          "XXX.levelgen.structure.RuinedPortalPiece$VerticalPlacement \u001b[2;32m+1M\u001b[0m",
          "XXX.levelgen.structure.ShipwreckPieces \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces \u001b[2;31m-3M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces$SmoothStoneSelector \u001b[2;31m-1M\u001b[0m",
          "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType \u001b[2;32m+1M\u001b[0m",
          "XXX.saveddata.maps.MapItemSavedData$HoldingPlayer \u001b[2;31m-4M\u001b[0m",
          "XXX.storage.loot.IntRange \u001b[2;31m-3M\u001b[0m",
          "XXX.storage.loot.LootPool \u001b[2;31m-6M\u001b[0m",
          "XXX.loot.entries.EmptyLootItem \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.entries.LootPoolSingletonContainer \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.ApplyExplosionDecay \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.CopyNbtFunction$CopyOperation \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.CopyNbtFunction$MergeStrategy$3 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.EnchantRandomlyFunction \u001b[2;31m-2M\u001b[0m",
          "XXX.loot.functions.ExplorationMapFunction \u001b[2;31m-7M\u001b[0m",
          "XXX.loot.functions.LootingEnchantFunction \u001b[2;31m-4M\u001b[0m",
          "XXX.loot.functions.SetBannerPatternFunction$Builder \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.SetContainerContents \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.functions.SetItemDamageFunction \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.functions.SmeltItemFunction \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.predicates.AlternativeLootItemCondition \u001b[2;31m-2M\u001b[0m",
          "XXX.loot.predicates.EntityHasScoreCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.predicates.LootItemEntityPropertyCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.loot.predicates.LootItemRandomChanceWithLootingCondition \u001b[2;31m-3M\u001b[0m",
          "XXX.providers.nbt.StorageNbtProvider \u001b[2;31m-2M\u001b[0m",
          "XXX.level.timers.TimerQueue$Event \u001b[2;31m-1M\u001b[0m",
          "XXX.phys.shapes.Shapes \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.world.scores.Team$CollisionRule \u001b[2;32m+1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.audio.OggAudioStream$OutputConcat",
        "differences": {
          "added": [
            "int access$000(OggAudioStream$OutputConcat)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.pipeline.RenderTarget",
        "differences": {
          "added": [
            "void <init>(int,int,boolean,boolean)",
            "void lambda$blitToScreen$3(int,int,boolean)",
            "void lambda$unbindWrite$2()",
            "void lambda$bindWrite$1(boolean)",
            "void lambda$resize$0(int,int,boolean)"
          ],
          "removed": [
            "void <init>(boolean)",
            "void lambda$blitToScreen$4(int,int,boolean)",
            "void lambda$unbindWrite$3()",
            "void lambda$bindWrite$2(boolean)",
            "void lambda$resize$1(int,int,boolean)",
            "float[] lambda$new$0()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.platform.InputConstants$Key",
        "differences": {
          "added": [
            "void <init>(String,InputConstants$Type,int,InputConstants$1)",
            "Map access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.platform.PngInfo$StbReaderBufferedChannel",
        "differences": {
          "added": [
            "void <init>(ReadableByteChannel,PngInfo$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.platform.Window",
        "differences": {
          "added": [],
          "removed": [
            "void setWindowed(int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.systems.RenderSystem",
        "differences": {
          "added": [
            "Logger access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.systems.RenderSystem$AutoStorageIndexBuffer",
        "differences": {
          "added": [
            "void <init>(int,int,RenderSystem$AutoStorageIndexBuffer$IndexGenerator,RenderSystem$1)",
            "void access$100(RenderSystem$AutoStorageIndexBuffer,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.vertex.BufferBuilder$SortState",
        "differences": {
          "added": [
            "void <init>(VertexFormat$Mode,int,Vector3f[],float,float,float,BufferBuilder$1)",
            "VertexFormat$Mode access$100(BufferBuilder$SortState)",
            "int access$200(BufferBuilder$SortState)",
            "Vector3f[] access$300(BufferBuilder$SortState)",
            "float access$400(BufferBuilder$SortState)",
            "float access$500(BufferBuilder$SortState)",
            "float access$600(BufferBuilder$SortState)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.client.FileDownload$ResourcePackProgressListener",
        "differences": {
          "added": [
            "void <init>(FileDownload,File,RealmsDownloadLatestWorldScreen$DownloadStatus,WorldDownload,FileDownload$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.client.Ping$Region",
        "differences": {
          "added": [
            "String access$000(Ping$Region)",
            "String access$100(Ping$Region)"
          ],
          "removed": [
            "Ping$Region[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.client.RealmsClient$CompatibleVersionResponse",
        "differences": {
          "added": [],
          "removed": [
            "RealmsClient$CompatibleVersionResponse[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.dto.RealmsServer$WorldType",
        "differences": {
          "added": [],
          "removed": [
            "RealmsServer$WorldType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.dto.WorldTemplate$WorldTemplateType",
        "differences": {
          "added": [],
          "removed": [
            "WorldTemplate$WorldTemplateType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.RealmsDataFetcher$Task",
        "differences": {
          "added": [],
          "removed": [
            "RealmsDataFetcher$Task[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.RealmsWorldSlotButton$Action",
        "differences": {
          "added": [],
          "removed": [
            "RealmsWorldSlotButton$Action[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsBackupInfoScreen",
        "differences": {
          "added": [
            "Component access$100(RealmsBackupInfoScreen,String,String)",
            "Backup access$200(RealmsBackupInfoScreen)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsLongConfirmationScreen$Type",
        "differences": {
          "added": [],
          "removed": [
            "RealmsLongConfirmationScreen$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsNotificationsScreen",
        "differences": {
          "added": [
            "boolean access$002(boolean)",
            "boolean access$102(boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsPlayerScreen$UserAction",
        "differences": {
          "added": [],
          "removed": [
            "RealmsPlayerScreen$UserAction[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsResetWorldScreen",
        "differences": {
          "added": [
            "Logger access$100()",
            "WorldTemplatePaginatedList access$202(RealmsResetWorldScreen,WorldTemplatePaginatedList)",
            "WorldTemplatePaginatedList access$302(RealmsResetWorldScreen,WorldTemplatePaginatedList)",
            "WorldTemplatePaginatedList access$402(RealmsResetWorldScreen,WorldTemplatePaginatedList)",
            "WorldTemplatePaginatedList access$502(RealmsResetWorldScreen,WorldTemplatePaginatedList)",
            "void access$600(RealmsResetWorldScreen,PoseStack,int,int,Component,ResourceLocation,boolean,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectWorldTemplateScreen",
        "differences": {
          "added": [
            "Either access$000(RealmsSelectWorldTemplateScreen,WorldTemplatePaginatedList,RealmsClient)",
            "Minecraft access$100(RealmsSelectWorldTemplateScreen)",
            "Logger access$200()",
            "RealmsSelectWorldTemplateScreen$WorldTemplateObjectSelectionList access$300(RealmsSelectWorldTemplateScreen)",
            "List access$402(RealmsSelectWorldTemplateScreen,List)",
            "boolean access$500(RealmsSelectWorldTemplateScreen)",
            "int access$600(int)",
            "String access$700(RealmsSelectWorldTemplateScreen)",
            "int access$800(RealmsSelectWorldTemplateScreen)",
            "int access$802(RealmsSelectWorldTemplateScreen,int)",
            "void access$900(RealmsSelectWorldTemplateScreen)",
            "int access$1002(RealmsSelectWorldTemplateScreen,int)",
            "void access$1100(RealmsSelectWorldTemplateScreen)",
            "Font access$1300(RealmsSelectWorldTemplateScreen)",
            "Font access$1400(RealmsSelectWorldTemplateScreen)",
            "Font access$1500(RealmsSelectWorldTemplateScreen)",
            "Font access$1600(RealmsSelectWorldTemplateScreen)",
            "ResourceLocation access$1700()",
            "Font access$1800(RealmsSelectWorldTemplateScreen)",
            "Font access$1900(RealmsSelectWorldTemplateScreen)",
            "ResourceLocation access$2000()",
            "ResourceLocation access$2100()",
            "Component access$2202(RealmsSelectWorldTemplateScreen,Component)",
            "Component access$2300()",
            "String access$702(RealmsSelectWorldTemplateScreen,String)",
            "Component access$2400()"
          ],
          "removed": [
            "Minecraft access$000(RealmsSelectWorldTemplateScreen)",
            "int access$100(int)",
            "Font access$200(RealmsSelectWorldTemplateScreen)",
            "Font access$300(RealmsSelectWorldTemplateScreen)",
            "Font access$400(RealmsSelectWorldTemplateScreen)",
            "Font access$500(RealmsSelectWorldTemplateScreen)",
            "Font access$600(RealmsSelectWorldTemplateScreen)",
            "Font access$700(RealmsSelectWorldTemplateScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectWorldTemplateScreen$Entry",
        "differences": {
          "added": [
            "WorldTemplate access$1200(RealmsSelectWorldTemplateScreen$Entry)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSettingsScreen",
        "differences": {
          "added": [
            "void lambda$null$2(boolean)"
          ],
          "removed": [
            "void lambda$init$2(boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsUploadScreen",
        "differences": {
          "added": [
            "void lambda$null$3(long,UploadResult)"
          ],
          "removed": [
            "void lambda$upload$3(long,UploadResult)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.Advancement$Builder",
        "differences": {
          "added": [
            "void <init>(ResourceLocation,DisplayInfo,AdvancementRewards,Map,String[][],Advancement$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.FrameType",
        "differences": {
          "added": [],
          "removed": [
            "FrameType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BeeNestDestroyedTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BredAnimalsTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BrewedPotionTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ChangeDimensionTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ChanneledLightningTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ConstructBeaconTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ConsumeItemTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.CuredZombieVillagerTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.EffectsChangedTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.EnchantedItemTrigger",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.AmbientOcclusionStatus",
        "differences": {
          "added": [],
          "removed": [
            "AmbientOcclusionStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.ResourceLoadStateTracker$ReloadReason",
        "differences": {
          "added": [
            "String access$400(ResourceLoadStateTracker$ReloadReason)"
          ],
          "removed": [
            "ResourceLoadStateTracker$ReloadReason[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.Screenshot",
        "differences": {
          "added": [
            "Style lambda$null$1(File,Style)"
          ],
          "removed": [
            "Style lambda$_grab$1(File,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.StringSplitter",
        "differences": {
          "added": [
            "StringSplitter$WidthProvider access$000(StringSplitter)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.StringSplitter$FlatComponents",
        "differences": {
          "added": [
            "List access$300(StringSplitter$FlatComponents)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.StringSplitter$LineComponent",
        "differences": {
          "added": [
            "String access$100(StringSplitter$LineComponent)",
            "Style access$200(StringSplitter$LineComponent)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.color.block.BlockTintCache",
        "differences": {
          "added": [
            "BlockTintCache$LatestCacheInfo lambda$new$0()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.components.PlayerTabOverlay$PlayerInfoComparator",
        "differences": {
          "added": [
            "void <init>(PlayerTabOverlay$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.components.toasts.ToastComponent",
        "differences": {
          "added": [
            "Minecraft access$100(ToastComponent)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.FontTexture$Node",
        "differences": {
          "added": [
            "void <init>(int,int,int,int,FontTexture$1)",
            "int access$100(FontTexture$Node)",
            "int access$200(FontTexture$Node)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.glyphs.WhiteGlyph",
        "differences": {
          "added": [],
          "removed": [
            "WhiteGlyph[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.font.providers.LegacyUnicodeBitmapsProvider$Glyph",
        "differences": {
          "added": [
            "void <init>(int,int,int,int,NativeImage,LegacyUnicodeBitmapsProvider$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.AccessibilityOptionsScreen",
        "differences": {
          "added": [
            "void lambda$null$0(boolean)"
          ],
          "removed": [
            "void lambda$createFooter$0(boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.ConnectScreen$1",
        "differences": {
          "added": [
            "void <init>(ConnectScreen,String,String,int)",
            "void lambda$run$2(String)",
            "void lambda$run$1()",
            "void lambda$run$0(ConnectScreen,Component)"
          ],
          "removed": [
            "void <init>(ConnectScreen,String,ServerAddress,Minecraft)",
            "void lambda$run$1(Minecraft,String)",
            "void lambda$run$0(Minecraft)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.CreateFlatWorldScreen$DetailsList$Entry",
        "differences": {
          "added": [
            "void <init>(CreateFlatWorldScreen$DetailsList,CreateFlatWorldScreen$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LanguageSelectScreen",
        "differences": {
          "added": [
            "LanguageManager access$000(LanguageSelectScreen)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry",
        "differences": {
          "added": [
            "LanguageInfo access$100(LanguageSelectScreen$LanguageSelectionList$Entry)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.LoadingOverlay",
        "differences": {
          "added": [
            "ResourceLocation access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.PresetFlatWorldScreen",
        "differences": {
          "added": [
            "Biome lambda$null$4(Registry,ResourceKey)",
            "List access$000()",
            "CreateFlatWorldScreen access$200(PresetFlatWorldScreen)",
            "FlatLevelGeneratorSettings access$302(PresetFlatWorldScreen,FlatLevelGeneratorSettings)",
            "FlatLevelGeneratorSettings access$300(PresetFlatWorldScreen)",
            "String access$400(Registry,FlatLevelGeneratorSettings)",
            "EditBox access$500(PresetFlatWorldScreen)"
          ],
          "removed": [
            "Biome lambda$preset$4(Registry,ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.achievement.StatsScreen",
        "differences": {
          "added": [
            "String access$100(Stat)",
            "StatsCounter access$300(StatsScreen)",
            "int access$800(StatsScreen,int)",
            "void access$900(StatsScreen,PoseStack,int,int,int,int)",
            "StatsScreen$ItemStatisticsList access$1200(StatsScreen)",
            "void access$1300(StatsScreen,PoseStack,int,int,Item)",
            "Font access$1400(StatsScreen)",
            "Font access$1500(StatsScreen)",
            "Font access$1600(StatsScreen)",
            "Font access$1700(StatsScreen)",
            "Font access$1800(StatsScreen)",
            "Font access$1900(StatsScreen)",
            "Font access$2000(StatsScreen)",
            "Font access$2100(StatsScreen)"
          ],
          "removed": [
            "Font access$000(StatsScreen)",
            "Font access$100(StatsScreen)",
            "Font access$300(StatsScreen)",
            "Font access$600(StatsScreen)",
            "Font access$700(StatsScreen)",
            "Font access$800(StatsScreen)",
            "Font access$900(StatsScreen)",
            "Font access$1200(StatsScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.controls.ControlList$KeyEntry",
        "differences": {
          "added": [
            "void <init>(ControlList,KeyMapping,Component,ControlList$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.debug.GameModeSwitcherScreen$GameModeSlot",
        "differences": {
          "added": [
            "GameModeSwitcherScreen$GameModeIcon access$100(GameModeSwitcherScreen$GameModeSlot)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BeaconScreen",
        "differences": {
          "added": [
            "MobEffect access$002(BeaconScreen,MobEffect)",
            "MobEffect access$102(BeaconScreen,MobEffect)",
            "boolean access$202(BeaconScreen,boolean)",
            "ResourceLocation access$300()",
            "List access$400(BeaconScreen)",
            "List access$500(BeaconScreen)",
            "MobEffect access$000(BeaconScreen)",
            "MobEffect access$100(BeaconScreen)",
            "Minecraft access$600(BeaconScreen)",
            "Minecraft access$700(BeaconScreen)",
            "Minecraft access$800(BeaconScreen)"
          ],
          "removed": [
            "List access$000(BeaconScreen)",
            "List access$100(BeaconScreen)",
            "Minecraft access$200(BeaconScreen)",
            "Minecraft access$300(BeaconScreen)",
            "Minecraft access$400(BeaconScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BookEditScreen",
        "differences": {
          "added": [
            "int access$1000(int[],int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BookEditScreen$LineInfo",
        "differences": {
          "added": [
            "Component access$200(BookEditScreen$LineInfo)",
            "int access$300(BookEditScreen$LineInfo)",
            "int access$400(BookEditScreen$LineInfo)",
            "String access$800(BookEditScreen$LineInfo)",
            "Style access$900(BookEditScreen$LineInfo)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.BookViewScreen",
        "differences": {
          "added": [
            "List access$000(CompoundTag)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen",
        "differences": {
          "added": [
            "SimpleContainer access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.JigsawBlockEditScreen",
        "differences": {
          "added": [
            "int access$000(JigsawBlockEditScreen)",
            "int access$002(JigsawBlockEditScreen,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.LecternScreen",
        "differences": {
          "added": [
            "void access$000(LecternScreen)",
            "void access$100(LecternScreen)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.MerchantScreen",
        "differences": {
          "added": [
            "int access$000(MerchantScreen)",
            "void access$300(MerchantScreen,PoseStack,ItemStack,int,int)"
          ],
          "removed": [
            "void access$000(MerchantScreen,PoseStack,ItemStack,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.tooltip.ClientBundleTooltip$Texture",
        "differences": {
          "added": [],
          "removed": [
            "ClientBundleTooltip$Texture[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.packs.PackSelectionModel",
        "differences": {
          "added": [
            "Function access$000(PackSelectionModel)",
            "Runnable access$100(PackSelectionModel)",
            "List access$200(PackSelectionModel)",
            "List access$300(PackSelectionModel)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.GhostRecipe",
        "differences": {
          "added": [
            "float access$000(GhostRecipe)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.recipebook.OverlayRecipeComponent",
        "differences": {
          "added": [
            "ResourceLocation access$100()",
            "boolean access$200(OverlayRecipeComponent)",
            "float access$300(OverlayRecipeComponent)",
            "Minecraft access$400(OverlayRecipeComponent)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.social.PlayerEntry",
        "differences": {
          "added": [
            "void lambda$null$4(SocialInteractionsScreen,PoseStack,int,int)",
            "void lambda$null$1(SocialInteractionsScreen,PoseStack,int,int)",
            "MutableComponent access$000(PlayerEntry,MutableComponent)"
          ],
          "removed": [
            "void lambda$new$4(SocialInteractionsScreen,PoseStack,int,int)",
            "void lambda$new$1(SocialInteractionsScreen,PoseStack,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.social.SocialInteractionsScreen$Page",
        "differences": {
          "added": [],
          "removed": [
            "SocialInteractionsScreen$Page[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen",
        "differences": {
          "added": [
            "void lambda$null$17(DataPackConfig,ServerResources)",
            "void lambda$null$16()",
            "void lambda$null$15(boolean)",
            "void lambda$null$8(Optional)",
            "void lambda$null$7(GameRules)",
            "String access$000(CreateWorldScreen)"
          ],
          "removed": [
            "void lambda$tryApplyNewDataPacks$17(DataPackConfig,ServerResources)",
            "void lambda$tryApplyNewDataPacks$16()",
            "void lambda$tryApplyNewDataPacks$15(boolean)",
            "void lambda$init$8(Optional)",
            "void lambda$init$7(GameRules)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.EditGameRulesScreen",
        "differences": {
          "added": [
            "void access$600(EditGameRulesScreen,EditGameRulesScreen$RuleEntry)",
            "void access$700(EditGameRulesScreen,EditGameRulesScreen$RuleEntry)",
            "Minecraft access$800(EditGameRulesScreen)",
            "Font access$900(EditGameRulesScreen)",
            "void access$1100(EditGameRulesScreen,List)"
          ],
          "removed": [
            "Minecraft access$600(EditGameRulesScreen)",
            "Font access$700(EditGameRulesScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.EditGameRulesScreen$RuleEntry",
        "differences": {
          "added": [
            "List access$1000(EditGameRulesScreen$RuleEntry)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.WorldGenSettingsComponent",
        "differences": {
          "added": [
            "void lambda$null$9(Minecraft,CreateWorldScreen,RegistryAccess$RegistryHolder,Lifecycle,WorldGenSettings)",
            "void lambda$null$8(Minecraft,CreateWorldScreen,RegistryAccess$RegistryHolder,WorldGenSettings,boolean)"
          ],
          "removed": [
            "void lambda$init$9(Minecraft,CreateWorldScreen,RegistryAccess$RegistryHolder,Lifecycle,WorldGenSettings)",
            "void lambda$init$8(Minecraft,CreateWorldScreen,RegistryAccess$RegistryHolder,WorldGenSettings,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.WorldSelectionList$WorldListEntry",
        "differences": {
          "added": [
            "String lambda$null$5()",
            "void lambda$null$1()",
            "LevelSummary access$000(WorldSelectionList$WorldListEntry)"
          ],
          "removed": [
            "String lambda$editWorld$5()",
            "void lambda$joinWorld$1()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.SpectatorMenu",
        "differences": {
          "added": [
            "Component access$100()",
            "int access$200(SpectatorMenu)",
            "int access$202(SpectatorMenu,int)",
            "Component access$300()",
            "Component access$400()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.spectator.SpectatorMenu$CloseSpectatorItem",
        "differences": {
          "added": [
            "void <init>(SpectatorMenu$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.main.Main",
        "differences": {
          "added": [
            "Logger access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.HumanoidModel$ArmPose",
        "differences": {
          "added": [],
          "removed": [
            "HumanoidModel$ArmPose[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientChunkCache",
        "differences": {
          "added": [
            "ClientLevel access$800(ClientChunkCache)",
            "ClientChunkCache$Storage access$900(ClientChunkCache)",
            "Logger access$1000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ServerData$ServerPackStatus",
        "differences": {
          "added": [],
          "removed": [
            "ServerData$ServerPackStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ServerStatusPinger",
        "differences": {
          "added": [
            "void pingLegacyServer(ServerData)",
            "Component access$000(int,int)",
            "Logger access$100()",
            "void access$200(ServerStatusPinger,ServerData)",
            "Splitter access$300()"
          ],
          "removed": [
            "void onPingFailed(Component,ServerData)",
            "void pingLegacyServer(InetSocketAddress,ServerData)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ServerStatusPinger$2",
        "differences": {
          "added": [
            "void <init>(ServerStatusPinger,ServerAddress,ServerData)"
          ],
          "removed": [
            "void <init>(ServerStatusPinger,InetSocketAddress,ServerData)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.BreakingItemParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,ItemStack,BreakingItemParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.BubbleParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,BubbleParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.CampfireSmokeParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,boolean,CampfireSmokeParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.DripParticle$CoolingDripHangParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,Fluid,ParticleOptions,DripParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.DripParticle$DripLandParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,Fluid,DripParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.DripParticle$FallAndLandParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,Fluid,ParticleOptions,DripParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.DripParticle$HoneyFallAndLandParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,Fluid,ParticleOptions,DripParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.FallingDustParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,float,float,float,SpriteSet,FallingDustParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.GlowParticle",
        "differences": {
          "added": [
            "Random access$000()",
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,GlowParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.LavaParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,LavaParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.ParticleEngine$MutableSpriteSet",
        "differences": {
          "added": [
            "void <init>(ParticleEngine,ParticleEngine$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.PlayerCloudParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,PlayerCloudParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.SoulParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,SoulParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.SpitParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,SpitParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.WakeParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,WakeParticle$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.profiling.metric.MetricSampler",
        "differences": {
          "added": [
            "void <init>(Metric,DoubleSupplier,Runnable,MetricSampler$ThresholdAlerter,MetricSampler$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.FaceInfo$VertexInfo",
        "differences": {
          "added": [
            "void <init>(int,int,int,FaceInfo$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.FogRenderer$FogMode",
        "differences": {
          "added": [],
          "removed": [
            "FogRenderer$FogMode[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.LevelRenderer$RenderChunkInfo",
        "differences": {
          "added": [
            "ChunkRenderDispatcher$RenderChunk access$100(LevelRenderer$RenderChunkInfo)",
            "void <init>(ChunkRenderDispatcher$RenderChunk,Direction,int,LevelRenderer$1)",
            "int access$400(LevelRenderer$RenderChunkInfo)",
            "byte access$500(LevelRenderer$RenderChunkInfo)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.RenderStateShard$ShaderStateShard",
        "differences": {
          "added": [
            "ShaderInstance lambda$null$2()"
          ],
          "removed": [
            "ShaderInstance lambda$new$2()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.block.model.ItemOverrides$PropertyMatcher",
        "differences": {
          "added": [
            "void <init>(int,float,ItemOverrides$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.block.model.ItemTransforms$TransformType",
        "differences": {
          "added": [],
          "removed": [
            "ItemTransforms$TransformType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.block.model.multipart.Condition",
        "differences": {
          "added": [
            "boolean lambda$null$2(BlockState)",
            "boolean lambda$null$0(BlockState)"
          ],
          "removed": [
            "boolean lambda$static$2(BlockState)",
            "boolean lambda$static$0(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.block.model.multipart.OrCondition",
        "differences": {
          "added": [
            "boolean lambda$null$1(BlockState,Predicate)"
          ],
          "removed": [
            "boolean lambda$getPredicate$1(BlockState,Predicate)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.chunk.ChunkRenderDispatcher",
        "differences": {
          "added": [
            "void lambda$null$2(ChunkRenderDispatcher$ChunkTaskResult,ChunkBufferBuilderPack)",
            "Level access$000(ChunkRenderDispatcher)",
            "LevelRenderer access$200(ChunkRenderDispatcher)",
            "ChunkBufferBuilderPack access$300(ChunkRenderDispatcher)"
          ],
          "removed": [
            "void lambda$runTask$2(ChunkRenderDispatcher$ChunkTaskResult,ChunkBufferBuilderPack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$CompiledChunk",
        "differences": {
          "added": [
            "Set access$100(ChunkRenderDispatcher$CompiledChunk)",
            "boolean access$702(ChunkRenderDispatcher$CompiledChunk,boolean)",
            "Set access$800(ChunkRenderDispatcher$CompiledChunk)",
            "BufferBuilder$SortState access$902(ChunkRenderDispatcher$CompiledChunk,BufferBuilder$SortState)",
            "VisibilitySet access$1002(ChunkRenderDispatcher$CompiledChunk,VisibilitySet)",
            "List access$1100(ChunkRenderDispatcher$CompiledChunk)",
            "BufferBuilder$SortState access$900(ChunkRenderDispatcher$CompiledChunk)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk",
        "differences": {
          "added": [
            "void access$400(ChunkRenderDispatcher$RenderChunk,Set)",
            "BlockPos$MutableBlockPos access$500(ChunkRenderDispatcher$RenderChunk)",
            "void access$600(ChunkRenderDispatcher$RenderChunk,BufferBuilder)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.debug.ChunkDebugRenderer",
        "differences": {
          "added": [
            "Minecraft access$300(ChunkDebugRenderer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.texture.TextureAtlasSprite$FrameInfo",
        "differences": {
          "added": [
            "void <init>(int,int,TextureAtlasSprite$1)",
            "int access$600(TextureAtlasSprite$FrameInfo)",
            "int access$700(TextureAtlasSprite$FrameInfo)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.texture.TextureAtlasSprite$InterpolationData",
        "differences": {
          "added": [
            "void <init>(TextureAtlasSprite,TextureAtlasSprite$Info,int,TextureAtlasSprite$1)",
            "void access$1700(TextureAtlasSprite$InterpolationData,TextureAtlasSprite$AnimatedTexture)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.SkinManager",
        "differences": {
          "added": [
            "void lambda$null$3(Map,SkinManager$SkinTextureCallback)",
            "void lambda$null$2(Map,SkinManager$SkinTextureCallback)",
            "void lambda$null$1(Map,SkinManager$SkinTextureCallback,MinecraftProfileTexture$Type)"
          ],
          "removed": [
            "void lambda$registerSkins$3(Map,SkinManager$SkinTextureCallback)",
            "void lambda$registerSkins$2(Map,SkinManager$SkinTextureCallback)",
            "void lambda$registerSkins$1(Map,SkinManager$SkinTextureCallback,MinecraftProfileTexture$Type)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.model.BlockModelRotation",
        "differences": {
          "added": [],
          "removed": [
            "BlockModelRotation[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.sounds.BiomeAmbientSoundsHandler",
        "differences": {
          "added": [
            "BiomeAmbientSoundsHandler$LoopSoundInstance lambda$null$0(SoundEvent,Biome,BiomeAmbientSoundsHandler$LoopSoundInstance)"
          ],
          "removed": [
            "BiomeAmbientSoundsHandler$LoopSoundInstance lambda$tick$0(SoundEvent,Biome,BiomeAmbientSoundsHandler$LoopSoundInstance)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.sounds.Sound$Type",
        "differences": {
          "added": [],
          "removed": [
            "Sound$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.sounds.SoundInstance$Attenuation",
        "differences": {
          "added": [],
          "removed": [
            "SoundInstance$Attenuation[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.sounds.ChannelAccess$ChannelHandle",
        "differences": {
          "added": [
            "Channel access$200(ChannelAccess$ChannelHandle)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.CommandFunction",
        "differences": {
          "added": [
            "ResourceLocation access$000(CommandFunction)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.Commands$CommandSelection",
        "differences": {
          "added": [
            "boolean access$000(Commands$CommandSelection)",
            "boolean access$100(Commands$CommandSelection)"
          ],
          "removed": [
            "Commands$CommandSelection[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.blocks.BlockPredicateArgument$TagPredicate",
        "differences": {
          "added": [
            "void <init>(Tag,Map,CompoundTag,BlockPredicateArgument$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.item.ItemPredicateArgument",
        "differences": {
          "added": [
            "CommandSyntaxException lambda$null$2(ResourceLocation)"
          ],
          "removed": [
            "CommandSyntaxException lambda$parse$2(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.arguments.selector.EntitySelectorParser",
        "differences": {
          "added": [
            "int lambda$null$5(Vec3,Entity,Entity)",
            "int lambda$null$3(Vec3,Entity,Entity)"
          ],
          "removed": [
            "int lambda$static$5(Vec3,Entity,Entity)",
            "int lambda$static$3(Vec3,Entity,Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.synchronization.SuggestionProviders$Wrapper",
        "differences": {
          "added": [
            "ResourceLocation access$000(SuggestionProviders$Wrapper)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.AxisCycle",
        "differences": {
          "added": [
            "void <init>(String,int,AxisCycle$1)"
          ],
          "removed": [
            "AxisCycle[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction",
        "differences": {
          "added": [],
          "removed": [
            "Direction[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction$Axis",
        "differences": {
          "added": [
            "void <init>(String,int,String,Direction$1)"
          ],
          "removed": [
            "Direction$Axis[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction$AxisDirection",
        "differences": {
          "added": [],
          "removed": [
            "Direction$AxisDirection[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction8",
        "differences": {
          "added": [],
          "removed": [
            "Direction8[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.RegistryAccess",
        "differences": {
          "added": [
            "void lambda$null$4(RegistryAccess$RegistryHolder,ResourceKey)",
            "boolean lambda$null$3(ResourceKey)",
            "Map access$000()"
          ],
          "removed": [
            "void lambda$static$4(RegistryAccess$RegistryHolder,ResourceKey)",
            "boolean lambda$static$3(ResourceKey)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.RegistryAccess$RegistryHolder",
        "differences": {
          "added": [
            "boolean lambda$null$3(Map$Entry)",
            "Codec lambda$null$1(ResourceKey,Codec)"
          ],
          "removed": [
            "boolean lambda$captureMap$3(Map$Entry)",
            "Codec lambda$makeNetworkCodec$1(ResourceKey,Codec)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.SectionPos",
        "differences": {
          "added": [
            "void <init>(int,int,int,SectionPos$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.VibrationParticleOption",
        "differences": {
          "added": [
            "VibrationPath lambda$null$0(VibrationParticleOption)"
          ],
          "removed": [
            "VibrationPath lambda$static$0(VibrationParticleOption)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.BlockFamily",
        "differences": {
          "added": [
            "void <init>(Block,BlockFamily$1)",
            "Map access$100(BlockFamily)",
            "boolean access$202(BlockFamily,boolean)",
            "boolean access$302(BlockFamily,boolean)",
            "String access$402(BlockFamily,String)",
            "String access$502(BlockFamily,String)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.Condition$CompositeCondition",
        "differences": {
          "added": [
            "void <init>(Condition$Operation,List,Condition$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.PropertyDispatch$C1",
        "differences": {
          "added": [
            "void <init>(Property,PropertyDispatch$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.PropertyDispatch$C3",
        "differences": {
          "added": [
            "void lambda$null$4(Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$null$3(Comparable,Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$null$1(Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$null$0(Comparable,Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void <init>(Property,Property,Property,PropertyDispatch$1)"
          ],
          "removed": [
            "void lambda$generateList$4(Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$generateList$3(Comparable,Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$generate$1(Comparable,PropertyDispatch$TriFunction,Comparable)",
            "void lambda$generate$0(Comparable,Comparable,PropertyDispatch$TriFunction,Comparable)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.PropertyDispatch$C5",
        "differences": {
          "added": [
            "void lambda$null$8(Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$7(Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$6(Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$5(Comparable,Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$3(Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$2(Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$1(Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$null$0(Comparable,Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void <init>(Property,Property,Property,Property,Property,PropertyDispatch$1)"
          ],
          "removed": [
            "void lambda$generateList$8(Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generateList$7(Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generateList$6(Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generateList$5(Comparable,Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generate$3(Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generate$2(Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generate$1(Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)",
            "void lambda$generate$0(Comparable,Comparable,Comparable,Comparable,PropertyDispatch$PentaFunction,Comparable)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.blockstates.VariantProperty",
        "differences": {
          "added": [
            "String access$000(VariantProperty)",
            "Function access$100(VariantProperty)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.recipes.RecipeProvider",
        "differences": {
          "added": [
            "String lambda$null$4(ItemLike)",
            "void lambda$null$3(RecipeBuilder,BlockFamily$Variant,String)"
          ],
          "removed": [
            "String lambda$generateRecipes$4(ItemLike)",
            "void lambda$generateRecipes$3(RecipeBuilder,BlockFamily$Variant,String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.structures.SnbtToNbt$TaskResult",
        "differences": {
          "added": [
            "String access$000(SnbtToNbt$TaskResult)",
            "String access$100(SnbtToNbt$TaskResult)",
            "String access$200(SnbtToNbt$TaskResult)",
            "byte[] access$300(SnbtToNbt$TaskResult)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.tags.TagsProvider",
        "differences": {
          "added": [
            "boolean lambda$null$0(Tag$BuilderEntry)"
          ],
          "removed": [
            "boolean lambda$run$0(Tag$BuilderEntry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.ConnectionProtocol$ProtocolBuilder",
        "differences": {
          "added": [
            "void <init>(ConnectionProtocol$1)",
            "Map access$200(ConnectionProtocol$ProtocolBuilder)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.ChatType",
        "differences": {
          "added": [],
          "removed": [
            "ChatType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.ClickEvent$Action",
        "differences": {
          "added": [],
          "removed": [
            "ClickEvent$Action[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.HoverEvent$Action",
        "differences": {
          "added": [
            "HoverEvent$Action lambda$static$3(HoverEvent$Action)",
            "HoverEvent$ItemStackInfo lambda$static$2(Component)",
            "JsonElement lambda$static$1(Object)",
            "HoverEvent$ItemStackInfo lambda$static$0(JsonElement)",
            "Object access$000(HoverEvent$Action,Object)"
          ],
          "removed": [
            "HoverEvent$Action lambda$static$0(HoverEvent$Action)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.HoverEvent$ItemStackInfo",
        "differences": {
          "added": [
            "HoverEvent$ItemStackInfo access$200(Component)",
            "JsonElement access$300(HoverEvent$ItemStackInfo)",
            "HoverEvent$ItemStackInfo access$400(JsonElement)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.SubStringSource",
        "differences": {
          "added": [
            "boolean lambda$null$2(StringBuilder,List,int,Style,int)"
          ],
          "removed": [
            "boolean lambda$create$2(StringBuilder,List,int,Style,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.PacketFlow",
        "differences": {
          "added": [],
          "removed": [
            "PacketFlow[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundBossEventPacket",
        "differences": {
          "added": [
            "ClientboundBossEventPacket$Operation access$1000()",
            "int access$1200(boolean,boolean,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundBossEventPacket$AddOperation",
        "differences": {
          "added": [
            "void <init>(BossEvent,ClientboundBossEventPacket$1)",
            "void <init>(FriendlyByteBuf,ClientboundBossEventPacket$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdateNameOperation",
        "differences": {
          "added": [
            "void <init>(Component,ClientboundBossEventPacket$1)",
            "void <init>(FriendlyByteBuf,ClientboundBossEventPacket$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdatePropertiesOperation",
        "differences": {
          "added": [
            "void <init>(boolean,boolean,boolean,ClientboundBossEventPacket$1)",
            "void <init>(FriendlyByteBuf,ClientboundBossEventPacket$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.realms.RealmsConnect$1",
        "differences": {
          "added": [
            "void lambda$run$2(Minecraft,DisconnectedRealmsScreen)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.ServerFunctionManager$QueuedCommand",
        "differences": {
          "added": [
            "int access$400(ServerFunctionManager$QueuedCommand)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.DebugCommand$Tracer",
        "differences": {
          "added": [
            "void <init>(PrintWriter,DebugCommand$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.EmoteCommands",
        "differences": {
          "added": [
            "void lambda$null$1(CommandContext,MinecraftServer,ServerPlayer,Entity,TextFilter$FilteredText)",
            "Component lambda$null$0(ServerPlayer,Component,Component,ServerPlayer)"
          ],
          "removed": [
            "void lambda$register$1(CommandContext,MinecraftServer,ServerPlayer,Entity,TextFilter$FilteredText)",
            "Component lambda$register$0(ServerPlayer,Component,Component,ServerPlayer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.ExecuteCommand",
        "differences": {
          "added": [
            "int lambda$null$53(DataCommands$DataProvider,CommandContext)",
            "Collection lambda$null$52(boolean,DataCommands$DataProvider,CommandContext)",
            "boolean lambda$null$46(Integer,Integer)",
            "boolean lambda$null$44(Integer,Integer)",
            "boolean lambda$null$42(Integer,Integer)",
            "boolean lambda$null$40(Integer,Integer)",
            "Tag lambda$null$36(IntFunction,int)",
            "CommandSourceStack lambda$null$32(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$31(CommandContext,int)",
            "CommandSourceStack lambda$null$30(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$29(CommandContext,int)",
            "CommandSourceStack lambda$null$28(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$27(CommandContext,int)",
            "CommandSourceStack lambda$null$26(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$25(CommandContext,int)",
            "CommandSourceStack lambda$null$24(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$23(CommandContext,int)",
            "CommandSourceStack lambda$null$22(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$null$21(CommandContext,int)",
            "void lambda$null$2(ResultConsumer,ResultConsumer,CommandContext,boolean,int)"
          ],
          "removed": [
            "int lambda$addConditionals$53(DataCommands$DataProvider,CommandContext)",
            "Collection lambda$addConditionals$52(boolean,DataCommands$DataProvider,CommandContext)",
            "boolean lambda$addConditionals$46(Integer,Integer)",
            "boolean lambda$addConditionals$44(Integer,Integer)",
            "boolean lambda$addConditionals$42(Integer,Integer)",
            "boolean lambda$addConditionals$40(Integer,Integer)",
            "Tag lambda$storeData$36(IntFunction,int)",
            "CommandSourceStack lambda$wrapStores$32(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$31(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$30(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$29(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$28(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$27(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$26(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$25(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$24(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$23(CommandContext,int)",
            "CommandSourceStack lambda$wrapStores$22(DataCommands$DataProvider,boolean,CommandContext)",
            "Tag lambda$wrapStores$21(CommandContext,int)",
            "void lambda$static$2(ResultConsumer,ResultConsumer,CommandContext,boolean,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.ExperienceCommand$Type",
        "differences": {
          "added": [
            "ToIntFunction access$000(ExperienceCommand$Type)"
          ],
          "removed": [
            "ExperienceCommand$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.FillCommand$Mode",
        "differences": {
          "added": [],
          "removed": [
            "FillCommand$Mode[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.GameRuleCommand",
        "differences": {
          "added": [
            "int access$000(CommandContext,GameRules$Key)",
            "int access$100(CommandSourceStack,GameRules$Key)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.LootCommand",
        "differences": {
          "added": [
            "int lambda$null$13(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$12(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$11(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$10(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$9(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$8(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$7(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$6(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$5(LootCommand$DropConsumer,CommandContext)",
            "int lambda$null$4(LootCommand$DropConsumer,CommandContext)"
          ],
          "removed": [
            "int lambda$register$13(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$12(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$11(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$10(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$9(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$8(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$7(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$6(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$5(LootCommand$DropConsumer,CommandContext)",
            "int lambda$register$4(LootCommand$DropConsumer,CommandContext)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.SeedCommand",
        "differences": {
          "added": [
            "Style lambda$null$1(long,Style)"
          ],
          "removed": [
            "Style lambda$register$1(long,Style)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.Settings$MutableValue",
        "differences": {
          "added": [
            "void <init>(Settings,String,Object,Function,Settings$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.gui.MinecraftServerGui",
        "differences": {
          "added": [
            "AtomicBoolean access$000(MinecraftServerGui)",
            "void access$100(MinecraftServerGui)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkHolder$FullChunkStatus",
        "differences": {
          "added": [],
          "removed": [
            "ChunkHolder$FullChunkStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkTaskPriorityQueue",
        "differences": {
          "added": [
            "Either lambda$null$5(long)"
          ],
          "removed": [
            "Either lambda$pop$5(long)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerChunkCache$MainThreadExecutor",
        "differences": {
          "added": [
            "void <init>(ServerChunkCache,Level,ServerChunkCache$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ServerLevel",
        "differences": {
          "added": [
            "void lambda$null$18(BlockPos,PoiType)",
            "void lambda$null$16(BlockPos)",
            "EntityTickList access$100(ServerLevel)",
            "List access$200(ServerLevel)",
            "Set access$300(ServerLevel)",
            "Int2ObjectMap access$400(ServerLevel)"
          ],
          "removed": [
            "void lambda$onBlockStateChange$18(BlockPos,PoiType)",
            "void lambda$onBlockStateChange$16(BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.network.TextFilterClient$RequestFailedException",
        "differences": {
          "added": [
            "void <init>(String,TextFilterClient$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.Pack$Position",
        "differences": {
          "added": [],
          "removed": [
            "Pack$Position[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.StaticTagHelper$Wrapper",
        "differences": {
          "added": [
            "void <init>(ResourceLocation,StaticTagHelper$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.Tag",
        "differences": {
          "added": [
            "DataResult lambda$null$2(Tag)",
            "DataResult lambda$null$0(ResourceLocation)"
          ],
          "removed": [
            "DataResult lambda$codec$2(Tag)",
            "DataResult lambda$codec$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagManager$LoaderInfo",
        "differences": {
          "added": [
            "void <init>(StaticTagHelper,CompletableFuture,TagManager$1)",
            "CompletableFuture access$100(TagManager$LoaderInfo)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.LowerCaseEnumTypeAdapterFactory",
        "differences": {
          "added": [
            "String access$000(LowerCaseEnumTypeAdapterFactory,Object)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.SortedArraySet",
        "differences": {
          "added": [
            "int access$000(SortedArraySet)",
            "Object[] access$100(SortedArraySet)",
            "void access$200(SortedArraySet,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.profiling.ActiveProfiler$PathEntry",
        "differences": {
          "added": [
            "long access$000(ActiveProfiler$PathEntry)",
            "long access$002(ActiveProfiler$PathEntry,long)",
            "long access$100(ActiveProfiler$PathEntry)",
            "long access$102(ActiveProfiler$PathEntry,long)",
            "Object2LongOpenHashMap access$200(ActiveProfiler$PathEntry)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.profiling.registry.MeasurementCategory",
        "differences": {
          "added": [],
          "removed": [
            "MeasurementCategory[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy",
        "differences": {
          "added": [
            "void <init>(String,int,GateBehavior$1)"
          ],
          "removed": [
            "GateBehavior$RunningPolicy[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.PoiCompetitorScan",
        "differences": {
          "added": [
            "boolean lambda$null$0(GlobalPos,PoiType,Villager)"
          ],
          "removed": [
            "boolean lambda$start$0(GlobalPos,PoiType,Villager)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget",
        "differences": {
          "added": [
            "boolean lambda$null$0(PathfinderMob,LivingEntity)"
          ],
          "removed": [
            "boolean lambda$start$0(PathfinderMob,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.ShufflingList",
        "differences": {
          "added": [
            "double lambda$shuffle$2(Object)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.sensing.NearestVisibleLivingEntitySensor",
        "differences": {
          "added": [
            "boolean lambda$null$0(LivingEntity,LivingEntity)"
          ],
          "removed": [
            "boolean lambda$getNearestEntity$0(LivingEntity,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.targeting.TargetingConditions",
        "differences": {
          "added": [
            "void <init>()",
            "TargetingConditions allowInvulnerable()",
            "TargetingConditions allowSameTeam()",
            "TargetingConditions allowUnseeable()",
            "TargetingConditions allowNonAttackable()"
          ],
          "removed": [
            "void <init>(boolean)",
            "TargetingConditions forCombat()",
            "TargetingConditions forNonCombat()",
            "TargetingConditions ignoreLineOfSight()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.util.HoverRandomPos",
        "differences": {
          "added": [
            "boolean lambda$null$0(PathfinderMob,BlockPos)"
          ],
          "removed": [
            "boolean lambda$getPos$0(PathfinderMob,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.village.poi.PoiRecord",
        "differences": {
          "added": [
            "Integer lambda$null$2(PoiRecord)",
            "PoiType lambda$null$1(PoiRecord)",
            "BlockPos lambda$null$0(PoiRecord)"
          ],
          "removed": [
            "Integer lambda$codec$2(PoiRecord)",
            "PoiType lambda$codec$1(PoiRecord)",
            "BlockPos lambda$codec$0(PoiRecord)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee",
        "differences": {
          "added": [
            "Bee$BeePollinateGoal access$700(Bee)",
            "Random access$1000(Bee)",
            "boolean access$1400(Bee)",
            "BlockPos access$1500(Bee)",
            "boolean access$1600(Bee,BlockPos,int)",
            "boolean access$1800(Bee)",
            "PathNavigation access$1900(Bee)",
            "PathNavigation access$2000(Bee)",
            "PathNavigation access$2200(Bee)",
            "boolean access$2400(Bee,BlockPos)",
            "void access$2500(Bee,BlockPos)",
            "PathNavigation access$2600(Bee)",
            "PathNavigation access$2700(Bee)",
            "PathNavigation access$2800(Bee)",
            "PathNavigation access$2900(Bee)",
            "BlockPos access$1502(Bee,BlockPos)",
            "int access$3002(Bee,int)",
            "PathNavigation access$3100(Bee)",
            "BlockPos access$3200(Bee)",
            "boolean access$3300(Bee,BlockPos)",
            "PathNavigation access$3400(Bee)",
            "PathNavigation access$3500(Bee)",
            "BlockPos access$3202(Bee,BlockPos)",
            "PathNavigation access$3600(Bee)",
            "int access$3700(Bee)",
            "int access$3800(Bee)",
            "PathNavigation access$3900(Bee)",
            "int access$3802(Bee,int)",
            "Random access$4000(Bee)",
            "Random access$4100(Bee)",
            "void access$4200(Bee,boolean)",
            "PathNavigation access$4300(Bee)",
            "Random access$4400(Bee)",
            "PathNavigation access$4500(Bee)",
            "Random access$4600(Bee)",
            "Random access$4700(Bee)",
            "int access$3000(Bee)",
            "Bee$BeeGoToHiveGoal access$4800(Bee)",
            "boolean access$5100(Bee,BlockPos)",
            "int access$5200(Bee)",
            "Random access$5300(Bee)",
            "Random access$5400(Bee)",
            "void access$5500(Bee)"
          ],
          "removed": [
            "PathNavigation access$000(Bee)",
            "Random access$100(Bee)",
            "PathNavigation access$200(Bee)",
            "PathNavigation access$300(Bee)",
            "PathNavigation access$400(Bee)",
            "PathNavigation access$500(Bee)",
            "PathNavigation access$600(Bee)",
            "PathNavigation access$700(Bee)",
            "PathNavigation access$800(Bee)",
            "PathNavigation access$1000(Bee)",
            "PathNavigation access$1400(Bee)",
            "PathNavigation access$1500(Bee)",
            "PathNavigation access$1600(Bee)",
            "PathNavigation access$1700(Bee)",
            "PathNavigation access$1800(Bee)",
            "Random access$1900(Bee)",
            "Random access$2000(Bee)",
            "Random access$2200(Bee)",
            "Random access$2400(Bee)",
            "Random access$2500(Bee)",
            "Random access$2600(Bee)",
            "Random access$2700(Bee)",
            "Random access$2800(Bee)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BaseBeeGoal",
        "differences": {
          "added": [
            "void <init>(Bee,Bee$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal",
        "differences": {
          "added": [
            "int access$300(Bee$BeeGoToHiveGoal)",
            "List access$500(Bee$BeeGoToHiveGoal)",
            "boolean access$4900(Bee$BeeGoToHiveGoal,BlockPos)",
            "void access$5000(Bee$BeeGoToHiveGoal)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeGrowCropGoal",
        "differences": {
          "added": [
            "void <init>(Bee,Bee$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeeLocateHiveGoal",
        "differences": {
          "added": [
            "double lambda$findNearbyHivesWithSpace$2(BlockPos,BlockPos)",
            "boolean lambda$findNearbyHivesWithSpace$1(Bee,BlockPos)",
            "void <init>(Bee,Bee$1)"
          ],
          "removed": [
            "double lambda$findNearbyHivesWithSpace$1(BlockPos,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee$BeePollinateGoal",
        "differences": {
          "added": [
            "boolean access$600(Bee$BeePollinateGoal)",
            "void access$800(Bee$BeePollinateGoal)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Dolphin",
        "differences": {
          "added": [
            "Random access$300(Dolphin)",
            "TargetingConditions access$400()"
          ],
          "removed": [
            "Random access$000(Dolphin)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Ocelot",
        "differences": {
          "added": [
            "boolean access$000(Ocelot)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Panda$Gene",
        "differences": {
          "added": [
            "Panda$Gene access$000(Panda$Gene,Panda$Gene)"
          ],
          "removed": [
            "Panda$Gene[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Parrot",
        "differences": {
          "added": [
            "Map access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Pufferfish",
        "differences": {
          "added": [
            "int access$002(Pufferfish,int)",
            "int access$102(Pufferfish,int)",
            "TargetingConditions access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Rabbit",
        "differences": {
          "added": [
            "boolean access$300(Rabbit)",
            "int access$402(Rabbit,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Squid",
        "differences": {
          "added": [
            "boolean access$100(Squid)"
          ],
          "removed": [
            "boolean canBeLeashed(Player)",
            "boolean access$000(Squid)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.TropicalFish$Pattern",
        "differences": {
          "added": [],
          "removed": [
            "TropicalFish$Pattern[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Turtle",
        "differences": {
          "added": [
            "Random access$300(Turtle)",
            "void access$400(Turtle,BlockPos)",
            "void access$500(Turtle,boolean)",
            "BlockPos access$600(Turtle)",
            "BlockPos access$700(Turtle)",
            "void access$800(Turtle,boolean)",
            "void access$900(Turtle,boolean)",
            "int access$1000(Turtle)",
            "void access$1100(Turtle,boolean)",
            "Random access$1200(Turtle)",
            "int access$1008(Turtle)",
            "boolean access$1300(Turtle)",
            "boolean access$1400(Turtle)"
          ],
          "removed": [
            "Random access$000(Turtle)",
            "Random access$100(Turtle)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.goat.Goat$GoatNodeEvaluator",
        "differences": {
          "added": [
            "void <init>(Goat$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Evoker$EvokerAttackSpellGoal",
        "differences": {
          "added": [
            "void <init>(Evoker,Evoker$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Evoker$EvokerSummonSpellGoal",
        "differences": {
          "added": [
            "void <init>(Evoker,Evoker$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Guardian",
        "differences": {
          "added": [
            "void access$000(Guardian,int)",
            "void access$100(Guardian,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Phantom$PhantomAttackPlayerTargetGoal",
        "differences": {
          "added": [
            "void <init>(Phantom,Phantom$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Ravager",
        "differences": {
          "added": [
            "boolean canSee(Entity)"
          ],
          "removed": [
            "boolean hasLineOfSight(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.Slime",
        "differences": {
          "added": [
            "float access$000(Slime)",
            "boolean access$100(Slime)"
          ],
          "removed": [
            "boolean access$000(Slime)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.monster.SpellcasterIllager",
        "differences": {
          "added": [
            "PathNavigation access$200(SpellcasterIllager)"
          ],
          "removed": [
            "PathNavigation access$000(SpellcasterIllager)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.ClickAction",
        "differences": {
          "added": [],
          "removed": [
            "ClickAction[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.GrindstoneMenu",
        "differences": {
          "added": [
            "Container access$000(GrindstoneMenu)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.RecipeBookType",
        "differences": {
          "added": [],
          "removed": [
            "RecipeBookType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ArmorMaterials",
        "differences": {
          "added": [],
          "removed": [
            "ArmorMaterials[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.DiggerItem",
        "differences": {
          "added": [
            "void <init>(float,float,Tier,Set,Item$Properties)"
          ],
          "removed": [
            "void <init>(float,float,Tier,Tag,Item$Properties)",
            "boolean isCorrectToolForDrops(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.Item$Properties",
        "differences": {
          "added": [
            "CreativeModeTab access$000(Item$Properties)",
            "Rarity access$100(Item$Properties)",
            "Item access$200(Item$Properties)",
            "int access$300(Item$Properties)",
            "int access$400(Item$Properties)",
            "FoodProperties access$500(Item$Properties)",
            "boolean access$600(Item$Properties)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.Ingredient$ItemValue",
        "differences": {
          "added": [
            "void <init>(ItemStack,Ingredient$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.RecipeManager",
        "differences": {
          "added": [
            "Map lambda$null$10(RecipeType)"
          ],
          "removed": [
            "Map lambda$replaceRecipes$10(RecipeType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.crafting.UpgradeRecipe",
        "differences": {
          "added": [
            "Ingredient access$000(UpgradeRecipe)",
            "Ingredient access$100(UpgradeRecipe)",
            "ItemStack access$200(UpgradeRecipe)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.enchantment.EnchantmentCategory",
        "differences": {
          "added": [
            "void <init>(String,int,EnchantmentCategory$1)"
          ],
          "removed": [
            "EnchantmentCategory[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.enchantment.ProtectionEnchantment$Type",
        "differences": {
          "added": [],
          "removed": [
            "ProtectionEnchantment$Type[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$Category",
        "differences": {
          "added": [],
          "removed": [
            "GameRules$Category[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$IntegerValue",
        "differences": {
          "added": [
            "GameRules$Type access$100(int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules$Type",
        "differences": {
          "added": [
            "BiConsumer access$300(GameRules$Type)",
            "void <init>(Supplier,Function,BiConsumer,GameRules$VisitorCaller,GameRules$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LightLayer",
        "differences": {
          "added": [],
          "removed": [
            "LightLayer[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.NaturalSpawner$SpawnState",
        "differences": {
          "added": [
            "void <init>(int,Object2IntOpenHashMap,PotentialCalculator,NaturalSpawner$1)",
            "boolean access$300(NaturalSpawner$SpawnState,MobCategory)",
            "void access$400(NaturalSpawner$SpawnState,Mob,ChunkAccess)",
            "boolean access$500(NaturalSpawner$SpawnState,EntityType,BlockPos,ChunkAccess)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.StructureFeatureManager",
        "differences": {
          "added": [
            "boolean lambda$null$3(BlockPos,StructurePiece)"
          ],
          "removed": [
            "boolean lambda$getStructureAt$3(BlockPos,StructurePiece)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.AmbientMoodSettings",
        "differences": {
          "added": [
            "Double lambda$null$3(AmbientMoodSettings)",
            "Integer lambda$null$2(AmbientMoodSettings)",
            "Integer lambda$null$1(AmbientMoodSettings)",
            "SoundEvent lambda$null$0(AmbientMoodSettings)"
          ],
          "removed": [
            "Double lambda$static$3(AmbientMoodSettings)",
            "Integer lambda$static$2(AmbientMoodSettings)",
            "Integer lambda$static$1(AmbientMoodSettings)",
            "SoundEvent lambda$static$0(AmbientMoodSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome",
        "differences": {
          "added": [
            "Long2FloatLinkedOpenHashMap lambda$null$16()",
            "Biome lambda$null$13(Biome$ClimateSettings,Biome$BiomeCategory,Float,Float,BiomeSpecialEffects)",
            "BiomeSpecialEffects lambda$null$12(Biome)",
            "Float lambda$null$11(Biome)",
            "Float lambda$null$10(Biome)",
            "Biome$BiomeCategory lambda$null$9(Biome)",
            "Biome$ClimateSettings lambda$null$8(Biome)",
            "MobSpawnSettings lambda$null$6(Biome)",
            "BiomeGenerationSettings lambda$null$5(Biome)",
            "BiomeSpecialEffects lambda$null$4(Biome)",
            "Float lambda$null$3(Biome)",
            "Float lambda$null$2(Biome)",
            "Biome$BiomeCategory lambda$null$1(Biome)",
            "Biome$ClimateSettings lambda$null$0(Biome)",
            "PerlinSimplexNoise access$100()",
            "void <init>(Biome$ClimateSettings,Biome$BiomeCategory,float,float,BiomeSpecialEffects,BiomeGenerationSettings,MobSpawnSettings,Biome$1)"
          ],
          "removed": [
            "Long2FloatLinkedOpenHashMap lambda$new$16()",
            "Biome lambda$static$13(Biome$ClimateSettings,Biome$BiomeCategory,Float,Float,BiomeSpecialEffects)",
            "BiomeSpecialEffects lambda$static$12(Biome)",
            "Float lambda$static$11(Biome)",
            "Float lambda$static$10(Biome)",
            "Biome$BiomeCategory lambda$static$9(Biome)",
            "Biome$ClimateSettings lambda$static$8(Biome)",
            "MobSpawnSettings lambda$static$6(Biome)",
            "BiomeGenerationSettings lambda$static$5(Biome)",
            "BiomeSpecialEffects lambda$static$4(Biome)",
            "Float lambda$static$3(Biome)",
            "Float lambda$static$2(Biome)",
            "Biome$BiomeCategory lambda$static$1(Biome)",
            "Biome$ClimateSettings lambda$static$0(Biome)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome$ClimateParameters",
        "differences": {
          "added": [
            "Float lambda$null$4(Biome$ClimateParameters)",
            "Float lambda$null$3(Biome$ClimateParameters)",
            "Float lambda$null$2(Biome$ClimateParameters)",
            "Float lambda$null$1(Biome$ClimateParameters)",
            "Float lambda$null$0(Biome$ClimateParameters)"
          ],
          "removed": [
            "Float lambda$static$4(Biome$ClimateParameters)",
            "Float lambda$static$3(Biome$ClimateParameters)",
            "Float lambda$static$2(Biome$ClimateParameters)",
            "Float lambda$static$1(Biome$ClimateParameters)",
            "Float lambda$static$0(Biome$ClimateParameters)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.Biome$Precipitation",
        "differences": {
          "added": [],
          "removed": [
            "Biome$Precipitation[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.BiomeGenerationSettings",
        "differences": {
          "added": [
            "List lambda$null$4(BiomeGenerationSettings)",
            "List lambda$null$3(BiomeGenerationSettings)",
            "Map lambda$null$2(BiomeGenerationSettings)",
            "Supplier lambda$null$1(BiomeGenerationSettings)",
            "void <init>(Supplier,Map,List,List,BiomeGenerationSettings$1)"
          ],
          "removed": [
            "List lambda$static$4(BiomeGenerationSettings)",
            "List lambda$static$3(BiomeGenerationSettings)",
            "Map lambda$static$2(BiomeGenerationSettings)",
            "Supplier lambda$static$1(BiomeGenerationSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer",
        "differences": {
          "added": [],
          "removed": [
            "FuzzyOffsetConstantColumnBiomeZoomer[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.MultiNoiseBiomeSource$PresetInstance",
        "differences": {
          "added": [
            "DataResult lambda$null$2(MultiNoiseBiomeSource$Preset)",
            "DataResult lambda$null$1(ResourceLocation)",
            "DataResult lambda$null$0(ResourceLocation)",
            "void <init>(MultiNoiseBiomeSource$Preset,Registry,long,MultiNoiseBiomeSource$1)"
          ],
          "removed": [
            "DataResult lambda$static$2(MultiNoiseBiomeSource$Preset)",
            "DataResult lambda$static$1(ResourceLocation)",
            "DataResult lambda$static$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.biome.OverworldBiomeSource",
        "differences": {
          "added": [
            "Biome lambda$null$5(Registry,ResourceKey)",
            "Registry lambda$null$3(OverworldBiomeSource)",
            "Boolean lambda$null$2(OverworldBiomeSource)",
            "Boolean lambda$null$1(OverworldBiomeSource)",
            "Long lambda$null$0(OverworldBiomeSource)"
          ],
          "removed": [
            "Biome lambda$new$5(Registry,ResourceKey)",
            "Registry lambda$static$3(OverworldBiomeSource)",
            "Boolean lambda$static$2(OverworldBiomeSource)",
            "Boolean lambda$static$1(OverworldBiomeSource)",
            "Long lambda$static$0(OverworldBiomeSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ComposterBlock",
        "differences": {
          "added": [
            "BlockState access$000(BlockState,LevelAccessor,BlockPos)",
            "BlockState access$100(BlockState,LevelAccessor,BlockPos,ItemStack)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DoubleBlockCombiner$BlockType",
        "differences": {
          "added": [],
          "removed": [
            "DoubleBlockCombiner$BlockType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.PowderSnowBlock",
        "differences": {
          "added": [
            "void spawnPowderSnowParticles(Level,Vec3)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.PressurePlateBlock$Sensitivity",
        "differences": {
          "added": [],
          "removed": [
            "PressurePlateBlock$Sensitivity[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BannerPattern",
        "differences": {
          "added": [
            "String access$000(BannerPattern)"
          ],
          "removed": [
            "BannerPattern[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BarrelBlockEntity",
        "differences": {
          "added": [
            "void access$000(BarrelBlockEntity,BlockState,SoundEvent)",
            "void access$100(BarrelBlockEntity,BlockState,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.RailShape",
        "differences": {
          "added": [],
          "removed": [
            "RailShape[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.SculkSensorPhase",
        "differences": {
          "added": [],
          "removed": [
            "SculkSensorPhase[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.StairsShape",
        "differences": {
          "added": [],
          "removed": [
            "StairsShape[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.state.properties.Tilt",
        "differences": {
          "added": [],
          "removed": [
            "Tilt[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.border.BorderStatus",
        "differences": {
          "added": [],
          "removed": [
            "BorderStatus[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.IOWorker$PendingStore",
        "differences": {
          "added": [
            "CompoundTag access$000(IOWorker$PendingStore)",
            "CompletableFuture access$100(IOWorker$PendingStore)",
            "CompoundTag access$002(IOWorker$PendingStore,CompoundTag)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.RegionFile",
        "differences": {
          "added": [
            "RegionFileVersion access$000(RegionFile)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.SectionStorage",
        "differences": {
          "added": [
            "void lambda$null$1(long)"
          ],
          "removed": [
            "void lambda$readColumn$1(long)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.entity.Visibility",
        "differences": {
          "added": [],
          "removed": [
            "Visibility[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.BlockPositionSource",
        "differences": {
          "added": [
            "Optional lambda$null$0(BlockPositionSource)",
            "Optional access$000(BlockPositionSource)"
          ],
          "removed": [
            "Optional lambda$static$0(BlockPositionSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.gameevent.EntityPositionSource",
        "differences": {
          "added": [
            "Integer lambda$null$0(EntityPositionSource)",
            "int access$000(EntityPositionSource)"
          ],
          "removed": [
            "Integer lambda$static$0(EntityPositionSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Aquifer$NoiseBasedAquifer$AquiferStatus",
        "differences": {
          "added": [
            "int access$000(Aquifer$NoiseBasedAquifer$AquiferStatus)",
            "BlockState access$100(Aquifer$NoiseBasedAquifer$AquiferStatus)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Cavifier$QuantizedSpaghettiRarity",
        "differences": {
          "added": [
            "double access$000(double)",
            "double access$100(double)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Column$Line",
        "differences": {
          "added": [
            "Column$Line access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GenerationStep$Carving",
        "differences": {
          "added": [],
          "removed": [
            "GenerationStep$Carving[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GeodeBlockSettings",
        "differences": {
          "added": [
            "List lambda$null$5(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$4(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$3(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$2(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$1(GeodeBlockSettings)",
            "BlockStateProvider lambda$null$0(GeodeBlockSettings)"
          ],
          "removed": [
            "List lambda$static$5(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$4(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$3(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$2(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$1(GeodeBlockSettings)",
            "BlockStateProvider lambda$static$0(GeodeBlockSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.GeodeLayerSettings",
        "differences": {
          "added": [
            "Double lambda$null$3(GeodeLayerSettings)",
            "Double lambda$null$2(GeodeLayerSettings)",
            "Double lambda$null$1(GeodeLayerSettings)",
            "Double lambda$null$0(GeodeLayerSettings)"
          ],
          "removed": [
            "Double lambda$static$3(GeodeLayerSettings)",
            "Double lambda$static$2(GeodeLayerSettings)",
            "Double lambda$static$1(GeodeLayerSettings)",
            "Double lambda$static$0(GeodeLayerSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Heightmap$Types",
        "differences": {
          "added": [],
          "removed": [
            "Heightmap$Types[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator",
        "differences": {
          "added": [
            "Supplier lambda$null$2(NoiseBasedChunkGenerator)",
            "Long lambda$null$1(NoiseBasedChunkGenerator)",
            "BiomeSource lambda$null$0(NoiseBasedChunkGenerator)",
            "int access$000(NoiseBasedChunkGenerator)",
            "int access$100(NoiseBasedChunkGenerator)",
            "int access$200(NoiseBasedChunkGenerator)",
            "OreVeinifier access$300(NoiseBasedChunkGenerator)",
            "NoodleCavifier access$400(NoiseBasedChunkGenerator)"
          ],
          "removed": [
            "Supplier lambda$static$2(NoiseBasedChunkGenerator)",
            "Long lambda$static$1(NoiseBasedChunkGenerator)",
            "BiomeSource lambda$static$0(NoiseBasedChunkGenerator)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.WorldGenSettings",
        "differences": {
          "added": [
            "Optional lambda$null$0(WorldGenSettings)"
          ],
          "removed": [
            "Optional lambda$static$0(WorldGenSettings)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$5(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Float lambda$null$4(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$3(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Integer lambda$null$2(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$1(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$null$0(CanyonCarverConfiguration$CanyonShapeConfiguration)"
          ],
          "removed": [
            "Float lambda$static$5(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Float lambda$static$4(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$3(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "Integer lambda$static$2(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$1(CanyonCarverConfiguration$CanyonShapeConfiguration)",
            "FloatProvider lambda$static$0(CanyonCarverConfiguration$CanyonShapeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.carver.CarverConfiguration",
        "differences": {
          "added": [
            "CarverDebugSettings lambda$null$5(CarverConfiguration)",
            "Boolean lambda$null$4(CarverConfiguration)",
            "VerticalAnchor lambda$null$3(CarverConfiguration)",
            "FloatProvider lambda$null$2(CarverConfiguration)",
            "HeightProvider lambda$null$1(CarverConfiguration)",
            "Float lambda$null$0(CarverConfiguration)"
          ],
          "removed": [
            "CarverDebugSettings lambda$static$5(CarverConfiguration)",
            "Boolean lambda$static$4(CarverConfiguration)",
            "VerticalAnchor lambda$static$3(CarverConfiguration)",
            "FloatProvider lambda$static$2(CarverConfiguration)",
            "HeightProvider lambda$static$1(CarverConfiguration)",
            "Float lambda$static$0(CarverConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.FossilFeatureConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$4(FossilFeatureConfiguration)",
            "Supplier lambda$null$3(FossilFeatureConfiguration)",
            "Supplier lambda$null$2(FossilFeatureConfiguration)",
            "List lambda$null$1(FossilFeatureConfiguration)",
            "List lambda$null$0(FossilFeatureConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$4(FossilFeatureConfiguration)",
            "Supplier lambda$static$3(FossilFeatureConfiguration)",
            "Supplier lambda$static$2(FossilFeatureConfiguration)",
            "List lambda$static$1(FossilFeatureConfiguration)",
            "List lambda$static$0(FossilFeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$4(HugeFungusConfiguration)",
            "BlockState lambda$null$3(HugeFungusConfiguration)",
            "BlockState lambda$null$2(HugeFungusConfiguration)",
            "BlockState lambda$null$1(HugeFungusConfiguration)",
            "BlockState lambda$null$0(HugeFungusConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$4(HugeFungusConfiguration)",
            "BlockState lambda$static$3(HugeFungusConfiguration)",
            "BlockState lambda$static$2(HugeFungusConfiguration)",
            "BlockState lambda$static$1(HugeFungusConfiguration)",
            "BlockState lambda$static$0(HugeFungusConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.JigsawFeature",
        "differences": {
          "added": [
            "int access$000(JigsawFeature)",
            "boolean access$100(JigsawFeature)",
            "boolean access$200(JigsawFeature)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.SpikeFeature$SpikeCacheLoader",
        "differences": {
          "added": [
            "void <init>(SpikeFeature$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature",
        "differences": {
          "added": [
            "Float lambda$null$1(WeightedConfiguredFeature)",
            "Supplier lambda$null$0(WeightedConfiguredFeature)"
          ],
          "removed": [
            "Float lambda$static$1(WeightedConfiguredFeature)",
            "Supplier lambda$static$0(WeightedConfiguredFeature)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration",
        "differences": {
          "added": [
            "List lambda$null$3(DiskConfiguration)",
            "Integer lambda$null$2(DiskConfiguration)",
            "IntProvider lambda$null$1(DiskConfiguration)",
            "BlockState lambda$null$0(DiskConfiguration)"
          ],
          "removed": [
            "List lambda$static$3(DiskConfiguration)",
            "Integer lambda$static$2(DiskConfiguration)",
            "IntProvider lambda$static$1(DiskConfiguration)",
            "BlockState lambda$static$0(DiskConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$1(EndGatewayConfiguration)",
            "Optional lambda$null$0(EndGatewayConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$1(EndGatewayConfiguration)",
            "Optional lambda$static$0(EndGatewayConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$12(GeodeConfiguration)",
            "Double lambda$null$11(GeodeConfiguration)",
            "Integer lambda$null$10(GeodeConfiguration)",
            "Integer lambda$null$9(GeodeConfiguration)",
            "IntProvider lambda$null$8(GeodeConfiguration)",
            "IntProvider lambda$null$7(GeodeConfiguration)",
            "IntProvider lambda$null$6(GeodeConfiguration)",
            "Boolean lambda$null$5(GeodeConfiguration)",
            "Double lambda$null$4(GeodeConfiguration)",
            "Double lambda$null$3(GeodeConfiguration)",
            "GeodeCrackSettings lambda$null$2(GeodeConfiguration)",
            "GeodeLayerSettings lambda$null$1(GeodeConfiguration)",
            "GeodeBlockSettings lambda$null$0(GeodeConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$12(GeodeConfiguration)",
            "Double lambda$static$11(GeodeConfiguration)",
            "Integer lambda$static$10(GeodeConfiguration)",
            "Integer lambda$static$9(GeodeConfiguration)",
            "IntProvider lambda$static$8(GeodeConfiguration)",
            "IntProvider lambda$static$7(GeodeConfiguration)",
            "IntProvider lambda$static$6(GeodeConfiguration)",
            "Boolean lambda$static$5(GeodeConfiguration)",
            "Double lambda$static$4(GeodeConfiguration)",
            "Double lambda$static$3(GeodeConfiguration)",
            "GeodeCrackSettings lambda$static$2(GeodeConfiguration)",
            "GeodeLayerSettings lambda$static$1(GeodeConfiguration)",
            "GeodeBlockSettings lambda$static$0(GeodeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.GrowingPlantConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$4(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$null$3(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$null$2(GrowingPlantConfiguration)",
            "Direction lambda$null$1(GrowingPlantConfiguration)",
            "SimpleWeightedRandomList lambda$null$0(GrowingPlantConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$4(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$static$3(GrowingPlantConfiguration)",
            "BlockStateProvider lambda$static$2(GrowingPlantConfiguration)",
            "Direction lambda$static$1(GrowingPlantConfiguration)",
            "SimpleWeightedRandomList lambda$static$0(GrowingPlantConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$2(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$1(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$null$0(HugeMushroomFeatureConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$2(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$static$1(HugeMushroomFeatureConfiguration)",
            "BlockStateProvider lambda$static$0(HugeMushroomFeatureConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$8(LargeDripstoneConfiguration)",
            "Integer lambda$null$7(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$6(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$5(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$4(LargeDripstoneConfiguration)",
            "Float lambda$null$3(LargeDripstoneConfiguration)",
            "FloatProvider lambda$null$2(LargeDripstoneConfiguration)",
            "IntProvider lambda$null$1(LargeDripstoneConfiguration)",
            "Integer lambda$null$0(LargeDripstoneConfiguration)"
          ],
          "removed": [
            "Float lambda$static$8(LargeDripstoneConfiguration)",
            "Integer lambda$static$7(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$6(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$5(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$4(LargeDripstoneConfiguration)",
            "Float lambda$static$3(LargeDripstoneConfiguration)",
            "FloatProvider lambda$static$2(LargeDripstoneConfiguration)",
            "IntProvider lambda$static$1(LargeDripstoneConfiguration)",
            "Integer lambda$static$0(LargeDripstoneConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration",
        "differences": {
          "added": [
            "MineshaftFeature$Type lambda$null$1(MineshaftConfiguration)",
            "Float lambda$null$0(MineshaftConfiguration)"
          ],
          "removed": [
            "MineshaftFeature$Type lambda$static$1(MineshaftConfiguration)",
            "Float lambda$static$0(MineshaftConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$2(OceanRuinConfiguration)",
            "Float lambda$null$1(OceanRuinConfiguration)",
            "OceanRuinFeature$Type lambda$null$0(OceanRuinConfiguration)"
          ],
          "removed": [
            "Float lambda$static$2(OceanRuinConfiguration)",
            "Float lambda$static$1(OceanRuinConfiguration)",
            "OceanRuinFeature$Type lambda$static$0(OceanRuinConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration",
        "differences": {
          "added": [
            "List lambda$null$0(ReplaceBlockConfiguration)"
          ],
          "removed": [
            "List lambda$static$0(ReplaceBlockConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration",
        "differences": {
          "added": [
            "Integer lambda$null$11(RootSystemConfiguration)",
            "Integer lambda$null$10(RootSystemConfiguration)",
            "BlockStateProvider lambda$null$9(RootSystemConfiguration)",
            "Integer lambda$null$8(RootSystemConfiguration)",
            "Integer lambda$null$7(RootSystemConfiguration)",
            "Integer lambda$null$6(RootSystemConfiguration)",
            "Integer lambda$null$5(RootSystemConfiguration)",
            "BlockStateProvider lambda$null$4(RootSystemConfiguration)",
            "ResourceLocation lambda$null$3(RootSystemConfiguration)",
            "Integer lambda$null$2(RootSystemConfiguration)",
            "Integer lambda$null$1(RootSystemConfiguration)",
            "Supplier lambda$null$0(RootSystemConfiguration)"
          ],
          "removed": [
            "Integer lambda$static$11(RootSystemConfiguration)",
            "Integer lambda$static$10(RootSystemConfiguration)",
            "BlockStateProvider lambda$static$9(RootSystemConfiguration)",
            "Integer lambda$static$8(RootSystemConfiguration)",
            "Integer lambda$static$7(RootSystemConfiguration)",
            "Integer lambda$static$6(RootSystemConfiguration)",
            "Integer lambda$static$5(RootSystemConfiguration)",
            "BlockStateProvider lambda$static$4(RootSystemConfiguration)",
            "ResourceLocation lambda$static$3(RootSystemConfiguration)",
            "Integer lambda$static$2(RootSystemConfiguration)",
            "Integer lambda$static$1(RootSystemConfiguration)",
            "Supplier lambda$static$0(RootSystemConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration",
        "differences": {
          "added": [
            "Optional lambda$null$2(SpikeConfiguration)",
            "List lambda$null$1(SpikeConfiguration)",
            "Boolean lambda$null$0(SpikeConfiguration)"
          ],
          "removed": [
            "Optional lambda$static$2(SpikeConfiguration)",
            "List lambda$static$1(SpikeConfiguration)",
            "Boolean lambda$static$0(SpikeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration",
        "differences": {
          "added": [
            "Boolean lambda$null$8(TreeConfiguration)",
            "Boolean lambda$null$7(TreeConfiguration)",
            "List lambda$null$6(TreeConfiguration)",
            "FeatureSize lambda$null$5(TreeConfiguration)",
            "BlockStateProvider lambda$null$4(TreeConfiguration)",
            "FoliagePlacer lambda$null$3(TreeConfiguration)",
            "BlockStateProvider lambda$null$2(TreeConfiguration)",
            "TrunkPlacer lambda$null$1(TreeConfiguration)",
            "BlockStateProvider lambda$null$0(TreeConfiguration)"
          ],
          "removed": [
            "Boolean lambda$static$8(TreeConfiguration)",
            "Boolean lambda$static$7(TreeConfiguration)",
            "List lambda$static$6(TreeConfiguration)",
            "FeatureSize lambda$static$5(TreeConfiguration)",
            "BlockStateProvider lambda$static$4(TreeConfiguration)",
            "FoliagePlacer lambda$static$3(TreeConfiguration)",
            "BlockStateProvider lambda$static$2(TreeConfiguration)",
            "TrunkPlacer lambda$static$1(TreeConfiguration)",
            "BlockStateProvider lambda$static$0(TreeConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration",
        "differences": {
          "added": [
            "Float lambda$null$2(UnderwaterMagmaConfiguration)",
            "Integer lambda$null$1(UnderwaterMagmaConfiguration)",
            "Integer lambda$null$0(UnderwaterMagmaConfiguration)"
          ],
          "removed": [
            "Float lambda$static$2(UnderwaterMagmaConfiguration)",
            "Integer lambda$static$1(UnderwaterMagmaConfiguration)",
            "Integer lambda$static$0(UnderwaterMagmaConfiguration)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize",
        "differences": {
          "added": [
            "Integer lambda$null$2(TwoLayersFeatureSize)",
            "Integer lambda$null$1(TwoLayersFeatureSize)",
            "Integer lambda$null$0(TwoLayersFeatureSize)"
          ],
          "removed": [
            "Integer lambda$static$2(TwoLayersFeatureSize)",
            "Integer lambda$static$1(TwoLayersFeatureSize)",
            "Integer lambda$static$0(TwoLayersFeatureSize)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer",
        "differences": {
          "added": [
            "Integer lambda$null$0(MegaJungleFoliagePlacer)"
          ],
          "removed": [
            "Integer lambda$static$0(MegaJungleFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer",
        "differences": {
          "added": [
            "IntProvider lambda$null$0(PineFoliagePlacer)"
          ],
          "removed": [
            "IntProvider lambda$static$0(PineFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer",
        "differences": {
          "added": [
            "IntProvider lambda$null$0(SpruceFoliagePlacer)"
          ],
          "removed": [
            "IntProvider lambda$static$0(SpruceFoliagePlacer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$MossStoneSelector",
        "differences": {
          "added": [
            "void <init>(JunglePyramidPiece$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.MineShaftPieces",
        "differences": {
          "added": [
            "Logger access$000()",
            "MineShaftPieces$MineShaftPiece access$100(StructurePiece,StructurePieceAccessor,Random,int,int,int,Direction,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitSimpleRoom",
        "differences": {
          "added": [
            "void <init>(OceanMonumentPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition",
        "differences": {
          "added": [
            "int access$000(OceanMonumentPieces$RoomDefinition)",
            "boolean access$102(OceanMonumentPieces$RoomDefinition,boolean)",
            "boolean access$100(OceanMonumentPieces$RoomDefinition)",
            "boolean access$902(OceanMonumentPieces$RoomDefinition,boolean)",
            "OceanMonumentPieces$RoomDefinition[] access$1000(OceanMonumentPieces$RoomDefinition)",
            "boolean[] access$1100(OceanMonumentPieces$RoomDefinition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.RuinedPortalPiece$VerticalPlacement",
        "differences": {
          "added": [],
          "removed": [
            "RuinedPortalPiece$VerticalPlacement[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.ShipwreckPieces",
        "differences": {
          "added": [
            "BlockPos access$000()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces",
        "differences": {
          "added": [
            "StructurePiece access$000(StrongholdPieces$StartPiece,StructurePieceAccessor,Random,int,int,int,Direction,int)",
            "Class access$102(Class)",
            "StrongholdPieces$SmoothStoneSelector access$200()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces$SmoothStoneSelector",
        "differences": {
          "added": [
            "void <init>(StrongholdPieces$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType",
        "differences": {
          "added": [],
          "removed": [
            "StrongholdPieces$StrongholdPiece$SmallDoorType[] $values()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer",
        "differences": {
          "added": [
            "void <init>(MapItemSavedData,Player,MapItemSavedData$1)",
            "Packet access$200(MapItemSavedData$HoldingPlayer,int)",
            "void access$300(MapItemSavedData$HoldingPlayer,int,int)",
            "void access$400(MapItemSavedData$HoldingPlayer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.IntRange",
        "differences": {
          "added": [
            "void <init>(NumberProvider,NumberProvider,IntRange$1)",
            "NumberProvider access$100(IntRange)",
            "NumberProvider access$200(IntRange)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.LootPool",
        "differences": {
          "added": [
            "void <init>(LootPoolEntryContainer[],LootItemCondition[],LootItemFunction[],NumberProvider,NumberProvider,LootPool$1)",
            "NumberProvider access$100(LootPool)",
            "NumberProvider access$200(LootPool)",
            "LootPoolEntryContainer[] access$300(LootPool)",
            "LootItemCondition[] access$400(LootPool)",
            "LootItemFunction[] access$500(LootPool)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.entries.EmptyLootItem",
        "differences": {
          "added": [
            "void <init>(int,int,LootItemCondition[],LootItemFunction[],EmptyLootItem$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer",
        "differences": {
          "added": [
            "BiFunction access$000(LootPoolSingletonContainer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],ApplyExplosionDecay$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation",
        "differences": {
          "added": [
            "void <init>(String,String,CopyNbtFunction$MergeStrategy,CopyNbtFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy$3",
        "differences": {
          "added": [
            "void lambda$null$0(Tag,Tag)"
          ],
          "removed": [
            "void lambda$merge$0(Tag,Tag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],Collection,EnchantRandomlyFunction$1)",
            "List access$100(EnchantRandomlyFunction)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],StructureFeature,MapDecoration$Type,byte,int,boolean,ExplorationMapFunction$1)",
            "StructureFeature access$100(ExplorationMapFunction)",
            "MapDecoration$Type access$200(ExplorationMapFunction)",
            "byte access$300(ExplorationMapFunction)",
            "int access$400(ExplorationMapFunction)",
            "boolean access$500(ExplorationMapFunction)",
            "Logger access$600()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],NumberProvider,int,LootingEnchantFunction$1)",
            "NumberProvider access$100(LootingEnchantFunction)",
            "boolean access$200(LootingEnchantFunction)",
            "int access$300(LootingEnchantFunction)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder",
        "differences": {
          "added": [
            "void <init>(boolean,SetBannerPatternFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetContainerContents",
        "differences": {
          "added": [
            "void lambda$null$0(NonNullList,LootContext,LootPoolEntry)",
            "void <init>(LootItemCondition[],List,SetContainerContents$1)",
            "List access$100(SetContainerContents)"
          ],
          "removed": [
            "void lambda$run$0(NonNullList,LootContext,LootPoolEntry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction",
        "differences": {
          "added": [
            "NumberProvider access$000(SetItemDamageFunction)",
            "boolean access$100(SetItemDamageFunction)",
            "void <init>(LootItemCondition[],NumberProvider,boolean,SetItemDamageFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SmeltItemFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],SmeltItemFunction$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],AlternativeLootItemCondition$1)",
            "LootItemCondition[] access$100(AlternativeLootItemCondition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition",
        "differences": {
          "added": [
            "void <init>(Map,LootContext$EntityTarget,EntityHasScoreCondition$1)",
            "Map access$100(EntityHasScoreCondition)",
            "LootContext$EntityTarget access$200(EntityHasScoreCondition)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition",
        "differences": {
          "added": [
            "EntityPredicate access$000(LootItemEntityPropertyCondition)",
            "LootContext$EntityTarget access$100(LootItemEntityPropertyCondition)",
            "void <init>(EntityPredicate,LootContext$EntityTarget,LootItemEntityPropertyCondition$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition",
        "differences": {
          "added": [
            "float access$000(LootItemRandomChanceWithLootingCondition)",
            "float access$100(LootItemRandomChanceWithLootingCondition)",
            "void <init>(float,float,LootItemRandomChanceWithLootingCondition$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider",
        "differences": {
          "added": [
            "ResourceLocation access$000(StorageNbtProvider)",
            "void <init>(ResourceLocation,StorageNbtProvider$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.timers.TimerQueue$Event",
        "differences": {
          "added": [
            "void <init>(long,UnsignedLong,String,TimerCallback,TimerQueue$1)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.Shapes",
        "differences": {
          "added": [
            "boolean lambda$null$2(IndexMerger,BooleanOp,DiscreteVoxelShape,int,DiscreteVoxelShape,int,int,int,int)",
            "boolean lambda$null$1(BooleanOp,DiscreteVoxelShape,int,int,DiscreteVoxelShape,int,int,int,int,int)"
          ],
          "removed": [
            "boolean lambda$joinIsNotEmpty$2(IndexMerger,BooleanOp,DiscreteVoxelShape,int,DiscreteVoxelShape,int,int,int,int)",
            "boolean lambda$joinIsNotEmpty$1(BooleanOp,DiscreteVoxelShape,int,int,DiscreteVoxelShape,int,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.scores.Team$CollisionRule",
        "differences": {
          "added": [],
          "removed": [
            "Team$CollisionRule[] $values()"
          ]
        }
      }
    }
  ]
}