{
  "version_data": [
    {
      "type": "table",
      "value": {
        "previousLabel": "1.16.5",
        "currentLabel": "21w03a",
        "values": [
          {
            "key": "DataPack version",
            "previous": "/",
            "current": "7"
          },
          {
            "key": "ResourcePack version",
            "previous": "/",
            "current": "7"
          },
          {
            "key": "World version",
            "previous": "2586",
            "current": "2689"
          },
          {
            "key": "Protocol version",
            "previous": "754",
            "current": "1073741835"
          }
        ]
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Libraries",
        "id": "version-data-libraries",
        "size": 3
      }
    },
    {
      "type": "table",
      "value": {
        "title": "Versions",
        "previousLabel": "1.16.5",
        "currentLabel": "21w03a",
        "values": [
          {
            "key": "com.mojang:javabridge",
            "previous": "1.0.22",
            "current": "1.1.23"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-glfw",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-jemalloc",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-openal",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-opengl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-stb",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl-tinyfd",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          },
          {
            "key": "org.lwjgl:lwjgl",
            "previous": "3.2.1",
            "current": "3.2.2"
          }
        ]
      }
    }
  ],
  "registries": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "game_event.txt",
            "loot_nbt_provider_type.txt",
            "loot_number_provider_type.txt",
            "loot_score_provider_type.txt",
            "position_source_type.txt"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "activity",
        "differences": {
          "added": [
            "minecraft:play_dead"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "block",
        "differences": {
          "added": [
            "minecraft:water_cauldron",
            "minecraft:lava_cauldron",
            "minecraft:powder_snow_cauldron",
            "minecraft:dirt_path",
            "minecraft:candle",
            "minecraft:white_candle",
            "minecraft:orange_candle",
            "minecraft:magenta_candle",
            "minecraft:light_blue_candle",
            "minecraft:yellow_candle",
            "minecraft:lime_candle",
            "minecraft:pink_candle",
            "minecraft:gray_candle",
            "minecraft:light_gray_candle",
            "minecraft:cyan_candle",
            "minecraft:purple_candle",
            "minecraft:blue_candle",
            "minecraft:brown_candle",
            "minecraft:green_candle",
            "minecraft:red_candle",
            "minecraft:black_candle",
            "minecraft:candle_cake",
            "minecraft:white_candle_cake",
            "minecraft:orange_candle_cake",
            "minecraft:magenta_candle_cake",
            "minecraft:light_blue_candle_cake",
            "minecraft:yellow_candle_cake",
            "minecraft:lime_candle_cake",
            "minecraft:pink_candle_cake",
            "minecraft:gray_candle_cake",
            "minecraft:light_gray_candle_cake",
            "minecraft:cyan_candle_cake",
            "minecraft:purple_candle_cake",
            "minecraft:blue_candle_cake",
            "minecraft:brown_candle_cake",
            "minecraft:green_candle_cake",
            "minecraft:red_candle_cake",
            "minecraft:black_candle_cake",
            "minecraft:amethyst_block",
            "minecraft:budding_amethyst",
            "minecraft:amethyst_cluster",
            "minecraft:large_amethyst_bud",
            "minecraft:medium_amethyst_bud",
            "minecraft:small_amethyst_bud",
            "minecraft:tuff",
            "minecraft:calcite",
            "minecraft:tinted_glass",
            "minecraft:powder_snow",
            "minecraft:sculk_sensor",
            "minecraft:weathered_copper_block",
            "minecraft:semi_weathered_copper_block",
            "minecraft:lightly_weathered_copper_block",
            "minecraft:copper_block",
            "minecraft:copper_ore",
            "minecraft:weathered_cut_copper",
            "minecraft:semi_weathered_cut_copper",
            "minecraft:lightly_weathered_cut_copper",
            "minecraft:cut_copper",
            "minecraft:weathered_cut_copper_stairs",
            "minecraft:semi_weathered_cut_copper_stairs",
            "minecraft:lightly_weathered_cut_copper_stairs",
            "minecraft:cut_copper_stairs",
            "minecraft:weathered_cut_copper_slab",
            "minecraft:semi_weathered_cut_copper_slab",
            "minecraft:lightly_weathered_cut_copper_slab",
            "minecraft:cut_copper_slab",
            "minecraft:waxed_copper",
            "minecraft:waxed_semi_weathered_copper",
            "minecraft:waxed_lightly_weathered_copper",
            "minecraft:waxed_semi_weathered_cut_copper",
            "minecraft:waxed_lightly_weathered_cut_copper",
            "minecraft:waxed_cut_copper",
            "minecraft:waxed_semi_weathered_cut_copper_stairs",
            "minecraft:waxed_lightly_weathered_cut_copper_stairs",
            "minecraft:waxed_cut_copper_stairs",
            "minecraft:waxed_semi_weathered_cut_copper_slab",
            "minecraft:waxed_lightly_weathered_cut_copper_slab",
            "minecraft:waxed_cut_copper_slab",
            "minecraft:lightning_rod",
            "minecraft:pointed_dripstone",
            "minecraft:dripstone_block",
            "minecraft:glow_lichen"
          ],
          "removed": [
            "minecraft:grass_path"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "block_entity_type",
        "differences": {
          "added": [
            "minecraft:sculk_sensor"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "entity_type",
        "differences": {
          "added": [
            "minecraft:axolotl",
            "minecraft:glow_item_frame",
            "minecraft:glow_squid"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "item",
        "differences": {
          "added": [
            "minecraft:calcite",
            "minecraft:tuff",
            "minecraft:copper_ore",
            "minecraft:tinted_glass",
            "minecraft:dirt_path",
            "minecraft:copper_ingot",
            "minecraft:axolotl_bucket",
            "minecraft:bundle",
            "minecraft:axolotl_spawn_egg",
            "minecraft:glow_squid_spawn_egg",
            "minecraft:glow_item_frame",
            "minecraft:candle",
            "minecraft:white_candle",
            "minecraft:orange_candle",
            "minecraft:magenta_candle",
            "minecraft:light_blue_candle",
            "minecraft:yellow_candle",
            "minecraft:lime_candle",
            "minecraft:pink_candle",
            "minecraft:gray_candle",
            "minecraft:light_gray_candle",
            "minecraft:cyan_candle",
            "minecraft:purple_candle",
            "minecraft:blue_candle",
            "minecraft:brown_candle",
            "minecraft:green_candle",
            "minecraft:red_candle",
            "minecraft:black_candle",
            "minecraft:amethyst_shard",
            "minecraft:amethyst_block",
            "minecraft:budding_amethyst",
            "minecraft:small_amethyst_bud",
            "minecraft:medium_amethyst_bud",
            "minecraft:large_amethyst_bud",
            "minecraft:amethyst_cluster",
            "minecraft:spyglass",
            "minecraft:copper_block",
            "minecraft:lightly_weathered_copper_block",
            "minecraft:semi_weathered_copper_block",
            "minecraft:weathered_copper_block",
            "minecraft:cut_copper",
            "minecraft:lightly_weathered_cut_copper",
            "minecraft:semi_weathered_cut_copper",
            "minecraft:weathered_cut_copper",
            "minecraft:cut_copper_stairs",
            "minecraft:lightly_weathered_cut_copper_stairs",
            "minecraft:semi_weathered_cut_copper_stairs",
            "minecraft:weathered_cut_copper_stairs",
            "minecraft:cut_copper_slab",
            "minecraft:lightly_weathered_cut_copper_slab",
            "minecraft:semi_weathered_cut_copper_slab",
            "minecraft:weathered_cut_copper_slab",
            "minecraft:waxed_copper",
            "minecraft:waxed_lightly_weathered_copper",
            "minecraft:waxed_semi_weathered_copper",
            "minecraft:waxed_cut_copper",
            "minecraft:waxed_lightly_weathered_cut_copper",
            "minecraft:waxed_semi_weathered_cut_copper",
            "minecraft:waxed_cut_copper_stairs",
            "minecraft:waxed_lightly_weathered_cut_copper_stairs",
            "minecraft:waxed_semi_weathered_cut_copper_stairs",
            "minecraft:waxed_cut_copper_slab",
            "minecraft:waxed_lightly_weathered_cut_copper_slab",
            "minecraft:waxed_semi_weathered_cut_copper_slab",
            "minecraft:lightning_rod",
            "minecraft:powder_snow_bucket",
            "minecraft:pointed_dripstone",
            "minecraft:dripstone_block",
            "minecraft:sculk_sensor",
            "minecraft:glow_lichen",
            "minecraft:glow_ink_sac"
          ],
          "removed": [
            "minecraft:grass_path"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "loot_condition_type",
        "differences": {
          "added": [
            "minecraft:value_check"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "loot_function_type",
        "differences": {
          "added": [
            "minecraft:set_enchantments",
            "minecraft:set_banner_pattern"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "memory_module_type",
        "differences": {
          "added": [
            "minecraft:play_dead_ticks",
            "minecraft:tempting_player",
            "minecraft:temptation_cooldown_ticks",
            "minecraft:is_tempted"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "particle_type",
        "differences": {
          "added": [
            "minecraft:dust_color_transition",
            "minecraft:vibration",
            "minecraft:small_flame",
            "minecraft:snowflake",
            "minecraft:dripping_dripstone_lava",
            "minecraft:falling_dripstone_lava",
            "minecraft:dripping_dripstone_water",
            "minecraft:falling_dripstone_water",
            "minecraft:glow_squid_ink",
            "minecraft:glow"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "point_of_interest_type",
        "differences": {
          "added": [
            "minecraft:lightning_rod"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sensor_type",
        "differences": {
          "added": [
            "minecraft:axolotl_hostiles",
            "minecraft:axolotl_temptations"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "sound_event",
        "differences": {
          "added": [
            "minecraft:block.amethyst_block.break",
            "minecraft:block.amethyst_block.chime",
            "minecraft:block.amethyst_block.fall",
            "minecraft:block.amethyst_block.hit",
            "minecraft:block.amethyst_block.place",
            "minecraft:block.amethyst_block.step",
            "minecraft:block.amethyst_cluster.break",
            "minecraft:block.amethyst_cluster.fall",
            "minecraft:block.amethyst_cluster.hit",
            "minecraft:block.amethyst_cluster.place",
            "minecraft:block.amethyst_cluster.step",
            "minecraft:entity.axolotl.attack",
            "minecraft:entity.axolotl.death",
            "minecraft:entity.axolotl.hurt",
            "minecraft:entity.axolotl.idle_air",
            "minecraft:entity.axolotl.idle_water",
            "minecraft:entity.axolotl.splash",
            "minecraft:entity.axolotl.swim",
            "minecraft:item.bucket.empty_axolotl",
            "minecraft:item.bucket.empty_powder_snow",
            "minecraft:item.bucket.fill_axolotl",
            "minecraft:item.bucket.fill_powder_snow",
            "minecraft:block.cake.add_candle",
            "minecraft:block.calcite.break",
            "minecraft:block.calcite.step",
            "minecraft:block.calcite.place",
            "minecraft:block.calcite.hit",
            "minecraft:block.calcite.fall",
            "minecraft:block.candle.ambient",
            "minecraft:block.candle.break",
            "minecraft:block.candle.extinguish",
            "minecraft:block.candle.fall",
            "minecraft:block.candle.hit",
            "minecraft:block.candle.place",
            "minecraft:block.candle.step",
            "minecraft:block.copper.break",
            "minecraft:block.copper.step",
            "minecraft:block.copper.place",
            "minecraft:block.copper.hit",
            "minecraft:block.copper.fall",
            "minecraft:block.dripstone_block.break",
            "minecraft:block.dripstone_block.step",
            "minecraft:block.dripstone_block.place",
            "minecraft:block.dripstone_block.hit",
            "minecraft:block.dripstone_block.fall",
            "minecraft:block.pointed_dripstone.break",
            "minecraft:block.pointed_dripstone.step",
            "minecraft:block.pointed_dripstone.place",
            "minecraft:block.pointed_dripstone.hit",
            "minecraft:block.pointed_dripstone.fall",
            "minecraft:block.pointed_dripstone.land",
            "minecraft:block.pointed_dripstone.drip_lava",
            "minecraft:block.pointed_dripstone.drip_water",
            "minecraft:block.pointed_dripstone.drip_lava_into_cauldron",
            "minecraft:block.pointed_dripstone.drip_water_into_cauldron",
            "minecraft:item.dye.use",
            "minecraft:item.glow_ink_sac.use",
            "minecraft:entity.glow_squid.ambient",
            "minecraft:entity.glow_squid.death",
            "minecraft:entity.glow_squid.hurt",
            "minecraft:entity.glow_squid.squirt",
            "minecraft:item.ink_sac.use",
            "minecraft:block.large_amethyst_bud.break",
            "minecraft:block.large_amethyst_bud.place",
            "minecraft:block.medium_amethyst_bud.break",
            "minecraft:block.medium_amethyst_bud.place",
            "minecraft:entity.minecart.inside.underwater",
            "minecraft:entity.player.hurt_freeze",
            "minecraft:block.powder_snow.break",
            "minecraft:block.powder_snow.fall",
            "minecraft:block.powder_snow.hit",
            "minecraft:block.powder_snow.place",
            "minecraft:block.powder_snow.step",
            "minecraft:block.sculk_sensor.clicking",
            "minecraft:block.sculk_sensor.clicking_stop",
            "minecraft:block.sculk_sensor.break",
            "minecraft:block.sculk_sensor.fall",
            "minecraft:block.sculk_sensor.hit",
            "minecraft:block.sculk_sensor.place",
            "minecraft:block.sculk_sensor.step",
            "minecraft:block.small_amethyst_bud.break",
            "minecraft:block.small_amethyst_bud.place",
            "minecraft:item.spyglass.use",
            "minecraft:item.spyglass.stop_using",
            "minecraft:block.tuff.break",
            "minecraft:block.tuff.step",
            "minecraft:block.tuff.place",
            "minecraft:block.tuff.hit",
            "minecraft:block.tuff.fall"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "worldgen/feature",
        "differences": {
          "added": [
            "minecraft:glow_lichen",
            "minecraft:geode",
            "minecraft:dripstone_cluster",
            "minecraft:large_dripstone",
            "minecraft:small_dripstone"
          ],
          "removed": []
        }
      }
    }
  ],
  "tags": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "universal_tags/game_event.json",
            "universal_tags/loot_nbt_provider_type.json",
            "universal_tags/loot_number_provider_type.json",
            "universal_tags/loot_score_provider_type.json",
            "universal_tags/position_source_type.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_blocks_without_drop.json",
        "differences": {
          "added": [
            "minecraft:budding_amethyst",
            "minecraft:powder_snow"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_blocks_with_drop.json",
        "differences": {
          "added": [
            "minecraft:amethyst_block",
            "minecraft:amethyst_cluster",
            "minecraft:black_candle",
            "minecraft:black_candle_cake",
            "minecraft:blue_candle",
            "minecraft:blue_candle_cake",
            "minecraft:brown_candle",
            "minecraft:brown_candle_cake",
            "minecraft:calcite",
            "minecraft:candle",
            "minecraft:candle_cake",
            "minecraft:copper_block",
            "minecraft:copper_ore",
            "minecraft:cut_copper",
            "minecraft:cut_copper_slab",
            "minecraft:cut_copper_stairs",
            "minecraft:cyan_candle",
            "minecraft:cyan_candle_cake",
            "minecraft:dirt_path",
            "minecraft:dripstone_block",
            "minecraft:glow_lichen",
            "minecraft:gray_candle",
            "minecraft:gray_candle_cake",
            "minecraft:green_candle",
            "minecraft:green_candle_cake",
            "minecraft:large_amethyst_bud",
            "minecraft:lava_cauldron",
            "minecraft:lightly_weathered_copper_block",
            "minecraft:lightly_weathered_cut_copper",
            "minecraft:lightly_weathered_cut_copper_slab",
            "minecraft:lightly_weathered_cut_copper_stairs",
            "minecraft:lightning_rod",
            "minecraft:light_blue_candle",
            "minecraft:light_blue_candle_cake",
            "minecraft:light_gray_candle",
            "minecraft:light_gray_candle_cake",
            "minecraft:lime_candle",
            "minecraft:lime_candle_cake",
            "minecraft:magenta_candle",
            "minecraft:magenta_candle_cake",
            "minecraft:medium_amethyst_bud",
            "minecraft:orange_candle",
            "minecraft:orange_candle_cake",
            "minecraft:pink_candle",
            "minecraft:pink_candle_cake",
            "minecraft:pointed_dripstone",
            "minecraft:powder_snow_cauldron",
            "minecraft:purple_candle",
            "minecraft:purple_candle_cake",
            "minecraft:red_candle",
            "minecraft:red_candle_cake",
            "minecraft:sculk_sensor",
            "minecraft:semi_weathered_copper_block",
            "minecraft:semi_weathered_cut_copper",
            "minecraft:semi_weathered_cut_copper_slab",
            "minecraft:semi_weathered_cut_copper_stairs",
            "minecraft:small_amethyst_bud",
            "minecraft:tinted_glass",
            "minecraft:tuff",
            "minecraft:water_cauldron",
            "minecraft:waxed_copper",
            "minecraft:waxed_cut_copper",
            "minecraft:waxed_cut_copper_slab",
            "minecraft:waxed_cut_copper_stairs",
            "minecraft:waxed_lightly_weathered_copper",
            "minecraft:waxed_lightly_weathered_cut_copper",
            "minecraft:waxed_lightly_weathered_cut_copper_slab",
            "minecraft:waxed_lightly_weathered_cut_copper_stairs",
            "minecraft:waxed_semi_weathered_copper",
            "minecraft:waxed_semi_weathered_cut_copper",
            "minecraft:waxed_semi_weathered_cut_copper_slab",
            "minecraft:waxed_semi_weathered_cut_copper_stairs",
            "minecraft:weathered_copper_block",
            "minecraft:weathered_cut_copper",
            "minecraft:weathered_cut_copper_slab",
            "minecraft:weathered_cut_copper_stairs",
            "minecraft:white_candle",
            "minecraft:white_candle_cake",
            "minecraft:yellow_candle",
            "minecraft:yellow_candle_cake"
          ],
          "removed": [
            "minecraft:grass_path"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_entities_without_drop.json",
        "differences": {
          "added": [
            "minecraft:axolotl",
            "minecraft:glow_item_frame"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_entities_with_drop.json",
        "differences": {
          "added": [
            "minecraft:glow_squid"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_living_entities_without_drop.json",
        "differences": {
          "added": [
            "minecraft:axolotl"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "all_survival_blocks_without_drop.json",
        "differences": {
          "added": [
            "minecraft:budding_amethyst",
            "minecraft:powder_snow"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/activity.json",
        "differences": {
          "added": [
            "minecraft:play_dead"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/block.json",
        "differences": {
          "added": [
            "minecraft:water_cauldron",
            "minecraft:lava_cauldron",
            "minecraft:powder_snow_cauldron",
            "minecraft:dirt_path",
            "minecraft:candle",
            "minecraft:white_candle",
            "minecraft:orange_candle",
            "minecraft:magenta_candle",
            "minecraft:light_blue_candle",
            "minecraft:yellow_candle",
            "minecraft:lime_candle",
            "minecraft:pink_candle",
            "minecraft:gray_candle",
            "minecraft:light_gray_candle",
            "minecraft:cyan_candle",
            "minecraft:purple_candle",
            "minecraft:blue_candle",
            "minecraft:brown_candle",
            "minecraft:green_candle",
            "minecraft:red_candle",
            "minecraft:black_candle",
            "minecraft:candle_cake",
            "minecraft:white_candle_cake",
            "minecraft:orange_candle_cake",
            "minecraft:magenta_candle_cake",
            "minecraft:light_blue_candle_cake",
            "minecraft:yellow_candle_cake",
            "minecraft:lime_candle_cake",
            "minecraft:pink_candle_cake",
            "minecraft:gray_candle_cake",
            "minecraft:light_gray_candle_cake",
            "minecraft:cyan_candle_cake",
            "minecraft:purple_candle_cake",
            "minecraft:blue_candle_cake",
            "minecraft:brown_candle_cake",
            "minecraft:green_candle_cake",
            "minecraft:red_candle_cake",
            "minecraft:black_candle_cake",
            "minecraft:amethyst_block",
            "minecraft:budding_amethyst",
            "minecraft:amethyst_cluster",
            "minecraft:large_amethyst_bud",
            "minecraft:medium_amethyst_bud",
            "minecraft:small_amethyst_bud",
            "minecraft:tuff",
            "minecraft:calcite",
            "minecraft:tinted_glass",
            "minecraft:powder_snow",
            "minecraft:sculk_sensor",
            "minecraft:weathered_copper_block",
            "minecraft:semi_weathered_copper_block",
            "minecraft:lightly_weathered_copper_block",
            "minecraft:copper_block",
            "minecraft:copper_ore",
            "minecraft:weathered_cut_copper",
            "minecraft:semi_weathered_cut_copper",
            "minecraft:lightly_weathered_cut_copper",
            "minecraft:cut_copper",
            "minecraft:weathered_cut_copper_stairs",
            "minecraft:semi_weathered_cut_copper_stairs",
            "minecraft:lightly_weathered_cut_copper_stairs",
            "minecraft:cut_copper_stairs",
            "minecraft:weathered_cut_copper_slab",
            "minecraft:semi_weathered_cut_copper_slab",
            "minecraft:lightly_weathered_cut_copper_slab",
            "minecraft:cut_copper_slab",
            "minecraft:waxed_copper",
            "minecraft:waxed_semi_weathered_copper",
            "minecraft:waxed_lightly_weathered_copper",
            "minecraft:waxed_semi_weathered_cut_copper",
            "minecraft:waxed_lightly_weathered_cut_copper",
            "minecraft:waxed_cut_copper",
            "minecraft:waxed_semi_weathered_cut_copper_stairs",
            "minecraft:waxed_lightly_weathered_cut_copper_stairs",
            "minecraft:waxed_cut_copper_stairs",
            "minecraft:waxed_semi_weathered_cut_copper_slab",
            "minecraft:waxed_lightly_weathered_cut_copper_slab",
            "minecraft:waxed_cut_copper_slab",
            "minecraft:lightning_rod",
            "minecraft:pointed_dripstone",
            "minecraft:dripstone_block",
            "minecraft:glow_lichen"
          ],
          "removed": [
            "minecraft:grass_path"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/block_entity_type.json",
        "differences": {
          "added": [
            "minecraft:sculk_sensor"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/entity_type.json",
        "differences": {
          "added": [
            "minecraft:axolotl",
            "minecraft:glow_item_frame",
            "minecraft:glow_squid"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/item.json",
        "differences": {
          "added": [
            "minecraft:calcite",
            "minecraft:tuff",
            "minecraft:copper_ore",
            "minecraft:tinted_glass",
            "minecraft:dirt_path",
            "minecraft:copper_ingot",
            "minecraft:axolotl_bucket",
            "minecraft:bundle",
            "minecraft:axolotl_spawn_egg",
            "minecraft:glow_squid_spawn_egg",
            "minecraft:glow_item_frame",
            "minecraft:candle",
            "minecraft:white_candle",
            "minecraft:orange_candle",
            "minecraft:magenta_candle",
            "minecraft:light_blue_candle",
            "minecraft:yellow_candle",
            "minecraft:lime_candle",
            "minecraft:pink_candle",
            "minecraft:gray_candle",
            "minecraft:light_gray_candle",
            "minecraft:cyan_candle",
            "minecraft:purple_candle",
            "minecraft:blue_candle",
            "minecraft:brown_candle",
            "minecraft:green_candle",
            "minecraft:red_candle",
            "minecraft:black_candle",
            "minecraft:amethyst_shard",
            "minecraft:amethyst_block",
            "minecraft:budding_amethyst",
            "minecraft:small_amethyst_bud",
            "minecraft:medium_amethyst_bud",
            "minecraft:large_amethyst_bud",
            "minecraft:amethyst_cluster",
            "minecraft:spyglass",
            "minecraft:copper_block",
            "minecraft:lightly_weathered_copper_block",
            "minecraft:semi_weathered_copper_block",
            "minecraft:weathered_copper_block",
            "minecraft:cut_copper",
            "minecraft:lightly_weathered_cut_copper",
            "minecraft:semi_weathered_cut_copper",
            "minecraft:weathered_cut_copper",
            "minecraft:cut_copper_stairs",
            "minecraft:lightly_weathered_cut_copper_stairs",
            "minecraft:semi_weathered_cut_copper_stairs",
            "minecraft:weathered_cut_copper_stairs",
            "minecraft:cut_copper_slab",
            "minecraft:lightly_weathered_cut_copper_slab",
            "minecraft:semi_weathered_cut_copper_slab",
            "minecraft:weathered_cut_copper_slab",
            "minecraft:waxed_copper",
            "minecraft:waxed_lightly_weathered_copper",
            "minecraft:waxed_semi_weathered_copper",
            "minecraft:waxed_cut_copper",
            "minecraft:waxed_lightly_weathered_cut_copper",
            "minecraft:waxed_semi_weathered_cut_copper",
            "minecraft:waxed_cut_copper_stairs",
            "minecraft:waxed_lightly_weathered_cut_copper_stairs",
            "minecraft:waxed_semi_weathered_cut_copper_stairs",
            "minecraft:waxed_cut_copper_slab",
            "minecraft:waxed_lightly_weathered_cut_copper_slab",
            "minecraft:waxed_semi_weathered_cut_copper_slab",
            "minecraft:lightning_rod",
            "minecraft:powder_snow_bucket",
            "minecraft:pointed_dripstone",
            "minecraft:dripstone_block",
            "minecraft:sculk_sensor",
            "minecraft:glow_lichen",
            "minecraft:glow_ink_sac"
          ],
          "removed": [
            "minecraft:grass_path"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/loot_condition_type.json",
        "differences": {
          "added": [
            "minecraft:value_check"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/loot_function_type.json",
        "differences": {
          "added": [
            "minecraft:set_enchantments",
            "minecraft:set_banner_pattern"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/memory_module_type.json",
        "differences": {
          "added": [
            "minecraft:play_dead_ticks",
            "minecraft:tempting_player",
            "minecraft:temptation_cooldown_ticks",
            "minecraft:is_tempted"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/particle_type.json",
        "differences": {
          "added": [
            "minecraft:dust_color_transition",
            "minecraft:vibration",
            "minecraft:small_flame",
            "minecraft:snowflake",
            "minecraft:dripping_dripstone_lava",
            "minecraft:falling_dripstone_lava",
            "minecraft:dripping_dripstone_water",
            "minecraft:falling_dripstone_water",
            "minecraft:glow_squid_ink",
            "minecraft:glow"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/point_of_interest_type.json",
        "differences": {
          "added": [
            "minecraft:lightning_rod"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sensor_type.json",
        "differences": {
          "added": [
            "minecraft:axolotl_hostiles",
            "minecraft:axolotl_temptations"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/sound_event.json",
        "differences": {
          "added": [
            "minecraft:block.amethyst_block.break",
            "minecraft:block.amethyst_block.chime",
            "minecraft:block.amethyst_block.fall",
            "minecraft:block.amethyst_block.hit",
            "minecraft:block.amethyst_block.place",
            "minecraft:block.amethyst_block.step",
            "minecraft:block.amethyst_cluster.break",
            "minecraft:block.amethyst_cluster.fall",
            "minecraft:block.amethyst_cluster.hit",
            "minecraft:block.amethyst_cluster.place",
            "minecraft:block.amethyst_cluster.step",
            "minecraft:entity.axolotl.attack",
            "minecraft:entity.axolotl.death",
            "minecraft:entity.axolotl.hurt",
            "minecraft:entity.axolotl.idle_air",
            "minecraft:entity.axolotl.idle_water",
            "minecraft:entity.axolotl.splash",
            "minecraft:entity.axolotl.swim",
            "minecraft:item.bucket.empty_axolotl",
            "minecraft:item.bucket.empty_powder_snow",
            "minecraft:item.bucket.fill_axolotl",
            "minecraft:item.bucket.fill_powder_snow",
            "minecraft:block.cake.add_candle",
            "minecraft:block.calcite.break",
            "minecraft:block.calcite.step",
            "minecraft:block.calcite.place",
            "minecraft:block.calcite.hit",
            "minecraft:block.calcite.fall",
            "minecraft:block.candle.ambient",
            "minecraft:block.candle.break",
            "minecraft:block.candle.extinguish",
            "minecraft:block.candle.fall",
            "minecraft:block.candle.hit",
            "minecraft:block.candle.place",
            "minecraft:block.candle.step",
            "minecraft:block.copper.break",
            "minecraft:block.copper.step",
            "minecraft:block.copper.place",
            "minecraft:block.copper.hit",
            "minecraft:block.copper.fall",
            "minecraft:block.dripstone_block.break",
            "minecraft:block.dripstone_block.step",
            "minecraft:block.dripstone_block.place",
            "minecraft:block.dripstone_block.hit",
            "minecraft:block.dripstone_block.fall",
            "minecraft:block.pointed_dripstone.break",
            "minecraft:block.pointed_dripstone.step",
            "minecraft:block.pointed_dripstone.place",
            "minecraft:block.pointed_dripstone.hit",
            "minecraft:block.pointed_dripstone.fall",
            "minecraft:block.pointed_dripstone.land",
            "minecraft:block.pointed_dripstone.drip_lava",
            "minecraft:block.pointed_dripstone.drip_water",
            "minecraft:block.pointed_dripstone.drip_lava_into_cauldron",
            "minecraft:block.pointed_dripstone.drip_water_into_cauldron",
            "minecraft:item.dye.use",
            "minecraft:item.glow_ink_sac.use",
            "minecraft:entity.glow_squid.ambient",
            "minecraft:entity.glow_squid.death",
            "minecraft:entity.glow_squid.hurt",
            "minecraft:entity.glow_squid.squirt",
            "minecraft:item.ink_sac.use",
            "minecraft:block.large_amethyst_bud.break",
            "minecraft:block.large_amethyst_bud.place",
            "minecraft:block.medium_amethyst_bud.break",
            "minecraft:block.medium_amethyst_bud.place",
            "minecraft:entity.minecart.inside.underwater",
            "minecraft:entity.player.hurt_freeze",
            "minecraft:block.powder_snow.break",
            "minecraft:block.powder_snow.fall",
            "minecraft:block.powder_snow.hit",
            "minecraft:block.powder_snow.place",
            "minecraft:block.powder_snow.step",
            "minecraft:block.sculk_sensor.clicking",
            "minecraft:block.sculk_sensor.clicking_stop",
            "minecraft:block.sculk_sensor.break",
            "minecraft:block.sculk_sensor.fall",
            "minecraft:block.sculk_sensor.hit",
            "minecraft:block.sculk_sensor.place",
            "minecraft:block.sculk_sensor.step",
            "minecraft:block.small_amethyst_bud.break",
            "minecraft:block.small_amethyst_bud.place",
            "minecraft:item.spyglass.use",
            "minecraft:item.spyglass.stop_using",
            "minecraft:block.tuff.break",
            "minecraft:block.tuff.step",
            "minecraft:block.tuff.place",
            "minecraft:block.tuff.hit",
            "minecraft:block.tuff.fall"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "universal_tags/worldgen/feature.json",
        "differences": {
          "added": [
            "minecraft:glow_lichen",
            "minecraft:geode",
            "minecraft:dripstone_cluster",
            "minecraft:large_dripstone",
            "minecraft:small_dripstone"
          ],
          "removed": []
        }
      }
    }
  ],
  "blocks": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "amethyst_block.json",
            "amethyst_cluster.json",
            "black_candle.json",
            "black_candle_cake.json",
            "blue_candle.json",
            "blue_candle_cake.json",
            "brown_candle.json",
            "brown_candle_cake.json",
            "budding_amethyst.json",
            "calcite.json",
            "candle.json",
            "candle_cake.json",
            "copper_block.json",
            "copper_ore.json",
            "cut_copper.json",
            "cut_copper_slab.json",
            "cut_copper_stairs.json",
            "cyan_candle.json",
            "cyan_candle_cake.json",
            "dirt_path.json",
            "dripstone_block.json",
            "glow_lichen.json",
            "gray_candle.json",
            "gray_candle_cake.json",
            "green_candle.json",
            "green_candle_cake.json",
            "large_amethyst_bud.json",
            "lava_cauldron.json",
            "lightly_weathered_copper_block.json",
            "lightly_weathered_cut_copper.json",
            "lightly_weathered_cut_copper_slab.json",
            "lightly_weathered_cut_copper_stairs.json",
            "lightning_rod.json",
            "light_blue_candle.json",
            "light_blue_candle_cake.json",
            "light_gray_candle.json",
            "light_gray_candle_cake.json",
            "lime_candle.json",
            "lime_candle_cake.json",
            "magenta_candle.json",
            "magenta_candle_cake.json",
            "medium_amethyst_bud.json",
            "orange_candle.json",
            "orange_candle_cake.json",
            "pink_candle.json",
            "pink_candle_cake.json",
            "pointed_dripstone.json",
            "powder_snow.json",
            "powder_snow_cauldron.json",
            "purple_candle.json",
            "purple_candle_cake.json",
            "red_candle.json",
            "red_candle_cake.json",
            "sculk_sensor.json",
            "semi_weathered_copper_block.json",
            "semi_weathered_cut_copper.json",
            "semi_weathered_cut_copper_slab.json",
            "semi_weathered_cut_copper_stairs.json",
            "small_amethyst_bud.json",
            "tinted_glass.json",
            "tuff.json",
            "water_cauldron.json",
            "waxed_copper.json",
            "waxed_cut_copper.json",
            "waxed_cut_copper_slab.json",
            "waxed_cut_copper_stairs.json",
            "waxed_lightly_weathered_copper.json",
            "waxed_lightly_weathered_cut_copper.json",
            "waxed_lightly_weathered_cut_copper_slab.json",
            "waxed_lightly_weathered_cut_copper_stairs.json",
            "waxed_semi_weathered_copper.json",
            "waxed_semi_weathered_cut_copper.json",
            "waxed_semi_weathered_cut_copper_slab.json",
            "waxed_semi_weathered_cut_copper_stairs.json",
            "weathered_copper_block.json",
            "weathered_cut_copper.json",
            "weathered_cut_copper_slab.json",
            "weathered_cut_copper_stairs.json",
            "white_candle.json",
            "white_candle_cake.json",
            "yellow_candle.json",
            "yellow_candle_cake.json"
          ],
          "removed": [
            "grass_path.json"
          ]
        }
      }
    }
  ],
  "commands": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "item.txt"
          ],
          "removed": [
            "replaceitem.txt"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "gamerule",
        "differences": {
          "added": [
            "gamerule freezeDamage <value: bool>",
            "gamerule playersSleepingPercentage <value: integer>"
          ],
          "removed": []
        }
      }
    }
  ],
  "recipes": [
    {
      "type": "entries",
      "value": {
        "name": "üóíÔ∏è List",
        "differences": {
          "added": [
            "amethyst_block.json",
            "black_candle.json",
            "blue_candle.json",
            "brown_candle.json",
            "bundle.json",
            "candle.json",
            "copper_block.json",
            "copper_ingot.json",
            "copper_ingot_from_blasting.json",
            "copper_ingot_from_copper_block.json",
            "cut_copper.json",
            "cut_copper_slab.json",
            "cut_copper_stairs.json",
            "cyan_candle.json",
            "dripstone_block.json",
            "firework_rocket_simple.json",
            "glow_item_frame.json",
            "gray_candle.json",
            "green_candle.json",
            "lightly_weathered_cut_copper.json",
            "lightly_weathered_cut_copper_slab.json",
            "lightly_weathered_cut_copper_stairs.json",
            "lightning_rod.json",
            "light_blue_candle.json",
            "light_gray_candle.json",
            "lime_candle.json",
            "magenta_candle.json",
            "orange_candle.json",
            "pink_candle.json",
            "purple_candle.json",
            "red_candle.json",
            "semi_weathered_cut_copper.json",
            "semi_weathered_cut_copper_slab.json",
            "semi_weathered_cut_copper_stairs.json",
            "spyglass.json",
            "tinted_glass.json",
            "waxed_copper.json",
            "waxed_copper_cut_slab_from_honeycomb.json",
            "waxed_copper_cut_stairs_from_honeycomb.json",
            "waxed_cut_copper.json",
            "waxed_cut_copper_from_honeycomb.json",
            "waxed_cut_copper_slab.json",
            "waxed_cut_copper_stairs.json",
            "waxed_lightly_weathered_copper.json",
            "waxed_lightly_weathered_cut_copper.json",
            "waxed_lightly_weathered_cut_copper_from_honeycomb.json",
            "waxed_lightly_weathered_cut_copper_slab.json",
            "waxed_lightly_weathered_cut_copper_slab_from_honeycomb.json",
            "waxed_lightly_weathered_cut_copper_stairs.json",
            "waxed_lightly_weathered_cut_copper_stairs_from_honeycomb.json",
            "waxed_semi_weathered_copper.json",
            "waxed_semi_weathered_cut_copper.json",
            "waxed_semi_weathered_cut_copper_from_honeycomb.json",
            "waxed_semi_weathered_cut_copper_slab.json",
            "waxed_semi_weathered_cut_copper_slab_from_honeycomb.json",
            "waxed_semi_weathered_cut_copper_stairs.json",
            "waxed_semi_weathered_cut_copper_stairs_from_honeycomb.json",
            "weathered_cut_copper.json",
            "weathered_cut_copper_slab.json",
            "weathered_cut_copper_stairs.json",
            "white_candle.json",
            "yellow_candle.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "acacia_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "birch_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "crimson_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "dark_oak_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "jungle_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "oak_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "spruce_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "warped_sign.json",
        "lines": [
          "\u001b[1;2mGroup:\u001b[0m sign -> wooden_sign"
        ]
      }
    }
  ],
  "translations": [
    {
      "type": "entries",
      "value": {
        "name": "Keys",
        "differences": {
          "added": [
            "selectWorld.backupQuestion.snapshot: Do you really want to load this world?",
            "selectWorld.backupWarning.snapshot: This world was last played in version %s; you are on version %s. Please make a backup in case you experience world corruptions!",
            "selectWorld.backupQuestion.downgrade: Downgrading a world is not supported",
            "selectWorld.backupWarning.downgrade: This world was last played in version %s; you are on version %s. Downgrading a world could cause corruption - we cannot guarantee that it will load or work. If you still want to continue, please make a backup!",
            "multiplayer.requiredTexturePrompt.line1: This server requires the use of a custom resource pack.",
            "multiplayer.requiredTexturePrompt.line2: Rejecting a custom resource pack will disconnect you from this server.",
            "multiplayer.requiredTexturePrompt.disconnect: Server requires a custom resource pack",
            "resourcePack.vanilla.description: The default resources for Minecraft",
            "dataPack.vanilla.description: The default data for Minecraft",
            "block.minecraft.water_cauldron: Water Cauldron",
            "block.minecraft.lava_cauldron: Lava Cauldron",
            "block.minecraft.powder_snow_cauldron: Powder Snow Cauldron",
            "block.minecraft.dirt_path: Dirt Path",
            "block.minecraft.candle: Candle",
            "block.minecraft.white_candle: White Candle",
            "block.minecraft.orange_candle: Orange Candle",
            "block.minecraft.magenta_candle: Magenta Candle",
            "block.minecraft.light_blue_candle: Light Blue Candle",
            "block.minecraft.yellow_candle: Yellow Candle",
            "block.minecraft.lime_candle: Lime Candle",
            "block.minecraft.pink_candle: Pink Candle",
            "block.minecraft.gray_candle: Gray Candle",
            "block.minecraft.light_gray_candle: Light Gray Candle",
            "block.minecraft.cyan_candle: Cyan Candle",
            "block.minecraft.purple_candle: Purple Candle",
            "block.minecraft.blue_candle: Blue Candle",
            "block.minecraft.brown_candle: Brown Candle",
            "block.minecraft.green_candle: Green Candle",
            "block.minecraft.red_candle: Red Candle",
            "block.minecraft.black_candle: Black Candle",
            "block.minecraft.candle_cake: Candle Cake",
            "block.minecraft.white_candle_cake: White Candle Cake",
            "block.minecraft.orange_candle_cake: Orange Candle Cake",
            "block.minecraft.magenta_candle_cake: Magenta Candle Cake",
            "block.minecraft.light_blue_candle_cake: Light Blue Candle Cake",
            "block.minecraft.yellow_candle_cake: Yellow Candle Cake",
            "block.minecraft.lime_candle_cake: Lime Candle Cake",
            "block.minecraft.pink_candle_cake: Pink Candle Cake",
            "block.minecraft.gray_candle_cake: Gray Candle Cake",
            "block.minecraft.light_gray_candle_cake: Light Gray Candle Cake",
            "block.minecraft.cyan_candle_cake: Cyan Candle Cake",
            "block.minecraft.purple_candle_cake: Purple Candle Cake",
            "block.minecraft.blue_candle_cake: Blue Candle Cake",
            "block.minecraft.brown_candle_cake: Brown Candle Cake",
            "block.minecraft.green_candle_cake: Green Candle Cake",
            "block.minecraft.red_candle_cake: Red Candle Cake",
            "block.minecraft.black_candle_cake: Black Candle Cake",
            "block.minecraft.amethyst_block: Block of Amethyst",
            "block.minecraft.small_amethyst_bud: Small Amethyst Bud",
            "block.minecraft.medium_amethyst_bud: Medium Amethyst Bud",
            "block.minecraft.large_amethyst_bud: Large Amethyst Bud",
            "block.minecraft.amethyst_cluster: Amethyst Cluster",
            "block.minecraft.budding_amethyst: Budding Amethyst",
            "block.minecraft.calcite: Calcite",
            "block.minecraft.tuff: Tuff",
            "block.minecraft.tinted_glass: Tinted Glass",
            "block.minecraft.dripstone_block: Dripstone Block",
            "block.minecraft.pointed_dripstone: Pointed Dripstone",
            "block.minecraft.copper_ore: Copper Ore",
            "block.minecraft.copper_block: Copper Block",
            "block.minecraft.lightly_weathered_copper_block: Lightly Weathered Copper Block",
            "block.minecraft.semi_weathered_copper_block: Semi-Weathered Copper Block",
            "block.minecraft.weathered_copper_block: Weathered Copper BlocK",
            "block.minecraft.cut_copper: Cut Copper",
            "block.minecraft.lightly_weathered_cut_copper: Lightly Weathered Cut Copper",
            "block.minecraft.semi_weathered_cut_copper: Semi-Weathered Cut Copper",
            "block.minecraft.weathered_cut_copper: Weathered Cut Copper",
            "block.minecraft.cut_copper_stairs: Cut Copper Stairs",
            "block.minecraft.lightly_weathered_cut_copper_stairs: Lightly Weathered Cut Copper Stairs",
            "block.minecraft.semi_weathered_cut_copper_stairs: Semi-Weathered Cut Copper Stairs",
            "block.minecraft.weathered_cut_copper_stairs: Weathered Cut Copper Stairs",
            "block.minecraft.cut_copper_slab: Cut Copper Slab",
            "block.minecraft.lightly_weathered_cut_copper_slab: Lightly Weathered Cut Copper Slab",
            "block.minecraft.semi_weathered_cut_copper_slab: Semi Weathered Cut Copper Slab",
            "block.minecraft.weathered_cut_copper_slab: Weathered Cut Copper Slab",
            "block.minecraft.waxed_copper: Waxed Copper",
            "block.minecraft.waxed_lightly_weathered_copper_block: Waxed Lightly Weathered Copper Block",
            "block.minecraft.waxed_semi_weathered_copper_block: Waxed Semi-Weathered Copper Block",
            "block.minecraft.waxed_cut_copper: Waxed Cut Copper",
            "block.minecraft.waxed_lightly_weathered_cut_copper: Waxed Lightly Weathered Cut Copper",
            "block.minecraft.waxed_semi_weathered_cut_copper: Waxed Semi-Weathered Cut Copper",
            "block.minecraft.waxed_lightly_weathered_copper: Waxed Lightly Weathered Copper",
            "block.minecraft.waxed_semi_weathered_copper: Waxed Semi-Weathered Copper",
            "block.minecraft.waxed_cut_copper_stairs: Waxed Cut Copper Stairs",
            "block.minecraft.waxed_lightly_weathered_cut_copper_stairs: Waxed Lightly Weathered Cut Copper Stairs",
            "block.minecraft.waxed_semi_weathered_cut_copper_stairs: Waxed Semi-Weathered Cut Copper Stairs",
            "block.minecraft.waxed_cut_copper_slab: Waxed Cut Copper Slab",
            "block.minecraft.waxed_lightly_weathered_cut_copper_slab: Waxed Lightly Weathered Cut Copper Slab",
            "block.minecraft.waxed_semi_weathered_cut_copper_slab: Waxed Semi Weathered Cut Copper Slab",
            "block.minecraft.lightning_rod: Lightning Rod",
            "block.minecraft.powder_snow: Powder Snow",
            "block.minecraft.glow_lichen: Glow Lichen",
            "block.minecraft.sculk_sensor: Sculk Sensor",
            "item.minecraft.bundle: Bundle",
            "item.minecraft.bundle.fullness: %s/%s",
            "item.minecraft.copper_ingot: Copper Ingot",
            "item.minecraft.powder_snow_bucket: Powder Snow Bucket",
            "item.minecraft.axolotl_bucket: Bucket of Axolotl",
            "item.minecraft.amethyst_shard: Amethyst Shard",
            "item.minecraft.spyglass: Spyglass",
            "item.minecraft.axolotl_spawn_egg: Axolotl Spawn Egg",
            "item.minecraft.glow_squid_spawn_egg: Glow Squid Spawn Egg",
            "item.minecraft.glow_ink_sac: Glow Ink Sac",
            "item.minecraft.glow_item_frame: Glow Item Frame",
            "entity.minecraft.axolotl: Axolotl",
            "entity.minecraft.glow_item_frame: Glow Item Frame",
            "entity.minecraft.glow_squid: Glow Squid",
            "death.attack.stalagmite: %1$s was impaled on a stalagmite",
            "death.attack.stalagmite.player: %1$s was impaled on a stalagmite whilst fighting %2$s",
            "death.attack.fallingStalactite: %1$s was skewered by a falling stalactite",
            "death.attack.fallingStalactite.player: %1$s was skewered by a falling stalactite whilst fighting %2$s",
            "death.attack.freeze: %1$s froze to death",
            "death.attack.freeze.player: %1$s was frozen to death by %2$s",
            "advMode.mode: Mode",
            "advMode.type: Type",
            "advMode.triggering: Triggering",
            "advMode.trackOutput: Track output",
            "block.minecraft.banner.base.black: Fully Black Field",
            "block.minecraft.banner.base.red: Fully Red Field",
            "block.minecraft.banner.base.green: Fully Green Field",
            "block.minecraft.banner.base.brown: Fully Brown Field",
            "block.minecraft.banner.base.blue: Fully Blue Field",
            "block.minecraft.banner.base.purple: Fully Purple Field",
            "block.minecraft.banner.base.cyan: Fully Cyan Field",
            "block.minecraft.banner.base.light_gray: Fully Light Gray Field",
            "block.minecraft.banner.base.gray: Fully Gray Field",
            "block.minecraft.banner.base.pink: Fully Pink Field",
            "block.minecraft.banner.base.lime: Fully Lime Field",
            "block.minecraft.banner.base.yellow: Fully Yellow Field",
            "block.minecraft.banner.base.light_blue: Fully Light Blue Field",
            "block.minecraft.banner.base.magenta: Fully Magenta Field",
            "block.minecraft.banner.base.orange: Fully Orange Field",
            "block.minecraft.banner.base.white: Fully White Field",
            "subtitles.block.candle.crackle: Candle crackles",
            "subtitles.block.cake.add_candle: Cake squishes",
            "subtitles.block.pointed_dripstone.land: Stalactite crashes down",
            "subtitles.block.pointed_dripstone.drip_lava: Lava drips",
            "subtitles.block.pointed_dripstone.drip_water: Water drips",
            "subtitles.block.pointed_dripstone.drip_lava_into_cauldron: Lava drips into Cauldron",
            "subtitles.block.pointed_dripstone.drip_water_into_cauldron: Water drips into Cauldron",
            "subtitles.block.sculk_sensor.clicking: Sculk Sensor starts clicking",
            "subtitles.block.sculk_sensor.clicking_stop: Sculk Sensor stops clicking",
            "subtitles.entity.axolotl.attack: Axolotl attacks",
            "subtitles.entity.axolotl.death: Axolotl dies",
            "subtitles.entity.axolotl.hurt: Axolotl hurts",
            "subtitles.entity.axolotl.idle_air: Axolotl chirps",
            "subtitles.entity.axolotl.idle_water: Axolotl chirps",
            "subtitles.entity.axolotl.splash: Axolotl splashes",
            "subtitles.entity.axolotl.swim: Axolotl swims",
            "subtitles.entity.glow_squid.ambient: Glow Squid swims",
            "subtitles.entity.glow_squid.death: Glow Squid dies",
            "subtitles.entity.glow_squid.hurt: Glow Squid hurts",
            "subtitles.entity.glow_squid.squirt: Glow Squid shoots ink",
            "subtitles.entity.player.freeze_hurt: Player freezes",
            "subtitles.item.bucket.fill_axolotl: Axolotl scooped",
            "subtitles.item.spyglass.use: Spyglass expands",
            "subtitles.item.spyglass.stop_using: Spyglass retracts",
            "subtitles.item.ink_sac.use: Ink Sac splotches",
            "subtitles.item.glow_ink_sac.use: Glow Ink Sac splotches",
            "subtitles.item.dye.use: Dye stains",
            "commands.item.target.not_a_container: Target position %s, %s, %s is not a container",
            "commands.item.source.not_a_container: Source position %s, %s, %s is not a container",
            "commands.item.target.no_such_slot: The target does not have slot %s",
            "commands.item.source.no_such_slot: The source does not have slot %s",
            "commands.item.target.no_changes: No targets accepted item into slot %s",
            "commands.item.target.no_changed.known_item: No targets accepted item %s into slot %s",
            "commands.item.block.set.success: Replaced a slot at %s, %s, %s with %s",
            "commands.item.entity.set.success.single: Replaced a slot on %s with %s",
            "commands.item.entity.set.success.multiple: Replaced a slot on %s entities with %s",
            "argument.angle.invalid: Invalid angle",
            "item_modifier.unknown: Unknown item modifier: %s",
            "biome.minecraft.dripstone_caves: Dripstone Caves",
            "gamerule.freezeDamage: Deal freeze damage",
            "gamerule.playersSleepingPercentage: Sleep percentage",
            "gamerule.playersSleepingPercentage.description: The percentage of players who must be sleeping to skip the night.",
            "mirror.none: |",
            "mirror.left_right: ‚Üê ‚Üí",
            "mirror.front_back: ‚Üë ‚Üì",
            "sleep.not_possible: No amount of rest can pass this night",
            "sleep.players_sleeping: %s/%s players sleeping",
            "sleep.skipping_night: Sleeping through this night"
          ],
          "removed": [
            "selectWorld.backupQuestion: Do you really want to load this world?",
            "selectWorld.backupWarning: This world was last played in version %s; you are on version %s. Please make a backup in case you experience world corruptions!",
            "options.screenEffectScale.off: Off",
            "options.fovEffectScale.off: Off",
            "options.vbo: Use VBOs",
            "block.minecraft.grass_path: Grass Path",
            "commands.replaceitem.block.success: Replaced a slot at %s, %s, %s with %s",
            "commands.replaceitem.entity.success.single: Replaced a slot on %s with %s",
            "commands.replaceitem.entity.success.multiple: Replaced a slot on %s entities with %s",
            "commands.replaceitem.block.failed: The target block is not a container",
            "commands.replaceitem.slot.inapplicable: The target does not have slot %s",
            "commands.replaceitem.entity.failed: Could not put %s in slot %s"
          ]
        }
      }
    },
    {
      "type": "text",
      "value": {
        "title": "Changes",
        "values": [
          {
            "key": "selectWorld.mapType",
            "previous": "World Type:",
            "current": "World Type"
          },
          {
            "key": "disconnect.loginFailedInfo.serversUnavailable",
            "previous": "The authentication servers are currently down for maintenance.",
            "current": "The authentication servers are currently not reachable. Please try again."
          },
          {
            "key": "options.vsync",
            "previous": "Use VSync",
            "current": "VSync"
          },
          {
            "key": "block.minecraft.lapis_block",
            "previous": "Lapis Lazuli Block",
            "current": "Block of Lapis Lazuli"
          },
          {
            "key": "subtitles.entity.shulker_bullet.hit",
            "previous": "Shulker bullet explodes",
            "current": "Shulker Bullet explodes"
          },
          {
            "key": "subtitles.entity.shulker_bullet.hurt",
            "previous": "Shulker bullet breaks",
            "current": "Shulker Bullet breaks"
          }
        ]
      }
    }
  ],
  "file_structure": [
    {
      "type": "entries",
      "value": {
        "name": "generated",
        "differences": {
          "added": [
            "reports/biomes/dripstone_caves.json"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "data",
        "differences": {
          "added": [
            "minecraft/advancements/recipes/building_blocks/amethyst_block.json",
            "minecraft/advancements/recipes/building_blocks/copper_block.json",
            "minecraft/advancements/recipes/building_blocks/cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/dripstone_block.json",
            "minecraft/advancements/recipes/building_blocks/lightly_weathered_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/lightly_weathered_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/lightly_weathered_cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/semi_weathered_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/semi_weathered_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/semi_weathered_cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/tinted_glass.json",
            "minecraft/advancements/recipes/building_blocks/waxed_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_copper_cut_slab_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_copper_cut_stairs_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_cut_copper_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/waxed_cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper_slab_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/waxed_lightly_weathered_cut_copper_stairs_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper_slab_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper_stairs.json",
            "minecraft/advancements/recipes/building_blocks/waxed_semi_weathered_cut_copper_stairs_from_honeycomb.json",
            "minecraft/advancements/recipes/building_blocks/weathered_cut_copper.json",
            "minecraft/advancements/recipes/building_blocks/weathered_cut_copper_slab.json",
            "minecraft/advancements/recipes/building_blocks/weathered_cut_copper_stairs.json",
            "minecraft/advancements/recipes/decorations/black_candle.json",
            "minecraft/advancements/recipes/decorations/blue_candle.json",
            "minecraft/advancements/recipes/decorations/brown_candle.json",
            "minecraft/advancements/recipes/decorations/candle.json",
            "minecraft/advancements/recipes/decorations/cyan_candle.json",
            "minecraft/advancements/recipes/decorations/glow_item_frame.json",
            "minecraft/advancements/recipes/decorations/gray_candle.json",
            "minecraft/advancements/recipes/decorations/green_candle.json",
            "minecraft/advancements/recipes/decorations/light_blue_candle.json",
            "minecraft/advancements/recipes/decorations/light_gray_candle.json",
            "minecraft/advancements/recipes/decorations/lime_candle.json",
            "minecraft/advancements/recipes/decorations/magenta_candle.json",
            "minecraft/advancements/recipes/decorations/orange_candle.json",
            "minecraft/advancements/recipes/decorations/pink_candle.json",
            "minecraft/advancements/recipes/decorations/purple_candle.json",
            "minecraft/advancements/recipes/decorations/red_candle.json",
            "minecraft/advancements/recipes/decorations/white_candle.json",
            "minecraft/advancements/recipes/decorations/yellow_candle.json",
            "minecraft/advancements/recipes/misc/copper_ingot.json",
            "minecraft/advancements/recipes/misc/copper_ingot_from_blasting.json",
            "minecraft/advancements/recipes/misc/copper_ingot_from_copper_block.json",
            "minecraft/advancements/recipes/misc/firework_rocket_simple.json",
            "minecraft/advancements/recipes/redstone/lightning_rod.json",
            "minecraft/advancements/recipes/tools/bundle.json",
            "minecraft/advancements/recipes/tools/spyglass.json",
            "minecraft/loot_tables/blocks/amethyst_block.json",
            "minecraft/loot_tables/blocks/amethyst_cluster.json",
            "minecraft/loot_tables/blocks/black_candle.json",
            "minecraft/loot_tables/blocks/black_candle_cake.json",
            "minecraft/loot_tables/blocks/blue_candle.json",
            "minecraft/loot_tables/blocks/blue_candle_cake.json",
            "minecraft/loot_tables/blocks/brown_candle.json",
            "minecraft/loot_tables/blocks/brown_candle_cake.json",
            "minecraft/loot_tables/blocks/budding_amethyst.json",
            "minecraft/loot_tables/blocks/calcite.json",
            "minecraft/loot_tables/blocks/candle.json",
            "minecraft/loot_tables/blocks/candle_cake.json",
            "minecraft/loot_tables/blocks/copper_block.json",
            "minecraft/loot_tables/blocks/copper_ore.json",
            "minecraft/loot_tables/blocks/cut_copper.json",
            "minecraft/loot_tables/blocks/cut_copper_slab.json",
            "minecraft/loot_tables/blocks/cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/cyan_candle.json",
            "minecraft/loot_tables/blocks/cyan_candle_cake.json",
            "minecraft/loot_tables/blocks/dirt_path.json",
            "minecraft/loot_tables/blocks/dripstone_block.json",
            "minecraft/loot_tables/blocks/glow_lichen.json",
            "minecraft/loot_tables/blocks/gray_candle.json",
            "minecraft/loot_tables/blocks/gray_candle_cake.json",
            "minecraft/loot_tables/blocks/green_candle.json",
            "minecraft/loot_tables/blocks/green_candle_cake.json",
            "minecraft/loot_tables/blocks/large_amethyst_bud.json",
            "minecraft/loot_tables/blocks/lava_cauldron.json",
            "minecraft/loot_tables/blocks/lightly_weathered_copper_block.json",
            "minecraft/loot_tables/blocks/lightly_weathered_cut_copper.json",
            "minecraft/loot_tables/blocks/lightly_weathered_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/lightly_weathered_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/lightning_rod.json",
            "minecraft/loot_tables/blocks/light_blue_candle.json",
            "minecraft/loot_tables/blocks/light_blue_candle_cake.json",
            "minecraft/loot_tables/blocks/light_gray_candle.json",
            "minecraft/loot_tables/blocks/light_gray_candle_cake.json",
            "minecraft/loot_tables/blocks/lime_candle.json",
            "minecraft/loot_tables/blocks/lime_candle_cake.json",
            "minecraft/loot_tables/blocks/magenta_candle.json",
            "minecraft/loot_tables/blocks/magenta_candle_cake.json",
            "minecraft/loot_tables/blocks/medium_amethyst_bud.json",
            "minecraft/loot_tables/blocks/orange_candle.json",
            "minecraft/loot_tables/blocks/orange_candle_cake.json",
            "minecraft/loot_tables/blocks/pink_candle.json",
            "minecraft/loot_tables/blocks/pink_candle_cake.json",
            "minecraft/loot_tables/blocks/pointed_dripstone.json",
            "minecraft/loot_tables/blocks/powder_snow.json",
            "minecraft/loot_tables/blocks/powder_snow_cauldron.json",
            "minecraft/loot_tables/blocks/purple_candle.json",
            "minecraft/loot_tables/blocks/purple_candle_cake.json",
            "minecraft/loot_tables/blocks/red_candle.json",
            "minecraft/loot_tables/blocks/red_candle_cake.json",
            "minecraft/loot_tables/blocks/sculk_sensor.json",
            "minecraft/loot_tables/blocks/semi_weathered_copper_block.json",
            "minecraft/loot_tables/blocks/semi_weathered_cut_copper.json",
            "minecraft/loot_tables/blocks/semi_weathered_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/semi_weathered_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/small_amethyst_bud.json",
            "minecraft/loot_tables/blocks/tinted_glass.json",
            "minecraft/loot_tables/blocks/tuff.json",
            "minecraft/loot_tables/blocks/water_cauldron.json",
            "minecraft/loot_tables/blocks/waxed_copper.json",
            "minecraft/loot_tables/blocks/waxed_cut_copper.json",
            "minecraft/loot_tables/blocks/waxed_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/waxed_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/waxed_lightly_weathered_copper.json",
            "minecraft/loot_tables/blocks/waxed_lightly_weathered_cut_copper.json",
            "minecraft/loot_tables/blocks/waxed_lightly_weathered_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/waxed_lightly_weathered_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/waxed_semi_weathered_copper.json",
            "minecraft/loot_tables/blocks/waxed_semi_weathered_cut_copper.json",
            "minecraft/loot_tables/blocks/waxed_semi_weathered_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/waxed_semi_weathered_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/weathered_copper_block.json",
            "minecraft/loot_tables/blocks/weathered_cut_copper.json",
            "minecraft/loot_tables/blocks/weathered_cut_copper_slab.json",
            "minecraft/loot_tables/blocks/weathered_cut_copper_stairs.json",
            "minecraft/loot_tables/blocks/white_candle.json",
            "minecraft/loot_tables/blocks/white_candle_cake.json",
            "minecraft/loot_tables/blocks/yellow_candle.json",
            "minecraft/loot_tables/blocks/yellow_candle_cake.json",
            "minecraft/loot_tables/entities/axolotl.json",
            "minecraft/loot_tables/entities/glow_squid.json",
            "minecraft/recipes/amethyst_block.json",
            "minecraft/recipes/black_candle.json",
            "minecraft/recipes/blue_candle.json",
            "minecraft/recipes/brown_candle.json",
            "minecraft/recipes/bundle.json",
            "minecraft/recipes/candle.json",
            "minecraft/recipes/copper_block.json",
            "minecraft/recipes/copper_ingot.json",
            "minecraft/recipes/copper_ingot_from_blasting.json",
            "minecraft/recipes/copper_ingot_from_copper_block.json",
            "minecraft/recipes/cut_copper.json",
            "minecraft/recipes/cut_copper_slab.json",
            "minecraft/recipes/cut_copper_stairs.json",
            "minecraft/recipes/cyan_candle.json",
            "minecraft/recipes/dripstone_block.json",
            "minecraft/recipes/firework_rocket_simple.json",
            "minecraft/recipes/glow_item_frame.json",
            "minecraft/recipes/gray_candle.json",
            "minecraft/recipes/green_candle.json",
            "minecraft/recipes/lightly_weathered_cut_copper.json",
            "minecraft/recipes/lightly_weathered_cut_copper_slab.json",
            "minecraft/recipes/lightly_weathered_cut_copper_stairs.json",
            "minecraft/recipes/lightning_rod.json",
            "minecraft/recipes/light_blue_candle.json",
            "minecraft/recipes/light_gray_candle.json",
            "minecraft/recipes/lime_candle.json",
            "minecraft/recipes/magenta_candle.json",
            "minecraft/recipes/orange_candle.json",
            "minecraft/recipes/pink_candle.json",
            "minecraft/recipes/purple_candle.json",
            "minecraft/recipes/red_candle.json",
            "minecraft/recipes/semi_weathered_cut_copper.json",
            "minecraft/recipes/semi_weathered_cut_copper_slab.json",
            "minecraft/recipes/semi_weathered_cut_copper_stairs.json",
            "minecraft/recipes/spyglass.json",
            "minecraft/recipes/tinted_glass.json",
            "minecraft/recipes/waxed_copper.json",
            "minecraft/recipes/waxed_copper_cut_slab_from_honeycomb.json",
            "minecraft/recipes/waxed_copper_cut_stairs_from_honeycomb.json",
            "minecraft/recipes/waxed_cut_copper.json",
            "minecraft/recipes/waxed_cut_copper_from_honeycomb.json",
            "minecraft/recipes/waxed_cut_copper_slab.json",
            "minecraft/recipes/waxed_cut_copper_stairs.json",
            "minecraft/recipes/waxed_lightly_weathered_copper.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper_from_honeycomb.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper_slab.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper_slab_from_honeycomb.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper_stairs.json",
            "minecraft/recipes/waxed_lightly_weathered_cut_copper_stairs_from_honeycomb.json",
            "minecraft/recipes/waxed_semi_weathered_copper.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper_from_honeycomb.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper_slab.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper_slab_from_honeycomb.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper_stairs.json",
            "minecraft/recipes/waxed_semi_weathered_cut_copper_stairs_from_honeycomb.json",
            "minecraft/recipes/weathered_cut_copper.json",
            "minecraft/recipes/weathered_cut_copper_slab.json",
            "minecraft/recipes/weathered_cut_copper_stairs.json",
            "minecraft/recipes/white_candle.json",
            "minecraft/recipes/yellow_candle.json",
            "minecraft/tags/blocks/candles.json",
            "minecraft/tags/blocks/candle_cakes.json",
            "minecraft/tags/blocks/cauldrons.json",
            "minecraft/tags/blocks/crystal_sound_blocks.json",
            "minecraft/tags/blocks/dripstone_replaceable_blocks.json",
            "minecraft/tags/blocks/inside_step_sound_blocks.json",
            "minecraft/tags/blocks/occludes_vibration_signals.json",
            "minecraft/tags/entity_types/axolotl_always_hostiles.json",
            "minecraft/tags/entity_types/axolotl_tempted_hostiles.json",
            "minecraft/tags/entity_types/powder_snow_walkable_mobs.json",
            "minecraft/tags/game_events/ignore_vibrations_stepping_carefully.json",
            "minecraft/tags/game_events/vibrations.json",
            "minecraft/tags/items/axolotl_tempt_items.json",
            "minecraft/tags/items/candles.json",
            "minecraft/tags/items/freeze_immune_wearables.json",
            "minecraft/tags/items/ignored_by_piglin_babies.json",
            "minecraft/tags/items/occludes_vibration_signals.json",
            "minecraft/tags/items/piglin_food.json"
          ],
          "removed": [
            "minecraft/loot_tables/blocks/grass_path.json"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "assets",
        "differences": {
          "added": [
            "minecraft/blockstates/amethyst_block.json",
            "minecraft/blockstates/amethyst_cluster.json",
            "minecraft/blockstates/black_candle.json",
            "minecraft/blockstates/black_candle_cake.json",
            "minecraft/blockstates/blue_candle.json",
            "minecraft/blockstates/blue_candle_cake.json",
            "minecraft/blockstates/brown_candle.json",
            "minecraft/blockstates/brown_candle_cake.json",
            "minecraft/blockstates/budding_amethyst.json",
            "minecraft/blockstates/calcite.json",
            "minecraft/blockstates/candle.json",
            "minecraft/blockstates/candle_cake.json",
            "minecraft/blockstates/copper_block.json",
            "minecraft/blockstates/copper_ore.json",
            "minecraft/blockstates/cut_copper.json",
            "minecraft/blockstates/cut_copper_slab.json",
            "minecraft/blockstates/cut_copper_stairs.json",
            "minecraft/blockstates/cyan_candle.json",
            "minecraft/blockstates/cyan_candle_cake.json",
            "minecraft/blockstates/dirt_path.json",
            "minecraft/blockstates/dripstone_block.json",
            "minecraft/blockstates/glow_item_frame.json",
            "minecraft/blockstates/glow_lichen.json",
            "minecraft/blockstates/gray_candle.json",
            "minecraft/blockstates/gray_candle_cake.json",
            "minecraft/blockstates/green_candle.json",
            "minecraft/blockstates/green_candle_cake.json",
            "minecraft/blockstates/large_amethyst_bud.json",
            "minecraft/blockstates/lava_cauldron.json",
            "minecraft/blockstates/lightly_weathered_copper_block.json",
            "minecraft/blockstates/lightly_weathered_cut_copper.json",
            "minecraft/blockstates/lightly_weathered_cut_copper_slab.json",
            "minecraft/blockstates/lightly_weathered_cut_copper_stairs.json",
            "minecraft/blockstates/lightning_rod.json",
            "minecraft/blockstates/light_blue_candle.json",
            "minecraft/blockstates/light_blue_candle_cake.json",
            "minecraft/blockstates/light_gray_candle.json",
            "minecraft/blockstates/light_gray_candle_cake.json",
            "minecraft/blockstates/lime_candle.json",
            "minecraft/blockstates/lime_candle_cake.json",
            "minecraft/blockstates/magenta_candle.json",
            "minecraft/blockstates/magenta_candle_cake.json",
            "minecraft/blockstates/medium_amethyst_bud.json",
            "minecraft/blockstates/orange_candle.json",
            "minecraft/blockstates/orange_candle_cake.json",
            "minecraft/blockstates/pink_candle.json",
            "minecraft/blockstates/pink_candle_cake.json",
            "minecraft/blockstates/pointed_dripstone.json",
            "minecraft/blockstates/powder_snow.json",
            "minecraft/blockstates/powder_snow_cauldron.json",
            "minecraft/blockstates/purple_candle.json",
            "minecraft/blockstates/purple_candle_cake.json",
            "minecraft/blockstates/red_candle.json",
            "minecraft/blockstates/red_candle_cake.json",
            "minecraft/blockstates/sculk_sensor.json",
            "minecraft/blockstates/semi_weathered_copper_block.json",
            "minecraft/blockstates/semi_weathered_cut_copper.json",
            "minecraft/blockstates/semi_weathered_cut_copper_slab.json",
            "minecraft/blockstates/semi_weathered_cut_copper_stairs.json",
            "minecraft/blockstates/small_amethyst_bud.json",
            "minecraft/blockstates/tinted_glass.json",
            "minecraft/blockstates/tuff.json",
            "minecraft/blockstates/water_cauldron.json",
            "minecraft/blockstates/waxed_copper.json",
            "minecraft/blockstates/waxed_cut_copper.json",
            "minecraft/blockstates/waxed_cut_copper_slab.json",
            "minecraft/blockstates/waxed_cut_copper_stairs.json",
            "minecraft/blockstates/waxed_lightly_weathered_copper.json",
            "minecraft/blockstates/waxed_lightly_weathered_cut_copper.json",
            "minecraft/blockstates/waxed_lightly_weathered_cut_copper_slab.json",
            "minecraft/blockstates/waxed_lightly_weathered_cut_copper_stairs.json",
            "minecraft/blockstates/waxed_semi_weathered_copper.json",
            "minecraft/blockstates/waxed_semi_weathered_cut_copper.json",
            "minecraft/blockstates/waxed_semi_weathered_cut_copper_slab.json",
            "minecraft/blockstates/waxed_semi_weathered_cut_copper_stairs.json",
            "minecraft/blockstates/weathered_copper_block.json",
            "minecraft/blockstates/weathered_cut_copper.json",
            "minecraft/blockstates/weathered_cut_copper_slab.json",
            "minecraft/blockstates/weathered_cut_copper_stairs.json",
            "minecraft/blockstates/white_candle.json",
            "minecraft/blockstates/white_candle_cake.json",
            "minecraft/blockstates/yellow_candle.json",
            "minecraft/blockstates/yellow_candle_cake.json",
            "minecraft/models/block/amethyst_block.json",
            "minecraft/models/block/amethyst_cluster.json",
            "minecraft/models/block/black_candle_cake.json",
            "minecraft/models/block/black_candle_four_candles.json",
            "minecraft/models/block/black_candle_one_candle.json",
            "minecraft/models/block/black_candle_three_candles.json",
            "minecraft/models/block/black_candle_two_candles.json",
            "minecraft/models/block/blue_candle_cake.json",
            "minecraft/models/block/blue_candle_four_candles.json",
            "minecraft/models/block/blue_candle_one_candle.json",
            "minecraft/models/block/blue_candle_three_candles.json",
            "minecraft/models/block/blue_candle_two_candles.json",
            "minecraft/models/block/brown_candle_cake.json",
            "minecraft/models/block/brown_candle_four_candles.json",
            "minecraft/models/block/brown_candle_one_candle.json",
            "minecraft/models/block/brown_candle_three_candles.json",
            "minecraft/models/block/brown_candle_two_candles.json",
            "minecraft/models/block/budding_amethyst.json",
            "minecraft/models/block/calcite.json",
            "minecraft/models/block/candle_cake.json",
            "minecraft/models/block/candle_four_candles.json",
            "minecraft/models/block/candle_one_candle.json",
            "minecraft/models/block/candle_three_candles.json",
            "minecraft/models/block/candle_two_candles.json",
            "minecraft/models/block/copper_block.json",
            "minecraft/models/block/copper_ore.json",
            "minecraft/models/block/cut_copper.json",
            "minecraft/models/block/cut_copper_slab.json",
            "minecraft/models/block/cut_copper_slab_top.json",
            "minecraft/models/block/cut_copper_stairs.json",
            "minecraft/models/block/cut_copper_stairs_inner.json",
            "minecraft/models/block/cut_copper_stairs_outer.json",
            "minecraft/models/block/cyan_candle_cake.json",
            "minecraft/models/block/cyan_candle_four_candles.json",
            "minecraft/models/block/cyan_candle_one_candle.json",
            "minecraft/models/block/cyan_candle_three_candles.json",
            "minecraft/models/block/cyan_candle_two_candles.json",
            "minecraft/models/block/dirt_path.json",
            "minecraft/models/block/dripstone_block.json",
            "minecraft/models/block/glow_item_frame.json",
            "minecraft/models/block/glow_item_frame_map.json",
            "minecraft/models/block/glow_lichen.json",
            "minecraft/models/block/gray_candle_cake.json",
            "minecraft/models/block/gray_candle_four_candles.json",
            "minecraft/models/block/gray_candle_one_candle.json",
            "minecraft/models/block/gray_candle_three_candles.json",
            "minecraft/models/block/gray_candle_two_candles.json",
            "minecraft/models/block/green_candle_cake.json",
            "minecraft/models/block/green_candle_four_candles.json",
            "minecraft/models/block/green_candle_one_candle.json",
            "minecraft/models/block/green_candle_three_candles.json",
            "minecraft/models/block/green_candle_two_candles.json",
            "minecraft/models/block/large_amethyst_bud.json",
            "minecraft/models/block/lava_cauldron.json",
            "minecraft/models/block/lightly_weathered_copper_block.json",
            "minecraft/models/block/lightly_weathered_cut_copper.json",
            "minecraft/models/block/lightly_weathered_cut_copper_slab.json",
            "minecraft/models/block/lightly_weathered_cut_copper_slab_top.json",
            "minecraft/models/block/lightly_weathered_cut_copper_stairs.json",
            "minecraft/models/block/lightly_weathered_cut_copper_stairs_inner.json",
            "minecraft/models/block/lightly_weathered_cut_copper_stairs_outer.json",
            "minecraft/models/block/lightning_rod.json",
            "minecraft/models/block/light_blue_candle_cake.json",
            "minecraft/models/block/light_blue_candle_four_candles.json",
            "minecraft/models/block/light_blue_candle_one_candle.json",
            "minecraft/models/block/light_blue_candle_three_candles.json",
            "minecraft/models/block/light_blue_candle_two_candles.json",
            "minecraft/models/block/light_gray_candle_cake.json",
            "minecraft/models/block/light_gray_candle_four_candles.json",
            "minecraft/models/block/light_gray_candle_one_candle.json",
            "minecraft/models/block/light_gray_candle_three_candles.json",
            "minecraft/models/block/light_gray_candle_two_candles.json",
            "minecraft/models/block/lime_candle_cake.json",
            "minecraft/models/block/lime_candle_four_candles.json",
            "minecraft/models/block/lime_candle_one_candle.json",
            "minecraft/models/block/lime_candle_three_candles.json",
            "minecraft/models/block/lime_candle_two_candles.json",
            "minecraft/models/block/magenta_candle_cake.json",
            "minecraft/models/block/magenta_candle_four_candles.json",
            "minecraft/models/block/magenta_candle_one_candle.json",
            "minecraft/models/block/magenta_candle_three_candles.json",
            "minecraft/models/block/magenta_candle_two_candles.json",
            "minecraft/models/block/medium_amethyst_bud.json",
            "minecraft/models/block/orange_candle_cake.json",
            "minecraft/models/block/orange_candle_four_candles.json",
            "minecraft/models/block/orange_candle_one_candle.json",
            "minecraft/models/block/orange_candle_three_candles.json",
            "minecraft/models/block/orange_candle_two_candles.json",
            "minecraft/models/block/pink_candle_cake.json",
            "minecraft/models/block/pink_candle_four_candles.json",
            "minecraft/models/block/pink_candle_one_candle.json",
            "minecraft/models/block/pink_candle_three_candles.json",
            "minecraft/models/block/pink_candle_two_candles.json",
            "minecraft/models/block/pointed_dripstone.json",
            "minecraft/models/block/pointed_dripstone_down_base.json",
            "minecraft/models/block/pointed_dripstone_down_frustum.json",
            "minecraft/models/block/pointed_dripstone_down_middle.json",
            "minecraft/models/block/pointed_dripstone_down_tip.json",
            "minecraft/models/block/pointed_dripstone_down_tip_merge.json",
            "minecraft/models/block/pointed_dripstone_up_base.json",
            "minecraft/models/block/pointed_dripstone_up_frustum.json",
            "minecraft/models/block/pointed_dripstone_up_middle.json",
            "minecraft/models/block/pointed_dripstone_up_tip.json",
            "minecraft/models/block/pointed_dripstone_up_tip_merge.json",
            "minecraft/models/block/powder_snow.json",
            "minecraft/models/block/powder_snow_cauldron_full.json",
            "minecraft/models/block/powder_snow_cauldron_level1.json",
            "minecraft/models/block/powder_snow_cauldron_level2.json",
            "minecraft/models/block/purple_candle_cake.json",
            "minecraft/models/block/purple_candle_four_candles.json",
            "minecraft/models/block/purple_candle_one_candle.json",
            "minecraft/models/block/purple_candle_three_candles.json",
            "minecraft/models/block/purple_candle_two_candles.json",
            "minecraft/models/block/red_candle_cake.json",
            "minecraft/models/block/red_candle_four_candles.json",
            "minecraft/models/block/red_candle_one_candle.json",
            "minecraft/models/block/red_candle_three_candles.json",
            "minecraft/models/block/red_candle_two_candles.json",
            "minecraft/models/block/sculk_sensor.json",
            "minecraft/models/block/sculk_sensor_active.json",
            "minecraft/models/block/sculk_sensor_inactive.json",
            "minecraft/models/block/semi_weathered_copper_block.json",
            "minecraft/models/block/semi_weathered_cut_copper.json",
            "minecraft/models/block/semi_weathered_cut_copper_slab.json",
            "minecraft/models/block/semi_weathered_cut_copper_slab_top.json",
            "minecraft/models/block/semi_weathered_cut_copper_stairs.json",
            "minecraft/models/block/semi_weathered_cut_copper_stairs_inner.json",
            "minecraft/models/block/semi_weathered_cut_copper_stairs_outer.json",
            "minecraft/models/block/small_amethyst_bud.json",
            "minecraft/models/block/template_cake_with_candle.json",
            "minecraft/models/block/template_candle.json",
            "minecraft/models/block/template_cauldron_full.json",
            "minecraft/models/block/template_cauldron_level1.json",
            "minecraft/models/block/template_cauldron_level2.json",
            "minecraft/models/block/template_four_candles.json",
            "minecraft/models/block/template_item_frame.json",
            "minecraft/models/block/template_item_frame_map.json",
            "minecraft/models/block/template_three_candles.json",
            "minecraft/models/block/template_two_candles.json",
            "minecraft/models/block/tinted_glass.json",
            "minecraft/models/block/tuff.json",
            "minecraft/models/block/vine.json",
            "minecraft/models/block/water_cauldron_full.json",
            "minecraft/models/block/water_cauldron_level1.json",
            "minecraft/models/block/water_cauldron_level2.json",
            "minecraft/models/block/weathered_copper_block.json",
            "minecraft/models/block/weathered_cut_copper.json",
            "minecraft/models/block/weathered_cut_copper_slab.json",
            "minecraft/models/block/weathered_cut_copper_slab_top.json",
            "minecraft/models/block/weathered_cut_copper_stairs.json",
            "minecraft/models/block/weathered_cut_copper_stairs_inner.json",
            "minecraft/models/block/weathered_cut_copper_stairs_outer.json",
            "minecraft/models/block/white_candle_cake.json",
            "minecraft/models/block/white_candle_four_candles.json",
            "minecraft/models/block/white_candle_one_candle.json",
            "minecraft/models/block/white_candle_three_candles.json",
            "minecraft/models/block/white_candle_two_candles.json",
            "minecraft/models/block/yellow_candle_cake.json",
            "minecraft/models/block/yellow_candle_four_candles.json",
            "minecraft/models/block/yellow_candle_one_candle.json",
            "minecraft/models/block/yellow_candle_three_candles.json",
            "minecraft/models/block/yellow_candle_two_candles.json",
            "minecraft/models/item/amethyst_block.json",
            "minecraft/models/item/amethyst_cluster.json",
            "minecraft/models/item/amethyst_shard.json",
            "minecraft/models/item/axolotl_bucket.json",
            "minecraft/models/item/axolotl_spawn_egg.json",
            "minecraft/models/item/black_candle.json",
            "minecraft/models/item/blue_candle.json",
            "minecraft/models/item/brown_candle.json",
            "minecraft/models/item/budding_amethyst.json",
            "minecraft/models/item/bundle.json",
            "minecraft/models/item/bundle_filled.json",
            "minecraft/models/item/calcite.json",
            "minecraft/models/item/candle.json",
            "minecraft/models/item/copper_block.json",
            "minecraft/models/item/copper_ingot.json",
            "minecraft/models/item/copper_ore.json",
            "minecraft/models/item/cut_copper.json",
            "minecraft/models/item/cut_copper_slab.json",
            "minecraft/models/item/cut_copper_stairs.json",
            "minecraft/models/item/cyan_candle.json",
            "minecraft/models/item/dirt_path.json",
            "minecraft/models/item/dripstone_block.json",
            "minecraft/models/item/glow_ink_sac.json",
            "minecraft/models/item/glow_item_frame.json",
            "minecraft/models/item/glow_lichen.json",
            "minecraft/models/item/glow_squid_spawn_egg.json",
            "minecraft/models/item/gray_candle.json",
            "minecraft/models/item/green_candle.json",
            "minecraft/models/item/large_amethyst_bud.json",
            "minecraft/models/item/lightly_weathered_copper_block.json",
            "minecraft/models/item/lightly_weathered_cut_copper.json",
            "minecraft/models/item/lightly_weathered_cut_copper_slab.json",
            "minecraft/models/item/lightly_weathered_cut_copper_stairs.json",
            "minecraft/models/item/lightning_rod.json",
            "minecraft/models/item/light_blue_candle.json",
            "minecraft/models/item/light_gray_candle.json",
            "minecraft/models/item/lime_candle.json",
            "minecraft/models/item/magenta_candle.json",
            "minecraft/models/item/medium_amethyst_bud.json",
            "minecraft/models/item/orange_candle.json",
            "minecraft/models/item/pink_candle.json",
            "minecraft/models/item/pointed_dripstone.json",
            "minecraft/models/item/powder_snow_bucket.json",
            "minecraft/models/item/purple_candle.json",
            "minecraft/models/item/red_candle.json",
            "minecraft/models/item/sculk_sensor.json",
            "minecraft/models/item/semi_weathered_copper_block.json",
            "minecraft/models/item/semi_weathered_cut_copper.json",
            "minecraft/models/item/semi_weathered_cut_copper_slab.json",
            "minecraft/models/item/semi_weathered_cut_copper_stairs.json",
            "minecraft/models/item/small_amethyst_bud.json",
            "minecraft/models/item/spyglass.json",
            "minecraft/models/item/tinted_glass.json",
            "minecraft/models/item/tuff.json",
            "minecraft/models/item/waxed_copper.json",
            "minecraft/models/item/waxed_cut_copper.json",
            "minecraft/models/item/waxed_cut_copper_slab.json",
            "minecraft/models/item/waxed_cut_copper_stairs.json",
            "minecraft/models/item/waxed_lightly_weathered_copper.json",
            "minecraft/models/item/waxed_lightly_weathered_cut_copper.json",
            "minecraft/models/item/waxed_lightly_weathered_cut_copper_slab.json",
            "minecraft/models/item/waxed_lightly_weathered_cut_copper_stairs.json",
            "minecraft/models/item/waxed_semi_weathered_copper.json",
            "minecraft/models/item/waxed_semi_weathered_cut_copper.json",
            "minecraft/models/item/waxed_semi_weathered_cut_copper_slab.json",
            "minecraft/models/item/waxed_semi_weathered_cut_copper_stairs.json",
            "minecraft/models/item/weathered_copper_block.json",
            "minecraft/models/item/weathered_cut_copper.json",
            "minecraft/models/item/weathered_cut_copper_slab.json",
            "minecraft/models/item/weathered_cut_copper_stairs.json",
            "minecraft/models/item/white_candle.json",
            "minecraft/models/item/yellow_candle.json",
            "minecraft/particles/dripping_dripstone_lava.json",
            "minecraft/particles/dripping_dripstone_water.json",
            "minecraft/particles/dust_color_transition.json",
            "minecraft/particles/falling_dripstone_lava.json",
            "minecraft/particles/falling_dripstone_water.json",
            "minecraft/particles/glow.json",
            "minecraft/particles/glow_squid_ink.json",
            "minecraft/particles/small_flame.json",
            "minecraft/particles/snowflake.json",
            "minecraft/particles/vibration.json",
            "minecraft/textures/block/amethyst_block.png",
            "minecraft/textures/block/amethyst_cluster.png",
            "minecraft/textures/block/black_candle.png",
            "minecraft/textures/block/blue_candle.png",
            "minecraft/textures/block/brown_candle.png",
            "minecraft/textures/block/budding_amethyst.png",
            "minecraft/textures/block/calcite.png",
            "minecraft/textures/block/calibrated_sculk_sensor_side.png",
            "minecraft/textures/block/calibrated_sculk_sensor_top.png",
            "minecraft/textures/block/candle.png",
            "minecraft/textures/block/copper_block.png",
            "minecraft/textures/block/copper_ore.png",
            "minecraft/textures/block/cut_copper.png",
            "minecraft/textures/block/cyan_candle.png",
            "minecraft/textures/block/dirt_path_side.png",
            "minecraft/textures/block/dirt_path_top.png",
            "minecraft/textures/block/dripstone_block.png",
            "minecraft/textures/block/glow_item_frame.png",
            "minecraft/textures/block/glow_lichen.png",
            "minecraft/textures/block/gray_candle.png",
            "minecraft/textures/block/green_candle.png",
            "minecraft/textures/block/large_amethyst_bud.png",
            "minecraft/textures/block/lightly_weathered_copper_block.png",
            "minecraft/textures/block/lightly_weathered_cut_copper.png",
            "minecraft/textures/block/lightning_rod.png",
            "minecraft/textures/block/light_blue_candle.png",
            "minecraft/textures/block/light_gray_candle.png",
            "minecraft/textures/block/lime_candle.png",
            "minecraft/textures/block/magenta_candle.png",
            "minecraft/textures/block/medium_amethyst_bud.png",
            "minecraft/textures/block/orange_candle.png",
            "minecraft/textures/block/pink_candle.png",
            "minecraft/textures/block/pointed_dripstone_down_base.png",
            "minecraft/textures/block/pointed_dripstone_down_frustum.png",
            "minecraft/textures/block/pointed_dripstone_down_middle.png",
            "minecraft/textures/block/pointed_dripstone_down_tip.png",
            "minecraft/textures/block/pointed_dripstone_down_tip_merge.png",
            "minecraft/textures/block/pointed_dripstone_up_base.png",
            "minecraft/textures/block/pointed_dripstone_up_frustum.png",
            "minecraft/textures/block/pointed_dripstone_up_middle.png",
            "minecraft/textures/block/pointed_dripstone_up_tip.png",
            "minecraft/textures/block/pointed_dripstone_up_tip_merge.png",
            "minecraft/textures/block/powder_snow.png",
            "minecraft/textures/block/purple_candle.png",
            "minecraft/textures/block/red_candle.png",
            "minecraft/textures/block/sculk_sensor_bottom.png",
            "minecraft/textures/block/sculk_sensor_side.png",
            "minecraft/textures/block/sculk_sensor_tendril_active.png",
            "minecraft/textures/block/sculk_sensor_tendril_active.png.mcmeta",
            "minecraft/textures/block/sculk_sensor_tendril_inactive.png",
            "minecraft/textures/block/sculk_sensor_tendril_inactive.png.mcmeta",
            "minecraft/textures/block/sculk_sensor_top.png",
            "minecraft/textures/block/semi_weathered_copper_block.png",
            "minecraft/textures/block/semi_weathered_cut_copper.png",
            "minecraft/textures/block/small_amethyst_bud.png",
            "minecraft/textures/block/tinted_glass.png",
            "minecraft/textures/block/tuff.png",
            "minecraft/textures/block/weathered_copper_block.png",
            "minecraft/textures/block/weathered_cut_copper.png",
            "minecraft/textures/block/white_candle.png",
            "minecraft/textures/block/yellow_candle.png",
            "minecraft/textures/entity/axolotl/axolotl_blue.png",
            "minecraft/textures/entity/axolotl/axolotl_cyan.png",
            "minecraft/textures/entity/axolotl/axolotl_gold.png",
            "minecraft/textures/entity/axolotl/axolotl_lucy.png",
            "minecraft/textures/entity/axolotl/axolotl_wild.png",
            "minecraft/textures/entity/squid/glow_squid.png",
            "minecraft/textures/entity/squid/squid.png",
            "minecraft/textures/gui/container/bundle.png",
            "minecraft/textures/item/amethyst_shard.png",
            "minecraft/textures/item/axolotl_bucket.png",
            "minecraft/textures/item/black_candle.png",
            "minecraft/textures/item/blue_candle.png",
            "minecraft/textures/item/brown_candle.png",
            "minecraft/textures/item/bundle.png",
            "minecraft/textures/item/bundle_filled.png",
            "minecraft/textures/item/candle.png",
            "minecraft/textures/item/copper_ingot.png",
            "minecraft/textures/item/cyan_candle.png",
            "minecraft/textures/item/glow_ink_sac.png",
            "minecraft/textures/item/glow_item_frame.png",
            "minecraft/textures/item/gray_candle.png",
            "minecraft/textures/item/green_candle.png",
            "minecraft/textures/item/light_blue_candle.png",
            "minecraft/textures/item/light_gray_candle.png",
            "minecraft/textures/item/lime_candle.png",
            "minecraft/textures/item/magenta_candle.png",
            "minecraft/textures/item/orange_candle.png",
            "minecraft/textures/item/pink_candle.png",
            "minecraft/textures/item/pointed_dripstone.png",
            "minecraft/textures/item/powder_snow_bucket.png",
            "minecraft/textures/item/purple_candle.png",
            "minecraft/textures/item/red_candle.png",
            "minecraft/textures/item/spyglass.png",
            "minecraft/textures/item/white_candle.png",
            "minecraft/textures/item/yellow_candle.png",
            "minecraft/textures/misc/powder_snow_outline.png",
            "minecraft/textures/misc/spyglass_scope.png",
            "minecraft/textures/particle/glow.png",
            "minecraft/textures/particle/vibration.png",
            "minecraft/textures/particle/vibration.png.mcmeta"
          ],
          "removed": [
            "minecraft/blockstates/grass_path.json",
            "minecraft/models/block/cauldron_level1.json",
            "minecraft/models/block/cauldron_level2.json",
            "minecraft/models/block/cauldron_level3.json",
            "minecraft/models/block/grass_path.json",
            "minecraft/models/block/vine_1.json",
            "minecraft/models/block/vine_1u.json",
            "minecraft/models/block/vine_2.json",
            "minecraft/models/block/vine_2u.json",
            "minecraft/models/block/vine_2u_opposite.json",
            "minecraft/models/block/vine_2_opposite.json",
            "minecraft/models/block/vine_3.json",
            "minecraft/models/block/vine_3u.json",
            "minecraft/models/block/vine_4.json",
            "minecraft/models/block/vine_4u.json",
            "minecraft/models/block/vine_u.json",
            "minecraft/models/item/grass_path.json",
            "minecraft/textures/block/grass_path_side.png",
            "minecraft/textures/block/grass_path_top.png",
            "minecraft/textures/entity/squid.png"
          ]
        }
      }
    }
  ],
  "mappings": [
    {
      "type": "title",
      "value": {
        "title": "Server",
        "id": "server-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.commands.arguments.NbtPathArgument$MatchElementNode",
            "XXX.commands.arguments.NbtPathArgument$MatchRootObjectNode",
            "XXX.commands.arguments.NbtPathArgument$Node",
            "XXX.commands.arguments.ObjectiveArgument",
            "XXX.commands.arguments.OperationArgument",
            "XXX.commands.arguments.OperationArgument$SimpleOperation",
            "XXX.commands.arguments.RangeArgument",
            "XXX.commands.arguments.RangeArgument$Ints",
            "XXX.commands.arguments.ScoreHolderArgument",
            "XXX.commands.arguments.ScoreHolderArgument$SelectorResult",
            "XXX.commands.arguments.ScoreboardSlotArgument",
            "XXX.commands.arguments.TeamArgument",
            "XXX.commands.arguments.UuidArgument",
            "XXX.arguments.blocks.BlockPredicateArgument",
            "XXX.arguments.blocks.BlockPredicateArgument$BlockPredicate",
            "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate",
            "XXX.arguments.blocks.BlockStateParser",
            "XXX.arguments.coordinates.BlockPosArgument",
            "XXX.arguments.coordinates.Coordinates",
            "XXX.arguments.coordinates.RotationArgument",
            "XXX.arguments.coordinates.Vec2Argument",
            "XXX.arguments.coordinates.WorldCoordinate",
            "XXX.arguments.coordinates.package-info",
            "XXX.arguments.item.FunctionArgument$1",
            "XXX.arguments.item.FunctionArgument$Result",
            "XXX.arguments.item.ItemInput",
            "XXX.arguments.item.ItemPredicateArgument",
            "XXX.arguments.item.ItemPredicateArgument$Result",
            "XXX.arguments.item.package-info",
            "XXX.arguments.selector.EntitySelector",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.RegistryAccess$RegistryData",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.minecraft.core.Vec3i",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.recipes.UpgradeRecipeBuilder$Result",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.data.worldgen.BastionBridgePools",
            "XXX.data.worldgen.BastionHousingUnitsPools",
            "XXX.data.worldgen.BastionSharedPools",
            "XXX.data.worldgen.BiomeDefaultFeatures",
            "XXX.data.worldgen.DesertVillagePools",
            "XXX.data.worldgen.Features$Configs",
            "XXX.data.worldgen.Features$States",
            "XXX.data.worldgen.PlainVillagePools",
            "XXX.data.worldgen.ProcessorLists",
            "XXX.data.worldgen.SnowyVillagePools",
            "XXX.data.worldgen.SurfaceBuilders",
            "XXX.data.worldgen.VillagePools",
            "XXX.worldgen.biome.Biomes",
            "XXX.worldgen.biome.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GameTestRunner$1",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.MultipleTestTracker$1",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundGameEventPacket$Type",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookSeenRecipePacket",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.server.ConsoleInputSource",
            "XXX.minecraft.server.Eula",
            "XXX.minecraft.server.Main",
            "XXX.minecraft.server.MinecraftServer",
            "XXX.minecraft.server.MinecraftServer$2",
            "XXX.minecraft.server.PlayerAdvancements$1",
            "XXX.minecraft.server.ServerAdvancementManager",
            "XXX.minecraft.server.ServerFunctionManager",
            "XXX.minecraft.server.ServerInterface",
            "XXX.minecraft.server.ServerScoreboard",
            "XXX.minecraft.server.TickTask",
            "XXX.server.bossevents.CustomBossEvents",
            "XXX.server.commands.AdvancementCommands",
            "XXX.server.commands.AdvancementCommands$Action",
            "XXX.server.commands.AdvancementCommands$Action$2",
            "XXX.server.commands.AttributeCommand",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.DebugPathCommand",
            "XXX.server.commands.DifficultyCommand",
            "XXX.server.commands.EmoteCommands",
            "XXX.server.commands.ExecuteCommand",
            "XXX.server.commands.ExecuteCommand$CommandPredicate",
            "XXX.server.commands.ExperienceCommand$Type",
            "XXX.server.commands.FillCommand$Mode",
            "XXX.server.commands.FunctionCommand",
            "XXX.server.commands.GameRuleCommand",
            "XXX.server.commands.GiveCommand",
            "XXX.server.commands.SaveAllCommand",
            "XXX.server.commands.SaveOnCommand",
            "XXX.server.commands.ScheduleCommand",
            "XXX.server.commands.SeedCommand",
            "XXX.server.commands.SetBlockCommand$Filter",
            "XXX.server.commands.SetPlayerIdleTimeoutCommand",
            "XXX.server.commands.SetWorldSpawnCommand",
            "XXX.server.commands.SpreadPlayersCommand",
            "XXX.server.level.FeatureSimulator",
            "XXX.server.level.PlayerRespawnLogic",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerChunkCache$1",
            "XXX.server.level.ServerEntity",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.SetTag",
            "XXX.minecraft.tags.StaticTagHelper$1",
            "XXX.minecraft.tags.StaticTags",
            "XXX.minecraft.tags.Tag$1",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$OptionalElementEntry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagCollection$1",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.LimitedCapacityList",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.PackedBitStorage",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.datafix.fixes.BitStorageAlignFix",
            "XXX.datafix.fixes.BlockEntityBlockStateFix",
            "XXX.datafix.fixes.BlockEntityIdFix",
            "XXX.datafix.fixes.BlockEntityKeepPacked",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix",
            "XXX.datafix.fixes.BlockEntityUUIDFix",
            "XXX.datafix.fixes.BlockRenameFix",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw",
            "XXX.datafix.fixes.BlockStateData",
            "XXX.datafix.fixes.CatTypeFix",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.monitoring.jmx.MinecraftServerStatistics$AttributeDescription",
            "XXX.util.profiling.ActiveProfiler",
            "XXX.util.profiling.ActiveProfiler$PathEntry",
            "XXX.util.profiling.EmptyProfileResults",
            "XXX.util.profiling.FilledProfileResults$1",
            "XXX.util.profiling.InactiveProfiler",
            "XXX.util.profiling.ProfileResults",
            "XXX.util.profiling.ProfilerFiller$1",
            "XXX.util.profiling.ResultField",
            "XXX.util.profiling.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.world.entity.AgableMob",
            "XXX.world.entity.EntityDimensions",
            "XXX.world.entity.EntitySelector",
            "XXX.world.entity.EntityType",
            "XXX.world.entity.ItemBasedSteering",
            "XXX.world.entity.LightningBolt",
            "XXX.world.entity.LivingEntity$1",
            "XXX.world.entity.Mob$1",
            "XXX.world.entity.MobSpawnType",
            "XXX.world.entity.MoverType",
            "XXX.world.entity.OwnableEntity",
            "XXX.world.entity.PlayerRideable",
            "XXX.world.entity.Pose",
            "XXX.world.entity.ReputationEventHandler",
            "XXX.world.entity.Shearable",
            "XXX.world.entity.SpawnPlacements",
            "XXX.world.entity.SpawnPlacements$SpawnPredicate",
            "XXX.world.entity.TamableAnimal",
            "XXX.entity.ai.Brain$1",
            "XXX.entity.ai.Brain$Provider",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.BabyFollowAdult",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.GateBehavior$RunningPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$2",
            "XXX.ai.behavior.GoOutsideToCelebrate",
            "XXX.ai.behavior.GoToClosestVillage",
            "XXX.ai.behavior.GoToWantedItem",
            "XXX.ai.behavior.InsideBrownianWalk",
            "XXX.ai.behavior.InteractWithDoor",
            "XXX.ai.behavior.LocateHidingPlace",
            "XXX.ai.behavior.LookAndFollowTradingPlayerSink",
            "XXX.ai.behavior.MeleeAttack",
            "XXX.ai.behavior.MoveToSkySeeingSpot",
            "XXX.ai.behavior.PlayTagWithOtherKids",
            "XXX.ai.behavior.PositionTracker",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WeightedList",
            "XXX.ai.behavior.WeightedList$WeightedEntry",
            "XXX.ai.behavior.WorkAtComposter",
            "XXX.ai.behavior.YieldJobSite",
            "XXX.ai.control.BodyRotationControl",
            "XXX.ai.control.DolphinLookControl",
            "XXX.ai.sensing.DummySensor",
            "XXX.ai.sensing.HoglinSpecificSensor",
            "XXX.ai.sensing.VillagerBabiesSensor",
            "XXX.ai.sensing.package-info",
            "XXX.ai.targeting.package-info",
            "XXX.entity.animal.Cat",
            "XXX.entity.animal.Cat$CatRelaxOnOwnerGoal",
            "XXX.entity.animal.Chicken",
            "XXX.entity.animal.Cow",
            "XXX.entity.animal.Dolphin$1",
            "XXX.entity.animal.Turtle$TurtleTemptGoal",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.horse.Horse",
            "XXX.animal.horse.Llama",
            "XXX.animal.horse.Llama$LlamaAttackWolfGoal",
            "XXX.animal.horse.Llama$LlamaHurtByTargetGoal",
            "XXX.animal.horse.Mule",
            "XXX.animal.horse.SkeletonTrapGoal",
            "XXX.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal",
            "XXX.animal.horse.ZombieHorse",
            "XXX.entity.animal.package-info",
            "XXX.entity.decoration.Motive",
            "XXX.entity.decoration.package-info",
            "XXX.entity.item.ItemEntity",
            "XXX.entity.item.package-info",
            "XXX.entity.monster.AbstractIllager$IllagerArmPose",
            "XXX.entity.monster.AbstractSkeleton",
            "XXX.entity.monster.Blaze",
            "XXX.entity.monster.CaveSpider",
            "XXX.entity.monster.CrossbowAttackMob",
            "XXX.entity.monster.Drowned$DrownedAttackGoal",
            "XXX.entity.monster.Drowned$DrownedGoToWaterGoal",
            "XXX.entity.monster.Drowned$DrownedSwimUpGoal",
            "XXX.entity.monster.ElderGuardian",
            "XXX.entity.monster.EnderMan$EndermanFreezeWhenLookedAt",
            "XXX.entity.monster.EnderMan$EndermanLookForPlayerGoal",
            "XXX.entity.monster.Endermite",
            "XXX.entity.monster.Evoker",
            "XXX.entity.monster.Evoker$EvokerAttackSpellGoal",
            "XXX.entity.monster.Evoker$EvokerSummonSpellGoal",
            "XXX.entity.monster.Ghast",
            "XXX.entity.monster.Ghast$GhastMoveControl",
            "XXX.entity.monster.Ghast$RandomFloatAroundGoal",
            "XXX.entity.monster.Guardian",
            "XXX.entity.monster.Guardian$GuardianAttackSelector",
            "XXX.entity.monster.Husk",
            "XXX.entity.monster.Illusioner$1",
            "XXX.entity.monster.Illusioner$IllusionerMirrorSpellGoal",
            "XXX.entity.monster.Monster",
            "XXX.entity.monster.PatrollingMonster$LongDistancePatrolGoal",
            "XXX.entity.monster.Phantom$1",
            "XXX.entity.monster.Phantom$PhantomAttackPlayerTargetGoal",
            "XXX.entity.monster.Phantom$PhantomBodyRotationControl",
            "XXX.entity.monster.Phantom$PhantomLookControl",
            "XXX.entity.monster.Phantom$PhantomMoveTargetGoal",
            "XXX.entity.monster.Pillager",
            "XXX.entity.monster.Ravager",
            "XXX.entity.monster.Ravager$RavagerMeleeAttackGoal",
            "XXX.entity.monster.Ravager$RavagerNodeEvaluator",
            "XXX.entity.monster.Shulker$1",
            "XXX.entity.monster.Shulker$ShulkerBodyRotationControl",
            "XXX.entity.monster.Shulker$ShulkerNearestAttackGoal",
            "XXX.entity.monster.Silverfish",
            "XXX.entity.monster.Silverfish$SilverfishWakeUpFriendsGoal",
            "XXX.entity.monster.Slime",
            "XXX.entity.monster.Slime$SlimeFloatGoal",
            "XXX.entity.monster.Slime$SlimeMoveControl",
            "XXX.entity.monster.SpellcasterIllager",
            "XXX.entity.monster.SpellcasterIllager$SpellcasterCastingSpellGoal",
            "XXX.entity.monster.Spider",
            "XXX.entity.monster.Spider$SpiderEffectsGroupData",
            "XXX.entity.monster.Stray",
            "XXX.entity.monster.Strider$1",
            "XXX.entity.monster.Strider$StriderPathNavigation",
            "XXX.entity.monster.Vex$VexChargeAttackGoal",
            "XXX.entity.monster.Vex$VexMoveControl",
            "XXX.entity.monster.Vindicator",
            "XXX.entity.monster.Vindicator$VindicatorJohnnyAttackGoal",
            "XXX.entity.monster.Witch",
            "XXX.entity.monster.Zoglin",
            "XXX.entity.monster.Zombie$ZombieAttackTurtleEggGoal",
            "XXX.entity.monster.ZombieVillager",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspisciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.entity.player.Player$BedSleepingProblem",
            "XXX.entity.player.StackedContents",
            "XXX.entity.player.package-info",
            "XXX.entity.projectile.AbstractArrow$Pickup",
            "XXX.entity.projectile.Arrow",
            "XXX.entity.projectile.EvokerFangs",
            "XXX.entity.projectile.Fireball",
            "XXX.entity.projectile.FishingHook",
            "XXX.entity.projectile.FishingHook$FishHookState",
            "XXX.entity.projectile.ItemSupplier",
            "XXX.entity.projectile.LlamaSpit",
            "XXX.entity.projectile.ProjectileUtil",
            "XXX.entity.projectile.SmallFireball",
            "XXX.entity.projectile.SpectralArrow",
            "XXX.entity.projectile.ThrowableProjectile",
            "XXX.entity.projectile.ThrownEnderpearl",
            "XXX.entity.projectile.ThrownPotion",
            "XXX.entity.projectile.WitherSkull",
            "XXX.entity.raid.Raid",
            "XXX.entity.raid.Raid$RaidStatus",
            "XXX.entity.raid.Raider",
            "XXX.entity.raid.Raider$ObtainRaidLeaderBannerGoal",
            "XXX.entity.raid.Raider$RaiderMoveThroughVillageGoal",
            "XXX.entity.raid.package-info",
            "XXX.entity.schedule.Keyframe",
            "XXX.entity.schedule.ScheduleBuilder",
            "XXX.entity.schedule.Timeline",
            "XXX.entity.vehicle.AbstractMinecart",
            "XXX.entity.vehicle.AbstractMinecart$Type",
            "XXX.world.inventory.ContainerData",
            "XXX.world.inventory.ContainerLevelAccess$1",
            "XXX.world.inventory.ContainerListener",
            "XXX.world.inventory.CraftingMenu",
            "XXX.world.inventory.DataSlot$1",
            "XXX.world.inventory.DataSlot$3",
            "XXX.world.inventory.EnchantmentMenu",
            "XXX.world.inventory.EnchantmentMenu$2",
            "XXX.world.inventory.FurnaceFuelSlot",
            "XXX.world.inventory.FurnaceResultSlot",
            "XXX.world.inventory.GrindstoneMenu$1",
            "XXX.world.inventory.GrindstoneMenu$3",
            "XXX.world.inventory.HopperMenu",
            "XXX.world.inventory.HorseInventoryMenu$1",
            "XXX.world.inventory.InventoryMenu",
            "XXX.world.inventory.InventoryMenu$2",
            "XXX.world.inventory.ItemCombinerMenu$1",
            "XXX.world.inventory.LecternMenu",
            "XXX.world.inventory.LoomMenu",
            "XXX.world.inventory.LoomMenu$2",
            "XXX.world.inventory.LoomMenu$4",
            "XXX.world.inventory.LoomMenu$6",
            "XXX.world.inventory.MenuType",
            "XXX.world.inventory.MerchantContainer",
            "XXX.world.inventory.MerchantResultSlot",
            "XXX.world.inventory.RecipeBookMenu",
            "XXX.world.inventory.RecipeHolder",
            "XXX.world.inventory.ResultSlot",
            "XXX.world.inventory.ShulkerBoxSlot",
            "XXX.world.inventory.Slot",
            "XXX.world.inventory.SmokerMenu",
            "XXX.world.inventory.StonecutterMenu",
            "XXX.world.inventory.StonecutterMenu$2",
            "XXX.world.item.CompassItem",
            "XXX.world.item.CreativeModeTab",
            "XXX.world.item.CreativeModeTab$10",
            "XXX.world.item.CreativeModeTab$12",
            "XXX.world.item.CreativeModeTab$3",
            "XXX.world.item.CreativeModeTab$5",
            "XXX.world.item.CreativeModeTab$7",
            "XXX.world.item.CreativeModeTab$9",
            "XXX.world.item.DebugStickItem",
            "XXX.world.item.FishingRodItem",
            "XXX.world.item.FoodOnAStickItem",
            "XXX.world.item.HangingEntityItem",
            "XXX.world.item.HoneyBottleItem",
            "XXX.world.item.Item",
            "XXX.world.item.Item$Properties",
            "XXX.world.item.ItemCooldowns$1",
            "XXX.world.item.ItemFrameItem",
            "XXX.world.item.ItemStack",
            "XXX.world.item.ItemUtils",
            "XXX.world.item.KnowledgeBookItem",
            "XXX.world.item.LingeringPotionItem",
            "XXX.world.item.MilkBucketItem",
            "XXX.world.item.MinecartItem$1",
            "XXX.world.item.ProjectileWeaponItem$Type",
            "XXX.world.item.RecordItem",
            "XXX.world.item.ScaffoldingBlockItem",
            "XXX.world.item.ShearsItem",
            "XXX.world.item.ShovelItem",
            "XXX.world.item.SimpleFoiledItem",
            "XXX.world.item.SuspiciousStewItem",
            "XXX.world.item.ThrowablePotionItem",
            "XXX.world.item.TieredItem",
            "XXX.world.item.TippedArrowItem",
            "XXX.world.item.TooltipFlag$Default",
            "XXX.world.item.UseAnim",
            "XXX.world.item.WaterLilyBlockItem",
            "XXX.world.item.WritableBookItem",
            "XXX.item.alchemy.Potion",
            "XXX.item.alchemy.PotionBrewing$Mix",
            "XXX.item.alchemy.Potions",
            "XXX.item.context.BlockPlaceContext",
            "XXX.item.context.DirectionalPlaceContext$1",
            "XXX.item.context.package-info",
            "XXX.item.crafting.ArmorDyeRecipe",
            "XXX.item.crafting.BlastingRecipe",
            "XXX.item.crafting.CampfireCookingRecipe",
            "XXX.item.crafting.CustomRecipe",
            "XXX.item.crafting.FireworkStarFadeRecipe",
            "XXX.item.crafting.Ingredient",
            "XXX.item.crafting.Ingredient$ItemValue",
            "XXX.item.crafting.Ingredient$Value",
            "XXX.item.crafting.MapExtendingRecipe",
            "XXX.item.crafting.RecipeManager",
            "XXX.item.crafting.RecipeType",
            "XXX.item.crafting.RepairItemRecipe",
            "XXX.item.crafting.ShapedRecipe$Serializer",
            "XXX.item.crafting.ShapelessRecipe$Serializer",
            "XXX.item.crafting.ShulkerBoxColoring",
            "XXX.item.crafting.SimpleCookingSerializer$CookieBaker",
            "XXX.item.crafting.SingleItemRecipe",
            "XXX.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker",
            "XXX.item.crafting.SmokingRecipe",
            "XXX.item.crafting.SuspiciousStewRecipe",
            "XXX.item.crafting.UpgradeRecipe",
            "XXX.item.crafting.package-info",
            "XXX.item.enchantment.ArrowFireEnchantment",
            "XXX.item.enchantment.ArrowKnockbackEnchantment",
            "XXX.item.enchantment.BindingCurseEnchantment",
            "XXX.item.enchantment.DigDurabilityEnchantment",
            "XXX.item.enchantment.Enchantment",
            "XXX.item.enchantment.EnchantmentCategory",
            "XXX.item.enchantment.EnchantmentCategory$10",
            "XXX.item.enchantment.EnchantmentCategory$12",
            "XXX.item.enchantment.EnchantmentCategory$14",
            "XXX.item.enchantment.EnchantmentCategory$3",
            "XXX.item.enchantment.EnchantmentCategory$5",
            "XXX.item.enchantment.EnchantmentCategory$7",
            "XXX.item.enchantment.EnchantmentCategory$9",
            "XXX.item.enchantment.EnchantmentHelper$EnchantmentVisitor",
            "XXX.item.enchantment.Enchantments",
            "XXX.item.enchantment.FishingSpeedEnchantment",
            "XXX.item.enchantment.KnockbackEnchantment",
            "XXX.item.enchantment.MendingEnchantment",
            "XXX.item.enchantment.OxygenEnchantment",
            "XXX.item.enchantment.ProtectionEnchantment$Type",
            "XXX.item.enchantment.SoulSpeedEnchantment",
            "XXX.item.enchantment.ThornsEnchantment",
            "XXX.item.enchantment.TridentImpalerEnchantment",
            "XXX.item.enchantment.TridentRiptideEnchantment",
            "XXX.item.enchantment.VanishingCurseEnchantment",
            "XXX.item.enchantment.WaterWorkerEnchantment",
            "XXX.world.item.package-info",
            "XXX.item.trading.MerchantOffer",
            "XXX.item.trading.package-info",
            "XXX.world.level.BaseSpawner",
            "XXX.world.level.BlockEventData",
            "XXX.world.level.ChunkPos",
            "XXX.world.level.ChunkTickList",
            "XXX.world.level.ChunkTickList$ScheduledTick",
            "XXX.world.level.LevelReader",
            "XXX.world.level.LevelSimulatedRW",
            "XXX.world.level.LevelTimeAccess",
            "XXX.world.level.LightLayer",
            "XXX.world.level.NaturalSpawner$1",
            "XXX.world.level.NaturalSpawner$ChunkGetter",
            "XXX.world.level.NaturalSpawner$SpawnState",
            "XXX.world.level.PathNavigationRegion",
            "XXX.world.level.PotentialCalculator$PointCharge",
            "XXX.world.level.ServerTickList",
            "XXX.world.level.StructureFeatureManager",
            "XXX.world.level.TickNextTickData",
            "XXX.world.level.WorldGenLevel",
            "XXX.level.biome.AmbientMoodSettings",
            "XXX.level.biome.Biome",
            "XXX.level.biome.Biome$BiomeBuilder",
            "XXX.level.biome.Biome$ClimateParameters",
            "XXX.level.biome.Biome$Precipitation",
            "XXX.level.biome.Biome$TemperatureModifier$1",
            "XXX.level.biome.BiomeGenerationSettings",
            "XXX.level.biome.BiomeGenerationSettings$Builder",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.BiomeSpecialEffects",
            "XXX.level.biome.BiomeSpecialEffects$Builder",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$1",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$3",
            "XXX.level.biome.Biomes",
            "XXX.level.biome.FixedBiomeSource",
            "XXX.level.biome.FuzzyOffsetConstantColumnBiomeZoomer",
            "XXX.level.biome.MobSpawnSettings$1",
            "XXX.level.biome.MobSpawnSettings$MobSpawnCost",
            "XXX.level.biome.MultiNoiseBiomeSource",
            "XXX.level.biome.MultiNoiseBiomeSource$NoiseParameters",
            "XXX.level.biome.MultiNoiseBiomeSource$PresetInstance",
            "XXX.level.biome.OverworldBiomeSource",
            "XXX.level.biome.package-info",
            "XXX.level.block.AbstractChestBlock",
            "XXX.level.block.AbstractGlassBlock",
            "XXX.level.block.AirBlock",
            "XXX.level.block.ButtonBlock",
            "XXX.level.block.CactusBlock",
            "XXX.level.block.CampfireBlock",
            "XXX.level.block.CartographyTableBlock",
            "XXX.level.block.CauldronBlock",
            "XXX.level.block.ChainBlock$1",
            "XXX.level.block.ChestBlock$1",
            "XXX.level.block.ChestBlock$2$1",
            "XXX.level.block.ChestBlock$4",
            "XXX.level.block.ChorusPlantBlock",
            "XXX.level.block.CocoaBlock$1",
            "XXX.level.block.ComparatorBlock",
            "XXX.level.block.ComposterBlock$EmptyContainer",
            "XXX.level.block.ComposterBlock$OutputContainer",
            "XXX.level.block.ConduitBlock",
            "XXX.level.block.CoralFanBlock",
            "XXX.level.block.CoralWallFanBlock",
            "XXX.level.block.CropBlock",
            "XXX.level.block.CrossCollisionBlock$1",
            "XXX.level.block.DaylightDetectorBlock",
            "XXX.level.block.DetectorRailBlock",
            "XXX.level.block.DiodeBlock",
            "XXX.level.block.EnderChestBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock",
            "XXX.level.block.GlassBlock",
            "XXX.level.block.GravelBlock",
            "XXX.level.block.GrindstoneBlock$1",
            "XXX.level.block.GrowingPlantBodyBlock",
            "XXX.level.block.HalfTransparentBlock",
            "XXX.level.block.HoneyBlock",
            "XXX.level.block.HopperBlock$1",
            "XXX.level.block.HugeMushroomBlock",
            "XXX.level.block.InfestedBlock",
            "XXX.level.block.JigsawBlock",
            "XXX.level.block.KelpBlock",
            "XXX.level.block.LadderBlock",
            "XXX.level.block.Lantern",
            "XXX.level.block.LecternBlock",
            "XXX.level.block.LevelEvent",
            "XXX.level.block.LeverBlock$1",
            "XXX.level.block.MushroomBlock",
            "XXX.level.block.NetherPortalBlock",
            "XXX.level.block.NetherSproutsBlock",
            "XXX.level.block.NetherWartBlock",
            "XXX.level.block.NoteBlock",
            "XXX.level.block.ObserverBlock",
            "XXX.level.block.PipeBlock",
            "XXX.level.block.PlayerWallHeadBlock",
            "XXX.level.block.PoweredBlock",
            "XXX.level.block.PoweredRailBlock$1",
            "XXX.level.block.PressurePlateBlock$1",
            "XXX.level.block.PumpkinBlock",
            "XXX.level.block.RailBlock$1",
            "XXX.level.block.RailState$1",
            "XXX.level.block.RedStoneWireBlock",
            "XXX.level.block.RedstoneLampBlock",
            "XXX.level.block.RedstoneTorchBlock$Toggle",
            "XXX.level.block.RenderShape",
            "XXX.level.block.RespawnAnchorBlock",
            "XXX.level.block.RootsBlock",
            "XXX.level.block.RotatedPillarBlock$1",
            "XXX.level.block.Rotation$1",
            "XXX.level.block.SaplingBlock",
            "XXX.level.block.TorchBlock",
            "XXX.level.block.TrapDoorBlock$1",
            "XXX.level.block.TripWireBlock",
            "XXX.level.block.TripWireHookBlock",
            "XXX.level.block.TurtleEggBlock",
            "XXX.level.block.TwistingVinesPlant",
            "XXX.level.block.VineBlock$1",
            "XXX.level.block.WallBlock",
            "XXX.level.block.WallSignBlock",
            "XXX.level.block.WallTorchBlock",
            "XXX.level.block.WebBlock",
            "XXX.level.block.WeepingVinesPlant",
            "XXX.level.block.WetSpongeBlock",
            "XXX.level.block.WitherSkullBlock",
            "XXX.level.block.WoodButtonBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity",
            "XXX.block.entity.BannerBlockEntity",
            "XXX.block.entity.BannerPattern$Builder",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.StructureBlockEntity$1",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickableBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.block.state.StateHolder",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.state.properties.AttachFace",
            "XXX.state.properties.BedPart",
            "XXX.state.properties.BlockStateProperties",
            "XXX.state.properties.ChestType",
            "XXX.state.properties.DirectionProperty",
            "XXX.state.properties.DoubleBlockHalf",
            "XXX.state.properties.StairsShape",
            "XXX.state.properties.WallSide",
            "XXX.state.properties.package-info",
            "XXX.level.border.BorderChangeListener$DelegateBorderChangeListener",
            "XXX.level.border.WorldBorder",
            "XXX.level.border.WorldBorder$BorderExtent",
            "XXX.level.border.WorldBorder$Settings",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.chunk.UpgradeData$BlockFixer",
            "XXX.level.chunk.UpgradeData$BlockFixers$1",
            "XXX.level.chunk.UpgradeData$BlockFixers$3",
            "XXX.level.chunk.UpgradeData$BlockFixers$5",
            "XXX.chunk.storage.ChunkSerializer",
            "XXX.chunk.storage.OldChunkStorage$OldLevelChunk",
            "XXX.chunk.storage.RegionFile",
            "XXX.chunk.storage.RegionFile$CommitOp",
            "XXX.chunk.storage.RegionFileVersion",
            "XXX.chunk.storage.SectionStorage",
            "XXX.level.dimension.DimensionType",
            "XXX.dimension.end.DragonRespawnAnimation",
            "XXX.dimension.end.DragonRespawnAnimation$2",
            "XXX.dimension.end.DragonRespawnAnimation$4",
            "XXX.dimension.end.EndDragonFight",
            "XXX.level.dimension.package-info",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.NoiseSamplingSettings",
            "XXX.level.levelgen.NoiseSlideSettings",
            "XXX.level.levelgen.PhantomSpawner",
            "XXX.level.levelgen.WorldGenSettings",
            "XXX.levelgen.carver.CanyonWorldCarver",
            "XXX.levelgen.carver.CaveWorldCarver",
            "XXX.levelgen.carver.NetherWorldCarver",
            "XXX.levelgen.carver.UnderwaterCanyonWorldCarver",
            "XXX.levelgen.carver.WorldCarver",
            "XXX.levelgen.feature.AbstractFlowerFeature",
            "XXX.levelgen.feature.BambooFeature",
            "XXX.levelgen.feature.BasaltPillarFeature",
            "XXX.levelgen.feature.BastionFeature",
            "XXX.levelgen.feature.BlockPileFeature",
            "XXX.levelgen.feature.BonusChestFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart",
            "XXX.levelgen.feature.ConfiguredFeature",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.DecoratedFeature",
            "XXX.levelgen.feature.DeltaFeature",
            "XXX.levelgen.feature.DesertPyramidFeature$FeatureStart",
            "XXX.levelgen.feature.DiskReplaceFeature",
            "XXX.levelgen.feature.EndCityFeature$EndCityStart",
            "XXX.levelgen.feature.EndIslandFeature",
            "XXX.levelgen.feature.Feature",
            "XXX.levelgen.feature.FossilFeature",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JigsawFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomSelectorFeature",
            "XXX.levelgen.feature.ReplaceBlockFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$FeatureStart",
            "XXX.levelgen.feature.SeaPickleFeature",
            "XXX.levelgen.feature.ShipwreckFeature",
            "XXX.levelgen.feature.SimpleBlockFeature",
            "XXX.levelgen.feature.SimulatedFeature",
            "XXX.levelgen.feature.SpikeFeature",
            "XXX.levelgen.feature.SpikeFeature$EndSpike",
            "XXX.levelgen.feature.SpringFeature",
            "XXX.levelgen.feature.StrongholdFeature$StrongholdStart",
            "XXX.levelgen.feature.StructureFeature$StructureStartFactory",
            "XXX.levelgen.feature.SwamplandHutFeature",
            "XXX.levelgen.feature.TreeFeature",
            "XXX.levelgen.feature.VillageFeature",
            "XXX.levelgen.feature.VoidStartPlatformFeature",
            "XXX.levelgen.feature.WeightedConfiguredFeature",
            "XXX.levelgen.feature.WoodlandMansionFeature$WoodlandMansionStart",
            "XXX.feature.blockplacers.BlockPlacerType",
            "XXX.feature.blockplacers.DoublePlantPlacer",
            "XXX.feature.blockplacers.package-info",
            "XXX.feature.configurations.BlockStateConfiguration",
            "XXX.feature.configurations.CountConfiguration",
            "XXX.feature.configurations.DecoratorConfiguration",
            "XXX.feature.configurations.DiskConfiguration",
            "XXX.feature.configurations.MineshaftConfiguration",
            "XXX.feature.configurations.NoneDecoratorConfiguration",
            "XXX.feature.configurations.OceanRuinConfiguration",
            "XXX.feature.configurations.OreConfiguration$Predicates",
            "XXX.feature.configurations.RandomBooleanFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder",
            "XXX.feature.configurations.ReplaceBlockConfiguration",
            "XXX.feature.configurations.RuinedPortalConfiguration",
            "XXX.feature.configurations.SimpleBlockConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacer$Factory",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.MegaPineFoliagePlacer",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.level.levelgen.package-info",
            "XXX.levelgen.placement.BiasedRangeDecorator",
            "XXX.levelgen.placement.CarvingMaskDecoratorConfiguration",
            "XXX.levelgen.placement.ChanceDecoratorConfiguration",
            "XXX.levelgen.placement.CountDecorator",
            "XXX.levelgen.placement.CountWithExtraChanceDecorator",
            "XXX.levelgen.placement.DecoratedDecorator",
            "XXX.levelgen.placement.DecorationContext",
            "XXX.levelgen.placement.DepthAverageDecorator",
            "XXX.levelgen.placement.EmeraldPlacementDecorator",
            "XXX.levelgen.placement.EndIslandPlacementDecorator",
            "XXX.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration",
            "XXX.levelgen.placement.HeightmapDecorator",
            "XXX.levelgen.placement.IcebergPlacementDecorator",
            "XXX.levelgen.placement.LakeWaterPlacementDecorator",
            "XXX.levelgen.placement.NoiseCountFactorDecoratorConfiguration",
            "XXX.levelgen.placement.RangeDecorator",
            "XXX.levelgen.placement.Spread32Decorator",
            "XXX.levelgen.placement.TopSolidHeightMapDecorator",
            "XXX.placement.nether.CountMultiLayerDecorator",
            "XXX.placement.nether.GlowstoneDecorator",
            "XXX.placement.nether.package-info",
            "XXX.levelgen.structure.BeardedStructureStart",
            "XXX.levelgen.structure.BoundingBox$1",
            "XXX.levelgen.structure.BuriedTreasurePieces$BuriedTreasurePiece",
            "XXX.levelgen.structure.EndCityPieces",
            "XXX.levelgen.structure.EndCityPieces$2",
            "XXX.levelgen.structure.EndCityPieces$4",
            "XXX.levelgen.structure.EndCityPieces$SectionGenerator",
            "XXX.levelgen.structure.IglooPieces$IglooPiece",
            "XXX.levelgen.structure.JunglePyramidPiece$1",
            "XXX.levelgen.structure.LegacyStructureDataHandler",
            "XXX.levelgen.structure.MineShaftPieces$1",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftCrossing",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftRoom",
            "XXX.levelgen.structure.NetherBridgePieces",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeCrossing",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeStraight",
            "XXX.levelgen.structure.NetherBridgePieces$CastleCorridorTBalconyPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorCrossingPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleStalkRoom",
            "XXX.levelgen.structure.NetherBridgePieces$NetherBridgePiece",
            "XXX.levelgen.structure.NetherBridgePieces$RoomCrossing",
            "XXX.levelgen.structure.NetherBridgePieces$StartPiece",
            "XXX.levelgen.structure.NetherFossilFeature$FeatureStart",
            "XXX.levelgen.structure.NetherFossilPieces$NetherFossilPiece",
            "XXX.levelgen.structure.OceanMonumentPieces$1",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$MonumentBuilding",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentCoreRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentEntryRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleTopRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$RoomDefinition",
            "XXX.levelgen.structure.OceanRuinFeature$OceanRuinStart",
            "XXX.levelgen.structure.OceanRuinPieces",
            "XXX.levelgen.structure.PoolElementStructurePiece",
            "XXX.levelgen.structure.RuinedPortalPiece$Properties",
            "XXX.levelgen.structure.ScatteredFeaturePiece",
            "XXX.levelgen.structure.ShipwreckPieces$ShipwreckPiece",
            "XXX.levelgen.structure.StrongholdPieces$1",
            "XXX.levelgen.structure.StrongholdPieces$3",
            "XXX.levelgen.structure.StrongholdPieces$FillerCorridor",
            "XXX.levelgen.structure.StrongholdPieces$LeftTurn",
            "XXX.levelgen.structure.StrongholdPieces$PieceWeight",
            "XXX.levelgen.structure.StrongholdPieces$PrisonHall",
            "XXX.levelgen.structure.StrongholdPieces$RoomCrossing",
            "XXX.levelgen.structure.StrongholdPieces$StairsDown",
            "XXX.levelgen.structure.StrongholdPieces$Straight",
            "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece",
            "XXX.levelgen.structure.StrongholdPieces$Turn",
            "XXX.levelgen.structure.StructurePiece",
            "XXX.levelgen.structure.StructurePiece$BlockSelector",
            "XXX.levelgen.structure.StructureStart$1",
            "XXX.levelgen.structure.TemplateStructurePiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorList",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.level.saveddata.SaveDataDirtyRunnable",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.saveddata.maps.package-info",
            "XXX.level.storage.CommandStorage",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.BinomialDistributionGenerator$Serializer",
            "XXX.storage.loot.ConstantIntValue",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.GsonAdapterFactory$1",
            "XXX.storage.loot.GsonAdapterFactory$DefaultSerializer",
            "XXX.storage.loot.IntLimiter",
            "XXX.storage.loot.IntLimiter$Serializer",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.PredicateManager$1",
            "XXX.storage.loot.RandomIntGenerator",
            "XXX.storage.loot.RandomValueBounds",
            "XXX.storage.loot.Serializer",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.phys.shapes.IntPointRange",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape",
            "XXX.phys.shapes.WorldRegionIndirectVoxelShape"
          ],
          "removed": [
            "XXX.commands.arguments.NbtPathArgument$MatchObjectNode",
            "XXX.commands.arguments.NbtPathArgument$NbtPath",
            "XXX.commands.arguments.NbtTagArgument",
            "XXX.commands.arguments.ObjectiveCriteriaArgument",
            "XXX.commands.arguments.OperationArgument$Operation",
            "XXX.commands.arguments.ParticleArgument",
            "XXX.commands.arguments.RangeArgument$Floats",
            "XXX.commands.arguments.ResourceLocationArgument",
            "XXX.commands.arguments.ScoreHolderArgument$Result",
            "XXX.commands.arguments.ScoreHolderArgument$Serializer",
            "XXX.commands.arguments.SlotArgument",
            "XXX.commands.arguments.TimeArgument",
            "XXX.arguments.blocks.BlockInput",
            "XXX.arguments.blocks.BlockPredicateArgument$1",
            "XXX.arguments.blocks.BlockPredicateArgument$Result",
            "XXX.arguments.blocks.BlockStateArgument",
            "XXX.arguments.blocks.package-info",
            "XXX.arguments.coordinates.ColumnPosArgument",
            "XXX.arguments.coordinates.LocalCoordinates",
            "XXX.arguments.coordinates.SwizzleArgument",
            "XXX.arguments.coordinates.Vec3Argument",
            "XXX.arguments.coordinates.WorldCoordinates",
            "XXX.arguments.item.FunctionArgument",
            "XXX.arguments.item.FunctionArgument$2",
            "XXX.arguments.item.ItemArgument",
            "XXX.arguments.item.ItemParser",
            "XXX.arguments.item.ItemPredicateArgument$ItemPredicate",
            "XXX.arguments.item.ItemPredicateArgument$TagPredicate",
            "XXX.commands.arguments.package-info",
            "XXX.arguments.selector.EntitySelector$1",
            "XXX.minecraft.core.QuartPos",
            "XXX.minecraft.core.RegistryAccess",
            "XXX.minecraft.core.RegistryAccess$RegistryHolder",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableUUID",
            "XXX.minecraft.core.WritableRegistry",
            "XXX.core.particles.DustColorTransitionOptions",
            "XXX.core.particles.DustParticleOptionsBase",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.VibrationParticleOption",
            "XXX.core.particles.package-info",
            "XXX.minecraft.data.BlockFamily",
            "XXX.minecraft.data.BlockFamily$Builder",
            "XXX.data.recipes.RecipeBuilder",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.UpgradeRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.structures.SnbtToNbt$StructureConversionException",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.data.worldgen.BastionHoglinStablePools",
            "XXX.data.worldgen.BastionPieces",
            "XXX.data.worldgen.BastionTreasureRoomPools",
            "XXX.data.worldgen.Carvers",
            "XXX.data.worldgen.Features",
            "XXX.data.worldgen.Features$Decorators",
            "XXX.data.worldgen.PillagerOutpostPools",
            "XXX.data.worldgen.Pools",
            "XXX.data.worldgen.SavannaVillagePools",
            "XXX.data.worldgen.StructureFeatures",
            "XXX.data.worldgen.TaigaVillagePools",
            "XXX.worldgen.biome.BiomeReport",
            "XXX.worldgen.biome.VanillaBiomes",
            "XXX.gametest.framework.AfterBatch",
            "XXX.gametest.framework.ExhaustedAttemptsException",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestHelper$1",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.JUnitLikeTestReporter",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.gametest.framework.ReportGameListener",
            "XXX.minecraft.nbt.StringTag",
            "XXX.minecraft.nbt.StringTagVisitor",
            "XXX.minecraft.nbt.TagVisitor",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSectionBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquipmentPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookChangeSettingsPacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.server.DebugLoggedPrintStream",
            "XXX.minecraft.server.LoggedPrintStream",
            "XXX.minecraft.server.Main$1",
            "XXX.minecraft.server.MinecraftServer$1",
            "XXX.minecraft.server.PlayerAdvancements",
            "XXX.minecraft.server.RunningOnDifferentThreadException",
            "XXX.minecraft.server.ServerFunctionLibrary",
            "XXX.minecraft.server.ServerFunctionManager$QueuedCommand",
            "XXX.minecraft.server.ServerResources",
            "XXX.minecraft.server.ServerScoreboard$Method",
            "XXX.server.bossevents.CustomBossEvent",
            "XXX.server.bossevents.package-info",
            "XXX.server.commands.AdvancementCommands$1",
            "XXX.server.commands.AdvancementCommands$Action$1",
            "XXX.server.commands.AdvancementCommands$Mode",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.DebugMobSpawningCommand",
            "XXX.server.commands.DefaultGameModeCommands",
            "XXX.server.commands.EffectCommands",
            "XXX.server.commands.EnchantCommand",
            "XXX.server.commands.ExecuteCommand$CommandNumericPredicate",
            "XXX.server.commands.ExperienceCommand",
            "XXX.server.commands.FillCommand",
            "XXX.server.commands.ForceLoadCommand",
            "XXX.server.commands.GameModeCommand",
            "XXX.server.commands.GameRuleCommand$1",
            "XXX.server.commands.HelpCommand",
            "XXX.server.commands.SaveOffCommand",
            "XXX.server.commands.SayCommand",
            "XXX.server.commands.ScoreboardCommand",
            "XXX.server.commands.SetBlockCommand",
            "XXX.server.commands.SetBlockCommand$Mode",
            "XXX.server.commands.SetSpawnCommand",
            "XXX.server.commands.SpectateCommand",
            "XXX.server.commands.SpreadPlayersCommand$1",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerChunkCache$MainThreadExecutor",
            "XXX.server.level.ServerLevel",
            "XXX.server.level.ServerLevel$EntityCallbacks",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerConnectionListener$LatencySimulator$DelayedMessage",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.server.network.ServerPlayerConnection",
            "XXX.minecraft.tags.GameEventTags",
            "XXX.minecraft.tags.SerializationTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.StaticTagHelper$Wrapper",
            "XXX.minecraft.tags.Tag",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.Tag$OptionalTagEntry",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.tags.TagCollection$NetworkPayload",
            "XXX.minecraft.tags.TagContainer$CollectionConsumer",
            "XXX.minecraft.tags.TagManager$LoaderInfo",
            "XXX.minecraft.util.ExtraCodecs$1",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.UniformInt",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.datafix.fixes.BlockEntityBannerColorFix",
            "XXX.datafix.fixes.BlockEntityCustomNameToComponentFix",
            "XXX.datafix.fixes.BlockEntityJukeboxFix",
            "XXX.datafix.fixes.BlockEntityShulkerBoxColorFix",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix$1",
            "XXX.datafix.fixes.BlockNameFlatteningFix",
            "XXX.datafix.fixes.BlockRenameFix$1",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw$1",
            "XXX.datafix.fixes.BlockStateStructureTemplateFix",
            "XXX.datafix.fixes.CauldronRenameFix",
            "XXX.datafix.schemas.V2686",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$1",
            "XXX.minecraft.util.package-info",
            "XXX.util.profiling.ActiveProfiler$1",
            "XXX.util.profiling.ContinuousProfiler",
            "XXX.util.profiling.FilledProfileResults",
            "XXX.util.profiling.FilledProfileResults$CounterCollector",
            "XXX.util.profiling.ProfileCollector",
            "XXX.util.profiling.ProfilerFiller",
            "XXX.util.profiling.ProfilerPathEntry",
            "XXX.util.profiling.SingleTickProfiler",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.MenuProvider",
            "XXX.world.entity.AgeableMob",
            "XXX.world.entity.Entity$RemovalReason",
            "XXX.world.entity.EntityEvent",
            "XXX.world.entity.EntitySelector$MobCanWearArmorEntitySelector",
            "XXX.world.entity.EntityType$1",
            "XXX.world.entity.HumanoidArm",
            "XXX.world.entity.ItemSteerable",
            "XXX.world.entity.LivingEntity",
            "XXX.world.entity.Mob",
            "XXX.world.entity.MobCategory",
            "XXX.world.entity.MobType",
            "XXX.world.entity.NeutralMob",
            "XXX.world.entity.PathfinderMob",
            "XXX.world.entity.PlayerRideableJumping",
            "XXX.world.entity.PowerableMob",
            "XXX.world.entity.Saddleable",
            "XXX.world.entity.SlotAccess",
            "XXX.world.entity.SlotAccess$2",
            "XXX.world.entity.SpawnGroupData",
            "XXX.world.entity.SpawnPlacements$Data",
            "XXX.world.entity.SpawnPlacements$Type",
            "XXX.entity.ai.Brain",
            "XXX.entity.ai.Brain$MemoryValue",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AcquirePoi$JitteredLinearRetry",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.CountDownTemptationTicks",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.GateBehavior$OrderPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$1",
            "XXX.ai.behavior.GiveGiftToHero",
            "XXX.ai.behavior.GoToCelebrateLocation",
            "XXX.ai.behavior.GoToPotentialJobSite",
            "XXX.ai.behavior.HarvestFarmland",
            "XXX.ai.behavior.InteractWith",
            "XXX.ai.behavior.JumpOnBed",
            "XXX.ai.behavior.LocateHidingPlaceDuringRaid",
            "XXX.ai.behavior.LookAtTargetSink",
            "XXX.ai.behavior.Mount",
            "XXX.ai.behavior.MoveToTargetSink",
            "XXX.ai.behavior.PoiCompetitorScan",
            "XXX.ai.behavior.RandomStroll",
            "XXX.ai.behavior.TryFindWater",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WeightedList$1",
            "XXX.ai.behavior.WeightedList$WeightedEntry$1",
            "XXX.ai.behavior.WorkAtPoi",
            "XXX.ai.behavior.package-info",
            "XXX.ai.control.Control",
            "XXX.ai.control.SmoothSwimmingLookControl",
            "XXX.ai.sensing.AxolotlHostileSensor",
            "XXX.ai.sensing.GolemSensor",
            "XXX.ai.sensing.HostilesSensor",
            "XXX.ai.sensing.TemptingSensor",
            "XXX.ai.sensing.VillagerHostilesSensor",
            "XXX.ai.targeting.TargetingConditions",
            "XXX.ai.util.AirAndWaterRandomPos",
            "XXX.ai.util.DefaultRandomPos",
            "XXX.ai.util.HoverRandomPos",
            "XXX.entity.animal.Bucketable",
            "XXX.entity.animal.Cat$CatAvoidEntityGoal",
            "XXX.entity.animal.Cat$CatTemptGoal",
            "XXX.entity.animal.Cod",
            "XXX.entity.animal.Dolphin",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.animal.axolotl.Axolotl",
            "XXX.animal.axolotl.Axolotl$AxolotlLookControl",
            "XXX.animal.axolotl.Axolotl$AxolotlPathNavigation",
            "XXX.animal.axolotl.AxolotlAi",
            "XXX.animal.axolotl.ValidatePlayDead",
            "XXX.animal.horse.AbstractChestedHorse",
            "XXX.animal.horse.Donkey",
            "XXX.animal.horse.Horse$HorseGroupData",
            "XXX.animal.horse.Llama$1",
            "XXX.animal.horse.Llama$LlamaGroupData",
            "XXX.animal.horse.Markings",
            "XXX.animal.horse.SkeletonHorse",
            "XXX.animal.horse.TraderLlama",
            "XXX.animal.horse.Variant",
            "XXX.animal.horse.package-info",
            "XXX.entity.decoration.LeashFenceKnotEntity",
            "XXX.entity.decoration.Painting",
            "XXX.entity.item.FallingBlockEntity",
            "XXX.entity.item.PrimedTnt",
            "XXX.entity.monster.AbstractIllager",
            "XXX.entity.monster.AbstractIllager$RaiderOpenDoorGoal",
            "XXX.entity.monster.AbstractSkeleton$1",
            "XXX.entity.monster.Blaze$BlazeAttackGoal",
            "XXX.entity.monster.Creeper",
            "XXX.entity.monster.Drowned",
            "XXX.entity.monster.Drowned$DrownedGoToBeachGoal",
            "XXX.entity.monster.Drowned$DrownedMoveControl",
            "XXX.entity.monster.Drowned$DrownedTridentAttackGoal",
            "XXX.entity.monster.EnderMan",
            "XXX.entity.monster.EnderMan$EndermanLeaveBlockGoal",
            "XXX.entity.monster.EnderMan$EndermanTakeBlockGoal",
            "XXX.entity.monster.Enemy",
            "XXX.entity.monster.Evoker$1",
            "XXX.entity.monster.Evoker$EvokerCastingSpellGoal",
            "XXX.entity.monster.Evoker$EvokerWololoSpellGoal",
            "XXX.entity.monster.Ghast$GhastLookGoal",
            "XXX.entity.monster.Ghast$GhastShootFireballGoal",
            "XXX.entity.monster.Giant",
            "XXX.entity.monster.Guardian$GuardianAttackGoal",
            "XXX.entity.monster.Guardian$GuardianMoveControl",
            "XXX.entity.monster.Illusioner",
            "XXX.entity.monster.Illusioner$IllusionerBlindnessSpellGoal",
            "XXX.entity.monster.MagmaCube",
            "XXX.entity.monster.PatrollingMonster",
            "XXX.entity.monster.Phantom",
            "XXX.entity.monster.Phantom$AttackPhase",
            "XXX.entity.monster.Phantom$PhantomAttackStrategyGoal",
            "XXX.entity.monster.Phantom$PhantomCircleAroundAnchorGoal",
            "XXX.entity.monster.Phantom$PhantomMoveControl",
            "XXX.entity.monster.Phantom$PhantomSweepAttackGoal",
            "XXX.entity.monster.RangedAttackMob",
            "XXX.entity.monster.Ravager$1",
            "XXX.entity.monster.Ravager$RavagerNavigation",
            "XXX.entity.monster.Shulker",
            "XXX.entity.monster.Shulker$ShulkerAttackGoal",
            "XXX.entity.monster.Shulker$ShulkerDefenseAttackGoal",
            "XXX.entity.monster.Shulker$ShulkerPeekGoal",
            "XXX.entity.monster.Silverfish$SilverfishMergeWithStoneGoal",
            "XXX.entity.monster.Skeleton",
            "XXX.entity.monster.Slime$SlimeAttackGoal",
            "XXX.entity.monster.Slime$SlimeKeepOnJumpingGoal",
            "XXX.entity.monster.Slime$SlimeRandomDirectionGoal",
            "XXX.entity.monster.SpellcasterIllager$IllagerSpell",
            "XXX.entity.monster.SpellcasterIllager$SpellcasterUseSpellGoal",
            "XXX.entity.monster.Spider$SpiderAttackGoal",
            "XXX.entity.monster.Spider$SpiderTargetGoal",
            "XXX.entity.monster.Strider",
            "XXX.entity.monster.Strider$StriderGoToLavaGoal",
            "XXX.entity.monster.Vex",
            "XXX.entity.monster.Vex$VexCopyOwnerTargetGoal",
            "XXX.entity.monster.Vex$VexRandomMoveGoal",
            "XXX.entity.monster.Vindicator$VindicatorBreakDoorGoal",
            "XXX.entity.monster.Vindicator$VindicatorMeleeAttackGoal",
            "XXX.entity.monster.WitherSkeleton",
            "XXX.entity.monster.Zombie",
            "XXX.entity.monster.Zombie$ZombieGroupData",
            "XXX.entity.monster.ZombifiedPiglin",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.entity.player.Player$1",
            "XXX.entity.player.PlayerModelPart",
            "XXX.entity.player.StackedContents$RecipePicker",
            "XXX.entity.projectile.AbstractArrow",
            "XXX.entity.projectile.AbstractHurtingProjectile",
            "XXX.entity.projectile.DragonFireball",
            "XXX.entity.projectile.EyeOfEnder",
            "XXX.entity.projectile.FireworkRocketEntity",
            "XXX.entity.projectile.FishingHook$1",
            "XXX.entity.projectile.FishingHook$OpenWaterType",
            "XXX.entity.projectile.LargeFireball",
            "XXX.entity.projectile.Projectile",
            "XXX.entity.projectile.ShulkerBullet",
            "XXX.entity.projectile.Snowball",
            "XXX.entity.projectile.ThrowableItemProjectile",
            "XXX.entity.projectile.ThrownEgg",
            "XXX.entity.projectile.ThrownExperienceBottle",
            "XXX.entity.projectile.ThrownTrident",
            "XXX.entity.projectile.package-info",
            "XXX.entity.raid.Raid$1",
            "XXX.entity.raid.Raid$RaiderType",
            "XXX.entity.raid.Raider$HoldGroundAttackGoal",
            "XXX.entity.raid.Raider$RaiderCelebration",
            "XXX.entity.raid.Raids",
            "XXX.entity.schedule.Activity",
            "XXX.entity.schedule.Schedule",
            "XXX.entity.schedule.ScheduleBuilder$ActivityTransition",
            "XXX.entity.schedule.package-info",
            "XXX.entity.vehicle.AbstractMinecart$1",
            "XXX.entity.vehicle.AbstractMinecartContainer",
            "XXX.world.inventory.ClickType",
            "XXX.world.inventory.ContainerLevelAccess",
            "XXX.world.inventory.ContainerLevelAccess$2",
            "XXX.world.inventory.CraftingContainer",
            "XXX.world.inventory.DataSlot",
            "XXX.world.inventory.DataSlot$2",
            "XXX.world.inventory.DispenserMenu",
            "XXX.world.inventory.EnchantmentMenu$1",
            "XXX.world.inventory.EnchantmentMenu$3",
            "XXX.world.inventory.FurnaceMenu",
            "XXX.world.inventory.GrindstoneMenu",
            "XXX.world.inventory.GrindstoneMenu$2",
            "XXX.world.inventory.GrindstoneMenu$4",
            "XXX.world.inventory.HorseInventoryMenu",
            "XXX.world.inventory.HorseInventoryMenu$2",
            "XXX.world.inventory.InventoryMenu$1",
            "XXX.world.inventory.ItemCombinerMenu",
            "XXX.world.inventory.ItemCombinerMenu$2",
            "XXX.world.inventory.LecternMenu$1",
            "XXX.world.inventory.LoomMenu$1",
            "XXX.world.inventory.LoomMenu$3",
            "XXX.world.inventory.LoomMenu$5",
            "XXX.world.inventory.MenuConstructor",
            "XXX.world.inventory.MenuType$MenuSupplier",
            "XXX.world.inventory.MerchantMenu",
            "XXX.world.inventory.PlayerEnderChestContainer",
            "XXX.world.inventory.RecipeBookType",
            "XXX.world.inventory.ResultContainer",
            "XXX.world.inventory.ShulkerBoxMenu",
            "XXX.world.inventory.SimpleContainerData",
            "XXX.world.inventory.SmithingMenu",
            "XXX.world.inventory.StackedContentsCompatible",
            "XXX.world.inventory.StonecutterMenu$1",
            "XXX.world.inventory.package-info",
            "XXX.inventory.tooltip.TooltipComponent",
            "XXX.world.item.ChorusFruitItem",
            "XXX.world.item.ComplexItem",
            "XXX.world.item.CreativeModeTab$1",
            "XXX.world.item.CreativeModeTab$11",
            "XXX.world.item.CreativeModeTab$2",
            "XXX.world.item.CreativeModeTab$4",
            "XXX.world.item.CreativeModeTab$6",
            "XXX.world.item.CreativeModeTab$8",
            "XXX.world.item.CrossbowItem",
            "XXX.world.item.DiggerItem",
            "XXX.world.item.FlintAndSteelItem",
            "XXX.world.item.GameMasterBlockItem",
            "XXX.world.item.HoeItem",
            "XXX.world.item.HorseArmorItem",
            "XXX.world.item.Item$1",
            "XXX.world.item.ItemCooldowns",
            "XXX.world.item.ItemCooldowns$CooldownInstance",
            "XXX.world.item.ItemNameBlockItem",
            "XXX.world.item.ItemStack$TooltipPart",
            "XXX.world.item.Items",
            "XXX.world.item.LeadItem",
            "XXX.world.item.MapItem",
            "XXX.world.item.MinecartItem",
            "XXX.world.item.MobBucketItem",
            "XXX.world.item.Rarity",
            "XXX.world.item.SaddleItem",
            "XXX.world.item.ServerItemCooldowns",
            "XXX.world.item.ShieldItem",
            "XXX.world.item.SignItem",
            "XXX.world.item.SnowballItem",
            "XXX.world.item.StandingAndWallBlockItem",
            "XXX.world.item.SwordItem",
            "XXX.world.item.Tier",
            "XXX.world.item.Tiers",
            "XXX.world.item.TooltipFlag",
            "XXX.world.item.TridentItem",
            "XXX.world.item.Vanishable",
            "XXX.world.item.Wearable",
            "XXX.world.item.WrittenBookItem",
            "XXX.item.alchemy.PotionBrewing",
            "XXX.item.alchemy.PotionUtils",
            "XXX.item.alchemy.package-info",
            "XXX.item.context.DirectionalPlaceContext",
            "XXX.item.context.UseOnContext",
            "XXX.item.crafting.AbstractCookingRecipe",
            "XXX.item.crafting.BannerDuplicateRecipe",
            "XXX.item.crafting.BookCloningRecipe",
            "XXX.item.crafting.CraftingRecipe",
            "XXX.item.crafting.FireworkRocketRecipe",
            "XXX.item.crafting.FireworkStarRecipe",
            "XXX.item.crafting.Ingredient$1",
            "XXX.item.crafting.Ingredient$TagValue",
            "XXX.item.crafting.MapCloningRecipe",
            "XXX.item.crafting.Recipe",
            "XXX.item.crafting.RecipeSerializer",
            "XXX.item.crafting.RecipeType$1",
            "XXX.item.crafting.ShapedRecipe",
            "XXX.item.crafting.ShapelessRecipe",
            "XXX.item.crafting.ShieldDecorationRecipe",
            "XXX.item.crafting.SimpleCookingSerializer",
            "XXX.item.crafting.SimpleRecipeSerializer",
            "XXX.item.crafting.SingleItemRecipe$Serializer",
            "XXX.item.crafting.SmeltingRecipe",
            "XXX.item.crafting.StonecutterRecipe",
            "XXX.item.crafting.TippedArrowRecipe",
            "XXX.item.crafting.UpgradeRecipe$Serializer",
            "XXX.item.enchantment.ArrowDamageEnchantment",
            "XXX.item.enchantment.ArrowInfiniteEnchantment",
            "XXX.item.enchantment.ArrowPiercingEnchantment",
            "XXX.item.enchantment.DamageEnchantment",
            "XXX.item.enchantment.DiggingEnchantment",
            "XXX.item.enchantment.Enchantment$Rarity",
            "XXX.item.enchantment.EnchantmentCategory$1",
            "XXX.item.enchantment.EnchantmentCategory$11",
            "XXX.item.enchantment.EnchantmentCategory$13",
            "XXX.item.enchantment.EnchantmentCategory$2",
            "XXX.item.enchantment.EnchantmentCategory$4",
            "XXX.item.enchantment.EnchantmentCategory$6",
            "XXX.item.enchantment.EnchantmentCategory$8",
            "XXX.item.enchantment.EnchantmentHelper",
            "XXX.item.enchantment.EnchantmentInstance",
            "XXX.item.enchantment.FireAspectEnchantment",
            "XXX.item.enchantment.FrostWalkerEnchantment",
            "XXX.item.enchantment.LootBonusEnchantment",
            "XXX.item.enchantment.MultiShotEnchantment",
            "XXX.item.enchantment.ProtectionEnchantment",
            "XXX.item.enchantment.QuickChargeEnchantment",
            "XXX.item.enchantment.SweepingEdgeEnchantment",
            "XXX.item.enchantment.TridentChannelingEnchantment",
            "XXX.item.enchantment.TridentLoyaltyEnchantment",
            "XXX.item.enchantment.UntouchingEnchantment",
            "XXX.item.enchantment.WaterWalkerEnchantment",
            "XXX.item.enchantment.package-info",
            "XXX.item.trading.Merchant",
            "XXX.item.trading.MerchantOffers",
            "XXX.world.level.BaseCommandBlock",
            "XXX.world.level.BlockAndTintGetter",
            "XXX.world.level.BlockGetter",
            "XXX.world.level.ChunkPos$1",
            "XXX.world.level.ChunkTickList$1",
            "XXX.world.level.ClipBlockStateContext",
            "XXX.world.level.LevelHeightAccessor",
            "XXX.world.level.LevelSettings",
            "XXX.world.level.LevelSimulatedReader",
            "XXX.world.level.LevelWriter",
            "XXX.world.level.NaturalSpawner",
            "XXX.world.level.NaturalSpawner$AfterSpawnCallback",
            "XXX.world.level.NaturalSpawner$SpawnPredicate",
            "XXX.world.level.NoiseColumn",
            "XXX.world.level.PotentialCalculator",
            "XXX.world.level.ServerLevelAccessor",
            "XXX.world.level.SpawnData",
            "XXX.world.level.TickList",
            "XXX.world.level.TickPriority",
            "XXX.level.biome.AmbientAdditionsSettings",
            "XXX.level.biome.AmbientParticleSettings",
            "XXX.level.biome.Biome$1",
            "XXX.level.biome.Biome$BiomeCategory",
            "XXX.level.biome.Biome$ClimateSettings",
            "XXX.level.biome.Biome$TemperatureModifier",
            "XXX.level.biome.Biome$TemperatureModifier$2",
            "XXX.level.biome.BiomeGenerationSettings$1",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.BiomeSpecialEffects$1",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$2",
            "XXX.level.biome.BiomeZoomer",
            "XXX.level.biome.CheckerboardColumnBiomeSource",
            "XXX.level.biome.FuzzyOffsetBiomeZoomer",
            "XXX.level.biome.MobSpawnSettings",
            "XXX.level.biome.MobSpawnSettings$Builder",
            "XXX.level.biome.MobSpawnSettings$SpawnerData",
            "XXX.level.biome.MultiNoiseBiomeSource$1",
            "XXX.level.biome.MultiNoiseBiomeSource$Preset",
            "XXX.level.biome.NearestNeighborBiomeZoomer",
            "XXX.level.biome.TheEndBiomeSource",
            "XXX.level.block.AbstractBannerBlock",
            "XXX.level.block.AbstractCauldronBlock",
            "XXX.level.block.AbstractFurnaceBlock",
            "XXX.level.block.AbstractSkullBlock",
            "XXX.level.block.AmethystBlock",
            "XXX.level.block.AmethystClusterBlock$1",
            "XXX.level.block.BushBlock",
            "XXX.level.block.ButtonBlock$1",
            "XXX.level.block.CakeBlock",
            "XXX.level.block.CandleBlock",
            "XXX.level.block.CarrotBlock",
            "XXX.level.block.CarvedPumpkinBlock",
            "XXX.level.block.ChainBlock",
            "XXX.level.block.ChangeOverTimeBlock",
            "XXX.level.block.ChangeOverTimeSlabBlock",
            "XXX.level.block.ChestBlock",
            "XXX.level.block.ChestBlock$2",
            "XXX.level.block.ChestBlock$3",
            "XXX.level.block.ChorusFlowerBlock",
            "XXX.level.block.CocoaBlock",
            "XXX.level.block.CommandBlock",
            "XXX.level.block.ComposterBlock",
            "XXX.level.block.ComposterBlock$InputContainer",
            "XXX.level.block.ConcretePowderBlock",
            "XXX.level.block.CoralBlock",
            "XXX.level.block.CoralPlantBlock",
            "XXX.level.block.CraftingTableBlock",
            "XXX.level.block.CrossCollisionBlock",
            "XXX.level.block.CryingObsidianBlock",
            "XXX.level.block.DeadBushBlock",
            "XXX.level.block.DetectorRailBlock$1",
            "XXX.level.block.DirectionalBlock",
            "XXX.level.block.EntityBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock$1",
            "XXX.level.block.GameMasterBlock",
            "XXX.level.block.GlazedTerracottaBlock",
            "XXX.level.block.GrindstoneBlock",
            "XXX.level.block.GrowingPlantBlock",
            "XXX.level.block.GrowingPlantHeadBlock",
            "XXX.level.block.HayBlock",
            "XXX.level.block.HopperBlock",
            "XXX.level.block.HorizontalDirectionalBlock",
            "XXX.level.block.IceBlock",
            "XXX.level.block.IronBarsBlock",
            "XXX.level.block.JukeboxBlock",
            "XXX.level.block.KelpPlantBlock",
            "XXX.level.block.LadderBlock$1",
            "XXX.level.block.LavaCauldronBlock",
            "XXX.level.block.LeavesBlock",
            "XXX.level.block.LecternBlock$1",
            "XXX.level.block.LeverBlock",
            "XXX.level.block.LightningRodBlock",
            "XXX.level.block.MultifaceBlock",
            "XXX.level.block.MyceliumBlock",
            "XXX.level.block.NetherPortalBlock$1",
            "XXX.level.block.NetherVines",
            "XXX.level.block.NetherrackBlock",
            "XXX.level.block.NyliumBlock",
            "XXX.level.block.OreBlock",
            "XXX.level.block.PlayerHeadBlock",
            "XXX.level.block.PointedDripstoneBlock",
            "XXX.level.block.PowderSnowBlock",
            "XXX.level.block.PoweredRailBlock",
            "XXX.level.block.PressurePlateBlock",
            "XXX.level.block.PressurePlateBlock$Sensitivity",
            "XXX.level.block.RailBlock",
            "XXX.level.block.RailState",
            "XXX.level.block.RedStoneOreBlock",
            "XXX.level.block.RedStoneWireBlock$1",
            "XXX.level.block.RedstoneTorchBlock",
            "XXX.level.block.RedstoneWallTorchBlock",
            "XXX.level.block.RepeaterBlock",
            "XXX.level.block.RespawnAnchorBlock$1",
            "XXX.level.block.RodBlock$1",
            "XXX.level.block.RotatedPillarBlock",
            "XXX.level.block.Rotation",
            "XXX.level.block.SandBlock",
            "XXX.level.block.ScaffoldingBlock",
            "XXX.level.block.TntBlock",
            "XXX.level.block.TrapDoorBlock",
            "XXX.level.block.TrappedChestBlock",
            "XXX.level.block.TripWireBlock$1",
            "XXX.level.block.TripWireHookBlock$1",
            "XXX.level.block.TwistingVinesBlock",
            "XXX.level.block.VineBlock",
            "XXX.level.block.WallBannerBlock",
            "XXX.level.block.WallBlock$1",
            "XXX.level.block.WallSkullBlock",
            "XXX.level.block.WaterlilyBlock",
            "XXX.level.block.WeepingVinesBlock",
            "XXX.level.block.WeightedPressurePlateBlock",
            "XXX.level.block.WitherRoseBlock",
            "XXX.level.block.WitherWallSkullBlock",
            "XXX.level.block.WoolCarpetBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity$1",
            "XXX.block.entity.BannerPattern",
            "XXX.block.entity.BarrelBlockEntity",
            "XXX.block.entity.BellBlockEntity$ResonationEndAction",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.ChestLidController",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.ContainerOpenersCounter",
            "XXX.block.entity.EnderChestBlockEntity$1",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.SculkSensorBlockEntity",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.StateHolder$1",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.state.properties.BambooLeaves",
            "XXX.state.properties.BellAttachType",
            "XXX.state.properties.BooleanProperty",
            "XXX.state.properties.ComparatorMode",
            "XXX.state.properties.DoorHingeSide",
            "XXX.state.properties.DripstoneThickness",
            "XXX.state.properties.SlabType",
            "XXX.state.properties.StructureMode",
            "XXX.state.properties.WoodType",
            "XXX.level.border.BorderChangeListener",
            "XXX.level.border.BorderStatus",
            "XXX.level.border.WorldBorder$1",
            "XXX.level.border.WorldBorder$MovingBorderExtent",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.LevelChunk$BoundTickingBlockEntity",
            "XXX.level.chunk.LevelChunk$RebindableTickingBlockEntityWrapper",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.chunk.UpgradeData$1",
            "XXX.level.chunk.UpgradeData$BlockFixers",
            "XXX.level.chunk.UpgradeData$BlockFixers$2",
            "XXX.level.chunk.UpgradeData$BlockFixers$4",
            "XXX.level.chunk.package-info",
            "XXX.chunk.storage.ChunkStorage",
            "XXX.chunk.storage.OldChunkStorage$1",
            "XXX.chunk.storage.RegionBitmap",
            "XXX.chunk.storage.RegionFile$ChunkBuffer",
            "XXX.chunk.storage.RegionFileStorage",
            "XXX.chunk.storage.RegionFileVersion$StreamWrapper",
            "XXX.chunk.storage.package-info",
            "XXX.level.dimension.LevelStem",
            "XXX.dimension.end.DragonRespawnAnimation$1",
            "XXX.dimension.end.DragonRespawnAnimation$3",
            "XXX.dimension.end.DragonRespawnAnimation$5",
            "XXX.dimension.end.package-info",
            "XXX.level.entity.ChunkEntities",
            "XXX.level.entity.EntityAccess",
            "XXX.level.entity.EntityInLevelCallback$1",
            "XXX.level.entity.EntityPersistentStorage",
            "XXX.level.entity.EntitySectionStorage",
            "XXX.level.entity.EntityTypeTest",
            "XXX.level.entity.LevelCallback",
            "XXX.level.entity.LevelEntityGetterAdapter",
            "XXX.level.entity.PersistentEntitySectionManager$1",
            "XXX.level.entity.PersistentEntitySectionManager$ChunkLoadStatus",
            "XXX.level.entity.TransientEntitySectionManager$1",
            "XXX.level.entity.Visibility",
            "XXX.level.gameevent.BlockPositionSource",
            "XXX.level.gameevent.EntityPositionSource",
            "XXX.level.gameevent.EuclideanGameEventDispatcher",
            "XXX.level.gameevent.GameEventDispatcher",
            "XXX.level.gameevent.GameEventListener",
            "XXX.level.gameevent.PositionSource",
            "XXX.level.gameevent.package-info",
            "XXX.gameevent.vibrations.VibrationListener$VibrationListenerConfig",
            "XXX.gameevent.vibrations.package-info",
            "XXX.level.levelgen.Column$Line",
            "XXX.level.levelgen.Column$Ray",
            "XXX.level.levelgen.GeodeCrackSettings",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NoiseGeneratorSettings",
            "XXX.level.levelgen.NoiseSettings",
            "XXX.level.levelgen.PatrolSpawner",
            "XXX.level.levelgen.StructureSettings",
            "XXX.level.levelgen.WorldgenRandom",
            "XXX.levelgen.carver.CarverConfiguration",
            "XXX.levelgen.carver.ConfiguredWorldCarver",
            "XXX.levelgen.carver.NoneCarverConfiguration",
            "XXX.levelgen.carver.UnderwaterCaveWorldCarver",
            "XXX.levelgen.carver.package-info",
            "XXX.levelgen.feature.AbstractHugeMushroomFeature",
            "XXX.levelgen.feature.BasaltColumnsFeature",
            "XXX.levelgen.feature.BaseDiskFeature",
            "XXX.levelgen.feature.BlockBlobFeature",
            "XXX.levelgen.feature.BlueIceFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature",
            "XXX.levelgen.feature.ChorusPlantFeature",
            "XXX.levelgen.feature.ConfiguredStructureFeature",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.DefaultFlowerFeature",
            "XXX.levelgen.feature.DesertPyramidFeature",
            "XXX.levelgen.feature.DesertWellFeature",
            "XXX.levelgen.feature.DripstoneClusterFeature",
            "XXX.levelgen.feature.EndCityFeature",
            "XXX.levelgen.feature.EndGatewayFeature",
            "XXX.levelgen.feature.EndPodiumFeature",
            "XXX.levelgen.feature.FillLayerFeature",
            "XXX.levelgen.feature.GeodeFeature",
            "XXX.levelgen.feature.GlowstoneFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JigsawFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.levelgen.feature.LargeDripstoneFeature",
            "XXX.levelgen.feature.LargeDripstoneFeature$LargeDripstone",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoSurfaceOreFeature",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.levelgen.feature.ReplaceBlobsFeature",
            "XXX.levelgen.feature.RuinedPortalFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$Type",
            "XXX.levelgen.feature.SeagrassFeature",
            "XXX.levelgen.feature.ShipwreckFeature$FeatureStart",
            "XXX.levelgen.feature.SimpleRandomSelectorFeature",
            "XXX.levelgen.feature.SnowAndFreezeFeature",
            "XXX.levelgen.feature.SpikeFeature$1",
            "XXX.levelgen.feature.SpikeFeature$SpikeCacheLoader",
            "XXX.levelgen.feature.StrongholdFeature",
            "XXX.levelgen.feature.StructureFeature",
            "XXX.levelgen.feature.StructurePieceType",
            "XXX.levelgen.feature.SwamplandHutFeature$FeatureStart",
            "XXX.levelgen.feature.TwistingVinesFeature",
            "XXX.levelgen.feature.VinesFeature",
            "XXX.levelgen.feature.WeepingVinesFeature",
            "XXX.levelgen.feature.WoodlandMansionFeature",
            "XXX.feature.blockplacers.BlockPlacer",
            "XXX.feature.blockplacers.ColumnPlacer",
            "XXX.feature.blockplacers.SimpleBlockPlacer",
            "XXX.feature.configurations.BlockPileConfiguration",
            "XXX.feature.configurations.ColumnFeatureConfiguration",
            "XXX.feature.configurations.DecoratedFeatureConfiguration",
            "XXX.feature.configurations.DeltaFeatureConfiguration",
            "XXX.feature.configurations.DripstoneClusterConfiguration",
            "XXX.feature.configurations.GlowLichenConfiguration",
            "XXX.feature.configurations.LayerConfiguration",
            "XXX.feature.configurations.NoiseDependantDecoratorConfiguration",
            "XXX.feature.configurations.NoneFeatureConfiguration",
            "XXX.feature.configurations.OreConfiguration",
            "XXX.feature.configurations.ProbabilityFeatureConfiguration",
            "XXX.feature.configurations.RandomFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration$1",
            "XXX.feature.configurations.RangeDecoratorConfiguration",
            "XXX.feature.configurations.ReplaceSphereConfiguration",
            "XXX.feature.configurations.ShipwreckConfiguration",
            "XXX.feature.configurations.SimpleRandomFeatureConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacer$FoliageAttachment",
            "XXX.feature.foliageplacers.MegaJungleFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.flat.package-info",
            "XXX.levelgen.placement.BaseHeightmapDecorator",
            "XXX.levelgen.placement.CarvingMaskDecorator",
            "XXX.levelgen.placement.ChanceDecorator",
            "XXX.levelgen.placement.ConfiguredDecorator",
            "XXX.levelgen.placement.CountNoiseDecorator",
            "XXX.levelgen.placement.DarkOakTreePlacementDecorator",
            "XXX.levelgen.placement.DecoratedDecoratorConfiguration",
            "XXX.levelgen.placement.DepthAverageConfigation",
            "XXX.levelgen.placement.EdgeDecorator",
            "XXX.levelgen.placement.EndGatewayPlacementDecorator",
            "XXX.levelgen.placement.FeatureDecorator",
            "XXX.levelgen.placement.HeightMapWorldSurfaceDecorator",
            "XXX.levelgen.placement.HeightmapDoubleDecorator",
            "XXX.levelgen.placement.LakeLavaPlacementDecorator",
            "XXX.levelgen.placement.NoiseBasedDecorator",
            "XXX.levelgen.placement.NopePlacementDecorator",
            "XXX.levelgen.placement.SimpleFeatureDecorator",
            "XXX.levelgen.placement.SquareDecorator",
            "XXX.levelgen.placement.VeryBiasedRangeDecorator",
            "XXX.placement.nether.FireDecorator",
            "XXX.placement.nether.MagmaDecorator",
            "XXX.levelgen.placement.package-info",
            "XXX.levelgen.structure.BoundingBox",
            "XXX.levelgen.structure.BuriedTreasurePieces",
            "XXX.levelgen.structure.DesertPyramidPiece",
            "XXX.levelgen.structure.EndCityPieces$1",
            "XXX.levelgen.structure.EndCityPieces$3",
            "XXX.levelgen.structure.EndCityPieces$EndCityPiece",
            "XXX.levelgen.structure.IglooPieces",
            "XXX.levelgen.structure.JunglePyramidPiece",
            "XXX.levelgen.structure.JunglePyramidPiece$MossStoneSelector",
            "XXX.levelgen.structure.MineShaftPieces",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftCorridor",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftPiece",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftStairs",
            "XXX.levelgen.structure.NetherBridgePieces$1",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeEndFiller",
            "XXX.levelgen.structure.NetherBridgePieces$CastleCorridorStairsPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleEntrance",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorLeftTurnPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorRightTurnPiece",
            "XXX.levelgen.structure.NetherBridgePieces$MonsterThrone",
            "XXX.levelgen.structure.NetherBridgePieces$PieceWeight",
            "XXX.levelgen.structure.NetherBridgePieces$StairsRoom",
            "XXX.levelgen.structure.NetherFossilFeature",
            "XXX.levelgen.structure.NetherFossilPieces",
            "XXX.levelgen.structure.OceanMonumentPieces",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleTopRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$MonumentRoomFitter",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentPenthouse",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentWingRoom",
            "XXX.levelgen.structure.OceanRuinFeature",
            "XXX.levelgen.structure.OceanRuinFeature$Type",
            "XXX.levelgen.structure.OceanRuinPieces$OceanRuinPiece",
            "XXX.levelgen.structure.RuinedPortalPiece",
            "XXX.levelgen.structure.RuinedPortalPiece$VerticalPlacement",
            "XXX.levelgen.structure.ShipwreckPieces",
            "XXX.levelgen.structure.StrongholdPieces",
            "XXX.levelgen.structure.StrongholdPieces$2",
            "XXX.levelgen.structure.StrongholdPieces$ChestCorridor",
            "XXX.levelgen.structure.StrongholdPieces$FiveCrossing",
            "XXX.levelgen.structure.StrongholdPieces$Library",
            "XXX.levelgen.structure.StrongholdPieces$PortalRoom",
            "XXX.levelgen.structure.StrongholdPieces$RightTurn",
            "XXX.levelgen.structure.StrongholdPieces$SmoothStoneSelector",
            "XXX.levelgen.structure.StrongholdPieces$StartPiece",
            "XXX.levelgen.structure.StrongholdPieces$StraightStairsDown",
            "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType",
            "XXX.levelgen.structure.StructureFeatureIndexSavedData",
            "XXX.levelgen.structure.StructurePiece$1",
            "XXX.levelgen.structure.StructureStart",
            "XXX.levelgen.structure.SwamplandHutPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LavaSubmergedBlockProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.Fluids",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.saveddata.maps.MapItemSavedData$1",
            "XXX.saveddata.maps.MapItemSavedData$MapPatch",
            "XXX.level.saveddata.package-info",
            "XXX.level.storage.CommandStorage$1",
            "XXX.level.storage.LevelSummary$BackupStatus",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.GsonAdapterFactory",
            "XXX.storage.loot.GsonAdapterFactory$Builder",
            "XXX.storage.loot.GsonAdapterFactory$JsonAdapter",
            "XXX.storage.loot.IntRange$1",
            "XXX.storage.loot.IntRange$IntLimiter",
            "XXX.storage.loot.ItemModifierManager",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.PredicateManager$CompositePredicate",
            "XXX.storage.loot.SerializerType",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolEntryType",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.SetBannerPatternFunction$1",
            "XXX.loot.functions.SetBannerPatternFunction$Serializer",
            "XXX.loot.functions.SetEnchantmentsFunction",
            "XXX.loot.functions.SetEnchantmentsFunction$Builder",
            "XXX.loot.predicates.ValueCheckCondition",
            "XXX.loot.predicates.ValueCheckCondition$Serializer",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.providers.nbt.ContextNbtProvider",
            "XXX.providers.nbt.ContextNbtProvider$2",
            "XXX.providers.nbt.ContextNbtProvider$InlineSerializer",
            "XXX.providers.nbt.LootNbtProviderType",
            "XXX.providers.nbt.NbtProviders",
            "XXX.providers.nbt.StorageNbtProvider$1",
            "XXX.providers.nbt.package-info",
            "XXX.providers.number.BinomialDistributionGenerator$1",
            "XXX.providers.number.ConstantValue",
            "XXX.providers.number.ConstantValue$InlineSerializer",
            "XXX.providers.number.LootNumberProviderType",
            "XXX.providers.number.NumberProviders",
            "XXX.providers.number.ScoreboardValue$1",
            "XXX.providers.number.UniformGenerator",
            "XXX.providers.number.UniformGenerator$Serializer",
            "XXX.providers.score.ContextScoreboardNameProvider",
            "XXX.providers.score.ContextScoreboardNameProvider$InlineSerializer",
            "XXX.providers.score.FixedScoreboardNameProvider",
            "XXX.providers.score.FixedScoreboardNameProvider$Serializer",
            "XXX.providers.score.ScoreboardNameProvider",
            "XXX.providers.score.package-info",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "net.minecraft.DetectedVersion \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.advancements.critereon.BeeNestDestroyedTrigger \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.advancements.critereon.BlockPredicate \u001b[2;32m+2M\u001b[0m",
          "XXX.advancements.critereon.BredAnimalsTrigger \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ConstructBeaconTrigger \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.advancements.critereon.FluidPredicate \u001b[2;32m+2M\u001b[0m",
          "XXX.advancements.critereon.ItemPredicate \u001b[2;32m+2M\u001b[0m",
          "XXX.minecraft.commands.CommandFunction$Entry \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.core.BlockMath \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.minecraft.core.BlockSource \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.core.Direction \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.core.Direction8 \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-8P\u001b[0m",
          "XXX.core.particles.DustParticleOptions \u001b[2;32m+3M\u001b[0m \u001b[2;31m-11M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.data.loot.BlockLoot \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.data.models.BlockModelGenerators \u001b[2;32m+75M\u001b[0m \u001b[2;31m-52M\u001b[0m | \u001b[2;32m+5P\u001b[0m",
          "XXX.models.model.TextureMapping \u001b[2;32m+2M\u001b[0m",
          "XXX.data.structures.StructureUpdater \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.nbt.ByteArrayTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.ByteTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.nbt.CompoundTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;31m-2P\u001b[0m",
          "XXX.minecraft.nbt.DoubleTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.nbt.EndTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.FloatTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.nbt.IntArrayTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.IntTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.nbt.NbtUtils \u001b[2;32m+20M\u001b[0m | \u001b[2;32m+4P\u001b[0m",
          "XXX.minecraft.nbt.ShortTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.network.Connection \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.network.FriendlyByteBuf \u001b[2;32m+2M\u001b[0m",
          "XXX.network.chat.CommonComponents \u001b[2;32m+1M\u001b[0m",
          "XXX.server.dedicated.DedicatedPlayerList \u001b[2;31m-2M\u001b[0m",
          "XXX.server.level.ChunkHolder \u001b[2;32m+8M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.server.packs.PackType \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.server.packs.VanillaPackResources \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.packs.repository.Pack \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.packs.repository.PackRepository \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.server.rcon.RconConsoleSource \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.rcon.thread.GenericThread \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.sounds.SoundSource \u001b[2;31m-2M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.tags.EntityTypeTags \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+3P\u001b[0m",
          "XXX.minecraft.tags.TagContainer$1 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.minecraft.tags.TagManager \u001b[2;32m+10M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.minecraft.util.Mth \u001b[2;32m+7M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.datafix.fixes.References \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.datafix.schemas.V1460 \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.world.SimpleContainer \u001b[2;31m-1M\u001b[0m",
          "XXX.world.entity.AreaEffectCloud \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.world.entity.FlyingMob \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.control.MoveControl \u001b[2;31m-1M\u001b[0m",
          "XXX.ai.goal.LookAtPlayerGoal \u001b[2;32m+1M\u001b[0m",
          "XXX.goal.target.NearestAttackableTargetGoal \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.memory.MemoryModuleType \u001b[2;32m+4P\u001b[0m",
          "XXX.ai.util.RandomPos \u001b[2;32m+6M\u001b[0m \u001b[2;31m-14M\u001b[0m",
          "XXX.village.poi.PoiType \u001b[2;32m+1P\u001b[0m",
          "XXX.entity.animal.AbstractGolem \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Bee \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "XXX.entity.animal.Fox \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.MushroomCow \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.entity.animal.Ocelot \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.animal.Panda$PandaLookAtPlayerGoal \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.animal.Parrot \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Pig \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.entity.animal.Rabbit \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.entity.animal.Squid \u001b[2;32m+2M\u001b[0m",
          "XXX.entity.animal.Turtle \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.animal.horse.AbstractHorse \u001b[2;32m+8M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.entity.boss.EnderDragonPart \u001b[2;32m+1M\u001b[0m",
          "XXX.boss.enderdragon.EnderDragon \u001b[2;31m-1M\u001b[0m",
          "XXX.boss.wither.WitherBoss \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.decoration.ItemFrame$1 \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.vehicle.Boat \u001b[2;32m+2M\u001b[0m",
          "XXX.entity.vehicle.DismountHelper \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.vehicle.MinecartHopper \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.vehicle.MinecartSpawner$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.world.inventory.AbstractContainerMenu \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.item.BucketItem \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.FireworkRocketItem \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.PickaxeItem \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.world.item.SpawnEggItem \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.world.level.EntityGetter \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.level.GameRules \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.world.level.GameType \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.AttachedStemBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.BarrelBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BaseEntityBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.BasePressurePlateBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BeaconBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.Block \u001b[2;32m+3M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.level.block.Blocks \u001b[2;32m+25M\u001b[0m \u001b[2;31m-15M\u001b[0m | \u001b[2;32m+82P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.BrewingStandBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BucketPickup \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.level.block.DispenserBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EnchantmentTableBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EndPortalBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EndRodBlock \u001b[2;31m-5M\u001b[0m | \u001b[2;31m-3P\u001b[0m",
          "XXX.level.block.FallingBlock \u001b[2;31m-2M\u001b[0m",
          "XXX.level.block.FenceBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FlowerPotBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.GrassBlock \u001b[2;32m+1M\u001b[0m",
          "XXX.level.block.Mirror \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.ShulkerBoxBlock \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SignBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.SpawnerBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.StemBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.StructureBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.BaseContainerBlockEntity \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.entity.BedBlockEntity \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.entity.BlockEntityType \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.block.entity.DispenserBlockEntity \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.block.entity.EnchantmentTableBlockEntity \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.block.entity.SignBlockEntity \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.entity.SmokerBlockEntity \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.SpawnerBlockEntity$1 \u001b[2;32m+2M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.chunk.LevelChunk \u001b[2;32m+29M\u001b[0m \u001b[2;31m-21M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.chunk.storage.IOWorker \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.chunk.storage.IOWorker$Priority \u001b[2;32m+3P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.level.levelgen.Decoratable \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.material.LavaFluid \u001b[2;32m+1M\u001b[0m",
          "XXX.level.storage.DerivedLevelData \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.storage.LevelData \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.loot.functions.LimitCount \u001b[2;32m+6M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.LootItemFunctions \u001b[2;32m+2P\u001b[0m",
          "XXX.loot.functions.SetAttributesFunction$Modifier \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.SetItemCountFunction \u001b[2;32m+9M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.predicates.LootItemConditions \u001b[2;32m+1P\u001b[0m",
          "XXX.loot.predicates.TimeCheck \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.predicates.TimeCheck$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.phys.shapes.DiscreteCubeMerger \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.phys.shapes.EntityCollisionContext \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.phys.shapes.IdenticalMerger \u001b[2;32m+1M\u001b[0m",
          "XXX.world.scores.Score \u001b[2;31m-1M\u001b[0m",
          "XXX.world.scores.ScoreboardSaveData \u001b[2;32m+2M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;31m-2P\u001b[0m",
          "XXX.world.scores.Team$CollisionRule \u001b[2;31m-1M\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.DetectedVersion",
        "differences": {
          "added": [
            "int getPackVersion()"
          ],
          "removed": [
            "int getPackVersion(PackType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BeeNestDestroyedTrigger",
        "differences": {
          "added": [
            "void trigger(ServerPlayer,Block,ItemStack,int)",
            "boolean lambda$trigger$1(Block,ItemStack,int,BeeNestDestroyedTrigger$TriggerInstance)"
          ],
          "removed": [
            "void trigger(ServerPlayer,BlockState,ItemStack,int)",
            "boolean lambda$trigger$1(BlockState,ItemStack,int,BeeNestDestroyedTrigger$TriggerInstance)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BlockPredicate",
        "differences": {
          "added": [],
          "removed": [
            "IllegalStateException lambda$serializeToJson$1()",
            "JsonSyntaxException lambda$fromJson$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BredAnimalsTrigger",
        "differences": {
          "added": [
            "void trigger(ServerPlayer,Animal,Animal,AgableMob)"
          ],
          "removed": [
            "void trigger(ServerPlayer,Animal,Animal,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ConstructBeaconTrigger",
        "differences": {
          "added": [
            "void trigger(ServerPlayer,BeaconBlockEntity)",
            "boolean lambda$trigger$0(BeaconBlockEntity,ConstructBeaconTrigger$TriggerInstance)"
          ],
          "removed": [
            "void trigger(ServerPlayer,int)",
            "boolean lambda$trigger$0(int,ConstructBeaconTrigger$TriggerInstance)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.FluidPredicate",
        "differences": {
          "added": [],
          "removed": [
            "IllegalStateException lambda$serializeToJson$1()",
            "JsonSyntaxException lambda$fromJson$0(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ItemPredicate",
        "differences": {
          "added": [],
          "removed": [
            "IllegalStateException lambda$serializeToJson$3()",
            "JsonSyntaxException lambda$fromJson$2(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction",
        "differences": {
          "added": [],
          "removed": [
            "Direction getFacingAxis(Entity,Direction$Axis)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.Direction8",
        "differences": {
          "added": [
            "int getSideMask(boolean,boolean,boolean,boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.particles.DustParticleOptions",
        "differences": {
          "added": [
            "void <init>(float,float,float,float)",
            "void writeToNetwork(FriendlyByteBuf)",
            "String writeToString()",
            "float getR()",
            "float getG()",
            "float getB()",
            "float getScale()",
            "App lambda$static$4(RecordCodecBuilder$Instance)",
            "Float lambda$null$3(DustParticleOptions)",
            "Float lambda$null$2(DustParticleOptions)",
            "Float lambda$null$0(DustParticleOptions)"
          ],
          "removed": [
            "void <init>(Vector3f,float)",
            "App lambda$static$2(RecordCodecBuilder$Instance)",
            "Vector3f lambda$null$0(DustParticleOptions)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.loot.BlockLoot",
        "differences": {
          "added": [
            "LootTable$Builder createSingleItemTable(ItemLike,RandomIntGenerator)",
            "LootTable$Builder createSingleItemTableWithSilkTouch(Block,ItemLike,RandomIntGenerator)",
            "LootTable$Builder lambda$dropPottedContents$73(Block)"
          ],
          "removed": [
            "LootTable$Builder createSingleItemTable(ItemLike,NumberProvider)",
            "LootTable$Builder createSingleItemTableWithSilkTouch(Block,ItemLike,NumberProvider)",
            "LootTable$Builder createCandleDrops(Block)",
            "LootTable$Builder createCandleCakeDrops(Block)",
            "LootTable$Builder lambda$dropPottedContents$74(Block)",
            "LootTable$Builder lambda$accept$73(Block)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.BlockModelGenerators",
        "differences": {
          "added": [
            "BlockModelGenerators$BlockFamilyProvider family(Block,TexturedModel)",
            "BlockModelGenerators$BlockFamilyProvider family(Block,TexturedModel$Provider)",
            "BlockModelGenerators$BlockFamilyProvider family(TextureMapping)",
            "void createCauldron()",
            "void createGrassPath()",
            "void createVine()",
            "void lambda$run$36(SpawnEggItem)",
            "void lambda$run$35(TextureMapping)",
            "void lambda$run$34(TextureMapping)",
            "ResourceLocation lambda$run$33(TextureMapping)",
            "void lambda$run$32(TextureMapping)",
            "Variant lambda$createJigsaw$31(FrontAndTop)",
            "Variant lambda$createRespawnAnchor$30(ResourceLocation[],Integer)",
            "List lambda$createTurtleEgg$29(Integer,Integer)",
            "Variant lambda$createTripwireHook$28(Boolean,Boolean)",
            "Variant lambda$createSweetBerryBush$27(Integer)",
            "Variant lambda$createStructureBlock$26(StructureMode)",
            "Variant lambda$createSnowBlocks$25(ResourceLocation,Integer)",
            "Variant lambda$createRepeater$24(Integer,Boolean,Boolean)",
            "void lambda$createGrassBlocks$23(ResourceLocation,TextureMapping)",
            "void lambda$createGrassBlocks$22(ResourceLocation,TextureMapping)",
            "Variant lambda$createSoulFire$20(Variant)",
            "Variant lambda$createSoulFire$19(Variant)",
            "Variant lambda$createSoulFire$18(Variant)",
            "Variant lambda$createSoulFire$17(Variant)",
            "Variant lambda$createFire$14(Variant)",
            "Variant lambda$createFire$13(Variant)",
            "Variant lambda$createFire$12(Variant)",
            "Variant lambda$createFire$11(Variant)",
            "Variant lambda$wrapModels$10(ResourceLocation)",
            "TextureMapping lambda$createChorusFlower$9(TextureMapping,ResourceLocation)",
            "void lambda$createFurnace$8(ResourceLocation,TextureMapping)",
            "Variant lambda$createCropBlock$7(int[],Int2ObjectMap,Block,Integer)",
            "ResourceLocation lambda$null$6(Block,int,int)",
            "Variant lambda$createEmptyOrFullDispatch$5(Comparable,Variant,Variant,Comparable)",
            "void lambda$createBarrel$4(ResourceLocation,TextureMapping)",
            "Variant lambda$createBambooModels$3(String,int)",
            "TextureMapping lambda$createCommandBlock$2(TextureMapping,ResourceLocation)",
            "Variant lambda$createActiveRail$1(ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,Boolean,RailShape)",
            "Variant lambda$createStems$0(Block,TextureMapping,Integer)",
            "MultiVariantGenerator access$100(Block,ResourceLocation)",
            "Consumer access$200(BlockModelGenerators)",
            "BlockStateGenerator access$300(Block,ResourceLocation,ResourceLocation)",
            "void access$400(BlockModelGenerators,Block,ResourceLocation)",
            "BlockStateGenerator access$500(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$700(Block,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation)",
            "void access$900(BlockModelGenerators,Item)",
            "void access$1000(BlockModelGenerators,Block)",
            "BlockStateGenerator access$1100(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$1200(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$1300(Block,ResourceLocation)",
            "BlockStateGenerator access$1400(Block,ResourceLocation,ResourceLocation)"
          ],
          "removed": [
            "void createCauldrons()",
            "void createAmethystCluster(Block)",
            "void createAmethystClusters()",
            "void createPointedDripstone()",
            "Variant createPointedDripstoneVariant(Direction,DripstoneThickness)",
            "void createDirtPath()",
            "void createSculkSensor()",
            "void createMultiface(Block)",
            "void createPetrifiedOakSlab()",
            "void createCandleAndCandleCake(Block,Block)",
            "void lambda$run$47(SpawnEggItem)",
            "void lambda$run$46(TextureMapping)",
            "void lambda$run$45(BlockFamily)",
            "Variant lambda$createJigsaw$44(FrontAndTop)",
            "Variant lambda$createRespawnAnchor$43(ResourceLocation[],Integer)",
            "void lambda$createMultiface$42(Block,MultiPartGenerator,ResourceLocation,BooleanProperty,Function)",
            "void lambda$static$41(HashMap)",
            "Variant lambda$null$40(ResourceLocation)",
            "Variant lambda$null$39(ResourceLocation)",
            "Variant lambda$null$38(ResourceLocation)",
            "Variant lambda$null$37(ResourceLocation)",
            "Variant lambda$null$36(ResourceLocation)",
            "Variant lambda$null$35(ResourceLocation)",
            "List lambda$createTurtleEgg$34(Integer,Integer)",
            "Variant lambda$createTripwireHook$33(Boolean,Boolean)",
            "Variant lambda$createSweetBerryBush$32(Integer)",
            "Variant lambda$createStructureBlock$31(StructureMode)",
            "Variant lambda$createSnowBlocks$30(ResourceLocation,Integer)",
            "Variant lambda$createRepeater$29(Integer,Boolean,Boolean)",
            "Variant lambda$createSculkSensor$28(ResourceLocation,ResourceLocation,SculkSensorPhase)",
            "void lambda$createGrassBlocks$27(ResourceLocation,TextureMapping)",
            "void lambda$createGrassBlocks$26(ResourceLocation,TextureMapping)",
            "Variant lambda$createSoulFire$25(Variant)",
            "Variant lambda$createSoulFire$24(Variant)",
            "Variant lambda$createSoulFire$23(Variant)",
            "Variant lambda$createSoulFire$22(Variant)",
            "Variant lambda$createFire$20(Variant)",
            "Variant lambda$createFire$19(Variant)",
            "Variant lambda$createFire$18(Variant)",
            "Variant lambda$createFire$17(Variant)",
            "Variant lambda$wrapModels$14(ResourceLocation)",
            "TextureMapping lambda$createChorusFlower$13(TextureMapping,ResourceLocation)",
            "void lambda$createFurnace$12(ResourceLocation,TextureMapping)",
            "Variant lambda$createCropBlock$11(int[],Int2ObjectMap,Block,Integer)",
            "ResourceLocation lambda$null$10(Block,int,int)",
            "Variant lambda$createEmptyOrFullDispatch$9(Comparable,Variant,Variant,Comparable)",
            "void lambda$createBarrel$8(ResourceLocation,TextureMapping)",
            "Variant lambda$createBambooModels$7(String,int)",
            "TextureMapping lambda$createCommandBlock$6(TextureMapping,ResourceLocation)",
            "Variant lambda$createActiveRail$5(ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation,Boolean,RailShape)",
            "Variant lambda$createStems$4(Block,TextureMapping,Integer)",
            "void lambda$static$3(Object,Block)",
            "void lambda$static$2(Object,Block)",
            "void lambda$new$1(TextureMapping)",
            "void lambda$new$0(TextureMapping)",
            "List access$100(BlockModelGenerators)",
            "MultiVariantGenerator access$200(Block,ResourceLocation,ResourceLocation)",
            "Consumer access$300(BlockModelGenerators)",
            "MultiVariantGenerator access$400(Block,ResourceLocation)",
            "void access$500(BlockModelGenerators,Block,ResourceLocation)",
            "BlockStateGenerator access$700(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$900(Block,ResourceLocation,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$1000(Block,ResourceLocation,ResourceLocation)",
            "void access$1100(BlockModelGenerators,Item)",
            "void access$1200(BlockModelGenerators,Block)",
            "BlockStateGenerator access$1300(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "BlockStateGenerator access$1400(Block,ResourceLocation,ResourceLocation,ResourceLocation)",
            "void access$1500(BlockModelGenerators,Block)",
            "List access$1600(BlockModelGenerators)",
            "void access$1700(BlockModelGenerators,Block)",
            "void access$1800(BlockModelGenerators,Block)",
            "Map access$1900()",
            "BlockStateGenerator access$2000(Block,ResourceLocation)",
            "BlockStateGenerator access$2100(Block,ResourceLocation,ResourceLocation)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.model.TextureMapping",
        "differences": {
          "added": [],
          "removed": [
            "TextureMapping candleCake(Block)",
            "TextureMapping cauldron(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.structures.StructureUpdater",
        "differences": {
          "added": [],
          "removed": [
            "CompoundTag update(String,CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.ByteArrayTag",
        "differences": {
          "added": [
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.ByteTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.CompoundTag",
        "differences": {
          "added": [
            "void stripEmptyChildren()",
            "String handleEscape(String)",
            "Component handleEscapePretty(String)",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.DoubleTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.EndTag",
        "differences": {
          "added": [
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.FloatTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.IntArrayTag",
        "differences": {
          "added": [
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.IntTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.NbtUtils",
        "differences": {
          "added": [],
          "removed": [
            "Component toPrettyComponent(Tag)",
            "String structureToSnbt(CompoundTag)",
            "CompoundTag snbtToStructure(String)",
            "CompoundTag packStructureTemplate(CompoundTag)",
            "CompoundTag unpackStructureTemplate(CompoundTag)",
            "String packBlockState(CompoundTag)",
            "CompoundTag unpackBlockState(String)",
            "void lambda$unpackBlockState$12(CompoundTag,String,String)",
            "String lambda$packBlockState$11(CompoundTag,String)",
            "ListTag lambda$unpackStructureTemplate$10(Map,CompoundTag)",
            "void lambda$packStructureTemplate$9(ListTag,CompoundTag)",
            "ListTag lambda$packStructureTemplate$8(CompoundTag)",
            "ListTag lambda$packStructureTemplate$7(CompoundTag)",
            "void lambda$packStructureTemplate$6(ListTag,ListTag,ListTag)",
            "double lambda$static$5(ListTag)",
            "double lambda$static$4(ListTag)",
            "double lambda$static$3(ListTag)",
            "int lambda$static$2(ListTag)",
            "int lambda$static$1(ListTag)",
            "int lambda$static$0(ListTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.ShortTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.Connection",
        "differences": {
          "added": [],
          "removed": [
            "ConnectionProtocol getCurrentProtocol()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.FriendlyByteBuf",
        "differences": {
          "added": [],
          "removed": [
            "BitSet readBitSet()",
            "void writeBitSet(BitSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.network.chat.CommonComponents",
        "differences": {
          "added": [],
          "removed": [
            "MutableComponent optionNameValue(Component,Component)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.DedicatedPlayerList",
        "differences": {
          "added": [
            "void blackList(GameProfile)",
            "void whiteList(GameProfile)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkHolder",
        "differences": {
          "added": [
            "void <init>(ChunkPos,int,LevelLightEngine,ChunkHolder$LevelChangeListener,ChunkHolder$PlayerProvider)",
            "void updateFutures(ChunkMap)",
            "Either lambda$updateFutures$5(ChunkMap,Either)"
          ],
          "removed": [
            "void <init>(ChunkPos,int,LevelHeightAccessor,LevelLightEngine,ChunkHolder$LevelChangeListener,ChunkHolder$PlayerProvider)",
            "void scheduleFullChunkPromotion(ChunkMap,CompletableFuture,Executor,ChunkHolder$FullChunkStatus)",
            "void demoteFullChunk(ChunkMap,ChunkHolder$FullChunkStatus)",
            "void updateFutures(ChunkMap,Executor)",
            "Either lambda$updateFutures$8(ChunkMap,Either)",
            "void lambda$scheduleFullChunkPromotion$7(CompletableFuture,Either)",
            "void lambda$null$6(CompletableFuture,LevelChunk)",
            "void lambda$scheduleFullChunkPromotion$5(ChunkMap,ChunkHolder$FullChunkStatus)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.PackType",
        "differences": {
          "added": [
            "void <init>(String,int,String)"
          ],
          "removed": [
            "void <init>(String,int,String,PackType)",
            "int getVersion(GameVersion)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.VanillaPackResources",
        "differences": {
          "added": [
            "void <init>(String[])"
          ],
          "removed": [
            "void <init>(PackMetadataSection,String[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.Pack",
        "differences": {
          "added": [
            "void <init>(String,boolean,Supplier,PackResources,PackMetadataSection,Pack$Position,PackSource)"
          ],
          "removed": [
            "void <init>(String,Component,boolean,Supplier,PackMetadataSection,PackType,Pack$Position,PackSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.PackRepository",
        "differences": {
          "added": [
            "void <init>(RepositorySource[])",
            "void lambda$discoverAvailable$0(Map,Pack)"
          ],
          "removed": [
            "void <init>(PackType,RepositorySource[])",
            "void lambda$discoverAvailable$1(Map,Pack)",
            "Pack lambda$new$0(PackType,String,Component,boolean,Supplier,PackMetadataSection,Pack$Position,PackSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.sounds.SoundSource",
        "differences": {
          "added": [
            "SoundSource byName(String)",
            "Set getNames()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.EntityTypeTags",
        "differences": {
          "added": [
            "List getWrappers()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagContainer$1",
        "differences": {
          "added": [
            "void <init>(TagCollection,TagCollection,TagCollection,TagCollection)",
            "TagCollection getBlocks()",
            "TagCollection getItems()",
            "TagCollection getFluids()",
            "TagCollection getEntityTypes()"
          ],
          "removed": [
            "void <init>(TagContainer,RegistryAccess,Map)",
            "void accept(ResourceKey,TagCollection)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagManager",
        "differences": {
          "added": [
            "void <init>()",
            "void lambda$reload$1(CompletableFuture,CompletableFuture,CompletableFuture,CompletableFuture,Void)",
            "String lambda$null$0(Map$Entry)"
          ],
          "removed": [
            "void <init>(RegistryAccess)",
            "TagManager$LoaderInfo createLoader(ResourceManager,Executor,StaticTagHelper)",
            "TagCollection lambda$createLoader$6(TagLoader,ResourceManager)",
            "void lambda$reload$5(List,Void)",
            "String lambda$null$4(Map$Entry)",
            "void lambda$null$3(TagContainer$Builder,TagManager$LoaderInfo)",
            "CompletableFuture[] lambda$reload$2(int)",
            "CompletableFuture lambda$reload$1(TagManager$LoaderInfo)",
            "void lambda$reload$0(ResourceManager,Executor,List,StaticTagHelper)",
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.Mth",
        "differences": {
          "added": [
            "int roundUp(int,int)"
          ],
          "removed": [
            "double clampedMap(double,double,double,double,double)",
            "double map(double,double,double,double,double)",
            "double wobble(double)",
            "int roundToward(int,int)",
            "int randomBetweenInclusive(Random,int,int)",
            "float randomBetween(Random,float,float)",
            "float normal(Random,float,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.fixes.References",
        "differences": {
          "added": [],
          "removed": [
            "String lambda$static$25()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.util.datafix.schemas.V1460",
        "differences": {
          "added": [],
          "removed": [
            "TypeTemplate lambda$registerTypes$46(Schema)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.SimpleContainer",
        "differences": {
          "added": [
            "boolean isSameItem(ItemStack,ItemStack)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.AreaEffectCloud",
        "differences": {
          "added": [
            "void use()",
            "boolean canUse()",
            "List getEffects()"
          ],
          "removed": [
            "boolean lambda$tick$0(Map$Entry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.FlyingMob",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.control.MoveControl",
        "differences": {
          "added": [
            "void copyFrom(MoveControl)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.LookAtPlayerGoal",
        "differences": {
          "added": [],
          "removed": [
            "boolean lambda$canUse$1(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal",
        "differences": {
          "added": [],
          "removed": [
            "boolean lambda$findTarget$0(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.util.RandomPos",
        "differences": {
          "added": [
            "Vec3 getPos(PathfinderMob,int,int)",
            "Vec3 getAirPos(PathfinderMob,int,int,int,Vec3,double)",
            "Vec3 getLandPos(PathfinderMob,int,int)",
            "Vec3 getLandPos(PathfinderMob,int,int,ToDoubleFunction)",
            "Vec3 getAboveLandPos(PathfinderMob,int,int,Vec3,float,int,int)",
            "Vec3 getLandPosTowards(PathfinderMob,int,int,Vec3)",
            "Vec3 getPosTowards(PathfinderMob,int,int,Vec3)",
            "Vec3 getPosTowards(PathfinderMob,int,int,Vec3,double)",
            "Vec3 getAirPosTowards(PathfinderMob,int,int,int,Vec3,double)",
            "Vec3 getPosAvoid(PathfinderMob,int,int,Vec3)",
            "Vec3 getLandPosAvoid(PathfinderMob,int,int,Vec3)",
            "Vec3 generateRandomPos(PathfinderMob,int,int,int,Vec3,boolean,double,ToDoubleFunction,boolean,int,int,boolean)",
            "BlockPos getRandomDelta(Random,int,int,int,Vec3,double)",
            "boolean lambda$generateRandomPos$0(PathfinderMob,BlockPos)"
          ],
          "removed": [
            "BlockPos generateRandomDirection(Random,int,int)",
            "BlockPos generateRandomDirectionWithinRadians(Random,int,int,int,double,double,double)",
            "BlockPos moveUpOutOfSolid(BlockPos,int,Predicate)",
            "Vec3 generateRandomPos(PathfinderMob,Supplier)",
            "Vec3 generateRandomPos(Supplier,ToDoubleFunction)",
            "BlockPos generateRandomPosTowardDirection(PathfinderMob,int,Random,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.AbstractGolem",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Bee",
        "differences": {
          "added": [
            "Bee getBreedOffspring(ServerLevel,AgableMob)",
            "boolean causeFallDamage(float,float)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)",
            "Random access$3900(Bee)",
            "PathNavigation access$4000(Bee)"
          ],
          "removed": [
            "Bee getBreedOffspring(ServerLevel,AgeableMob)",
            "boolean causeFallDamage(float,float,DamageSource)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)",
            "PathNavigation access$3900(Bee)",
            "Random access$4000(Bee)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Fox",
        "differences": {
          "added": [
            "Fox getBreedOffspring(ServerLevel,AgableMob)",
            "void usePlayerItem(Player,ItemStack)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "Fox getBreedOffspring(ServerLevel,AgeableMob)",
            "void usePlayerItem(Player,InteractionHand,ItemStack)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.MushroomCow",
        "differences": {
          "added": [
            "MushroomCow getBreedOffspring(ServerLevel,AgableMob)",
            "Cow getBreedOffspring(ServerLevel,AgableMob)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "MushroomCow getBreedOffspring(ServerLevel,AgeableMob)",
            "Cow getBreedOffspring(ServerLevel,AgeableMob)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Ocelot",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)",
            "boolean hurt(DamageSource,float)",
            "Ocelot getBreedOffspring(ServerLevel,AgableMob)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)",
            "Ocelot getBreedOffspring(ServerLevel,AgeableMob)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal",
        "differences": {
          "added": [],
          "removed": [
            "boolean lambda$canUse$0(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Parrot",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Pig",
        "differences": {
          "added": [
            "Pig getBreedOffspring(ServerLevel,AgableMob)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "Pig getBreedOffspring(ServerLevel,AgeableMob)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Rabbit",
        "differences": {
          "added": [
            "boolean hurt(DamageSource,float)",
            "boolean isTemptingItem(Item)",
            "Rabbit getBreedOffspring(ServerLevel,AgableMob)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "boolean isTemptingItem(ItemStack)",
            "Rabbit getBreedOffspring(ServerLevel,AgeableMob)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Squid",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getSquirtSound()",
            "ParticleOptions getInkParticle()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Turtle",
        "differences": {
          "added": [
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.horse.AbstractHorse",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)",
            "void setOffspringAttributes(AgableMob,AbstractHorse)",
            "float getJumpRidingScale()",
            "void setJumpRidingScale(float)",
            "boolean setSlot(int,ItemStack)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)",
            "void setOffspringAttributes(AgeableMob,AbstractHorse)",
            "SlotAccess createEquipmentSlotAccess(int,Predicate)",
            "SlotAccess getSlot(int)",
            "boolean hasInventoryChanged(Container)",
            "boolean lambda$getSlot$2(ItemStack)",
            "boolean lambda$getSlot$1(ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.boss.EnderDragonPart",
        "differences": {
          "added": [],
          "removed": [
            "boolean shouldBeSaved()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.boss.enderdragon.EnderDragon",
        "differences": {
          "added": [
            "void dropExperience(int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.boss.wither.WitherBoss",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.ItemFrame$1",
        "differences": {
          "added": [
            "void <clinit>()"
          ],
          "removed": [
            "void <init>(ItemFrame)",
            "ItemStack get()",
            "boolean set(ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.Boat",
        "differences": {
          "added": [],
          "removed": [
            "ItemStack getPickResult()",
            "boolean lambda$tickBubbleColumn$0(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.DismountHelper",
        "differences": {
          "added": [
            "Vec3 findDismountLocation(CollisionGetter,double,double,double,LivingEntity,Pose)"
          ],
          "removed": [
            "boolean canDismountTo(CollisionGetter,Vec3,LivingEntity,Pose)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.MinecartHopper",
        "differences": {
          "added": [
            "Level getLevel()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.MinecartSpawner$1",
        "differences": {
          "added": [
            "void broadcastEvent(int)",
            "Level getLevel()",
            "BlockPos getPos()"
          ],
          "removed": [
            "void broadcastEvent(Level,BlockPos,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.AbstractContainerMenu",
        "differences": {
          "added": [
            "Slot getSlotFor(Container,int)",
            "boolean consideredTheSameItem(ItemStack,ItemStack)",
            "void clearContainer(Player,Level,Container)",
            "void addItem(int,ItemStack)"
          ],
          "removed": [
            "void clearContainer(Player,Container)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.BucketItem",
        "differences": {
          "added": [
            "boolean emptyBucket(Player,Level,BlockPos,BlockHitResult)"
          ],
          "removed": [
            "boolean emptyContents(Player,Level,BlockPos,BlockHitResult)",
            "void lambda$use$0(Player,SoundEvent)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.FireworkRocketItem",
        "differences": {
          "added": [],
          "removed": [
            "ItemStack getDefaultInstance()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.PickaxeItem",
        "differences": {
          "added": [],
          "removed": [
            "void lambda$static$0(Object2IntOpenHashMap)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.EntityGetter",
        "differences": {
          "added": [
            "List getLoadedEntitiesOfClass(Class,AABB,Predicate)",
            "List getLoadedEntitiesOfClass(Class,AABB)",
            "LivingEntity getNearestLoadedEntity(Class,TargetingConditions,LivingEntity,double,double,double,AABB)"
          ],
          "removed": [
            "List getEntitiesOfClass(Class,AABB,Predicate)",
            "boolean lambda$getNearbyEntities$2(LivingEntity)",
            "boolean lambda$getNearestEntity$1(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameRules",
        "differences": {
          "added": [
            "void <init>(GameRules,MinecraftServer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.GameType",
        "differences": {
          "added": [
            "Component getDisplayName()"
          ],
          "removed": [
            "Component getLongDisplayName()",
            "Component getShortDisplayName()",
            "int getNullableId(GameType)",
            "GameType byNullableId(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AttachedStemBlock",
        "differences": {
          "added": [
            "void <init>(StemGrownBlock,BlockBehaviour$Properties)",
            "Item getSeedItem()"
          ],
          "removed": [
            "void <init>(StemGrownBlock,Supplier,BlockBehaviour$Properties)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BarrelBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BaseEntityBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockEntityTicker createTickerHelper(BlockEntityType,BlockEntityType,BlockEntityTicker)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BasePressurePlateBlock",
        "differences": {
          "added": [
            "void checkPressed(Level,BlockPos,BlockState,int)"
          ],
          "removed": [
            "void checkPressed(Entity,Level,BlockPos,BlockState,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BeaconBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.Block",
        "differences": {
          "added": [
            "boolean is(Tag)",
            "boolean is(Block)",
            "boolean isExceptionForConnection(Block)",
            "boolean shouldRenderFace(BlockState,BlockGetter,BlockPos,Direction)",
            "int getTickDelay(LevelReader)",
            "void prepareRender(BlockGetter,BlockPos)",
            "void handleRain(Level,BlockPos)"
          ],
          "removed": [
            "boolean isExceptionForConnection(BlockState)",
            "boolean shouldRenderFace(BlockState,BlockGetter,BlockPos,Direction,BlockPos)",
            "void handlePrecipitation(BlockState,Level,BlockPos,Biome$Precipitation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.Blocks",
        "differences": {
          "added": [
            "int lambda$static$37(BlockState)",
            "ConfiguredFeature lambda$static$36()",
            "ConfiguredFeature lambda$static$35()",
            "boolean lambda$static$30(BlockState,BlockGetter,BlockPos,EntityType)",
            "boolean lambda$static$28(BlockState,BlockGetter,BlockPos,EntityType)",
            "int lambda$static$24(BlockState)",
            "int lambda$static$23(BlockState)",
            "int lambda$static$22(BlockState)",
            "int lambda$static$21(BlockState)",
            "int lambda$static$15(BlockState)",
            "int lambda$static$14(BlockState)",
            "boolean lambda$static$13(BlockState,BlockGetter,BlockPos,EntityType)",
            "BlockEntityType lambda$static$12()",
            "int lambda$static$9(BlockState)",
            "int lambda$static$8(BlockState)"
          ],
          "removed": [
            "int lambda$static$49(BlockState)",
            "boolean lambda$static$48(BlockState,BlockGetter,BlockPos)",
            "int lambda$static$47(BlockState)",
            "int lambda$static$46(BlockState)",
            "int lambda$static$45(BlockState)",
            "int lambda$static$44(BlockState)",
            "ConfiguredFeature lambda$static$43()",
            "ConfiguredFeature lambda$static$42()",
            "int lambda$static$41(BlockState)",
            "int lambda$static$40(BlockState)",
            "boolean lambda$static$37(BlockState,BlockGetter,BlockPos,EntityType)",
            "int lambda$static$36(BlockState)",
            "boolean lambda$static$35(BlockState,BlockGetter,BlockPos,EntityType)",
            "int lambda$static$30(BlockState)",
            "int lambda$static$28(BlockState)",
            "Item lambda$static$24()",
            "Item lambda$static$23()",
            "Item lambda$static$22()",
            "Item lambda$static$21()",
            "boolean lambda$static$15(BlockState,BlockGetter,BlockPos,EntityType)",
            "BlockEntityType lambda$static$14()",
            "int lambda$static$13(BlockState)",
            "int lambda$static$12(BlockState)",
            "ConfiguredFeature lambda$static$9()",
            "ConfiguredFeature lambda$static$8()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BrewingStandBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DispenserBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EnchantmentTableBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EndPortalBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EndRodBlock",
        "differences": {
          "added": [
            "BlockState rotate(BlockState,Rotation)",
            "BlockState mirror(BlockState,Mirror)",
            "VoxelShape getShape(BlockState,BlockGetter,BlockPos,CollisionContext)",
            "boolean isPathfindable(BlockState,BlockGetter,BlockPos,PathComputationType)",
            "void <clinit>()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FallingBlock",
        "differences": {
          "added": [
            "void onLand(Level,BlockPos,BlockState,BlockState,FallingBlockEntity)",
            "void onBroken(Level,BlockPos,FallingBlockEntity)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FenceBlock",
        "differences": {
          "added": [
            "boolean isSameFence(Block)"
          ],
          "removed": [
            "boolean isSameFence(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FlowerPotBlock",
        "differences": {
          "added": [],
          "removed": [
            "boolean isEmpty()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.GrassBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockState getBlockState(Random,BlockPos,ConfiguredFeature)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.Mirror",
        "differences": {
          "added": [
            "void <init>(String,int,OctahedralGroup)"
          ],
          "removed": [
            "void <init>(String,int,Component,OctahedralGroup)",
            "Component symbol()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.ShulkerBoxBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)",
            "boolean canOpen(BlockState,Level,BlockPos,ShulkerBoxBlockEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SignBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SpawnerBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.StemBlock",
        "differences": {
          "added": [
            "void <init>(StemGrownBlock,BlockBehaviour$Properties)",
            "Item getSeedItem()"
          ],
          "removed": [
            "void <init>(StemGrownBlock,Supplier,BlockBehaviour$Properties)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.StructureBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BaseContainerBlockEntity",
        "differences": {
          "added": [
            "void <init>(BlockEntityType)",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(BlockEntityType,BlockPos,BlockState)",
            "void load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BedBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void <init>(DyeColor)"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void <init>(BlockPos,BlockState,DyeColor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BlockEntityType",
        "differences": {
          "added": [
            "void <init>(Supplier,Set,Type)",
            "BlockEntity create()",
            "boolean isValid(Block)"
          ],
          "removed": [
            "void <init>(BlockEntityType$BlockEntitySupplier,Set,Type)",
            "BlockEntity create(BlockPos,BlockState)",
            "boolean isValid(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.DispenserBlockEntity",
        "differences": {
          "added": [
            "void <init>(BlockEntityType)",
            "void <init>()",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(BlockEntityType,BlockPos,BlockState)",
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void load(BlockState,CompoundTag)",
            "void tick()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)",
            "void bookAnimationTick(Level,BlockPos,BlockState,EnchantmentTableBlockEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SignBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)",
            "Component deserializeTextSafe(String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SmokerBlockEntity",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SpawnerBlockEntity$1",
        "differences": {
          "added": [
            "void broadcastEvent(int)",
            "Level getLevel()",
            "BlockPos getPos()",
            "void setNextSpawnData(SpawnData)"
          ],
          "removed": [
            "void broadcastEvent(Level,BlockPos,int)",
            "void setNextSpawnData(Level,BlockPos,SpawnData)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.LevelChunk",
        "differences": {
          "added": [
            "void <init>(Level,ProtoChunk)",
            "LevelLightEngine getLightEngine()",
            "void removeEntity(Entity)",
            "void removeEntity(Entity,int)",
            "void addBlockEntity(BlockEntity)",
            "void setBlockEntity(BlockPos,BlockEntity)",
            "void getEntities(Entity,AABB,List,Predicate)",
            "void getEntities(EntityType,AABB,List,Predicate)",
            "void getEntitiesOfClass(Class,AABB,List,Predicate)",
            "void replaceWithPacketData(ChunkBiomeContainer,FriendlyByteBuf,CompoundTag,int)",
            "ClassInstanceMultiMap[] getEntitySections()",
            "void setLastSaveHadEntities(boolean)",
            "void setLastSaveTime(long)",
            "Fluid lambda$unpackTicks$10(BlockPos)",
            "Block lambda$unpackTicks$9(BlockPos)",
            "LongSet lambda$addReferenceForFeature$8(StructureFeature)",
            "LongSet lambda$getReferencesForFeature$7(StructureFeature)",
            "boolean lambda$getLights$6(BlockPos)",
            "boolean lambda$replaceWithPacketData$5(int,BlockPos)",
            "boolean lambda$replaceWithPacketData$4(BlockPos)",
            "Entity lambda$new$0(Entity)"
          ],
          "removed": [
            "void <init>(ServerLevel,ProtoChunk,Consumer)",
            "GameEventDispatcher getEventDispatcher(int)",
            "void addAndRegisterBlockEntity(BlockEntity)",
            "boolean isInLevel()",
            "boolean isTicking(BlockPos)",
            "void setBlockEntity(BlockEntity)",
            "void removeGameEventListener(BlockEntity)",
            "void removeBlockEntityTicker(BlockPos)",
            "void replaceWithPacketData(ChunkBiomeContainer,FriendlyByteBuf,CompoundTag,BitSet)",
            "void onBlockEntityRemove(BlockEntity)",
            "int getMinBuildHeight()",
            "int getHeight()",
            "void invalidateAllBlockEntities()",
            "void registerAllBlockEntitiesAfterLevelLoad()",
            "void addGameEventListener(BlockEntity)",
            "void updateBlockEntityTicker(BlockEntity)",
            "TickingBlockEntity createTicker(BlockEntity,BlockEntityTicker)",
            "LevelChunk$RebindableTickingBlockEntityWrapper lambda$updateBlockEntityTicker$11(BlockEntity,BlockEntityTicker,BlockPos,LevelChunk$RebindableTickingBlockEntityWrapper)",
            "void lambda$registerAllBlockEntitiesAfterLevelLoad$10(BlockEntity)",
            "Fluid lambda$unpackTicks$9(BlockPos)",
            "Block lambda$unpackTicks$8(BlockPos)",
            "LongSet lambda$addReferenceForFeature$7(StructureFeature)",
            "LongSet lambda$getReferencesForFeature$6(StructureFeature)",
            "boolean lambda$getLights$5(BlockPos)",
            "boolean lambda$replaceWithPacketData$4(BitSet,BlockEntity)",
            "GameEventDispatcher lambda$getEventDispatcher$0(int)",
            "boolean access$200(LevelChunk,BlockPos)",
            "Level access$300(LevelChunk)",
            "Logger access$400()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.IOWorker",
        "differences": {
          "added": [
            "Either lambda$load$2(ChunkPos)"
          ],
          "removed": [
            "CompletableFuture loadAsync(ChunkPos)",
            "Either lambda$loadAsync$2(ChunkPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.Decoratable",
        "differences": {
          "added": [
            "Object chance(int)"
          ],
          "removed": [
            "Object rarity(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.material.LavaFluid",
        "differences": {
          "added": [],
          "removed": [
            "Optional getPickupSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.DerivedLevelData",
        "differences": {
          "added": [
            "void fillCrashReportCategory(CrashReportCategory)"
          ],
          "removed": [
            "void fillCrashReportCategory(CrashReportCategory,LevelHeightAccessor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.LevelData",
        "differences": {
          "added": [
            "void fillCrashReportCategory(CrashReportCategory)",
            "String lambda$fillCrashReportCategory$0()"
          ],
          "removed": [
            "void fillCrashReportCategory(CrashReportCategory,LevelHeightAccessor)",
            "String lambda$fillCrashReportCategory$0(LevelHeightAccessor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.LimitCount",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],IntLimiter)",
            "LootItemConditionalFunction$Builder limitCount(IntLimiter)",
            "LootItemFunction lambda$limitCount$0(IntLimiter,LootItemCondition[])",
            "IntLimiter access$000(LimitCount)",
            "void <init>(LootItemCondition[],IntLimiter,LimitCount$1)"
          ],
          "removed": [
            "void <init>(LootItemCondition[],IntRange)",
            "Set getReferencedContextParams()",
            "LootItemConditionalFunction$Builder limitCount(IntRange)",
            "LootItemFunction lambda$limitCount$0(IntRange,LootItemCondition[])",
            "IntRange access$000(LimitCount)",
            "void <init>(LootItemCondition[],IntRange,LimitCount$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier",
        "differences": {
          "added": [
            "void <init>(String,Attribute,AttributeModifier$Operation,RandomValueBounds,EquipmentSlot[],UUID)",
            "RandomValueBounds access$400(SetAttributesFunction$Modifier)",
            "void <init>(String,Attribute,AttributeModifier$Operation,RandomValueBounds,EquipmentSlot[],UUID,SetAttributesFunction$1)"
          ],
          "removed": [
            "void <init>(String,Attribute,AttributeModifier$Operation,NumberProvider,EquipmentSlot[],UUID)",
            "NumberProvider access$400(SetAttributesFunction$Modifier)",
            "void <init>(String,Attribute,AttributeModifier$Operation,NumberProvider,EquipmentSlot[],UUID,SetAttributesFunction$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetItemCountFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],RandomIntGenerator)",
            "LootItemConditionalFunction$Builder setCount(RandomIntGenerator)",
            "LootItemFunction lambda$setCount$0(RandomIntGenerator,LootItemCondition[])",
            "RandomIntGenerator access$000(SetItemCountFunction)",
            "void <init>(LootItemCondition[],RandomIntGenerator,SetItemCountFunction$1)"
          ],
          "removed": [
            "void <init>(LootItemCondition[],NumberProvider,boolean)",
            "Set getReferencedContextParams()",
            "LootItemConditionalFunction$Builder setCount(NumberProvider)",
            "LootItemConditionalFunction$Builder setCount(NumberProvider,boolean)",
            "LootItemFunction lambda$setCount$1(NumberProvider,boolean,LootItemCondition[])",
            "LootItemFunction lambda$setCount$0(NumberProvider,LootItemCondition[])",
            "NumberProvider access$000(SetItemCountFunction)",
            "boolean access$100(SetItemCountFunction)",
            "void <init>(LootItemCondition[],NumberProvider,boolean,SetItemCountFunction$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.TimeCheck",
        "differences": {
          "added": [
            "void <init>(Long,RandomValueBounds)",
            "TimeCheck$Builder time(RandomValueBounds)",
            "void <init>(Long,RandomValueBounds,TimeCheck$1)",
            "RandomValueBounds access$200(TimeCheck)"
          ],
          "removed": [
            "void <init>(Long,IntRange)",
            "Set getReferencedContextParams()",
            "TimeCheck$Builder time(IntRange)",
            "void <init>(Long,IntRange,TimeCheck$1)",
            "IntRange access$200(TimeCheck)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder",
        "differences": {
          "added": [
            "void <init>(RandomValueBounds)"
          ],
          "removed": [
            "void <init>(IntRange)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.DiscreteCubeMerger",
        "differences": {
          "added": [],
          "removed": [
            "int size()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.EntityCollisionContext",
        "differences": {
          "added": [
            "void <init>(boolean,double,Item,Predicate)"
          ],
          "removed": [
            "void <init>(boolean,double,ItemStack,ItemStack,Predicate,Optional)",
            "boolean hasItemOnFeet(Item)",
            "Optional getEntity()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.IdenticalMerger",
        "differences": {
          "added": [],
          "removed": [
            "int size()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.scores.Score",
        "differences": {
          "added": [
            "void remove(int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.scores.ScoreboardSaveData",
        "differences": {
          "added": [
            "void <init>()",
            "void setScoreboard(Scoreboard)",
            "void load(CompoundTag)",
            "void <clinit>()"
          ],
          "removed": [
            "void <init>(Scoreboard)",
            "ScoreboardSaveData load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.scores.Team$CollisionRule",
        "differences": {
          "added": [
            "String[] getAllNames()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "title",
      "value": {
        "title": "Client",
        "id": "client-mappings",
        "size": 2
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "Classes",
        "differences": {
          "added": [
            "XXX.blaze3d.vertex.BufferBuilder$1",
            "XXX.blaze3d.vertex.BufferBuilder$State",
            "XXX.blaze3d.vertex.BufferVertexConsumer",
            "XXX.blaze3d.vertex.DefaultedVertexConsumer",
            "XXX.blaze3d.vertex.PoseStack$1",
            "XXX.blaze3d.vertex.SheetedDecalTextureGenerator",
            "XXX.blaze3d.vertex.VertexBuffer",
            "XXX.blaze3d.vertex.VertexFormat",
            "XXX.realmsclient.gui.RealmsDataFetcher$LiveStatsTask",
            "XXX.realmsclient.gui.RealmsDataFetcher$ServerListUpdateTask",
            "XXX.realmsclient.gui.RealmsDataFetcher$TrialAvailabilityTask",
            "XXX.gui.screens.RealmsResetWorldScreen$2",
            "XXX.gui.screens.RealmsResetWorldScreen$ResetType",
            "XXX.gui.screens.RealmsScreenWithCallback",
            "XXX.realmsclient.util.RealmsPersistence$RealmsPersistenceData",
            "XXX.realmsclient.util.RealmsTextureManager$1",
            "XXX.realmsclient.util.RealmsUtil",
            "XXX.realmsclient.util.SkinProcessor",
            "XXX.realmsclient.util.TextRenderingUtils$Line",
            "XXX.realmsclient.util.UploadTokenCache",
            "XXX.minecraft.client.Camera",
            "XXX.minecraft.client.ClientBrandRetriever",
            "XXX.minecraft.client.CloudStatus",
            "XXX.minecraft.client.CycleOption",
            "XXX.gui.components.OptionButton",
            "XXX.gui.components.OptionsList$Entry",
            "XXX.gui.components.PlayerTabOverlay$1",
            "XXX.gui.components.SliderButton",
            "XXX.gui.components.SubtitleOverlay",
            "XXX.gui.components.TickableWidget",
            "XXX.gui.components.VolumeSlider",
            "XXX.components.events.AbstractContainerEventHandler",
            "XXX.components.events.GuiEventListener",
            "XXX.gui.components.package-info",
            "XXX.components.spectator.package-info",
            "XXX.components.toasts.RecipeToast",
            "XXX.components.toasts.SystemToast$SystemToastIds",
            "XXX.components.toasts.Toast$Visibility",
            "XXX.components.toasts.ToastComponent$1",
            "XXX.components.toasts.TutorialToast",
            "XXX.components.toasts.package-info",
            "XXX.gui.font.FontManager",
            "XXX.gui.font.FontSet",
            "XXX.gui.font.FontTexture$1",
            "XXX.gui.font.TextFieldHelper",
            "XXX.font.glyphs.BakedGlyph$Effect",
            "XXX.font.glyphs.MissingGlyph",
            "XXX.font.glyphs.package-info",
            "XXX.font.providers.BitmapProvider",
            "XXX.font.providers.BitmapProvider$Builder",
            "XXX.font.providers.GlyphProviderBuilder",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$Builder",
            "XXX.font.providers.TrueTypeGlyphProviderBuilder",
            "XXX.client.gui.package-info",
            "XXX.gui.screens.AlertScreen",
            "XXX.gui.screens.BackupConfirmScreen$Listener",
            "XXX.gui.screens.ChatScreen",
            "XXX.gui.screens.ConfirmLinkScreen",
            "XXX.gui.screens.ConnectScreen",
            "XXX.gui.screens.CreateBuffetWorldScreen",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList",
            "XXX.gui.screens.CreateFlatWorldScreen",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList",
            "XXX.gui.screens.DatapackLoadFailureScreen",
            "XXX.gui.screens.DemoIntroScreen",
            "XXX.gui.screens.DisconnectedScreen",
            "XXX.gui.screens.ErrorScreen",
            "XXX.gui.screens.InBedChatScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList",
            "XXX.gui.screens.LevelLoadingScreen",
            "XXX.gui.screens.LoadingOverlay$LogoTexture",
            "XXX.gui.screens.MenuScreens$ScreenConstructor",
            "XXX.gui.screens.OptionsScreen",
            "XXX.gui.screens.OutOfMemoryScreen",
            "XXX.gui.screens.PauseScreen",
            "XXX.gui.screens.PopupScreen$ButtonOption",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetInfo",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList$Entry",
            "XXX.gui.screens.ReceivingLevelScreen",
            "XXX.gui.screens.ShareToLanScreen",
            "XXX.gui.screens.SkinCustomizationScreen",
            "XXX.gui.screens.TitleScreen",
            "XXX.gui.screens.WinScreen",
            "XXX.screens.achievement.StatsScreen$1",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList$Entry",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemComparator",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList",
            "XXX.screens.achievement.StatsUpdateListener",
            "XXX.screens.advancements.AdvancementTab",
            "XXX.screens.advancements.AdvancementTabType$1",
            "XXX.screens.advancements.AdvancementWidgetType",
            "XXX.screens.advancements.package-info",
            "XXX.screens.controls.ControlList$1",
            "XXX.screens.controls.ControlList$Entry",
            "XXX.screens.controls.ControlList$KeyEntry$1",
            "XXX.screens.controls.ControlsScreen",
            "XXX.screens.debug.GameModeSwitcherScreen",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeIcon",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen",
            "XXX.screens.inventory.AbstractContainerScreen",
            "XXX.screens.inventory.AnvilScreen",
            "XXX.screens.inventory.BeaconScreen$1",
            "XXX.screens.inventory.BeaconScreen$BeaconConfirmButton",
            "XXX.screens.inventory.BeaconScreen$BeaconScreenButton",
            "XXX.screens.inventory.BlastFurnaceScreen",
            "XXX.screens.inventory.BookEditScreen$DisplayCache",
            "XXX.screens.inventory.BookEditScreen$Pos2i",
            "XXX.screens.inventory.BookViewScreen$1",
            "XXX.screens.inventory.BookViewScreen$WritableBookAccess",
            "XXX.screens.inventory.BrewingStandScreen",
            "XXX.screens.inventory.CommandBlockEditScreen",
            "XXX.screens.inventory.ContainerScreen",
            "XXX.screens.inventory.CreativeInventoryListener",
            "XXX.screens.inventory.CreativeModeInventoryScreen$CustomCreativeSlot",
            "XXX.screens.inventory.CreativeModeInventoryScreen$SlotWrapper",
            "XXX.screens.inventory.EffectRenderingInventoryScreen",
            "XXX.screens.inventory.EnchantmentScreen",
            "XXX.screens.inventory.GrindstoneScreen",
            "XXX.screens.inventory.HorseInventoryScreen",
            "XXX.screens.inventory.ItemCombinerScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen$1",
            "XXX.screens.worldselection.CreateWorldScreen$2",
            "XXX.screens.worldselection.CreateWorldScreen$4",
            "XXX.screens.worldselection.EditGameRulesScreen$BooleanRuleEntry$1",
            "XXX.screens.worldselection.EditGameRulesScreen$EntryFactory",
            "XXX.screens.worldselection.EditGameRulesScreen$IntegerRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleList",
            "XXX.screens.worldselection.EditWorldScreen",
            "XXX.screens.worldselection.SelectWorldScreen",
            "XXX.screens.worldselection.WorldGenSettingsComponent$1",
            "XXX.screens.worldselection.WorldGenSettingsComponent$3",
            "XXX.client.model.BeeModel",
            "XXX.client.model.BoatModel",
            "XXX.client.model.CatModel",
            "XXX.client.model.ChickenModel",
            "XXX.client.model.ColorableAgeableListModel",
            "XXX.client.model.CowModel",
            "XXX.client.model.DolphinModel",
            "XXX.client.model.ElytraModel",
            "XXX.client.model.EndermiteModel",
            "XXX.client.model.EvokerFangsModel",
            "XXX.client.model.GhastModel",
            "XXX.client.model.GuardianModel",
            "XXX.client.model.HumanoidHeadModel",
            "XXX.client.model.HumanoidModel$1",
            "XXX.client.model.IllagerModel",
            "XXX.client.model.LavaSlimeModel",
            "XXX.client.model.ListModel",
            "XXX.client.model.LlamaSpitModel",
            "XXX.client.model.Model",
            "XXX.client.model.OcelotModel",
            "XXX.client.model.ParrotModel",
            "XXX.client.model.ParrotModel$State",
            "XXX.client.model.PigModel",
            "XXX.client.model.PlayerModel",
            "XXX.client.model.PufferfishBigModel",
            "XXX.client.model.PufferfishSmallModel",
            "XXX.client.model.RabbitModel",
            "XXX.client.model.SalmonModel",
            "XXX.client.model.SheepModel",
            "XXX.client.model.ShulkerBulletModel",
            "XXX.client.model.SilverfishModel",
            "XXX.client.model.SkullModel",
            "XXX.client.multiplayer.ClientPacketListener$1",
            "XXX.client.multiplayer.MultiPlayerGameMode",
            "XXX.client.multiplayer.ServerAddress",
            "XXX.client.multiplayer.ServerData$ServerPackStatus",
            "XXX.client.multiplayer.ServerStatusPinger",
            "XXX.client.multiplayer.ServerStatusPinger$2",
            "XXX.client.multiplayer.package-info",
            "XXX.client.particle.AshParticle",
            "XXX.client.particle.AttackSweepParticle",
            "XXX.client.particle.AttackSweepParticle$Provider",
            "XXX.client.particle.BarrierParticle$1",
            "XXX.client.particle.BaseAshSmokeParticle",
            "XXX.client.particle.BreakingItemParticle$1",
            "XXX.client.particle.BreakingItemParticle$SlimeProvider",
            "XXX.client.particle.BubbleColumnUpParticle",
            "XXX.client.particle.BubbleColumnUpParticle$Provider",
            "XXX.client.particle.BubbleParticle$1",
            "XXX.client.particle.BubblePopParticle",
            "XXX.client.particle.BubblePopParticle$Provider",
            "XXX.client.particle.CampfireSmokeParticle$1",
            "XXX.client.particle.CampfireSmokeParticle$SignalProvider",
            "XXX.client.particle.CritParticle$1",
            "XXX.client.particle.CritParticle$MagicProvider",
            "XXX.client.particle.DragonBreathParticle",
            "XXX.client.particle.DragonBreathParticle$Provider",
            "XXX.client.particle.DripParticle$1",
            "XXX.client.particle.DripParticle$DripHangParticle",
            "XXX.client.particle.DustParticle$1",
            "XXX.client.particle.SquidInkParticle$Provider",
            "XXX.client.particle.SuspendedParticle$1",
            "XXX.client.particle.SuspendedParticle$UnderwaterProvider",
            "XXX.client.particle.SuspendedTownParticle",
            "XXX.client.particle.SuspendedTownParticle$ComposterFillProvider",
            "XXX.client.particle.SuspendedTownParticle$HappyVillagerProvider",
            "XXX.client.particle.TerrainParticle",
            "XXX.client.particle.TextureSheetParticle",
            "XXX.client.particle.TotemParticle$1",
            "XXX.client.particle.TrackingEmitter",
            "XXX.client.renderer.LevelRenderer",
            "XXX.client.renderer.LevelRenderer$RenderChunkInfo",
            "XXX.client.renderer.LightTexture",
            "XXX.client.renderer.MultiBufferSource$BufferSource",
            "XXX.client.renderer.OutlineBufferSource$1",
            "XXX.client.renderer.PanoramaRenderer",
            "XXX.client.renderer.PostPass",
            "XXX.client.renderer.RenderBuffers",
            "XXX.client.renderer.RenderStateShard$AlphaStateShard",
            "XXX.client.renderer.RenderStateShard$CullStateShard",
            "XXX.client.renderer.RenderStateShard$DiffuseLightingStateShard",
            "XXX.client.renderer.RenderStateShard$LayeringStateShard",
            "XXX.client.renderer.RenderStateShard$LineStateShard",
            "XXX.client.renderer.RenderStateShard$OutputStateShard",
            "XXX.client.renderer.RenderStateShard$PortalTexturingStateShard",
            "XXX.client.renderer.RenderStateShard$TextureStateShard",
            "XXX.client.renderer.RenderStateShard$TransparencyStateShard",
            "XXX.client.renderer.RenderType",
            "XXX.client.renderer.RenderType$CompositeRenderType",
            "XXX.client.renderer.RenderType$CompositeState",
            "XXX.client.renderer.RenderType$OutlineProperty",
            "XXX.client.renderer.ScreenEffectRenderer",
            "XXX.client.renderer.Sheets$1",
            "XXX.client.renderer.ViewArea",
            "XXX.renderer.banner.package-info",
            "XXX.renderer.block.BlockRenderDispatcher",
            "XXX.renderer.block.LiquidBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$1",
            "XXX.renderer.block.ModelBlockRenderer$AmbientOcclusionFace",
            "XXX.renderer.block.ModelBlockRenderer$Cache",
            "XXX.renderer.block.ModelBlockRenderer$Cache$2",
            "XXX.block.model.BakedQuad",
            "XXX.block.model.BlockElement$1",
            "XXX.block.model.BlockElementFace",
            "XXX.block.model.BlockElementRotation",
            "XXX.block.model.BlockFaceUV$Deserializer",
            "XXX.block.model.BlockModel$Deserializer",
            "XXX.block.model.BlockModel$LoopException",
            "XXX.block.model.BlockModelDefinition$Context",
            "XXX.block.model.BlockModelDefinition$MissingVariantException",
            "XXX.block.model.FaceBakery$1",
            "XXX.block.model.ItemModelGenerator$1",
            "XXX.block.model.ItemModelGenerator$SpanFacing",
            "XXX.block.model.ItemOverride$Deserializer",
            "XXX.block.model.ItemTransform",
            "XXX.block.model.ItemTransforms",
            "XXX.block.model.ItemTransforms$Deserializer",
            "XXX.block.model.MultiVariant",
            "XXX.block.model.Variant",
            "XXX.model.multipart.AndCondition",
            "XXX.model.multipart.KeyValueCondition",
            "XXX.model.multipart.MultiPart$Deserializer",
            "XXX.model.multipart.Selector",
            "XXX.model.multipart.package-info",
            "XXX.renderer.block.package-info",
            "XXX.renderer.blockentity.BannerRenderer",
            "XXX.renderer.blockentity.BedRenderer",
            "XXX.renderer.blockentity.BlockEntityRenderDispatcher",
            "XXX.renderer.debug.GameTestDebugRenderer",
            "XXX.renderer.debug.GoalSelectorDebugRenderer",
            "XXX.renderer.debug.HeightMapRenderer",
            "XXX.renderer.debug.LightDebugRenderer",
            "XXX.renderer.debug.PathfindingRenderer",
            "XXX.renderer.debug.SolidFaceRenderer",
            "XXX.renderer.debug.VillageSectionsDebugRenderer",
            "XXX.renderer.debug.WorldGenAttemptRenderer",
            "XXX.renderer.entity.AbstractHorseRenderer",
            "XXX.renderer.entity.AreaEffectCloudRenderer",
            "XXX.renderer.entity.ArrowRenderer",
            "XXX.renderer.entity.EvokerRenderer",
            "XXX.renderer.entity.ExperienceOrbRenderer",
            "XXX.renderer.entity.FireworkEntityRenderer",
            "XXX.renderer.entity.FoxRenderer",
            "XXX.renderer.entity.GiantMobRenderer",
            "XXX.entity.layers.RenderLayer",
            "XXX.entity.layers.SheepFurLayer",
            "XXX.entity.layers.SlimeOuterLayer",
            "XXX.entity.layers.SpiderEyesLayer",
            "XXX.entity.layers.StrayClothingLayer",
            "XXX.entity.layers.TropicalFishPatternLayer",
            "XXX.entity.layers.WitchItemLayer",
            "XXX.entity.layers.WolfCollarLayer",
            "XXX.renderer.entity.package-info",
            "XXX.entity.player.package-info",
            "XXX.renderer.item.ItemProperties$1",
            "XXX.renderer.item.ItemProperties$CompassWobble",
            "XXX.renderer.item.package-info",
            "XXX.renderer.texture.AbstractTexture",
            "XXX.renderer.texture.DynamicTexture",
            "XXX.renderer.texture.MipmapGenerator",
            "XXX.renderer.texture.OverlayTexture",
            "XXX.renderer.texture.SimpleTexture",
            "XXX.renderer.texture.Stitcher",
            "XXX.renderer.texture.Stitcher$Region",
            "XXX.renderer.texture.StitcherException",
            "XXX.renderer.texture.TextureAtlas$Preparations",
            "XXX.renderer.texture.TextureAtlasSprite$1",
            "XXX.renderer.texture.TextureAtlasSprite$InterpolationData",
            "XXX.renderer.texture.Tickable",
            "XXX.client.resources.AssetIndex",
            "XXX.client.resources.ClientPackSource$1",
            "XXX.client.resources.DefaultClientPackResources",
            "XXX.client.resources.DirectAssetIndex",
            "XXX.client.resources.GrassColorReloadListener",
            "XXX.client.resources.LegacyStuffWrapper",
            "XXX.client.resources.PackResourcesAdapterV4",
            "XXX.client.resources.SkinManager",
            "XXX.client.resources.SkinManager$SkinTextureCallback",
            "XXX.client.resources.TextureAtlasHolder",
            "XXX.resources.language.FormattedBidiReorder",
            "XXX.resources.language.LanguageInfo",
            "XXX.resources.language.package-info",
            "XXX.metadata.animation.AnimationMetadataSection",
            "XXX.commands.arguments.NbtPathArgument$ListElementFunction",
            "XXX.commands.arguments.NbtPathArgument$MatchObjectNode",
            "XXX.commands.arguments.NbtPathArgument$NbtPath",
            "XXX.commands.arguments.NbtTagArgument",
            "XXX.commands.arguments.ObjectiveCriteriaArgument",
            "XXX.commands.arguments.OperationArgument$Operation",
            "XXX.commands.arguments.ParticleArgument",
            "XXX.commands.arguments.RangeArgument$Floats",
            "XXX.commands.arguments.ResourceLocationArgument",
            "XXX.commands.arguments.ScoreHolderArgument$Result",
            "XXX.commands.arguments.ScoreHolderArgument$Serializer",
            "XXX.commands.arguments.SlotArgument",
            "XXX.commands.arguments.TimeArgument",
            "XXX.arguments.blocks.BlockInput",
            "XXX.arguments.blocks.BlockPredicateArgument$1",
            "XXX.arguments.blocks.BlockPredicateArgument$Result",
            "XXX.arguments.blocks.BlockStateArgument",
            "XXX.arguments.blocks.package-info",
            "XXX.arguments.coordinates.ColumnPosArgument",
            "XXX.arguments.coordinates.LocalCoordinates",
            "XXX.arguments.coordinates.SwizzleArgument",
            "XXX.arguments.coordinates.Vec3Argument",
            "XXX.arguments.coordinates.WorldCoordinates",
            "XXX.arguments.item.FunctionArgument",
            "XXX.arguments.item.FunctionArgument$2",
            "XXX.arguments.item.ItemArgument",
            "XXX.arguments.item.ItemParser",
            "XXX.arguments.item.ItemPredicateArgument$ItemPredicate",
            "XXX.arguments.item.ItemPredicateArgument$TagPredicate",
            "XXX.commands.arguments.package-info",
            "XXX.minecraft.core.RegistryAccess",
            "XXX.minecraft.core.RegistryAccess$RegistryHolder",
            "XXX.minecraft.core.SectionPos",
            "XXX.minecraft.core.SerializableUUID",
            "XXX.minecraft.core.WritableRegistry",
            "XXX.core.particles.ItemParticleOption$1",
            "XXX.core.particles.ParticleOptions$Deserializer",
            "XXX.core.particles.ParticleTypes",
            "XXX.core.particles.SimpleParticleType",
            "XXX.core.particles.package-info",
            "XXX.data.recipes.ShapedRecipeBuilder",
            "XXX.data.recipes.ShapelessRecipeBuilder",
            "XXX.data.recipes.SimpleCookingRecipeBuilder",
            "XXX.data.recipes.SingleItemRecipeBuilder",
            "XXX.data.recipes.SpecialRecipeBuilder",
            "XXX.data.recipes.UpgradeRecipeBuilder",
            "XXX.data.recipes.package-info",
            "XXX.data.structures.SnbtToNbt",
            "XXX.data.tags.ItemTagsProvider",
            "XXX.data.tags.TagsProvider$1",
            "XXX.data.tags.package-info",
            "XXX.data.worldgen.BastionHoglinStablePools",
            "XXX.data.worldgen.BastionPieces",
            "XXX.data.worldgen.BastionTreasureRoomPools",
            "XXX.data.worldgen.Carvers",
            "XXX.data.worldgen.Features",
            "XXX.data.worldgen.Features$Decorators",
            "XXX.data.worldgen.PillagerOutpostPools",
            "XXX.data.worldgen.Pools",
            "XXX.data.worldgen.SavannaVillagePools",
            "XXX.data.worldgen.StructureFeatures",
            "XXX.data.worldgen.TaigaVillagePools",
            "XXX.worldgen.biome.BiomeReport",
            "XXX.worldgen.biome.VanillaBiomes",
            "XXX.gametest.framework.GameTestAssertException",
            "XXX.gametest.framework.GameTestBatch",
            "XXX.gametest.framework.GameTestBatchRunner$1",
            "XXX.gametest.framework.GameTestGenerator",
            "XXX.gametest.framework.GameTestHelper$1",
            "XXX.gametest.framework.GameTestListener",
            "XXX.gametest.framework.GameTestRunner",
            "XXX.gametest.framework.JUnitLikeTestReporter",
            "XXX.gametest.framework.MultipleTestTracker",
            "XXX.minecraft.nbt.StringTag",
            "XXX.protocol.game.ClientboundAnimatePacket",
            "XXX.protocol.game.ClientboundBlockBreakAckPacket",
            "XXX.protocol.game.ClientboundBlockEntityDataPacket",
            "XXX.protocol.game.ClientboundBlockUpdatePacket",
            "XXX.protocol.game.ClientboundBossEventPacket$1",
            "XXX.protocol.game.ClientboundChangeDifficultyPacket",
            "XXX.protocol.game.ClientboundCommandSuggestionsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$1",
            "XXX.protocol.game.ClientboundContainerAckPacket",
            "XXX.protocol.game.ClientboundContainerSetContentPacket",
            "XXX.protocol.game.ClientboundContainerSetSlotPacket",
            "XXX.protocol.game.ClientboundCustomPayloadPacket",
            "XXX.protocol.game.ClientboundDisconnectPacket",
            "XXX.protocol.game.ClientboundExplodePacket",
            "XXX.protocol.game.ClientboundGameEventPacket",
            "XXX.protocol.game.ClientboundHorseScreenOpenPacket",
            "XXX.protocol.game.ClientboundLevelChunkPacket",
            "XXX.protocol.game.ClientboundLevelParticlesPacket",
            "XXX.protocol.game.ClientboundLoginPacket",
            "XXX.protocol.game.ClientboundMerchantOffersPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Pos",
            "XXX.protocol.game.ClientboundMoveEntityPacket$Rot",
            "XXX.protocol.game.ClientboundOpenBookPacket",
            "XXX.protocol.game.ClientboundOpenSignEditorPacket",
            "XXX.protocol.game.ClientboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$Action",
            "XXX.protocol.game.ClientboundPlayerLookAtPacket",
            "XXX.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument",
            "XXX.protocol.game.ClientboundRecipePacket$State",
            "XXX.protocol.game.ClientboundRemoveMobEffectPacket",
            "XXX.protocol.game.ClientboundRespawnPacket",
            "XXX.protocol.game.ClientboundSectionBlocksUpdatePacket",
            "XXX.protocol.game.ClientboundSetBorderPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$Type",
            "XXX.protocol.game.ClientboundSetCarriedItemPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheRadiusPacket",
            "XXX.protocol.game.ClientboundSetDisplayObjectivePacket",
            "XXX.protocol.game.ClientboundSetEntityLinkPacket",
            "XXX.protocol.game.ClientboundSetEquipmentPacket",
            "XXX.protocol.game.ClientboundSetHealthPacket",
            "XXX.protocol.game.ClientboundSetPassengersPacket",
            "XXX.protocol.game.ClientboundSetScorePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket",
            "XXX.protocol.game.ClientboundSoundEntityPacket",
            "XXX.protocol.game.ClientboundStopSoundPacket",
            "XXX.protocol.game.ClientboundTagQueryPacket",
            "XXX.protocol.game.ClientboundTeleportEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket",
            "XXX.protocol.game.ClientboundUpdateMobEffectPacket",
            "XXX.protocol.game.ClientboundUpdateTagsPacket",
            "XXX.protocol.game.DebugPackets",
            "XXX.protocol.game.ServerboundAcceptTeleportationPacket",
            "XXX.protocol.game.ServerboundChangeDifficultyPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket",
            "XXX.protocol.game.ServerboundClientInformationPacket",
            "XXX.protocol.game.ServerboundContainerAckPacket",
            "XXX.protocol.game.ServerboundContainerClickPacket",
            "XXX.protocol.game.ServerboundCustomPayloadPacket",
            "XXX.protocol.game.ServerboundEntityTagQuery",
            "XXX.protocol.game.ServerboundInteractPacket$Action",
            "XXX.protocol.game.ServerboundKeepAlivePacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$PosRot",
            "XXX.protocol.game.ServerboundMoveVehiclePacket",
            "XXX.protocol.game.ServerboundPickItemPacket",
            "XXX.protocol.game.ServerboundPlayerAbilitiesPacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket$Action",
            "XXX.protocol.game.ServerboundPlayerCommandPacket$Action",
            "XXX.protocol.game.ServerboundRecipeBookChangeSettingsPacket",
            "XXX.protocol.game.ServerboundRenameItemPacket",
            "XXX.protocol.game.ServerboundResourcePackPacket$Action",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket$Action",
            "XXX.protocol.game.ServerboundSetBeaconPacket",
            "XXX.protocol.game.ServerboundSetCommandBlockPacket",
            "XXX.protocol.game.ServerboundSetCreativeModeSlotPacket",
            "XXX.protocol.game.ServerboundSetStructureBlockPacket",
            "XXX.protocol.game.ServerboundSwingPacket",
            "XXX.protocol.game.ServerboundUseItemOnPacket",
            "XXX.protocol.game.package-info",
            "XXX.protocol.handshake.ServerHandshakePacketListener",
            "XXX.protocol.login.ClientLoginPacketListener",
            "XXX.protocol.login.ClientboundGameProfilePacket",
            "XXX.protocol.login.ClientboundLoginCompressionPacket",
            "XXX.protocol.login.ServerLoginPacketListener",
            "XXX.protocol.login.ServerboundHelloPacket",
            "XXX.protocol.login.package-info",
            "XXX.protocol.status.ClientStatusPacketListener",
            "XXX.protocol.status.ClientboundStatusResponsePacket",
            "XXX.protocol.status.ServerStatus$Players",
            "XXX.protocol.status.ServerStatus$Serializer",
            "XXX.protocol.status.ServerStatus$Version$Serializer",
            "XXX.protocol.status.ServerboundPingRequestPacket",
            "XXX.protocol.status.package-info",
            "XXX.network.syncher.EntityDataSerializer",
            "XXX.network.syncher.EntityDataSerializers$1",
            "XXX.network.syncher.EntityDataSerializers$11",
            "XXX.network.syncher.EntityDataSerializers$13",
            "XXX.network.syncher.EntityDataSerializers$15",
            "XXX.network.syncher.EntityDataSerializers$17",
            "XXX.network.syncher.EntityDataSerializers$19",
            "XXX.network.syncher.EntityDataSerializers$3",
            "XXX.network.syncher.EntityDataSerializers$5",
            "XXX.network.syncher.EntityDataSerializers$7",
            "XXX.network.syncher.EntityDataSerializers$9",
            "XXX.network.syncher.SynchedEntityData$DataItem",
            "XXX.minecraft.obfuscate.DontObfuscateOrShrink",
            "XXX.minecraft.obfuscate.package-info",
            "XXX.minecraft.realms.DisconnectedRealmsScreen",
            "XXX.minecraft.realms.RealmsBridge",
            "XXX.minecraft.realms.RealmsConnect$1",
            "XXX.minecraft.realms.RealmsObjectSelectionList",
            "XXX.minecraft.realms.RealmsServerAddress",
            "XXX.minecraft.realms.RepeatedNarrator$Params",
            "XXX.minecraft.recipebook.PlaceRecipe",
            "XXX.minecraft.recipebook.ServerPlaceSmeltingRecipe",
            "XXX.minecraft.server.DebugLoggedPrintStream",
            "XXX.minecraft.server.LoggedPrintStream",
            "XXX.minecraft.server.Main$1",
            "XXX.minecraft.server.MinecraftServer$1",
            "XXX.minecraft.server.PlayerAdvancements",
            "XXX.minecraft.server.RunningOnDifferentThreadException",
            "XXX.minecraft.server.ServerFunctionLibrary",
            "XXX.minecraft.server.ServerFunctionManager$QueuedCommand",
            "XXX.minecraft.server.ServerResources",
            "XXX.minecraft.server.ServerScoreboard$Method",
            "XXX.server.bossevents.CustomBossEvent",
            "XXX.server.bossevents.package-info",
            "XXX.server.commands.AdvancementCommands$1",
            "XXX.server.commands.AdvancementCommands$Action$1",
            "XXX.server.commands.AdvancementCommands$Mode",
            "XXX.server.commands.BanIpCommands",
            "XXX.server.commands.BanPlayerCommands",
            "XXX.server.commands.ClearInventoryCommands",
            "XXX.server.commands.CloneCommands$CloneBlockInfo",
            "XXX.server.commands.DataPackCommand",
            "XXX.server.commands.DeOpCommands",
            "XXX.server.commands.DebugMobSpawningCommand",
            "XXX.server.commands.DefaultGameModeCommands",
            "XXX.server.commands.EffectCommands",
            "XXX.server.commands.EnchantCommand",
            "XXX.server.commands.ExecuteCommand$CommandNumericPredicate",
            "XXX.server.commands.ExperienceCommand",
            "XXX.server.commands.FillCommand",
            "XXX.server.commands.ForceLoadCommand",
            "XXX.server.commands.GameModeCommand",
            "XXX.server.commands.GameRuleCommand$1",
            "XXX.server.commands.HelpCommand",
            "XXX.server.commands.ReplaceItemCommand",
            "XXX.server.commands.SaveOffCommand",
            "XXX.server.commands.SayCommand",
            "XXX.server.commands.ScoreboardCommand",
            "XXX.server.commands.SetBlockCommand",
            "XXX.server.commands.SetBlockCommand$Mode",
            "XXX.server.commands.SetSpawnCommand",
            "XXX.server.commands.SpectateCommand",
            "XXX.server.level.PlayerMap",
            "XXX.server.level.SectionTracker",
            "XXX.server.level.ServerChunkCache",
            "XXX.server.level.ServerChunkCache$MainThreadExecutor",
            "XXX.server.level.ServerLevel",
            "XXX.server.level.ServerPlayerGameMode",
            "XXX.server.level.ThreadedLevelLightEngine$TaskType",
            "XXX.server.level.TicketType",
            "XXX.server.level.WorldGenTickList",
            "XXX.level.progress.ChunkProgressListener",
            "XXX.level.progress.LoggerChunkProgressListener",
            "XXX.level.progress.StoringChunkProgressListener",
            "XXX.server.network.LegacyQueryHandler",
            "XXX.server.network.ServerConnectionListener",
            "XXX.server.network.ServerConnectionListener$2",
            "XXX.server.network.ServerConnectionListener$LatencySimulator$DelayedMessage",
            "XXX.server.network.ServerGamePacketListenerImpl$1",
            "XXX.server.network.ServerHandshakePacketListenerImpl$1",
            "XXX.server.network.ServerLoginPacketListenerImpl$1",
            "XXX.minecraft.tags.SerializationTags",
            "XXX.minecraft.tags.StaticTagHelper",
            "XXX.minecraft.tags.StaticTagHelper$Wrapper",
            "XXX.minecraft.tags.Tag",
            "XXX.minecraft.tags.Tag$Builder",
            "XXX.minecraft.tags.Tag$ElementEntry",
            "XXX.minecraft.tags.Tag$Named",
            "XXX.minecraft.tags.Tag$OptionalTagEntry",
            "XXX.minecraft.tags.TagCollection",
            "XXX.minecraft.util.InsensitiveStringMap",
            "XXX.minecraft.util.LazyLoadedValue",
            "XXX.minecraft.util.UniformInt",
            "XXX.minecraft.util.VisibleForDebug",
            "XXX.minecraft.util.WeighedRandom$WeighedRandomItem",
            "XXX.util.datafix.DataFixers",
            "XXX.util.datafix.DataFixers$2",
            "XXX.datafix.fixes.AbstractUUIDFix",
            "XXX.datafix.fixes.AdvancementsFix",
            "XXX.datafix.fixes.AttributesRename",
            "XXX.datafix.fixes.BedItemColorFix",
            "XXX.datafix.fixes.BiomeFix",
            "XXX.datafix.fixes.BlockEntityBannerColorFix",
            "XXX.datafix.fixes.BlockEntityCustomNameToComponentFix",
            "XXX.datafix.fixes.BlockEntityJukeboxFix",
            "XXX.datafix.fixes.BlockEntityShulkerBoxColorFix",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix$1",
            "XXX.datafix.fixes.BlockNameFlatteningFix",
            "XXX.datafix.fixes.BlockRenameFix$1",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw$1",
            "XXX.datafix.fixes.BlockStateStructureTemplateFix",
            "XXX.datafix.schemas.V501",
            "XXX.datafix.schemas.V701",
            "XXX.datafix.schemas.V703",
            "XXX.datafix.schemas.V704$1",
            "XXX.datafix.schemas.V705$1",
            "XXX.datafix.schemas.V99",
            "XXX.datafix.schemas.package-info",
            "XXX.monitoring.jmx.MinecraftServerStatistics$1",
            "XXX.minecraft.util.package-info",
            "XXX.util.profiling.ActiveProfiler$1",
            "XXX.util.profiling.ContinuousProfiler",
            "XXX.util.profiling.FilledProfileResults",
            "XXX.util.profiling.FilledProfileResults$CounterCollector",
            "XXX.util.profiling.ProfileCollector",
            "XXX.util.profiling.ProfilerFiller",
            "XXX.util.profiling.ProfilerPathEntry",
            "XXX.util.profiling.SingleTickProfiler",
            "XXX.util.thread.BlockableEventLoop",
            "XXX.util.thread.ProcessorHandle",
            "XXX.util.thread.ProcessorMailbox",
            "XXX.util.thread.StrictQueue",
            "XXX.util.thread.StrictQueue$IntRunnable",
            "XXX.util.thread.package-info",
            "XXX.util.worldupdate.package-info",
            "XXX.minecraft.world.BossEvent$BossBarColor",
            "XXX.minecraft.world.Clearable",
            "XXX.minecraft.world.Container",
            "XXX.minecraft.world.ContainerListener",
            "XXX.minecraft.world.Difficulty",
            "XXX.minecraft.world.InteractionHand",
            "XXX.minecraft.world.InteractionResultHolder",
            "XXX.minecraft.world.MenuProvider",
            "XXX.minecraft.world.ShulkerSharedHelper",
            "XXX.world.entity.AgableMob$AgableMobGroupData",
            "XXX.world.entity.EntityEvent",
            "XXX.world.entity.EntitySelector$MobCanWearArmorEntitySelector",
            "XXX.world.entity.HumanoidArm",
            "XXX.world.entity.ItemSteerable",
            "XXX.world.entity.LivingEntity",
            "XXX.world.entity.Mob",
            "XXX.world.entity.MobCategory",
            "XXX.world.entity.MobType",
            "XXX.world.entity.NeutralMob",
            "XXX.world.entity.PathfinderMob",
            "XXX.world.entity.PlayerRideableJumping",
            "XXX.world.entity.PowerableMob",
            "XXX.world.entity.Saddleable",
            "XXX.world.entity.SpawnGroupData",
            "XXX.world.entity.SpawnPlacements$Data",
            "XXX.world.entity.SpawnPlacements$Type",
            "XXX.entity.ai.Brain",
            "XXX.entity.ai.Brain$MemoryValue",
            "XXX.ai.attributes.Attribute",
            "XXX.ai.attributes.AttributeMap",
            "XXX.ai.attributes.AttributeModifier$Operation",
            "XXX.ai.attributes.AttributeSupplier$Builder",
            "XXX.ai.attributes.DefaultAttributes",
            "XXX.ai.attributes.package-info",
            "XXX.ai.behavior.AcquirePoi$JitteredLinearRetry",
            "XXX.ai.behavior.AssignProfessionFromJobSite",
            "XXX.ai.behavior.BackUpIfTooClose",
            "XXX.ai.behavior.Behavior",
            "XXX.ai.behavior.BehaviorUtils",
            "XXX.ai.behavior.CelebrateVillagersSurvivedRaid",
            "XXX.ai.behavior.GateBehavior",
            "XXX.ai.behavior.GateBehavior$OrderPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$1",
            "XXX.ai.behavior.GiveGiftToHero",
            "XXX.ai.behavior.GoToCelebrateLocation",
            "XXX.ai.behavior.GoToPotentialJobSite",
            "XXX.ai.behavior.HarvestFarmland",
            "XXX.ai.behavior.InteractWith",
            "XXX.ai.behavior.JumpOnBed",
            "XXX.ai.behavior.LocateHidingPlaceDuringRaid",
            "XXX.ai.behavior.LookAtTargetSink",
            "XXX.ai.behavior.Mount",
            "XXX.ai.behavior.MoveToTargetSink",
            "XXX.ai.behavior.PoiCompetitorScan",
            "XXX.ai.behavior.RandomStroll",
            "XXX.ai.behavior.UseBonemeal",
            "XXX.ai.behavior.VictoryStroll",
            "XXX.ai.behavior.VillagerCalmDown",
            "XXX.ai.behavior.VillagerMakeLove",
            "XXX.ai.behavior.WakeUp",
            "XXX.ai.behavior.WeightedList$1",
            "XXX.ai.behavior.WeightedList$WeightedEntry$1",
            "XXX.ai.behavior.WorkAtPoi",
            "XXX.ai.behavior.package-info",
            "XXX.ai.control.Control",
            "XXX.ai.sensing.GolemSensor",
            "XXX.ai.sensing.VillagerHostilesSensor",
            "XXX.ai.targeting.TargetingConditions",
            "XXX.entity.animal.Cat$CatAvoidEntityGoal",
            "XXX.entity.animal.Cat$CatTemptGoal",
            "XXX.entity.animal.Cod",
            "XXX.entity.animal.Dolphin",
            "XXX.entity.animal.Dolphin$DolphinMoveControl",
            "XXX.entity.animal.Turtle$TurtleTravelGoal",
            "XXX.entity.animal.Wolf",
            "XXX.animal.horse.AbstractChestedHorse",
            "XXX.animal.horse.Donkey",
            "XXX.animal.horse.Horse$HorseGroupData",
            "XXX.animal.horse.Llama$1",
            "XXX.animal.horse.Llama$LlamaGroupData",
            "XXX.animal.horse.Markings",
            "XXX.animal.horse.SkeletonHorse",
            "XXX.animal.horse.TraderLlama",
            "XXX.animal.horse.Variant",
            "XXX.animal.horse.package-info",
            "XXX.entity.boss.BossMob",
            "XXX.entity.decoration.LeashFenceKnotEntity",
            "XXX.entity.decoration.Painting",
            "XXX.entity.item.FallingBlockEntity",
            "XXX.entity.item.PrimedTnt",
            "XXX.entity.monster.AbstractIllager",
            "XXX.entity.monster.AbstractIllager$RaiderOpenDoorGoal",
            "XXX.entity.monster.AbstractSkeleton$1",
            "XXX.entity.monster.Blaze$BlazeAttackGoal",
            "XXX.entity.monster.Creeper",
            "XXX.entity.monster.Drowned",
            "XXX.entity.monster.Drowned$DrownedGoToBeachGoal",
            "XXX.entity.monster.Drowned$DrownedMoveControl",
            "XXX.entity.monster.Drowned$DrownedTridentAttackGoal",
            "XXX.entity.monster.EnderMan",
            "XXX.entity.monster.EnderMan$EndermanLeaveBlockGoal",
            "XXX.entity.monster.EnderMan$EndermanTakeBlockGoal",
            "XXX.entity.monster.Enemy",
            "XXX.entity.monster.Evoker$1",
            "XXX.entity.monster.Evoker$EvokerCastingSpellGoal",
            "XXX.entity.monster.Evoker$EvokerWololoSpellGoal",
            "XXX.entity.monster.Ghast$GhastLookGoal",
            "XXX.entity.monster.Ghast$GhastShootFireballGoal",
            "XXX.entity.monster.Giant",
            "XXX.entity.monster.Guardian$GuardianAttackGoal",
            "XXX.entity.monster.Guardian$GuardianMoveControl",
            "XXX.entity.monster.Illusioner",
            "XXX.entity.monster.Illusioner$IllusionerBlindnessSpellGoal",
            "XXX.entity.monster.MagmaCube",
            "XXX.entity.monster.PatrollingMonster",
            "XXX.entity.monster.Phantom",
            "XXX.entity.monster.Phantom$AttackPhase",
            "XXX.entity.monster.Phantom$PhantomAttackStrategyGoal",
            "XXX.entity.monster.Phantom$PhantomCircleAroundAnchorGoal",
            "XXX.entity.monster.Phantom$PhantomMoveControl",
            "XXX.entity.monster.Phantom$PhantomSweepAttackGoal",
            "XXX.entity.monster.RangedAttackMob",
            "XXX.entity.monster.Ravager$1",
            "XXX.entity.monster.Ravager$RavagerNavigation",
            "XXX.entity.monster.Shulker",
            "XXX.entity.monster.Shulker$ShulkerAttackGoal",
            "XXX.entity.monster.Shulker$ShulkerDefenseAttackGoal",
            "XXX.entity.monster.Shulker$ShulkerPeekGoal",
            "XXX.entity.monster.Silverfish$SilverfishMergeWithStoneGoal",
            "XXX.entity.monster.Skeleton",
            "XXX.entity.monster.Slime$SlimeAttackGoal",
            "XXX.entity.monster.Slime$SlimeKeepOnJumpingGoal",
            "XXX.entity.monster.Slime$SlimeRandomDirectionGoal",
            "XXX.entity.monster.SpellcasterIllager$IllagerSpell",
            "XXX.entity.monster.SpellcasterIllager$SpellcasterUseSpellGoal",
            "XXX.entity.monster.Spider$SpiderAttackGoal",
            "XXX.entity.monster.Spider$SpiderTargetGoal",
            "XXX.entity.monster.Strider",
            "XXX.entity.monster.Strider$StriderGoToLavaGoal",
            "XXX.entity.monster.Vex",
            "XXX.entity.monster.Vex$VexCopyOwnerTargetGoal",
            "XXX.entity.monster.Vex$VexRandomMoveGoal",
            "XXX.entity.monster.Vindicator$VindicatorBreakDoorGoal",
            "XXX.entity.monster.Vindicator$VindicatorMeleeAttackGoal",
            "XXX.entity.monster.WitherSkeleton",
            "XXX.entity.monster.Zombie",
            "XXX.entity.monster.Zombie$ZombieGroupData",
            "XXX.entity.monster.ZombifiedPiglin",
            "XXX.monster.hoglin.HoglinAi",
            "XXX.monster.hoglin.package-info",
            "XXX.monster.piglin.AbstractPiglin",
            "XXX.monster.piglin.PiglinAi",
            "XXX.monster.piglin.PiglinBrute",
            "XXX.monster.piglin.RememberIfHoglinWasKilled",
            "XXX.monster.piglin.StartHuntingHoglin",
            "XXX.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem",
            "XXX.monster.piglin.package-info",
            "XXX.entity.npc.CatSpawner",
            "XXX.entity.npc.InventoryCarrier",
            "XXX.entity.npc.Villager",
            "XXX.entity.npc.VillagerDataHolder",
            "XXX.entity.npc.VillagerTrades",
            "XXX.entity.npc.VillagerTrades$EmeraldForItems",
            "XXX.entity.npc.VillagerTrades$EnchantBookForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemListing",
            "XXX.entity.npc.VillagerTrades$ItemsForEmeralds",
            "XXX.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds",
            "XXX.entity.npc.VillagerType",
            "XXX.entity.npc.WanderingTrader$WanderToPositionGoal",
            "XXX.entity.npc.package-info",
            "XXX.entity.player.Abilities",
            "XXX.entity.player.Inventory",
            "XXX.entity.player.Player$1",
            "XXX.entity.player.PlayerModelPart",
            "XXX.entity.player.StackedContents$RecipePicker",
            "XXX.entity.projectile.AbstractArrow",
            "XXX.entity.projectile.AbstractHurtingProjectile",
            "XXX.entity.projectile.DragonFireball",
            "XXX.entity.projectile.EyeOfEnder",
            "XXX.entity.projectile.FireworkRocketEntity",
            "XXX.entity.projectile.FishingHook$1",
            "XXX.entity.projectile.FishingHook$OpenWaterType",
            "XXX.entity.projectile.LargeFireball",
            "XXX.entity.projectile.Projectile",
            "XXX.entity.projectile.ShulkerBullet",
            "XXX.entity.projectile.Snowball",
            "XXX.entity.projectile.ThrowableItemProjectile",
            "XXX.entity.projectile.ThrownEgg",
            "XXX.entity.projectile.ThrownExperienceBottle",
            "XXX.entity.projectile.ThrownTrident",
            "XXX.entity.projectile.package-info",
            "XXX.entity.raid.Raid$1",
            "XXX.entity.raid.Raid$RaiderType",
            "XXX.entity.raid.Raider$HoldGroundAttackGoal",
            "XXX.entity.raid.Raider$RaiderCelebration",
            "XXX.entity.raid.Raids",
            "XXX.entity.schedule.Activity",
            "XXX.entity.schedule.Schedule",
            "XXX.entity.schedule.ScheduleBuilder$ActivityTransition",
            "XXX.entity.schedule.package-info",
            "XXX.entity.vehicle.AbstractMinecart$1",
            "XXX.entity.vehicle.AbstractMinecartContainer",
            "XXX.world.inventory.ClickType",
            "XXX.world.inventory.ContainerLevelAccess",
            "XXX.world.inventory.ContainerLevelAccess$2",
            "XXX.world.inventory.CraftingContainer",
            "XXX.world.inventory.DataSlot",
            "XXX.world.inventory.DataSlot$2",
            "XXX.world.inventory.DispenserMenu",
            "XXX.world.inventory.EnchantmentMenu$1",
            "XXX.world.inventory.EnchantmentMenu$3",
            "XXX.world.inventory.FurnaceMenu",
            "XXX.world.inventory.GrindstoneMenu",
            "XXX.world.inventory.GrindstoneMenu$2",
            "XXX.world.inventory.GrindstoneMenu$4",
            "XXX.world.inventory.HorseInventoryMenu",
            "XXX.world.inventory.HorseInventoryMenu$2",
            "XXX.world.inventory.InventoryMenu$1",
            "XXX.world.inventory.ItemCombinerMenu",
            "XXX.world.inventory.ItemCombinerMenu$2",
            "XXX.world.inventory.LecternMenu$1",
            "XXX.world.inventory.LoomMenu$1",
            "XXX.world.inventory.LoomMenu$3",
            "XXX.world.inventory.LoomMenu$5",
            "XXX.world.inventory.MenuConstructor",
            "XXX.world.inventory.MenuType$MenuSupplier",
            "XXX.world.inventory.MerchantMenu",
            "XXX.world.inventory.PlayerEnderChestContainer",
            "XXX.world.inventory.RecipeBookType",
            "XXX.world.inventory.ResultContainer",
            "XXX.world.inventory.ShulkerBoxMenu",
            "XXX.world.inventory.SimpleContainerData",
            "XXX.world.inventory.SmithingMenu",
            "XXX.world.inventory.StackedContentsCompatible",
            "XXX.world.inventory.StonecutterMenu$1",
            "XXX.world.inventory.package-info",
            "XXX.world.item.ChorusFruitItem",
            "XXX.world.item.ComplexItem",
            "XXX.world.item.CreativeModeTab$1",
            "XXX.world.item.CreativeModeTab$11",
            "XXX.world.item.CreativeModeTab$2",
            "XXX.world.item.CreativeModeTab$4",
            "XXX.world.item.CreativeModeTab$6",
            "XXX.world.item.CreativeModeTab$8",
            "XXX.world.item.CrossbowItem",
            "XXX.world.item.DiggerItem",
            "XXX.world.item.FishBucketItem",
            "XXX.world.item.FlintAndSteelItem",
            "XXX.world.item.GameMasterBlockItem",
            "XXX.world.item.HoeItem",
            "XXX.world.item.HorseArmorItem",
            "XXX.world.item.Item$1",
            "XXX.world.item.ItemCooldowns",
            "XXX.world.item.ItemCooldowns$CooldownInstance",
            "XXX.world.item.ItemNameBlockItem",
            "XXX.world.item.ItemStack$TooltipPart",
            "XXX.world.item.Items",
            "XXX.world.item.LeadItem",
            "XXX.world.item.MapItem",
            "XXX.world.item.MinecartItem",
            "XXX.world.item.Rarity",
            "XXX.world.item.SaddleItem",
            "XXX.world.item.ServerItemCooldowns",
            "XXX.world.item.ShieldItem",
            "XXX.world.item.SignItem",
            "XXX.world.item.SnowballItem",
            "XXX.world.item.StandingAndWallBlockItem",
            "XXX.world.item.SwordItem",
            "XXX.world.item.Tier",
            "XXX.world.item.Tiers",
            "XXX.world.item.TooltipFlag",
            "XXX.world.item.TridentItem",
            "XXX.world.item.Vanishable",
            "XXX.world.item.Wearable",
            "XXX.world.item.WrittenBookItem",
            "XXX.item.alchemy.PotionBrewing",
            "XXX.item.alchemy.PotionUtils",
            "XXX.item.alchemy.package-info",
            "XXX.item.context.DirectionalPlaceContext",
            "XXX.item.context.UseOnContext",
            "XXX.item.crafting.AbstractCookingRecipe",
            "XXX.item.crafting.BannerDuplicateRecipe",
            "XXX.item.crafting.BookCloningRecipe",
            "XXX.item.crafting.CraftingRecipe",
            "XXX.item.crafting.FireworkRocketRecipe",
            "XXX.item.crafting.FireworkStarRecipe",
            "XXX.item.crafting.Ingredient$1",
            "XXX.item.crafting.Ingredient$TagValue",
            "XXX.item.crafting.MapCloningRecipe",
            "XXX.item.crafting.Recipe",
            "XXX.item.crafting.RecipeSerializer",
            "XXX.item.crafting.RecipeType$1",
            "XXX.item.crafting.ShapedRecipe",
            "XXX.item.crafting.ShapelessRecipe",
            "XXX.item.crafting.ShieldDecorationRecipe",
            "XXX.item.crafting.SimpleCookingSerializer",
            "XXX.item.crafting.SimpleRecipeSerializer",
            "XXX.item.crafting.SingleItemRecipe$Serializer",
            "XXX.item.crafting.SmeltingRecipe",
            "XXX.item.crafting.StonecutterRecipe",
            "XXX.item.crafting.TippedArrowRecipe",
            "XXX.item.crafting.UpgradeRecipe$Serializer",
            "XXX.item.enchantment.ArrowDamageEnchantment",
            "XXX.item.enchantment.ArrowInfiniteEnchantment",
            "XXX.item.enchantment.ArrowPiercingEnchantment",
            "XXX.item.enchantment.DamageEnchantment",
            "XXX.item.enchantment.DiggingEnchantment",
            "XXX.item.enchantment.Enchantment$Rarity",
            "XXX.item.enchantment.EnchantmentCategory$1",
            "XXX.item.enchantment.EnchantmentCategory$11",
            "XXX.item.enchantment.EnchantmentCategory$13",
            "XXX.item.enchantment.EnchantmentCategory$2",
            "XXX.item.enchantment.EnchantmentCategory$4",
            "XXX.item.enchantment.EnchantmentCategory$6",
            "XXX.item.enchantment.EnchantmentCategory$8",
            "XXX.item.enchantment.EnchantmentHelper",
            "XXX.item.enchantment.EnchantmentInstance",
            "XXX.item.enchantment.FireAspectEnchantment",
            "XXX.item.enchantment.FrostWalkerEnchantment",
            "XXX.item.enchantment.LootBonusEnchantment",
            "XXX.item.enchantment.MultiShotEnchantment",
            "XXX.item.enchantment.ProtectionEnchantment",
            "XXX.item.enchantment.QuickChargeEnchantment",
            "XXX.item.enchantment.SweepingEdgeEnchantment",
            "XXX.item.enchantment.TridentChannelingEnchantment",
            "XXX.item.enchantment.TridentLoyaltyEnchantment",
            "XXX.item.enchantment.UntouchingEnchantment",
            "XXX.item.enchantment.WaterWalkerEnchantment",
            "XXX.item.enchantment.package-info",
            "XXX.item.trading.Merchant",
            "XXX.item.trading.MerchantOffers",
            "XXX.world.level.BaseCommandBlock",
            "XXX.world.level.BlockAndTintGetter",
            "XXX.world.level.BlockGetter",
            "XXX.world.level.ChunkPos$1",
            "XXX.world.level.ChunkTickList$1",
            "XXX.world.level.LevelSettings",
            "XXX.world.level.LevelSimulatedReader",
            "XXX.world.level.LevelWriter",
            "XXX.world.level.NaturalSpawner",
            "XXX.world.level.NaturalSpawner$AfterSpawnCallback",
            "XXX.world.level.NaturalSpawner$SpawnPredicate",
            "XXX.world.level.NoiseColumn",
            "XXX.world.level.PotentialCalculator",
            "XXX.world.level.ServerLevelAccessor",
            "XXX.world.level.SpawnData",
            "XXX.world.level.TickList",
            "XXX.world.level.TickPriority",
            "XXX.level.biome.AmbientAdditionsSettings",
            "XXX.level.biome.AmbientParticleSettings",
            "XXX.level.biome.Biome$1",
            "XXX.level.biome.Biome$BiomeCategory",
            "XXX.level.biome.Biome$ClimateSettings",
            "XXX.level.biome.Biome$TemperatureModifier",
            "XXX.level.biome.Biome$TemperatureModifier$2",
            "XXX.level.biome.BiomeGenerationSettings$1",
            "XXX.level.biome.BiomeManager",
            "XXX.level.biome.BiomeSource",
            "XXX.level.biome.BiomeSpecialEffects$1",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$2",
            "XXX.level.biome.BiomeZoomer",
            "XXX.level.biome.CheckerboardColumnBiomeSource",
            "XXX.level.biome.FuzzyOffsetBiomeZoomer",
            "XXX.level.biome.MobSpawnSettings",
            "XXX.level.biome.MobSpawnSettings$Builder",
            "XXX.level.biome.MobSpawnSettings$SpawnerData",
            "XXX.level.biome.MultiNoiseBiomeSource$1",
            "XXX.level.biome.MultiNoiseBiomeSource$Preset",
            "XXX.level.biome.NearestNeighborBiomeZoomer",
            "XXX.level.biome.TheEndBiomeSource",
            "XXX.level.block.AbstractBannerBlock",
            "XXX.level.block.AbstractFurnaceBlock",
            "XXX.level.block.AbstractSkullBlock",
            "XXX.level.block.BushBlock",
            "XXX.level.block.ButtonBlock$1",
            "XXX.level.block.CakeBlock",
            "XXX.level.block.CarrotBlock",
            "XXX.level.block.CarvedPumpkinBlock",
            "XXX.level.block.ChainBlock",
            "XXX.level.block.ChestBlock",
            "XXX.level.block.ChestBlock$2",
            "XXX.level.block.ChestBlock$3",
            "XXX.level.block.ChorusFlowerBlock",
            "XXX.level.block.CocoaBlock",
            "XXX.level.block.CommandBlock",
            "XXX.level.block.ComposterBlock",
            "XXX.level.block.ComposterBlock$InputContainer",
            "XXX.level.block.ConcretePowderBlock",
            "XXX.level.block.CoralBlock",
            "XXX.level.block.CoralPlantBlock",
            "XXX.level.block.CraftingTableBlock",
            "XXX.level.block.CrossCollisionBlock",
            "XXX.level.block.CryingObsidianBlock",
            "XXX.level.block.DeadBushBlock",
            "XXX.level.block.DetectorRailBlock$1",
            "XXX.level.block.DirectionalBlock",
            "XXX.level.block.EndRodBlock$1",
            "XXX.level.block.EntityBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock$1",
            "XXX.level.block.GlazedTerracottaBlock",
            "XXX.level.block.GrassPathBlock",
            "XXX.level.block.GrindstoneBlock",
            "XXX.level.block.GrowingPlantBlock",
            "XXX.level.block.GrowingPlantHeadBlock",
            "XXX.level.block.HayBlock",
            "XXX.level.block.HopperBlock",
            "XXX.level.block.HorizontalDirectionalBlock",
            "XXX.level.block.IceBlock",
            "XXX.level.block.IronBarsBlock",
            "XXX.level.block.JukeboxBlock",
            "XXX.level.block.KelpPlantBlock",
            "XXX.level.block.LadderBlock$1",
            "XXX.level.block.LeavesBlock",
            "XXX.level.block.LecternBlock$1",
            "XXX.level.block.LeverBlock",
            "XXX.level.block.MyceliumBlock",
            "XXX.level.block.NetherPortalBlock$1",
            "XXX.level.block.NetherVines",
            "XXX.level.block.NetherrackBlock",
            "XXX.level.block.NyliumBlock",
            "XXX.level.block.OreBlock",
            "XXX.level.block.PlayerHeadBlock",
            "XXX.level.block.PoweredRailBlock",
            "XXX.level.block.PressurePlateBlock",
            "XXX.level.block.PressurePlateBlock$Sensitivity",
            "XXX.level.block.RailBlock",
            "XXX.level.block.RailState",
            "XXX.level.block.RedStoneOreBlock",
            "XXX.level.block.RedStoneWireBlock$1",
            "XXX.level.block.RedstoneTorchBlock",
            "XXX.level.block.RedstoneWallTorchBlock",
            "XXX.level.block.RepeaterBlock",
            "XXX.level.block.RespawnAnchorBlock$1",
            "XXX.level.block.RotatedPillarBlock",
            "XXX.level.block.Rotation",
            "XXX.level.block.SandBlock",
            "XXX.level.block.ScaffoldingBlock",
            "XXX.level.block.Seagrass",
            "XXX.level.block.TallSeagrass",
            "XXX.level.block.TntBlock",
            "XXX.level.block.TrapDoorBlock",
            "XXX.level.block.TrappedChestBlock",
            "XXX.level.block.TripWireBlock$1",
            "XXX.level.block.TripWireHookBlock$1",
            "XXX.level.block.TwistingVines",
            "XXX.level.block.VineBlock",
            "XXX.level.block.WallBannerBlock",
            "XXX.level.block.WallBlock$1",
            "XXX.level.block.WallSkullBlock",
            "XXX.level.block.WaterlilyBlock",
            "XXX.level.block.WeepingVines",
            "XXX.level.block.WeightedPressurePlateBlock",
            "XXX.level.block.WitherRoseBlock",
            "XXX.level.block.WitherWallSkullBlock",
            "XXX.level.block.WoolCarpetBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity$1",
            "XXX.block.entity.BannerPattern",
            "XXX.block.entity.BarrelBlockEntity",
            "XXX.block.entity.BlockEntity",
            "XXX.block.entity.BlockEntityType$Builder",
            "XXX.block.entity.BrewingStandBlockEntity$1",
            "XXX.block.entity.ChestBlockEntity",
            "XXX.block.entity.CommandBlockEntity$1",
            "XXX.block.entity.ComparatorBlockEntity",
            "XXX.block.entity.Hopper",
            "XXX.block.entity.JigsawBlockEntity",
            "XXX.block.entity.JukeboxBlockEntity",
            "XXX.block.entity.LecternBlockEntity$1",
            "XXX.block.entity.LidBlockEntity",
            "XXX.block.entity.StructureBlockEntity$UpdateType",
            "XXX.block.entity.TheEndPortalBlockEntity",
            "XXX.block.entity.TrappedChestBlockEntity",
            "XXX.block.grower.AbstractMegaTreeGrower",
            "XXX.block.grower.AcaciaTreeGrower",
            "XXX.block.grower.DarkOakTreeGrower",
            "XXX.block.grower.OakTreeGrower",
            "XXX.block.grower.package-info",
            "XXX.block.piston.MovingPistonBlock",
            "XXX.block.piston.PistonBaseBlock$1",
            "XXX.block.piston.PistonHeadBlock$1",
            "XXX.block.piston.PistonMath$1",
            "XXX.block.piston.PistonMovingBlockEntity$1",
            "XXX.block.piston.package-info",
            "XXX.block.state.BlockBehaviour$1",
            "XXX.block.state.BlockBehaviour$BlockStateBase$Cache",
            "XXX.block.state.BlockBehaviour$Properties",
            "XXX.block.state.BlockBehaviour$StatePredicate",
            "XXX.block.state.StateDefinition",
            "XXX.block.state.StateDefinition$Factory",
            "XXX.block.state.StateHolder$1",
            "XXX.state.pattern.BlockInWorld",
            "XXX.state.pattern.BlockPattern$BlockCacheLoader",
            "XXX.state.pattern.BlockPatternBuilder",
            "XXX.state.predicate.BlockMaterialPredicate",
            "XXX.state.predicate.BlockPredicate",
            "XXX.state.predicate.package-info",
            "XXX.state.properties.BambooLeaves",
            "XXX.state.properties.BellAttachType",
            "XXX.state.properties.BooleanProperty",
            "XXX.state.properties.ComparatorMode",
            "XXX.state.properties.DoorHingeSide",
            "XXX.state.properties.SlabType",
            "XXX.state.properties.StructureMode",
            "XXX.state.properties.WoodType",
            "XXX.level.border.BorderChangeListener",
            "XXX.level.border.BorderStatus",
            "XXX.level.border.WorldBorder$1",
            "XXX.level.border.WorldBorder$MovingBorderExtent",
            "XXX.level.border.WorldBorder$StaticBorderExtent",
            "XXX.level.chunk.ChunkAccess",
            "XXX.level.chunk.ChunkGenerator",
            "XXX.level.chunk.ChunkStatus",
            "XXX.level.chunk.ChunkStatus$GenerationTask",
            "XXX.level.chunk.ChunkStatus$SimpleGenerationTask",
            "XXX.level.chunk.EmptyLevelChunk",
            "XXX.level.chunk.LightChunkGetter",
            "XXX.level.chunk.OldDataLayer",
            "XXX.level.chunk.PaletteResize",
            "XXX.level.chunk.PalettedContainer$CountConsumer",
            "XXX.level.chunk.ProtoTickList",
            "XXX.level.chunk.UpgradeData$1",
            "XXX.level.chunk.UpgradeData$BlockFixers",
            "XXX.level.chunk.UpgradeData$BlockFixers$2",
            "XXX.level.chunk.UpgradeData$BlockFixers$4",
            "XXX.level.chunk.package-info",
            "XXX.chunk.storage.ChunkStorage",
            "XXX.chunk.storage.RegionBitmap",
            "XXX.chunk.storage.RegionFile$ChunkBuffer",
            "XXX.chunk.storage.RegionFileStorage",
            "XXX.chunk.storage.RegionFileVersion$StreamWrapper",
            "XXX.chunk.storage.package-info",
            "XXX.level.dimension.LevelStem",
            "XXX.dimension.end.DragonRespawnAnimation$1",
            "XXX.dimension.end.DragonRespawnAnimation$3",
            "XXX.dimension.end.DragonRespawnAnimation$5",
            "XXX.dimension.end.package-info",
            "XXX.level.levelgen.Heightmap",
            "XXX.level.levelgen.Heightmap$Usage",
            "XXX.level.levelgen.NoiseGeneratorSettings",
            "XXX.level.levelgen.NoiseSettings",
            "XXX.level.levelgen.PatrolSpawner",
            "XXX.level.levelgen.StructureSettings",
            "XXX.level.levelgen.WorldgenRandom",
            "XXX.levelgen.carver.CarverConfiguration",
            "XXX.levelgen.carver.ConfiguredWorldCarver",
            "XXX.levelgen.carver.NoneCarverConfiguration",
            "XXX.levelgen.carver.UnderwaterCaveWorldCarver",
            "XXX.levelgen.carver.package-info",
            "XXX.levelgen.feature.AbstractHugeMushroomFeature",
            "XXX.levelgen.feature.BasaltColumnsFeature",
            "XXX.levelgen.feature.BaseDiskFeature",
            "XXX.levelgen.feature.BlockBlobFeature",
            "XXX.levelgen.feature.BlueIceFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature",
            "XXX.levelgen.feature.ChorusPlantFeature",
            "XXX.levelgen.feature.ConfiguredStructureFeature",
            "XXX.levelgen.feature.CoralFeature",
            "XXX.levelgen.feature.CoralTreeFeature",
            "XXX.levelgen.feature.DefaultFlowerFeature",
            "XXX.levelgen.feature.DesertPyramidFeature",
            "XXX.levelgen.feature.DesertWellFeature",
            "XXX.levelgen.feature.EndCityFeature",
            "XXX.levelgen.feature.EndGatewayFeature",
            "XXX.levelgen.feature.EndPodiumFeature",
            "XXX.levelgen.feature.FillLayerFeature",
            "XXX.levelgen.feature.GlowstoneFeature",
            "XXX.levelgen.feature.HugeFungusConfiguration",
            "XXX.levelgen.feature.HugeRedMushroomFeature",
            "XXX.levelgen.feature.IceSpikeFeature",
            "XXX.levelgen.feature.IglooFeature",
            "XXX.levelgen.feature.JigsawFeature",
            "XXX.levelgen.feature.JunglePyramidFeature",
            "XXX.levelgen.feature.KelpFeature",
            "XXX.levelgen.feature.MineshaftFeature",
            "XXX.levelgen.feature.MineshaftFeature$Type",
            "XXX.levelgen.feature.NetherForestVegetationFeature",
            "XXX.levelgen.feature.NetherFortressFeature$NetherBridgeStart",
            "XXX.levelgen.feature.NoSurfaceOreFeature",
            "XXX.levelgen.feature.OceanMonumentFeature$OceanMonumentStart",
            "XXX.levelgen.feature.PillagerOutpostFeature",
            "XXX.levelgen.feature.RandomPatchFeature",
            "XXX.levelgen.feature.ReplaceBlobsFeature",
            "XXX.levelgen.feature.RuinedPortalFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$Type",
            "XXX.levelgen.feature.SeagrassFeature",
            "XXX.levelgen.feature.ShipwreckFeature$FeatureStart",
            "XXX.levelgen.feature.SimpleRandomSelectorFeature",
            "XXX.levelgen.feature.SnowAndFreezeFeature",
            "XXX.levelgen.feature.SpikeFeature$1",
            "XXX.levelgen.feature.SpikeFeature$SpikeCacheLoader",
            "XXX.levelgen.feature.StrongholdFeature",
            "XXX.levelgen.feature.StructureFeature",
            "XXX.levelgen.feature.StructurePieceType",
            "XXX.levelgen.feature.SwamplandHutFeature$FeatureStart",
            "XXX.levelgen.feature.TwistingVinesFeature",
            "XXX.levelgen.feature.VinesFeature",
            "XXX.levelgen.feature.WeepingVinesFeature",
            "XXX.levelgen.feature.WoodlandMansionFeature",
            "XXX.feature.blockplacers.BlockPlacer",
            "XXX.feature.blockplacers.ColumnPlacer",
            "XXX.feature.blockplacers.SimpleBlockPlacer",
            "XXX.feature.configurations.BlockPileConfiguration",
            "XXX.feature.configurations.ColumnFeatureConfiguration",
            "XXX.feature.configurations.DecoratedFeatureConfiguration",
            "XXX.feature.configurations.DeltaFeatureConfiguration",
            "XXX.feature.configurations.LayerConfiguration",
            "XXX.feature.configurations.NoiseDependantDecoratorConfiguration",
            "XXX.feature.configurations.NoneFeatureConfiguration",
            "XXX.feature.configurations.OreConfiguration",
            "XXX.feature.configurations.ProbabilityFeatureConfiguration",
            "XXX.feature.configurations.RandomFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration$1",
            "XXX.feature.configurations.RangeDecoratorConfiguration",
            "XXX.feature.configurations.ReplaceSphereConfiguration",
            "XXX.feature.configurations.ShipwreckConfiguration",
            "XXX.feature.configurations.SimpleRandomFeatureConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacer$FoliageAttachment",
            "XXX.feature.foliageplacers.MegaJungleFoliagePlacer",
            "XXX.feature.foliageplacers.PineFoliagePlacer",
            "XXX.feature.foliageplacers.package-info",
            "XXX.feature.stateproviders.BlockStateProvider",
            "XXX.feature.stateproviders.ForestFlowerProvider",
            "XXX.feature.stateproviders.RotatedBlockProvider",
            "XXX.feature.stateproviders.WeightedStateProvider",
            "XXX.feature.structures.EmptyPoolElement",
            "XXX.feature.structures.JigsawJunction",
            "XXX.feature.structures.JigsawPlacement$1",
            "XXX.feature.structures.JigsawPlacement$PieceState",
            "XXX.feature.structures.LegacySinglePoolElement",
            "XXX.feature.structures.SinglePoolElement",
            "XXX.feature.structures.StructurePoolElementType",
            "XXX.feature.structures.StructureTemplatePool$Projection",
            "XXX.feature.treedecorators.AlterGroundDecorator",
            "XXX.feature.treedecorators.CocoaDecorator",
            "XXX.feature.treedecorators.TreeDecorator",
            "XXX.feature.treedecorators.TrunkVineDecorator",
            "XXX.feature.trunkplacers.DarkOakTrunkPlacer",
            "XXX.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords",
            "XXX.feature.trunkplacers.GiantTrunkPlacer",
            "XXX.feature.trunkplacers.StraightTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacerType",
            "XXX.levelgen.flat.FlatLayerInfo",
            "XXX.levelgen.flat.package-info",
            "XXX.levelgen.placement.BaseHeightmapDecorator",
            "XXX.levelgen.placement.CarvingMaskDecorator",
            "XXX.levelgen.placement.ChanceDecorator",
            "XXX.levelgen.placement.ConfiguredDecorator",
            "XXX.levelgen.placement.CountNoiseDecorator",
            "XXX.levelgen.placement.DarkOakTreePlacementDecorator",
            "XXX.levelgen.placement.DecoratedDecoratorConfiguration",
            "XXX.levelgen.placement.DepthAverageConfigation",
            "XXX.levelgen.placement.EdgeDecorator",
            "XXX.levelgen.placement.EndGatewayPlacementDecorator",
            "XXX.levelgen.placement.FeatureDecorator",
            "XXX.levelgen.placement.HeightMapWorldSurfaceDecorator",
            "XXX.levelgen.placement.HeightmapDoubleDecorator",
            "XXX.levelgen.placement.LakeLavaPlacementDecorator",
            "XXX.levelgen.placement.NoiseBasedDecorator",
            "XXX.levelgen.placement.NopePlacementDecorator",
            "XXX.levelgen.placement.SimpleFeatureDecorator",
            "XXX.levelgen.placement.SquareDecorator",
            "XXX.levelgen.placement.VeryBiasedRangeDecorator",
            "XXX.placement.nether.FireDecorator",
            "XXX.placement.nether.MagmaDecorator",
            "XXX.levelgen.placement.package-info",
            "XXX.levelgen.structure.BoundingBox",
            "XXX.levelgen.structure.BuriedTreasurePieces",
            "XXX.levelgen.structure.DesertPyramidPiece",
            "XXX.levelgen.structure.EndCityPieces$1",
            "XXX.levelgen.structure.EndCityPieces$3",
            "XXX.levelgen.structure.EndCityPieces$EndCityPiece",
            "XXX.levelgen.structure.IglooPieces",
            "XXX.levelgen.structure.JunglePyramidPiece",
            "XXX.levelgen.structure.JunglePyramidPiece$MossStoneSelector",
            "XXX.levelgen.structure.MineShaftPieces",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftCorridor",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftPiece",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftStairs",
            "XXX.levelgen.structure.NetherBridgePieces$1",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeEndFiller",
            "XXX.levelgen.structure.NetherBridgePieces$CastleCorridorStairsPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleEntrance",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorLeftTurnPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorRightTurnPiece",
            "XXX.levelgen.structure.NetherBridgePieces$MonsterThrone",
            "XXX.levelgen.structure.NetherBridgePieces$PieceWeight",
            "XXX.levelgen.structure.NetherBridgePieces$StairsRoom",
            "XXX.levelgen.structure.NetherFossilFeature",
            "XXX.levelgen.structure.NetherFossilPieces",
            "XXX.levelgen.structure.OceanMonumentPieces",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleTopRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$MonumentRoomFitter",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentPenthouse",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentWingRoom",
            "XXX.levelgen.structure.OceanRuinFeature",
            "XXX.levelgen.structure.OceanRuinFeature$Type",
            "XXX.levelgen.structure.OceanRuinPieces$OceanRuinPiece",
            "XXX.levelgen.structure.RuinedPortalPiece",
            "XXX.levelgen.structure.RuinedPortalPiece$VerticalPlacement",
            "XXX.levelgen.structure.ShipwreckPieces",
            "XXX.levelgen.structure.StrongholdPieces",
            "XXX.levelgen.structure.StrongholdPieces$2",
            "XXX.levelgen.structure.StrongholdPieces$ChestCorridor",
            "XXX.levelgen.structure.StrongholdPieces$FiveCrossing",
            "XXX.levelgen.structure.StrongholdPieces$Library",
            "XXX.levelgen.structure.StrongholdPieces$PortalRoom",
            "XXX.levelgen.structure.StrongholdPieces$RightTurn",
            "XXX.levelgen.structure.StrongholdPieces$SmoothStoneSelector",
            "XXX.levelgen.structure.StrongholdPieces$StartPiece",
            "XXX.levelgen.structure.StrongholdPieces$StraightStairsDown",
            "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType",
            "XXX.levelgen.structure.StructureFeatureIndexSavedData",
            "XXX.levelgen.structure.StructurePiece$1",
            "XXX.levelgen.structure.StructureStart",
            "XXX.levelgen.structure.SwamplandHutPiece",
            "XXX.levelgen.structure.WoodlandMansionPieces",
            "XXX.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$PlacementData",
            "XXX.levelgen.structure.WoodlandMansionPieces$SimpleGrid",
            "XXX.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece",
            "XXX.structure.templatesystem.AlwaysTrueTest",
            "XXX.structure.templatesystem.BlackstoneReplaceProcessor",
            "XXX.structure.templatesystem.BlockIgnoreProcessor",
            "XXX.structure.templatesystem.BlockRotProcessor",
            "XXX.structure.templatesystem.GravityProcessor",
            "XXX.structure.templatesystem.LavaSubmergedBlockProcessor",
            "XXX.structure.templatesystem.NopProcessor",
            "XXX.structure.templatesystem.PosRuleTest",
            "XXX.structure.templatesystem.ProcessorRule",
            "XXX.structure.templatesystem.RandomBlockStateMatchTest",
            "XXX.structure.templatesystem.RuleTest",
            "XXX.structure.templatesystem.StructureManager",
            "XXX.structure.templatesystem.StructureProcessor",
            "XXX.structure.templatesystem.StructureProcessorType",
            "XXX.structure.templatesystem.StructureTemplate$1",
            "XXX.structure.templatesystem.StructureTemplate$SimplePalette",
            "XXX.structure.templatesystem.StructureTemplate$StructureEntityInfo",
            "XXX.structure.templatesystem.package-info",
            "XXX.levelgen.surfacebuilders.BasaltDeltasSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.DefaultSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherCappedSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderConfiguration",
            "XXX.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder",
            "XXX.levelgen.synth.ImprovedNoise",
            "XXX.levelgen.synth.PerlinNoise",
            "XXX.levelgen.synth.SimplexNoise",
            "XXX.levelgen.synth.package-info",
            "XXX.level.lighting.BlockLightSectionStorage",
            "XXX.level.lighting.DataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$1",
            "XXX.level.lighting.FlatDataLayer",
            "XXX.level.lighting.LayerLightEventListener",
            "XXX.level.lighting.LayerLightSectionStorage",
            "XXX.level.lighting.LevelLightEngine",
            "XXX.level.lighting.SkyLightEngine",
            "XXX.level.lighting.SkyLightSectionStorage$1",
            "XXX.level.lighting.SpatialLongSet",
            "XXX.level.lighting.package-info",
            "XXX.level.material.FlowingFluid",
            "XXX.level.material.Fluid",
            "XXX.level.material.Fluids",
            "XXX.level.pathfinder.BinaryHeap",
            "XXX.level.pathfinder.FlyNodeEvaluator",
            "XXX.level.pathfinder.NodeEvaluator",
            "XXX.level.pathfinder.PathComputationType",
            "XXX.level.pathfinder.SwimNodeEvaluator",
            "XXX.level.pathfinder.TurtleNodeEvaluator",
            "XXX.level.saveddata.SavedData",
            "XXX.saveddata.maps.MapBanner$1",
            "XXX.saveddata.maps.MapDecoration$Type",
            "XXX.saveddata.maps.MapIndex",
            "XXX.level.saveddata.package-info",
            "XXX.level.storage.McRegionUpgrader",
            "XXX.level.storage.PrimaryLevelData",
            "XXX.level.storage.WorldData",
            "XXX.storage.loot.BinomialDistributionGenerator",
            "XXX.storage.loot.BuiltInLootTables",
            "XXX.storage.loot.ConstantIntValue$Serializer",
            "XXX.storage.loot.GsonAdapterFactory",
            "XXX.storage.loot.GsonAdapterFactory$Builder",
            "XXX.storage.loot.GsonAdapterFactory$JsonAdapter",
            "XXX.storage.loot.IntLimiter$1",
            "XXX.storage.loot.LootContext",
            "XXX.storage.loot.LootContext$Builder",
            "XXX.storage.loot.LootContext$EntityTarget",
            "XXX.storage.loot.LootContextUser",
            "XXX.storage.loot.LootPool$1",
            "XXX.storage.loot.LootPool$Serializer",
            "XXX.storage.loot.LootTable$1",
            "XXX.storage.loot.LootTable$Serializer",
            "XXX.storage.loot.PredicateManager",
            "XXX.storage.loot.PredicateManager$CompositePredicate",
            "XXX.storage.loot.RandomIntGenerators",
            "XXX.storage.loot.RandomValueBounds$Serializer",
            "XXX.storage.loot.SerializerType",
            "XXX.loot.entries.AlternativesEntry",
            "XXX.loot.entries.ComposableEntryContainer",
            "XXX.loot.entries.CompositeEntryBase$1",
            "XXX.loot.entries.DynamicLoot",
            "XXX.loot.entries.DynamicLoot$Serializer",
            "XXX.loot.entries.EmptyLootItem$1",
            "XXX.loot.entries.EntryGroup",
            "XXX.loot.entries.LootItem",
            "XXX.loot.entries.LootItem$Serializer",
            "XXX.loot.entries.LootPoolEntry",
            "XXX.loot.entries.LootPoolEntryContainer$Builder",
            "XXX.loot.entries.LootPoolEntryType",
            "XXX.loot.entries.LootPoolSingletonContainer$1",
            "XXX.loot.entries.LootPoolSingletonContainer$DummyBuilder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryConstructor",
            "XXX.loot.entries.LootTableReference",
            "XXX.loot.entries.LootTableReference$Serializer",
            "XXX.loot.entries.SequentialEntry$Builder",
            "XXX.loot.entries.TagEntry$1",
            "XXX.loot.entries.package-info",
            "XXX.loot.functions.ApplyBonusCount$1",
            "XXX.loot.functions.ApplyBonusCount$Formula",
            "XXX.loot.functions.ApplyBonusCount$OreDrops",
            "XXX.loot.functions.ApplyBonusCount$UniformBonusCount",
            "XXX.loot.functions.ApplyExplosionDecay$1",
            "XXX.loot.functions.CopyBlockState",
            "XXX.loot.functions.CopyBlockState$Builder",
            "XXX.loot.functions.CopyNameFunction",
            "XXX.loot.functions.CopyNameFunction$NameSource",
            "XXX.loot.functions.CopyNbtFunction",
            "XXX.loot.functions.CopyNbtFunction$Builder",
            "XXX.loot.functions.CopyNbtFunction$DataSource",
            "XXX.loot.predicates.WeatherCheck$1",
            "XXX.loot.predicates.WeatherCheck$Serializer",
            "XXX.phys.shapes.NonOverlappingMerger",
            "XXX.phys.shapes.Shapes",
            "XXX.phys.shapes.SliceShape",
            "XXX.phys.shapes.VoxelShape"
          ],
          "removed": [
            "XXX.blaze3d.systems.RenderSystem$AutoStorageIndexBuffer",
            "XXX.blaze3d.vertex.BufferBuilder",
            "XXX.blaze3d.vertex.BufferBuilder$DrawState",
            "XXX.blaze3d.vertex.BufferUploader",
            "XXX.blaze3d.vertex.DefaultVertexFormat",
            "XXX.blaze3d.vertex.PoseStack",
            "XXX.blaze3d.vertex.PoseStack$Pose",
            "XXX.blaze3d.vertex.Tesselator",
            "XXX.blaze3d.vertex.VertexConsumer",
            "XXX.blaze3d.vertex.VertexFormat$1",
            "XXX.blaze3d.vertex.VertexFormat$Mode",
            "XXX.gui.screens.RealmsResetWorldScreen$FrameButton",
            "XXX.gui.task.IntervalBasedStartupDelay",
            "XXX.gui.task.RepeatableTask",
            "XXX.realmsclient.util.RealmsPersistence",
            "XXX.realmsclient.util.RealmsTextureManager",
            "XXX.realmsclient.util.RealmsTextureManager$RealmsTexture",
            "XXX.realmsclient.util.RealmsUtil$1",
            "XXX.realmsclient.util.TextRenderingUtils",
            "XXX.realmsclient.util.TextRenderingUtils$LineSegment",
            "XXX.realmsclient.util.WorldGenerationInfo",
            "XXX.util.task.ResettingTemplateWorldTask",
            "XXX.minecraft.client.CameraType",
            "XXX.minecraft.client.ClientRecipeBook",
            "XXX.minecraft.client.ComponentCollector",
            "XXX.minecraft.client.CycleOption$OptionSetter",
            "XXX.gui.components.CycleButton",
            "XXX.gui.components.CycleButton$Builder",
            "XXX.gui.components.CycleButton$TooltipSupplier",
            "XXX.gui.components.CycleButton$ValueListSupplier$1",
            "XXX.gui.components.OptionsList",
            "XXX.gui.components.PlayerTabOverlay",
            "XXX.gui.components.PlayerTabOverlay$PlayerInfoComparator",
            "XXX.gui.components.StateSwitchingButton",
            "XXX.gui.components.SubtitleOverlay$Subtitle",
            "XXX.gui.components.TooltipAccessor",
            "XXX.gui.components.Widget",
            "XXX.components.events.ContainerEventHandler",
            "XXX.components.events.package-info",
            "XXX.components.spectator.SpectatorGui",
            "XXX.components.toasts.AdvancementToast",
            "XXX.components.toasts.SystemToast",
            "XXX.components.toasts.Toast",
            "XXX.components.toasts.ToastComponent",
            "XXX.components.toasts.ToastComponent$ToastInstance",
            "XXX.components.toasts.TutorialToast$Icons",
            "XXX.gui.font.AllMissingGlyphProvider",
            "XXX.gui.font.FontManager$1",
            "XXX.gui.font.FontTexture",
            "XXX.gui.font.FontTexture$Node",
            "XXX.font.glyphs.BakedGlyph",
            "XXX.font.glyphs.EmptyGlyph",
            "XXX.font.glyphs.WhiteGlyph",
            "XXX.gui.font.package-info",
            "XXX.font.providers.BitmapProvider$1",
            "XXX.font.providers.BitmapProvider$Glyph",
            "XXX.font.providers.GlyphProviderBuilderType",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$1",
            "XXX.font.providers.LegacyUnicodeBitmapsProvider$Glyph",
            "XXX.font.providers.package-info",
            "XXX.gui.screens.AccessibilityOptionsScreen",
            "XXX.gui.screens.BackupConfirmScreen",
            "XXX.gui.screens.ChatOptionsScreen",
            "XXX.gui.screens.ChatScreen$1",
            "XXX.gui.screens.ConfirmScreen",
            "XXX.gui.screens.ConnectScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$1",
            "XXX.gui.screens.CreateBuffetWorldScreen$BiomeList$Entry",
            "XXX.gui.screens.CreateFlatWorldScreen$1",
            "XXX.gui.screens.CreateFlatWorldScreen$DetailsList$Entry",
            "XXX.gui.screens.DeathScreen",
            "XXX.gui.screens.DirectJoinServerScreen",
            "XXX.gui.screens.EditServerScreen",
            "XXX.gui.screens.GenericDirtMessageScreen",
            "XXX.gui.screens.LanguageSelectScreen",
            "XXX.gui.screens.LanguageSelectScreen$LanguageSelectionList$Entry",
            "XXX.gui.screens.LoadingOverlay",
            "XXX.gui.screens.MenuScreens",
            "XXX.gui.screens.MouseSettingsScreen",
            "XXX.gui.screens.OptionsSubScreen",
            "XXX.gui.screens.Overlay",
            "XXX.gui.screens.PopupScreen",
            "XXX.gui.screens.PresetFlatWorldScreen",
            "XXX.gui.screens.PresetFlatWorldScreen$PresetsList",
            "XXX.gui.screens.ProgressScreen",
            "XXX.gui.screens.Screen",
            "XXX.gui.screens.SimpleOptionsSubScreen",
            "XXX.gui.screens.SoundOptionsScreen",
            "XXX.gui.screens.VideoSettingsScreen",
            "XXX.screens.achievement.StatsScreen",
            "XXX.screens.achievement.StatsScreen$GeneralStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList",
            "XXX.screens.achievement.StatsScreen$ItemStatisticsList$ItemRow",
            "XXX.screens.achievement.StatsScreen$MobsStatisticsList$MobRow",
            "XXX.screens.achievement.package-info",
            "XXX.screens.advancements.AdvancementTabType",
            "XXX.screens.advancements.AdvancementWidget",
            "XXX.screens.advancements.AdvancementsScreen",
            "XXX.screens.controls.ControlList",
            "XXX.screens.controls.ControlList$CategoryEntry",
            "XXX.screens.controls.ControlList$KeyEntry",
            "XXX.screens.controls.ControlList$KeyEntry$2",
            "XXX.screens.controls.package-info",
            "XXX.screens.debug.GameModeSwitcherScreen$1",
            "XXX.screens.debug.GameModeSwitcherScreen$GameModeSlot",
            "XXX.screens.inventory.AbstractCommandBlockEditScreen$1",
            "XXX.screens.inventory.AbstractFurnaceScreen",
            "XXX.screens.inventory.BeaconScreen",
            "XXX.screens.inventory.BeaconScreen$BeaconCancelButton",
            "XXX.screens.inventory.BeaconScreen$BeaconPowerButton",
            "XXX.screens.inventory.BeaconScreen$BeaconSpriteScreenButton",
            "XXX.screens.inventory.BookEditScreen",
            "XXX.screens.inventory.BookEditScreen$LineInfo",
            "XXX.screens.inventory.BookViewScreen",
            "XXX.screens.inventory.BookViewScreen$BookAccess",
            "XXX.screens.inventory.BookViewScreen$WrittenBookAccess",
            "XXX.screens.inventory.CartographyTableScreen",
            "XXX.screens.inventory.CommandBlockEditScreen$1",
            "XXX.screens.inventory.CraftingScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen",
            "XXX.screens.inventory.CreativeModeInventoryScreen$ItemPickerMenu",
            "XXX.screens.inventory.DispenserScreen",
            "XXX.screens.inventory.EnchantmentNames",
            "XXX.screens.inventory.FurnaceScreen",
            "XXX.screens.inventory.HopperScreen",
            "XXX.screens.inventory.InventoryScreen",
            "XXX.screens.inventory.JigsawBlockEditScreen",
            "XXX.inventory.tooltip.ClientBundleTooltip$Texture",
            "XXX.inventory.tooltip.ClientTooltipComponent",
            "XXX.screens.worldselection.EditGameRulesScreen$CategoryRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$GameRuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleEntry",
            "XXX.screens.worldselection.EditGameRulesScreen$RuleList$1",
            "XXX.screens.worldselection.OptimizeWorldScreen",
            "XXX.screens.worldselection.WorldGenSettingsComponent",
            "XXX.client.model.BatModel",
            "XXX.client.model.BlazeModel",
            "XXX.client.model.BookModel",
            "XXX.client.model.ChestedHorseModel",
            "XXX.client.model.CodModel",
            "XXX.client.model.ColorableHierarchicalModel",
            "XXX.client.model.CreeperModel",
            "XXX.client.model.DrownedModel",
            "XXX.client.model.EndermanModel",
            "XXX.client.model.EntityModel",
            "XXX.client.model.FoxModel",
            "XXX.client.model.GiantZombieModel",
            "XXX.client.model.HeadedModel",
            "XXX.client.model.HumanoidModel",
            "XXX.client.model.HumanoidModel$ArmPose",
            "XXX.client.model.IronGolemModel",
            "XXX.client.model.LeashKnotModel",
            "XXX.client.model.LlamaModel",
            "XXX.client.model.MinecartModel",
            "XXX.client.model.ModelUtils",
            "XXX.client.model.PandaModel",
            "XXX.client.model.ParrotModel$1",
            "XXX.client.model.PhantomModel",
            "XXX.client.model.PiglinModel",
            "XXX.client.model.PolarBearModel",
            "XXX.client.model.PufferfishMidModel",
            "XXX.client.model.QuadrupedModel",
            "XXX.client.model.RavagerModel",
            "XXX.client.model.SheepFurModel",
            "XXX.client.model.ShieldModel",
            "XXX.client.model.ShulkerModel",
            "XXX.client.model.SkeletonModel",
            "XXX.client.model.SkullModelBase",
            "XXX.model.geom.EntityModelSet",
            "XXX.model.geom.ModelLayerLocation",
            "XXX.model.geom.ModelPart$Visitor",
            "XXX.model.geom.PartPose",
            "XXX.geom.builders.CubeDeformation",
            "XXX.geom.builders.LayerDefinition",
            "XXX.geom.builders.MeshDefinition",
            "XXX.geom.builders.UVPair",
            "XXX.client.multiplayer.ClientPacketListener",
            "XXX.client.multiplayer.ClientSuggestionProvider",
            "XXX.client.multiplayer.PlayerInfo",
            "XXX.client.multiplayer.ServerData",
            "XXX.client.multiplayer.ServerList",
            "XXX.client.multiplayer.ServerStatusPinger$1",
            "XXX.client.multiplayer.ServerStatusPinger$2$1",
            "XXX.minecraft.client.package-info",
            "XXX.client.particle.AshParticle$Provider",
            "XXX.client.particle.AttackSweepParticle$1",
            "XXX.client.particle.BarrierParticle",
            "XXX.client.particle.BarrierParticle$Provider",
            "XXX.client.particle.BreakingItemParticle",
            "XXX.client.particle.BreakingItemParticle$Provider",
            "XXX.client.particle.BreakingItemParticle$SnowballProvider",
            "XXX.client.particle.BubbleColumnUpParticle$1",
            "XXX.client.particle.BubbleParticle",
            "XXX.client.particle.BubbleParticle$Provider",
            "XXX.client.particle.BubblePopParticle$1",
            "XXX.client.particle.CampfireSmokeParticle",
            "XXX.client.particle.CampfireSmokeParticle$CosyProvider",
            "XXX.client.particle.CritParticle",
            "XXX.client.particle.CritParticle$DamageIndicatorProvider",
            "XXX.client.particle.CritParticle$Provider",
            "XXX.client.particle.DragonBreathParticle$1",
            "XXX.client.particle.DripParticle",
            "XXX.client.particle.DripParticle$CoolingDripHangParticle",
            "XXX.client.particle.DripParticle$DripLandParticle",
            "XXX.client.particle.DripParticle$DripstoneLavaFallProvider",
            "XXX.client.particle.DripParticle$DripstoneWaterFallProvider",
            "XXX.client.particle.DustColorTransitionParticle$Provider",
            "XXX.client.particle.DustParticle$Provider",
            "XXX.client.particle.FlameParticle$SmallFlameProvider",
            "XXX.client.particle.GlowParticle$1",
            "XXX.client.particle.SnowflakeParticle$Provider",
            "XXX.client.particle.SquidInkParticle$GlowInkProvider",
            "XXX.client.particle.SuspendedParticle",
            "XXX.client.particle.SuspendedParticle$CrimsonSporeProvider",
            "XXX.client.particle.SuspendedParticle$WarpedSporeProvider",
            "XXX.client.particle.SuspendedTownParticle$1",
            "XXX.client.particle.SuspendedTownParticle$DolphinSpeedProvider",
            "XXX.client.particle.SuspendedTownParticle$Provider",
            "XXX.client.particle.TerrainParticle$Provider",
            "XXX.client.particle.TotemParticle",
            "XXX.client.particle.TotemParticle$Provider",
            "XXX.client.particle.VibrationSignalParticle",
            "XXX.client.particle.VibrationSignalParticle$Provider",
            "XXX.client.renderer.ItemModelShaper",
            "XXX.client.renderer.LevelRenderer$1",
            "XXX.client.renderer.LevelRenderer$TransparencyShaderException",
            "XXX.client.renderer.MultiBufferSource",
            "XXX.client.renderer.OutlineBufferSource",
            "XXX.client.renderer.OutlineBufferSource$EntityOutlineGenerator",
            "XXX.client.renderer.PostChain",
            "XXX.client.renderer.Rect2i",
            "XXX.client.renderer.RenderStateShard",
            "XXX.client.renderer.RenderStateShard$BooleanStateShard",
            "XXX.client.renderer.RenderStateShard$DepthTestStateShard",
            "XXX.client.renderer.RenderStateShard$FogStateShard",
            "XXX.client.renderer.RenderStateShard$LightmapStateShard",
            "XXX.client.renderer.RenderStateShard$OffsetTexturingStateShard",
            "XXX.client.renderer.RenderStateShard$OverlayStateShard",
            "XXX.client.renderer.RenderStateShard$ShadeModelStateShard",
            "XXX.client.renderer.RenderStateShard$TexturingStateShard",
            "XXX.client.renderer.RenderStateShard$WriteMaskStateShard",
            "XXX.client.renderer.RenderType$1",
            "XXX.client.renderer.RenderType$CompositeRenderType$EqualsStrategy",
            "XXX.client.renderer.RenderType$CompositeState$CompositeStateBuilder",
            "XXX.client.renderer.RunningTrimmedMean",
            "XXX.client.renderer.Sheets",
            "XXX.client.renderer.SpriteCoordinateExpander",
            "XXX.client.renderer.VirtualScreen",
            "XXX.renderer.block.BlockModelShaper",
            "XXX.renderer.block.BlockRenderDispatcher$1",
            "XXX.renderer.block.ModelBlockRenderer",
            "XXX.renderer.block.ModelBlockRenderer$AdjacencyInfo",
            "XXX.renderer.block.ModelBlockRenderer$AmbientVertexRemap",
            "XXX.renderer.block.ModelBlockRenderer$Cache$1",
            "XXX.renderer.block.ModelBlockRenderer$SizeInfo",
            "XXX.block.model.BlockElement",
            "XXX.block.model.BlockElement$Deserializer",
            "XXX.block.model.BlockElementFace$Deserializer",
            "XXX.block.model.BlockFaceUV",
            "XXX.block.model.BlockModel",
            "XXX.block.model.BlockModel$GuiLight",
            "XXX.block.model.BlockModelDefinition",
            "XXX.block.model.BlockModelDefinition$Deserializer",
            "XXX.block.model.FaceBakery",
            "XXX.block.model.ItemModelGenerator",
            "XXX.block.model.ItemModelGenerator$Span",
            "XXX.block.model.ItemOverride",
            "XXX.block.model.ItemOverrides",
            "XXX.block.model.ItemTransform$Deserializer",
            "XXX.block.model.ItemTransforms$1",
            "XXX.block.model.ItemTransforms$TransformType",
            "XXX.block.model.MultiVariant$Deserializer",
            "XXX.block.model.Variant$Deserializer",
            "XXX.model.multipart.Condition",
            "XXX.model.multipart.MultiPart",
            "XXX.model.multipart.OrCondition",
            "XXX.model.multipart.Selector$Deserializer",
            "XXX.block.model.package-info",
            "XXX.block.statemap.package-info",
            "XXX.renderer.blockentity.BeaconRenderer",
            "XXX.renderer.blockentity.BellRenderer",
            "XXX.renderer.blockentity.BlockEntityRenderer",
            "XXX.renderer.blockentity.BlockEntityRendererProvider$Context",
            "XXX.renderer.debug.GameEventListenerRenderer",
            "XXX.renderer.debug.GameEventListenerRenderer$TrackedListener",
            "XXX.renderer.debug.GameTestDebugRenderer$Marker",
            "XXX.renderer.debug.GoalSelectorDebugRenderer$DebugGoal",
            "XXX.renderer.debug.HeightMapRenderer$1",
            "XXX.renderer.debug.NeighborsUpdateRenderer",
            "XXX.renderer.debug.RaidDebugRenderer",
            "XXX.renderer.debug.StructureRenderer",
            "XXX.renderer.debug.WaterDebugRenderer",
            "XXX.renderer.debug.package-info",
            "XXX.renderer.entity.AbstractZombieRenderer",
            "XXX.renderer.entity.ArmorStandRenderer",
            "XXX.renderer.entity.AxolotlRenderer",
            "XXX.renderer.entity.EntityRendererProvider$Context",
            "XXX.renderer.entity.EvokerFangsRenderer",
            "XXX.renderer.entity.EvokerRenderer$1",
            "XXX.renderer.entity.FallingBlockRenderer",
            "XXX.renderer.entity.FishingHookRenderer",
            "XXX.renderer.entity.GhastRenderer",
            "XXX.renderer.entity.GlowSquidRenderer",
            "XXX.entity.layers.PlayerItemInHandLayer",
            "XXX.entity.layers.SaddleLayer",
            "XXX.entity.layers.ShulkerHeadLayer",
            "XXX.entity.layers.SnowGolemHeadLayer",
            "XXX.entity.layers.SpinAttackEffectLayer",
            "XXX.entity.layers.StuckInBodyLayer",
            "XXX.entity.layers.VillagerProfessionLayer",
            "XXX.entity.layers.WitherArmorLayer",
            "XXX.entity.layers.package-info",
            "XXX.entity.player.PlayerRenderer",
            "XXX.renderer.item.ItemProperties",
            "XXX.renderer.item.ItemProperties$2",
            "XXX.renderer.item.ItemPropertyFunction",
            "XXX.client.renderer.package-info",
            "XXX.renderer.texture.AtlasSet",
            "XXX.renderer.texture.HttpTexture",
            "XXX.renderer.texture.MissingTextureAtlasSprite",
            "XXX.renderer.texture.PreloadedTexture",
            "XXX.renderer.texture.SimpleTexture$TextureImage",
            "XXX.renderer.texture.Stitcher$Holder",
            "XXX.renderer.texture.Stitcher$SpriteLoader",
            "XXX.renderer.texture.TextureAtlas",
            "XXX.renderer.texture.TextureAtlasSprite",
            "XXX.renderer.texture.TextureAtlasSprite$AnimatedTexture",
            "XXX.renderer.texture.TextureAtlasSprite$Info",
            "XXX.renderer.texture.TextureManager",
            "XXX.renderer.texture.package-info",
            "XXX.client.resources.ClientPackSource",
            "XXX.client.resources.ClientPackSource$2",
            "XXX.client.resources.DefaultPlayerSkin",
            "XXX.client.resources.FoliageColorReloadListener",
            "XXX.client.resources.LegacyPackResourcesAdapter",
            "XXX.client.resources.MobEffectTextureManager",
            "XXX.client.resources.PaintingTextureManager",
            "XXX.client.resources.SkinManager$1",
            "XXX.client.resources.SplashManager",
            "XXX.resources.language.ClientLanguage",
            "XXX.resources.language.I18n",
            "XXX.resources.language.LanguageManager",
            "XXX.metadata.animation.AnimationFrame",
            "XXX.metadata.animation.AnimationMetadataSection$1",
            "XXX.commands.arguments.NbtPathArgument$MatchElementNode",
            "XXX.commands.arguments.NbtPathArgument$MatchRootObjectNode",
            "XXX.commands.arguments.NbtPathArgument$Node",
            "XXX.commands.arguments.ObjectiveArgument",
            "XXX.commands.arguments.OperationArgument",
            "XXX.commands.arguments.OperationArgument$SimpleOperation",
            "XXX.commands.arguments.RangeArgument",
            "XXX.commands.arguments.RangeArgument$Ints",
            "XXX.commands.arguments.ScoreHolderArgument",
            "XXX.commands.arguments.ScoreHolderArgument$SelectorResult",
            "XXX.commands.arguments.ScoreboardSlotArgument",
            "XXX.commands.arguments.TeamArgument",
            "XXX.commands.arguments.UuidArgument",
            "XXX.arguments.blocks.BlockPredicateArgument",
            "XXX.arguments.blocks.BlockPredicateArgument$BlockPredicate",
            "XXX.arguments.blocks.BlockPredicateArgument$TagPredicate",
            "XXX.arguments.blocks.BlockStateParser",
            "XXX.arguments.coordinates.BlockPosArgument",
            "XXX.arguments.coordinates.Coordinates",
            "XXX.arguments.coordinates.RotationArgument",
            "XXX.arguments.coordinates.Vec2Argument",
            "XXX.arguments.coordinates.WorldCoordinate",
            "XXX.arguments.coordinates.package-info",
            "XXX.arguments.item.FunctionArgument$1",
            "XXX.arguments.item.FunctionArgument$Result",
            "XXX.arguments.item.ItemInput",
            "XXX.arguments.item.ItemPredicateArgument",
            "XXX.arguments.item.ItemPredicateArgument$Result",
            "XXX.arguments.item.package-info",
            "XXX.arguments.selector.EntitySelector",
            "XXX.minecraft.core.Registry",
            "XXX.minecraft.core.RegistryAccess$RegistryData",
            "XXX.minecraft.core.Rotations",
            "XXX.minecraft.core.SectionPos$1",
            "XXX.minecraft.core.Vec3i",
            "XXX.core.cauldron.CauldronInteraction",
            "XXX.core.particles.DustColorTransitionOptions$1",
            "XXX.core.particles.ItemParticleOption",
            "XXX.core.particles.ParticleOptions",
            "XXX.core.particles.ParticleType",
            "XXX.core.particles.ParticleTypes$1",
            "XXX.core.particles.SimpleParticleType$1",
            "XXX.core.particles.VibrationParticleOption$1",
            "XXX.minecraft.data.BlockFamilies",
            "XXX.minecraft.data.BlockFamily$1",
            "XXX.minecraft.data.BlockFamily$Variant",
            "XXX.data.recipes.RecipeProvider",
            "XXX.data.recipes.ShapedRecipeBuilder$Result",
            "XXX.data.recipes.ShapelessRecipeBuilder$Result",
            "XXX.data.recipes.SimpleCookingRecipeBuilder$Result",
            "XXX.data.recipes.SingleItemRecipeBuilder$Result",
            "XXX.data.recipes.SpecialRecipeBuilder$1",
            "XXX.data.recipes.UpgradeRecipeBuilder$Result",
            "XXX.data.structures.NbtToSnbt",
            "XXX.data.structures.SnbtToNbt$Filter",
            "XXX.data.tags.GameEventTagsProvider",
            "XXX.data.tags.TagsProvider",
            "XXX.data.tags.TagsProvider$TagAppender",
            "XXX.data.worldgen.BastionBridgePools",
            "XXX.data.worldgen.BastionHousingUnitsPools",
            "XXX.data.worldgen.BastionSharedPools",
            "XXX.data.worldgen.BiomeDefaultFeatures",
            "XXX.data.worldgen.DesertVillagePools",
            "XXX.data.worldgen.Features$Configs",
            "XXX.data.worldgen.Features$States",
            "XXX.data.worldgen.PlainVillagePools",
            "XXX.data.worldgen.ProcessorLists",
            "XXX.data.worldgen.SnowyVillagePools",
            "XXX.data.worldgen.SurfaceBuilders",
            "XXX.data.worldgen.VillagePools",
            "XXX.worldgen.biome.Biomes",
            "XXX.worldgen.biome.package-info",
            "XXX.gametest.framework.GameTest",
            "XXX.gametest.framework.GameTestAssertPosException",
            "XXX.gametest.framework.GameTestBatchRunner",
            "XXX.gametest.framework.GameTestEvent",
            "XXX.gametest.framework.GameTestHelper",
            "XXX.gametest.framework.GameTestInfo",
            "XXX.gametest.framework.GameTestRegistry",
            "XXX.gametest.framework.GlobalTestReporter",
            "XXX.gametest.framework.LogTestReporter",
            "XXX.gametest.framework.MultipleTestTracker$1",
            "XXX.minecraft.nbt.SnbtPrinterTagVisitor",
            "XXX.minecraft.nbt.StringTag$1",
            "XXX.minecraft.nbt.TextComponentTagVisitor",
            "XXX.protocol.game.ClientboundAddVibrationSignalPacket",
            "XXX.protocol.game.ClientboundAwardStatsPacket",
            "XXX.protocol.game.ClientboundBlockDestructionPacket",
            "XXX.protocol.game.ClientboundBlockEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket",
            "XXX.protocol.game.ClientboundBossEventPacket$Operation",
            "XXX.protocol.game.ClientboundChatPacket",
            "XXX.protocol.game.ClientboundCommandsPacket",
            "XXX.protocol.game.ClientboundCommandsPacket$Entry",
            "XXX.protocol.game.ClientboundContainerClosePacket",
            "XXX.protocol.game.ClientboundContainerSetDataPacket",
            "XXX.protocol.game.ClientboundCooldownPacket",
            "XXX.protocol.game.ClientboundCustomSoundPacket",
            "XXX.protocol.game.ClientboundEntityEventPacket",
            "XXX.protocol.game.ClientboundForgetLevelChunkPacket",
            "XXX.protocol.game.ClientboundGameEventPacket$Type",
            "XXX.protocol.game.ClientboundKeepAlivePacket",
            "XXX.protocol.game.ClientboundLevelEventPacket",
            "XXX.protocol.game.ClientboundLightUpdatePacket",
            "XXX.protocol.game.ClientboundMapItemDataPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket",
            "XXX.protocol.game.ClientboundMoveEntityPacket$PosRot",
            "XXX.protocol.game.ClientboundMoveVehiclePacket",
            "XXX.protocol.game.ClientboundOpenScreenPacket",
            "XXX.protocol.game.ClientboundPlaceGhostRecipePacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket",
            "XXX.protocol.game.ClientboundPlayerCombatPacket$Event",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$1",
            "XXX.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate",
            "XXX.protocol.game.ClientboundPlayerPositionPacket",
            "XXX.protocol.game.ClientboundRecipePacket",
            "XXX.protocol.game.ClientboundRemoveEntitiesPacket",
            "XXX.protocol.game.ClientboundResourcePackPacket",
            "XXX.protocol.game.ClientboundRotateHeadPacket",
            "XXX.protocol.game.ClientboundSelectAdvancementsTabPacket",
            "XXX.protocol.game.ClientboundSetBorderPacket$1",
            "XXX.protocol.game.ClientboundSetCameraPacket",
            "XXX.protocol.game.ClientboundSetChunkCacheCenterPacket",
            "XXX.protocol.game.ClientboundSetDefaultSpawnPositionPacket",
            "XXX.protocol.game.ClientboundSetEntityDataPacket",
            "XXX.protocol.game.ClientboundSetEntityMotionPacket",
            "XXX.protocol.game.ClientboundSetExperiencePacket",
            "XXX.protocol.game.ClientboundSetObjectivePacket",
            "XXX.protocol.game.ClientboundSetPlayerTeamPacket",
            "XXX.protocol.game.ClientboundSetTimePacket",
            "XXX.protocol.game.ClientboundSetTitlesPacket$Type",
            "XXX.protocol.game.ClientboundSoundPacket",
            "XXX.protocol.game.ClientboundTabListPacket",
            "XXX.protocol.game.ClientboundTakeItemEntityPacket",
            "XXX.protocol.game.ClientboundUpdateAdvancementsPacket",
            "XXX.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot",
            "XXX.protocol.game.ClientboundUpdateRecipesPacket",
            "XXX.protocol.game.DebugEntityNameGenerator",
            "XXX.protocol.game.ServerGamePacketListener",
            "XXX.protocol.game.ServerboundBlockEntityTagQuery",
            "XXX.protocol.game.ServerboundChatPacket",
            "XXX.protocol.game.ServerboundClientCommandPacket$Action",
            "XXX.protocol.game.ServerboundCommandSuggestionPacket",
            "XXX.protocol.game.ServerboundContainerButtonClickPacket",
            "XXX.protocol.game.ServerboundContainerClosePacket",
            "XXX.protocol.game.ServerboundEditBookPacket",
            "XXX.protocol.game.ServerboundInteractPacket",
            "XXX.protocol.game.ServerboundJigsawGeneratePacket",
            "XXX.protocol.game.ServerboundLockDifficultyPacket",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Pos",
            "XXX.protocol.game.ServerboundMovePlayerPacket$Rot",
            "XXX.protocol.game.ServerboundPaddleBoatPacket",
            "XXX.protocol.game.ServerboundPlaceRecipePacket",
            "XXX.protocol.game.ServerboundPlayerActionPacket",
            "XXX.protocol.game.ServerboundPlayerCommandPacket",
            "XXX.protocol.game.ServerboundPlayerInputPacket",
            "XXX.protocol.game.ServerboundRecipeBookSeenRecipePacket",
            "XXX.protocol.game.ServerboundResourcePackPacket",
            "XXX.protocol.game.ServerboundSeenAdvancementsPacket",
            "XXX.protocol.game.ServerboundSelectTradePacket",
            "XXX.protocol.game.ServerboundSetCarriedItemPacket",
            "XXX.protocol.game.ServerboundSetCommandMinecartPacket",
            "XXX.protocol.game.ServerboundSetJigsawBlockPacket",
            "XXX.protocol.game.ServerboundSignUpdatePacket",
            "XXX.protocol.game.ServerboundTeleportToEntityPacket",
            "XXX.protocol.game.ServerboundUseItemPacket",
            "XXX.protocol.handshake.ClientIntentionPacket",
            "XXX.protocol.handshake.package-info",
            "XXX.protocol.login.ClientboundCustomQueryPacket",
            "XXX.protocol.login.ClientboundHelloPacket",
            "XXX.protocol.login.ClientboundLoginDisconnectPacket",
            "XXX.protocol.login.ServerboundCustomQueryPacket",
            "XXX.protocol.login.ServerboundKeyPacket",
            "XXX.network.protocol.package-info",
            "XXX.protocol.status.ClientboundPongResponsePacket",
            "XXX.protocol.status.ServerStatus",
            "XXX.protocol.status.ServerStatus$Players$Serializer",
            "XXX.protocol.status.ServerStatus$Version",
            "XXX.protocol.status.ServerStatusPacketListener",
            "XXX.protocol.status.ServerboundStatusRequestPacket",
            "XXX.network.syncher.EntityDataAccessor",
            "XXX.network.syncher.EntityDataSerializers",
            "XXX.network.syncher.EntityDataSerializers$10",
            "XXX.network.syncher.EntityDataSerializers$12",
            "XXX.network.syncher.EntityDataSerializers$14",
            "XXX.network.syncher.EntityDataSerializers$16",
            "XXX.network.syncher.EntityDataSerializers$18",
            "XXX.network.syncher.EntityDataSerializers$2",
            "XXX.network.syncher.EntityDataSerializers$4",
            "XXX.network.syncher.EntityDataSerializers$6",
            "XXX.network.syncher.EntityDataSerializers$8",
            "XXX.network.syncher.SynchedEntityData",
            "XXX.network.syncher.package-info",
            "XXX.minecraft.obfuscate.KeepAfterObfuscation",
            "net.minecraft.package-info",
            "XXX.minecraft.realms.NarrationHelper",
            "XXX.minecraft.realms.RealmsConnect",
            "XXX.minecraft.realms.RealmsLabel",
            "XXX.minecraft.realms.RealmsScreen",
            "XXX.minecraft.realms.RepeatedNarrator",
            "XXX.minecraft.realms.package-info",
            "XXX.minecraft.recipebook.ServerPlaceRecipe",
            "XXX.minecraft.server.Eula",
            "XXX.minecraft.server.Main",
            "XXX.minecraft.server.MinecraftServer",
            "XXX.minecraft.server.MinecraftServer$2",
            "XXX.minecraft.server.PlayerAdvancements$1",
            "XXX.minecraft.server.ServerAdvancementManager",
            "XXX.minecraft.server.ServerFunctionManager",
            "XXX.minecraft.server.ServerInterface",
            "XXX.minecraft.server.ServerScoreboard",
            "XXX.minecraft.server.TickTask",
            "XXX.server.bossevents.CustomBossEvents",
            "XXX.server.commands.AdvancementCommands",
            "XXX.server.commands.AdvancementCommands$Action",
            "XXX.server.commands.AdvancementCommands$Action$2",
            "XXX.server.commands.AttributeCommand",
            "XXX.server.commands.BanListCommands",
            "XXX.server.commands.BossBarCommands",
            "XXX.server.commands.CloneCommands",
            "XXX.server.commands.CloneCommands$Mode",
            "XXX.server.commands.DataPackCommand$Inserter",
            "XXX.server.commands.DebugCommand",
            "XXX.server.commands.DebugPathCommand",
            "XXX.server.commands.DifficultyCommand",
            "XXX.server.commands.EmoteCommands",
            "XXX.server.commands.ExecuteCommand",
            "XXX.server.commands.ExecuteCommand$CommandPredicate",
            "XXX.server.commands.ExperienceCommand$Type",
            "XXX.server.commands.FillCommand$Mode",
            "XXX.server.commands.FunctionCommand",
            "XXX.server.commands.GameRuleCommand",
            "XXX.server.commands.GiveCommand",
            "XXX.server.commands.ItemCommands",
            "XXX.server.commands.SaveAllCommand",
            "XXX.server.commands.SaveOnCommand",
            "XXX.server.commands.ScheduleCommand",
            "XXX.server.commands.SeedCommand",
            "XXX.server.commands.SetBlockCommand$Filter",
            "XXX.server.commands.SetPlayerIdleTimeoutCommand",
            "XXX.server.commands.SetWorldSpawnCommand",
            "XXX.server.commands.SpreadPlayersCommand",
            "XXX.server.level.PlayerRespawnLogic",
            "XXX.server.level.ServerBossEvent",
            "XXX.server.level.ServerChunkCache$1",
            "XXX.server.level.ServerEntity",
            "XXX.server.level.ServerLevel$1",
            "XXX.server.level.ServerPlayer",
            "XXX.server.level.ThreadedLevelLightEngine",
            "XXX.server.level.Ticket",
            "XXX.server.level.WorldGenRegion",
            "XXX.server.level.package-info",
            "XXX.level.progress.ChunkProgressListenerFactory",
            "XXX.level.progress.ProcessorChunkProgressListener",
            "XXX.level.progress.package-info",
            "XXX.server.network.MemoryServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerConnectionListener$1",
            "XXX.server.network.ServerConnectionListener$LatencySimulator",
            "XXX.server.network.ServerGamePacketListenerImpl",
            "XXX.server.network.ServerHandshakePacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl",
            "XXX.server.network.ServerLoginPacketListenerImpl$State",
            "XXX.minecraft.tags.ItemTags",
            "XXX.minecraft.tags.SetTag",
            "XXX.minecraft.tags.StaticTagHelper$1",
            "XXX.minecraft.tags.StaticTags",
            "XXX.minecraft.tags.Tag$1",
            "XXX.minecraft.tags.Tag$BuilderEntry",
            "XXX.minecraft.tags.Tag$Entry",
            "XXX.minecraft.tags.Tag$OptionalElementEntry",
            "XXX.minecraft.tags.Tag$TagEntry",
            "XXX.minecraft.tags.TagCollection$1",
            "XXX.minecraft.tags.TagContainer$Builder",
            "XXX.minecraft.tags.TagManager$1",
            "XXX.minecraft.util.ExtraCodecs",
            "XXX.minecraft.util.IntRange",
            "XXX.minecraft.util.UniformFloat",
            "XXX.minecraft.util.Unit",
            "XXX.minecraft.util.WeighedRandom",
            "XXX.util.datafix.DataFixTypes",
            "XXX.util.datafix.DataFixers$1",
            "XXX.util.datafix.PackedBitStorage",
            "XXX.datafix.fixes.AddNewChoices",
            "XXX.datafix.fixes.AdvancementsRenameFix",
            "XXX.datafix.fixes.BedBlockEntityInjecter",
            "XXX.datafix.fixes.BeehivePoiRenameFix",
            "XXX.datafix.fixes.BitStorageAlignFix",
            "XXX.datafix.fixes.BlockEntityBlockStateFix",
            "XXX.datafix.fixes.BlockEntityIdFix",
            "XXX.datafix.fixes.BlockEntityKeepPacked",
            "XXX.datafix.fixes.BlockEntitySignTextStrictJsonFix",
            "XXX.datafix.fixes.BlockEntityUUIDFix",
            "XXX.datafix.fixes.BlockRenameFix",
            "XXX.datafix.fixes.BlockRenameFixWithJigsaw",
            "XXX.datafix.fixes.BlockStateData",
            "XXX.datafix.fixes.CatTypeFix",
            "XXX.datafix.schemas.V2684",
            "XXX.datafix.schemas.V2688",
            "XXX.datafix.schemas.V700",
            "XXX.datafix.schemas.V702",
            "XXX.datafix.schemas.V704",
            "XXX.datafix.schemas.V705",
            "XXX.datafix.schemas.V808",
            "XXX.datafix.schemas.V99$1",
            "XXX.monitoring.jmx.MinecraftServerStatistics",
            "XXX.monitoring.jmx.MinecraftServerStatistics$AttributeDescription",
            "XXX.util.profiling.ActiveProfiler",
            "XXX.util.profiling.ActiveProfiler$PathEntry",
            "XXX.util.profiling.EmptyProfileResults",
            "XXX.util.profiling.FilledProfileResults$1",
            "XXX.util.profiling.InactiveProfiler",
            "XXX.util.profiling.ProfileResults",
            "XXX.util.profiling.ProfilerFiller$1",
            "XXX.util.profiling.ResultField",
            "XXX.util.profiling.package-info",
            "XXX.util.thread.NamedThreadFactory",
            "XXX.util.thread.ProcessorHandle$1",
            "XXX.util.thread.ReentrantBlockableEventLoop",
            "XXX.util.thread.StrictQueue$FixedPriorityQueue",
            "XXX.util.thread.StrictQueue$QueueStrictQueue",
            "XXX.util.worldupdate.WorldUpgrader",
            "XXX.minecraft.world.BossEvent",
            "XXX.minecraft.world.BossEvent$BossBarOverlay",
            "XXX.minecraft.world.CompoundContainer",
            "XXX.minecraft.world.ContainerHelper",
            "XXX.minecraft.world.Containers",
            "XXX.minecraft.world.DifficultyInstance",
            "XXX.minecraft.world.InteractionResult",
            "XXX.minecraft.world.LockCode",
            "XXX.minecraft.world.Nameable",
            "XXX.world.entity.AgeableMob$AgeableMobGroupData",
            "XXX.world.entity.EntityDimensions",
            "XXX.world.entity.EntitySelector",
            "XXX.world.entity.EntityType",
            "XXX.world.entity.GlowSquid",
            "XXX.world.entity.ItemBasedSteering",
            "XXX.world.entity.LightningBolt",
            "XXX.world.entity.LivingEntity$1",
            "XXX.world.entity.Mob$1",
            "XXX.world.entity.MobSpawnType",
            "XXX.world.entity.MoverType",
            "XXX.world.entity.OwnableEntity",
            "XXX.world.entity.PlayerRideable",
            "XXX.world.entity.Pose",
            "XXX.world.entity.ReputationEventHandler",
            "XXX.world.entity.Shearable",
            "XXX.world.entity.SlotAccess$1",
            "XXX.world.entity.SlotAccess$3",
            "XXX.world.entity.SpawnPlacements",
            "XXX.world.entity.SpawnPlacements$SpawnPredicate",
            "XXX.world.entity.TamableAnimal",
            "XXX.entity.ai.Brain$1",
            "XXX.entity.ai.Brain$Provider",
            "XXX.ai.attributes.AttributeInstance",
            "XXX.ai.attributes.AttributeModifier",
            "XXX.ai.attributes.AttributeSupplier",
            "XXX.ai.attributes.Attributes",
            "XXX.ai.attributes.RangedAttribute",
            "XXX.ai.behavior.AcquirePoi",
            "XXX.ai.behavior.AnimalMakeLove",
            "XXX.ai.behavior.BabyFollowAdult",
            "XXX.ai.behavior.BecomePassiveIfMemoryPresent",
            "XXX.ai.behavior.Behavior$Status",
            "XXX.ai.behavior.BlockPosTracker",
            "XXX.ai.behavior.CopyMemoryWithExpiry",
            "XXX.ai.behavior.FollowTemptation",
            "XXX.ai.behavior.GateBehavior$1",
            "XXX.ai.behavior.GateBehavior$RunningPolicy",
            "XXX.ai.behavior.GateBehavior$RunningPolicy$2",
            "XXX.ai.behavior.GoOutsideToCelebrate",
            "XXX.ai.behavior.GoToClosestVillage",
            "XXX.ai.behavior.GoToWantedItem",
            "XXX.ai.behavior.InsideBrownianWalk",
            "XXX.ai.behavior.InteractWithDoor",
            "XXX.ai.behavior.LocateHidingPlace",
            "XXX.ai.behavior.LookAndFollowTradingPlayerSink",
            "XXX.ai.behavior.MeleeAttack",
            "XXX.ai.behavior.MoveToSkySeeingSpot",
            "XXX.ai.behavior.PlayTagWithOtherKids",
            "XXX.ai.behavior.PositionTracker",
            "XXX.ai.behavior.RandomSwim",
            "XXX.ai.behavior.UpdateActivityFromSchedule",
            "XXX.ai.behavior.ValidateNearbyPoi",
            "XXX.ai.behavior.VillageBoundRandomStroll",
            "XXX.ai.behavior.VillagerGoalPackages",
            "XXX.ai.behavior.VillagerPanicTrigger",
            "XXX.ai.behavior.WeightedList",
            "XXX.ai.behavior.WeightedList$WeightedEntry",
            "XXX.ai.behavior.WorkAtComposter",
            "XXX.ai.behavior.YieldJobSite",
            "XXX.ai.control.BodyRotationControl",
            "XXX.ai.control.SmoothSwimmingMoveControl",
            "XXX.ai.sensing.DummySensor",
            "XXX.ai.sensing.HoglinSpecificSensor",
            "XXX.ai.sensing.VillagerBabiesSensor",
            "XXX.ai.sensing.package-info",
            "XXX.ai.targeting.package-info",
            "XXX.ai.util.AirRandomPos",
            "XXX.ai.util.LandRandomPos",
            "XXX.entity.animal.Cat",
            "XXX.entity.animal.Cat$CatRelaxOnOwnerGoal",
            "XXX.entity.animal.Chicken",
            "XXX.entity.animal.Cow",
            "XXX.entity.animal.Dolphin$1",
            "XXX.entity.animal.WaterAnimal",
            "XXX.entity.animal.Wolf$WolfAvoidEntityGoal",
            "XXX.animal.axolotl.Axolotl$AxolotlGroupData",
            "XXX.animal.axolotl.Axolotl$AxolotlMoveControl",
            "XXX.animal.axolotl.Axolotl$Variant",
            "XXX.animal.axolotl.PlayDead",
            "XXX.animal.axolotl.package-info",
            "XXX.animal.horse.AbstractChestedHorse$1",
            "XXX.animal.horse.AbstractHorse$1",
            "XXX.animal.horse.Horse",
            "XXX.animal.horse.Llama",
            "XXX.animal.horse.Llama$LlamaAttackWolfGoal",
            "XXX.animal.horse.Llama$LlamaHurtByTargetGoal",
            "XXX.animal.horse.Mule",
            "XXX.animal.horse.SkeletonTrapGoal",
            "XXX.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal",
            "XXX.animal.horse.ZombieHorse",
            "XXX.entity.animal.package-info",
            "XXX.entity.decoration.ItemFrame$2",
            "XXX.entity.decoration.Motive",
            "XXX.entity.decoration.package-info",
            "XXX.entity.item.ItemEntity",
            "XXX.entity.item.package-info",
            "XXX.entity.monster.AbstractIllager$IllagerArmPose",
            "XXX.entity.monster.AbstractSkeleton",
            "XXX.entity.monster.Blaze",
            "XXX.entity.monster.CaveSpider",
            "XXX.entity.monster.CrossbowAttackMob",
            "XXX.entity.monster.Drowned$DrownedAttackGoal",
            "XXX.entity.monster.Drowned$DrownedGoToWaterGoal",
            "XXX.entity.monster.Drowned$DrownedSwimUpGoal",
            "XXX.entity.monster.ElderGuardian",
            "XXX.entity.monster.EnderMan$EndermanFreezeWhenLookedAt",
            "XXX.entity.monster.EnderMan$EndermanLookForPlayerGoal",
            "XXX.entity.monster.Endermite",
            "XXX.entity.monster.Evoker",
            "XXX.entity.monster.Evoker$EvokerAttackSpellGoal",
            "XXX.entity.monster.Evoker$EvokerSummonSpellGoal",
            "XXX.entity.monster.Ghast",
            "XXX.entity.monster.Ghast$GhastMoveControl",
            "XXX.entity.monster.Ghast$RandomFloatAroundGoal",
            "XXX.entity.monster.Guardian",
            "XXX.entity.monster.Guardian$GuardianAttackSelector",
            "XXX.entity.monster.Husk",
            "XXX.entity.monster.Illusioner$1",
            "XXX.entity.monster.Illusioner$IllusionerMirrorSpellGoal",
            "XXX.entity.monster.Monster",
            "XXX.entity.monster.PatrollingMonster$LongDistancePatrolGoal",
            "XXX.entity.monster.Phantom$1",
            "XXX.entity.monster.Phantom$PhantomAttackPlayerTargetGoal",
            "XXX.entity.monster.Phantom$PhantomBodyRotationControl",
            "XXX.entity.monster.Phantom$PhantomLookControl",
            "XXX.entity.monster.Phantom$PhantomMoveTargetGoal",
            "XXX.entity.monster.Pillager",
            "XXX.entity.monster.Ravager",
            "XXX.entity.monster.Ravager$RavagerMeleeAttackGoal",
            "XXX.entity.monster.Ravager$RavagerNodeEvaluator",
            "XXX.entity.monster.Shulker$1",
            "XXX.entity.monster.Shulker$ShulkerBodyRotationControl",
            "XXX.entity.monster.Shulker$ShulkerNearestAttackGoal",
            "XXX.entity.monster.Silverfish",
            "XXX.entity.monster.Silverfish$SilverfishWakeUpFriendsGoal",
            "XXX.entity.monster.Slime",
            "XXX.entity.monster.Slime$SlimeFloatGoal",
            "XXX.entity.monster.Slime$SlimeMoveControl",
            "XXX.entity.monster.SpellcasterIllager",
            "XXX.entity.monster.SpellcasterIllager$SpellcasterCastingSpellGoal",
            "XXX.entity.monster.Spider",
            "XXX.entity.monster.Spider$SpiderEffectsGroupData",
            "XXX.entity.monster.Stray",
            "XXX.entity.monster.Strider$1",
            "XXX.entity.monster.Strider$StriderPathNavigation",
            "XXX.entity.monster.Vex$VexChargeAttackGoal",
            "XXX.entity.monster.Vex$VexMoveControl",
            "XXX.entity.monster.Vindicator",
            "XXX.entity.monster.Vindicator$VindicatorJohnnyAttackGoal",
            "XXX.entity.monster.Witch",
            "XXX.entity.monster.Zoglin",
            "XXX.entity.monster.Zombie$ZombieAttackTurtleEggGoal",
            "XXX.entity.monster.ZombieVillager",
            "XXX.monster.hoglin.Hoglin",
            "XXX.monster.hoglin.HoglinBase",
            "XXX.entity.monster.package-info",
            "XXX.monster.piglin.Piglin",
            "XXX.monster.piglin.PiglinArmPose",
            "XXX.monster.piglin.PiglinBruteAi",
            "XXX.monster.piglin.StartAdmiringItemIfSeen",
            "XXX.monster.piglin.StopAdmiringIfItemTooFarAway",
            "XXX.monster.piglin.StopHoldingItemIfNoLongerAdmiring",
            "XXX.entity.npc.AbstractVillager",
            "XXX.entity.npc.ClientSideMerchant",
            "XXX.entity.npc.Npc",
            "XXX.entity.npc.VillagerData",
            "XXX.entity.npc.VillagerProfession",
            "XXX.entity.npc.VillagerTrades$DyedArmorForEmeralds",
            "XXX.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem",
            "XXX.entity.npc.VillagerTrades$EnchantedItemForEmeralds",
            "XXX.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems",
            "XXX.entity.npc.VillagerTrades$SuspisciousStewForEmerald",
            "XXX.entity.npc.VillagerTrades$TreasureMapForEmeralds",
            "XXX.entity.npc.WanderingTrader",
            "XXX.entity.npc.WanderingTraderSpawner",
            "XXX.world.entity.package-info",
            "XXX.entity.player.ChatVisiblity",
            "XXX.entity.player.Player",
            "XXX.entity.player.Player$BedSleepingProblem",
            "XXX.entity.player.StackedContents",
            "XXX.entity.player.package-info",
            "XXX.entity.projectile.AbstractArrow$Pickup",
            "XXX.entity.projectile.Arrow",
            "XXX.entity.projectile.EvokerFangs",
            "XXX.entity.projectile.Fireball",
            "XXX.entity.projectile.FishingHook",
            "XXX.entity.projectile.FishingHook$FishHookState",
            "XXX.entity.projectile.ItemSupplier",
            "XXX.entity.projectile.LlamaSpit",
            "XXX.entity.projectile.ProjectileUtil",
            "XXX.entity.projectile.SmallFireball",
            "XXX.entity.projectile.SpectralArrow",
            "XXX.entity.projectile.ThrowableProjectile",
            "XXX.entity.projectile.ThrownEnderpearl",
            "XXX.entity.projectile.ThrownPotion",
            "XXX.entity.projectile.WitherSkull",
            "XXX.entity.raid.Raid",
            "XXX.entity.raid.Raid$RaidStatus",
            "XXX.entity.raid.Raider",
            "XXX.entity.raid.Raider$ObtainRaidLeaderBannerGoal",
            "XXX.entity.raid.Raider$RaiderMoveThroughVillageGoal",
            "XXX.entity.raid.package-info",
            "XXX.entity.schedule.Keyframe",
            "XXX.entity.schedule.ScheduleBuilder",
            "XXX.entity.schedule.Timeline",
            "XXX.entity.vehicle.AbstractMinecart",
            "XXX.entity.vehicle.AbstractMinecart$Type",
            "XXX.entity.vehicle.AbstractMinecartContainer$1",
            "XXX.world.inventory.ClickAction",
            "XXX.world.inventory.ContainerData",
            "XXX.world.inventory.ContainerLevelAccess$1",
            "XXX.world.inventory.ContainerListener",
            "XXX.world.inventory.CraftingMenu",
            "XXX.world.inventory.DataSlot$1",
            "XXX.world.inventory.DataSlot$3",
            "XXX.world.inventory.EnchantmentMenu",
            "XXX.world.inventory.EnchantmentMenu$2",
            "XXX.world.inventory.FurnaceFuelSlot",
            "XXX.world.inventory.FurnaceResultSlot",
            "XXX.world.inventory.GrindstoneMenu$1",
            "XXX.world.inventory.GrindstoneMenu$3",
            "XXX.world.inventory.HopperMenu",
            "XXX.world.inventory.HorseInventoryMenu$1",
            "XXX.world.inventory.InventoryMenu",
            "XXX.world.inventory.InventoryMenu$2",
            "XXX.world.inventory.ItemCombinerMenu$1",
            "XXX.world.inventory.LecternMenu",
            "XXX.world.inventory.LoomMenu",
            "XXX.world.inventory.LoomMenu$2",
            "XXX.world.inventory.LoomMenu$4",
            "XXX.world.inventory.LoomMenu$6",
            "XXX.world.inventory.MenuType",
            "XXX.world.inventory.MerchantContainer",
            "XXX.world.inventory.MerchantResultSlot",
            "XXX.world.inventory.RecipeBookMenu",
            "XXX.world.inventory.RecipeHolder",
            "XXX.world.inventory.ResultSlot",
            "XXX.world.inventory.ShulkerBoxSlot",
            "XXX.world.inventory.Slot",
            "XXX.world.inventory.SmokerMenu",
            "XXX.world.inventory.StonecutterMenu",
            "XXX.world.inventory.StonecutterMenu$2",
            "XXX.inventory.tooltip.BundleTooltip",
            "XXX.inventory.tooltip.package-info",
            "XXX.world.item.BundleItem",
            "XXX.world.item.CompassItem",
            "XXX.world.item.CreativeModeTab",
            "XXX.world.item.CreativeModeTab$10",
            "XXX.world.item.CreativeModeTab$12",
            "XXX.world.item.CreativeModeTab$3",
            "XXX.world.item.CreativeModeTab$5",
            "XXX.world.item.CreativeModeTab$7",
            "XXX.world.item.CreativeModeTab$9",
            "XXX.world.item.DebugStickItem",
            "XXX.world.item.DispensibleContainerItem",
            "XXX.world.item.FishingRodItem",
            "XXX.world.item.FoodOnAStickItem",
            "XXX.world.item.HangingEntityItem",
            "XXX.world.item.HoneyBottleItem",
            "XXX.world.item.Item",
            "XXX.world.item.Item$Properties",
            "XXX.world.item.ItemCooldowns$1",
            "XXX.world.item.ItemFrameItem",
            "XXX.world.item.ItemStack",
            "XXX.world.item.ItemUtils",
            "XXX.world.item.KnowledgeBookItem",
            "XXX.world.item.LingeringPotionItem",
            "XXX.world.item.MilkBucketItem",
            "XXX.world.item.MinecartItem$1",
            "XXX.world.item.RecordItem",
            "XXX.world.item.ScaffoldingBlockItem",
            "XXX.world.item.ShearsItem",
            "XXX.world.item.ShovelItem",
            "XXX.world.item.SimpleFoiledItem",
            "XXX.world.item.SolidBucketItem",
            "XXX.world.item.SpyglassItem",
            "XXX.world.item.SuspiciousStewItem",
            "XXX.world.item.ThrowablePotionItem",
            "XXX.world.item.TieredItem",
            "XXX.world.item.TippedArrowItem",
            "XXX.world.item.TooltipFlag$Default",
            "XXX.world.item.UseAnim",
            "XXX.world.item.WaterLilyBlockItem",
            "XXX.world.item.WritableBookItem",
            "XXX.item.alchemy.Potion",
            "XXX.item.alchemy.PotionBrewing$Mix",
            "XXX.item.alchemy.Potions",
            "XXX.item.context.BlockPlaceContext",
            "XXX.item.context.DirectionalPlaceContext$1",
            "XXX.item.context.package-info",
            "XXX.item.crafting.ArmorDyeRecipe",
            "XXX.item.crafting.BlastingRecipe",
            "XXX.item.crafting.CampfireCookingRecipe",
            "XXX.item.crafting.CustomRecipe",
            "XXX.item.crafting.FireworkStarFadeRecipe",
            "XXX.item.crafting.Ingredient",
            "XXX.item.crafting.Ingredient$ItemValue",
            "XXX.item.crafting.Ingredient$Value",
            "XXX.item.crafting.MapExtendingRecipe",
            "XXX.item.crafting.RecipeManager",
            "XXX.item.crafting.RecipeType",
            "XXX.item.crafting.RepairItemRecipe",
            "XXX.item.crafting.ShapedRecipe$Serializer",
            "XXX.item.crafting.ShapelessRecipe$Serializer",
            "XXX.item.crafting.ShulkerBoxColoring",
            "XXX.item.crafting.SimpleCookingSerializer$CookieBaker",
            "XXX.item.crafting.SingleItemRecipe",
            "XXX.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker",
            "XXX.item.crafting.SmokingRecipe",
            "XXX.item.crafting.SuspiciousStewRecipe",
            "XXX.item.crafting.UpgradeRecipe",
            "XXX.item.crafting.package-info",
            "XXX.item.enchantment.ArrowFireEnchantment",
            "XXX.item.enchantment.ArrowKnockbackEnchantment",
            "XXX.item.enchantment.BindingCurseEnchantment",
            "XXX.item.enchantment.DigDurabilityEnchantment",
            "XXX.item.enchantment.Enchantment",
            "XXX.item.enchantment.EnchantmentCategory",
            "XXX.item.enchantment.EnchantmentCategory$10",
            "XXX.item.enchantment.EnchantmentCategory$12",
            "XXX.item.enchantment.EnchantmentCategory$14",
            "XXX.item.enchantment.EnchantmentCategory$3",
            "XXX.item.enchantment.EnchantmentCategory$5",
            "XXX.item.enchantment.EnchantmentCategory$7",
            "XXX.item.enchantment.EnchantmentCategory$9",
            "XXX.item.enchantment.EnchantmentHelper$EnchantmentVisitor",
            "XXX.item.enchantment.Enchantments",
            "XXX.item.enchantment.FishingSpeedEnchantment",
            "XXX.item.enchantment.KnockbackEnchantment",
            "XXX.item.enchantment.MendingEnchantment",
            "XXX.item.enchantment.OxygenEnchantment",
            "XXX.item.enchantment.ProtectionEnchantment$Type",
            "XXX.item.enchantment.SoulSpeedEnchantment",
            "XXX.item.enchantment.ThornsEnchantment",
            "XXX.item.enchantment.TridentImpalerEnchantment",
            "XXX.item.enchantment.TridentRiptideEnchantment",
            "XXX.item.enchantment.VanishingCurseEnchantment",
            "XXX.item.enchantment.WaterWorkerEnchantment",
            "XXX.world.item.package-info",
            "XXX.item.trading.MerchantOffer",
            "XXX.item.trading.package-info",
            "XXX.world.level.BaseSpawner",
            "XXX.world.level.BlockEventData",
            "XXX.world.level.ChunkPos",
            "XXX.world.level.ChunkTickList",
            "XXX.world.level.ChunkTickList$ScheduledTick",
            "XXX.world.level.LevelReader",
            "XXX.world.level.LevelSimulatedRW",
            "XXX.world.level.LevelTimeAccess",
            "XXX.world.level.LightLayer",
            "XXX.world.level.NaturalSpawner$1",
            "XXX.world.level.NaturalSpawner$ChunkGetter",
            "XXX.world.level.NaturalSpawner$SpawnState",
            "XXX.world.level.PathNavigationRegion",
            "XXX.world.level.PotentialCalculator$PointCharge",
            "XXX.world.level.ServerTickList",
            "XXX.world.level.StructureFeatureManager",
            "XXX.world.level.TickNextTickData",
            "XXX.world.level.WorldGenLevel",
            "XXX.level.biome.AmbientMoodSettings",
            "XXX.level.biome.Biome",
            "XXX.level.biome.Biome$BiomeBuilder",
            "XXX.level.biome.Biome$ClimateParameters",
            "XXX.level.biome.Biome$Precipitation",
            "XXX.level.biome.Biome$TemperatureModifier$1",
            "XXX.level.biome.BiomeGenerationSettings",
            "XXX.level.biome.BiomeGenerationSettings$Builder",
            "XXX.level.biome.BiomeManager$NoiseBiomeSource",
            "XXX.level.biome.BiomeSpecialEffects",
            "XXX.level.biome.BiomeSpecialEffects$Builder",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$1",
            "XXX.level.biome.BiomeSpecialEffects$GrassColorModifier$3",
            "XXX.level.biome.Biomes",
            "XXX.level.biome.FixedBiomeSource",
            "XXX.level.biome.FuzzyOffsetConstantColumnBiomeZoomer",
            "XXX.level.biome.MobSpawnSettings$1",
            "XXX.level.biome.MobSpawnSettings$MobSpawnCost",
            "XXX.level.biome.MultiNoiseBiomeSource",
            "XXX.level.biome.MultiNoiseBiomeSource$NoiseParameters",
            "XXX.level.biome.MultiNoiseBiomeSource$PresetInstance",
            "XXX.level.biome.OverworldBiomeSource",
            "XXX.level.biome.package-info",
            "XXX.level.block.AbstractCandleBlock",
            "XXX.level.block.AbstractChestBlock",
            "XXX.level.block.AbstractGlassBlock",
            "XXX.level.block.AirBlock",
            "XXX.level.block.AmethystClusterBlock",
            "XXX.level.block.BuddingAmethystBlock",
            "XXX.level.block.ButtonBlock",
            "XXX.level.block.CactusBlock",
            "XXX.level.block.CampfireBlock",
            "XXX.level.block.CandleCakeBlock",
            "XXX.level.block.CartographyTableBlock",
            "XXX.level.block.CauldronBlock",
            "XXX.level.block.ChainBlock$1",
            "XXX.level.block.ChangeOverTimeFullBlock",
            "XXX.level.block.ChangeOverTimeStairBlock",
            "XXX.level.block.ChestBlock$1",
            "XXX.level.block.ChestBlock$2$1",
            "XXX.level.block.ChestBlock$4",
            "XXX.level.block.ChorusPlantBlock",
            "XXX.level.block.CocoaBlock$1",
            "XXX.level.block.ComparatorBlock",
            "XXX.level.block.ComposterBlock$EmptyContainer",
            "XXX.level.block.ComposterBlock$OutputContainer",
            "XXX.level.block.ConduitBlock",
            "XXX.level.block.CoralFanBlock",
            "XXX.level.block.CoralWallFanBlock",
            "XXX.level.block.CropBlock",
            "XXX.level.block.CrossCollisionBlock$1",
            "XXX.level.block.DaylightDetectorBlock",
            "XXX.level.block.DetectorRailBlock",
            "XXX.level.block.DiodeBlock",
            "XXX.level.block.DirtPathBlock",
            "XXX.level.block.EnderChestBlock",
            "XXX.level.block.FaceAttachedHorizontalDirectionalBlock",
            "XXX.level.block.Fallable",
            "XXX.level.block.GlassBlock",
            "XXX.level.block.GlowLichenBlock",
            "XXX.level.block.GravelBlock",
            "XXX.level.block.GrindstoneBlock$1",
            "XXX.level.block.GrowingPlantBodyBlock",
            "XXX.level.block.HalfTransparentBlock",
            "XXX.level.block.HoneyBlock",
            "XXX.level.block.HopperBlock$1",
            "XXX.level.block.HugeMushroomBlock",
            "XXX.level.block.InfestedBlock",
            "XXX.level.block.JigsawBlock",
            "XXX.level.block.KelpBlock",
            "XXX.level.block.LadderBlock",
            "XXX.level.block.LanternBlock",
            "XXX.level.block.LayeredCauldronBlock",
            "XXX.level.block.LecternBlock",
            "XXX.level.block.LevelEvent",
            "XXX.level.block.LeverBlock$1",
            "XXX.level.block.MushroomBlock",
            "XXX.level.block.NetherPortalBlock",
            "XXX.level.block.NetherSproutsBlock",
            "XXX.level.block.NetherWartBlock",
            "XXX.level.block.NoteBlock",
            "XXX.level.block.ObserverBlock",
            "XXX.level.block.PipeBlock",
            "XXX.level.block.PlayerWallHeadBlock",
            "XXX.level.block.PoweredBlock",
            "XXX.level.block.PoweredRailBlock$1",
            "XXX.level.block.PressurePlateBlock$1",
            "XXX.level.block.PumpkinBlock",
            "XXX.level.block.RailBlock$1",
            "XXX.level.block.RailState$1",
            "XXX.level.block.RedStoneWireBlock",
            "XXX.level.block.RedstoneLampBlock",
            "XXX.level.block.RedstoneTorchBlock$Toggle",
            "XXX.level.block.RenderShape",
            "XXX.level.block.RespawnAnchorBlock",
            "XXX.level.block.RodBlock",
            "XXX.level.block.RootsBlock",
            "XXX.level.block.RotatedPillarBlock$1",
            "XXX.level.block.Rotation$1",
            "XXX.level.block.SaplingBlock",
            "XXX.level.block.SculkSensorBlock",
            "XXX.level.block.SeagrassBlock",
            "XXX.level.block.TallSeagrassBlock",
            "XXX.level.block.TintedGlassBlock",
            "XXX.level.block.TorchBlock",
            "XXX.level.block.TrapDoorBlock$1",
            "XXX.level.block.TripWireBlock",
            "XXX.level.block.TripWireHookBlock",
            "XXX.level.block.TurtleEggBlock",
            "XXX.level.block.TwistingVinesPlantBlock",
            "XXX.level.block.VineBlock$1",
            "XXX.level.block.WallBlock",
            "XXX.level.block.WallSignBlock",
            "XXX.level.block.WallTorchBlock",
            "XXX.level.block.WebBlock",
            "XXX.level.block.WeepingVinesPlantBlock",
            "XXX.level.block.WetSpongeBlock",
            "XXX.level.block.WitherSkullBlock",
            "XXX.level.block.WoodButtonBlock",
            "XXX.block.entity.AbstractFurnaceBlockEntity",
            "XXX.block.entity.BannerBlockEntity",
            "XXX.block.entity.BannerPattern$Builder",
            "XXX.block.entity.BarrelBlockEntity$1",
            "XXX.block.entity.BlastFurnaceBlockEntity",
            "XXX.block.entity.BlockEntityTicker",
            "XXX.block.entity.BlockEntityType$BlockEntitySupplier",
            "XXX.block.entity.BrewingStandBlockEntity",
            "XXX.block.entity.CampfireBlockEntity",
            "XXX.block.entity.ChestBlockEntity$1",
            "XXX.block.entity.CommandBlockEntity",
            "XXX.block.entity.CommandBlockEntity$Mode",
            "XXX.block.entity.ConduitBlockEntity",
            "XXX.block.entity.FurnaceBlockEntity",
            "XXX.block.entity.HopperBlockEntity",
            "XXX.block.entity.JigsawBlockEntity$JointType",
            "XXX.block.entity.LecternBlockEntity",
            "XXX.block.entity.LecternBlockEntity$2",
            "XXX.block.entity.RandomizableContainerBlockEntity",
            "XXX.block.entity.TheEndGatewayBlockEntity",
            "XXX.block.entity.TickingBlockEntity",
            "XXX.block.entity.package-info",
            "XXX.block.grower.AbstractTreeGrower",
            "XXX.block.grower.BirchTreeGrower",
            "XXX.block.grower.JungleTreeGrower",
            "XXX.block.grower.SpruceTreeGrower",
            "XXX.level.block.package-info",
            "XXX.block.piston.PistonBaseBlock",
            "XXX.block.piston.PistonHeadBlock",
            "XXX.block.piston.PistonMath",
            "XXX.block.piston.PistonMovingBlockEntity",
            "XXX.block.piston.PistonStructureResolver",
            "XXX.block.state.BlockBehaviour",
            "XXX.block.state.BlockBehaviour$BlockStateBase",
            "XXX.block.state.BlockBehaviour$OffsetType",
            "XXX.block.state.BlockBehaviour$StateArgumentPredicate",
            "XXX.block.state.BlockState",
            "XXX.block.state.StateDefinition$Builder",
            "XXX.block.state.StateHolder",
            "XXX.block.state.package-info",
            "XXX.state.pattern.BlockPattern",
            "XXX.state.pattern.BlockPattern$BlockPatternMatch",
            "XXX.state.pattern.package-info",
            "XXX.state.predicate.BlockMaterialPredicate$1",
            "XXX.state.predicate.BlockStatePredicate",
            "XXX.state.properties.AttachFace",
            "XXX.state.properties.BedPart",
            "XXX.state.properties.BlockStateProperties",
            "XXX.state.properties.ChestType",
            "XXX.state.properties.DirectionProperty",
            "XXX.state.properties.DoubleBlockHalf",
            "XXX.state.properties.SculkSensorPhase",
            "XXX.state.properties.StairsShape",
            "XXX.state.properties.WallSide",
            "XXX.state.properties.package-info",
            "XXX.level.border.BorderChangeListener$DelegateBorderChangeListener",
            "XXX.level.border.WorldBorder",
            "XXX.level.border.WorldBorder$BorderExtent",
            "XXX.level.border.WorldBorder$Settings",
            "XXX.level.border.package-info",
            "XXX.level.chunk.ChunkBiomeContainer",
            "XXX.level.chunk.ChunkSource",
            "XXX.level.chunk.ChunkStatus$ChunkType",
            "XXX.level.chunk.ChunkStatus$LoadingTask",
            "XXX.level.chunk.DataLayer",
            "XXX.level.chunk.EmptyLevelChunk$EmptyChunkBiomeContainer",
            "XXX.level.chunk.LevelChunk$1",
            "XXX.level.chunk.LevelChunkSection",
            "XXX.level.chunk.LinearPalette",
            "XXX.level.chunk.Palette",
            "XXX.level.chunk.PalettedContainer",
            "XXX.level.chunk.ProtoChunk",
            "XXX.level.chunk.UpgradeData",
            "XXX.level.chunk.UpgradeData$BlockFixer",
            "XXX.level.chunk.UpgradeData$BlockFixers$1",
            "XXX.level.chunk.UpgradeData$BlockFixers$3",
            "XXX.level.chunk.UpgradeData$BlockFixers$5",
            "XXX.chunk.storage.ChunkSerializer",
            "XXX.chunk.storage.EntityStorage",
            "XXX.chunk.storage.OldChunkStorage$OldLevelChunk",
            "XXX.chunk.storage.RegionFile",
            "XXX.chunk.storage.RegionFile$CommitOp",
            "XXX.chunk.storage.RegionFileVersion",
            "XXX.chunk.storage.SectionStorage",
            "XXX.level.dimension.DimensionType",
            "XXX.dimension.end.DragonRespawnAnimation",
            "XXX.dimension.end.DragonRespawnAnimation$2",
            "XXX.dimension.end.DragonRespawnAnimation$4",
            "XXX.dimension.end.EndDragonFight",
            "XXX.level.dimension.package-info",
            "XXX.level.entity.ChunkStatusUpdateListener",
            "XXX.level.entity.EntityInLevelCallback",
            "XXX.level.entity.EntityLookup",
            "XXX.level.entity.EntitySection",
            "XXX.level.entity.EntityTickList",
            "XXX.level.entity.EntityTypeTest$1",
            "XXX.level.entity.LevelEntityGetter",
            "XXX.level.entity.PersistentEntitySectionManager",
            "XXX.level.entity.PersistentEntitySectionManager$Callback",
            "XXX.level.entity.TransientEntitySectionManager",
            "XXX.level.entity.TransientEntitySectionManager$Callback",
            "XXX.level.entity.package-info",
            "XXX.level.gameevent.BlockPositionSource$Type",
            "XXX.level.gameevent.EntityPositionSource$Type",
            "XXX.level.gameevent.GameEvent",
            "XXX.level.gameevent.GameEventDispatcher$1",
            "XXX.level.gameevent.GameEventListenerRegistrar",
            "XXX.level.gameevent.PositionSourceType",
            "XXX.gameevent.vibrations.VibrationListener",
            "XXX.gameevent.vibrations.VibrationPath",
            "XXX.level.levelgen.Column",
            "XXX.level.levelgen.Column$Range",
            "XXX.level.levelgen.GeodeBlockSettings",
            "XXX.level.levelgen.GeodeLayerSettings",
            "XXX.level.levelgen.Heightmap$Types",
            "XXX.level.levelgen.NoiseBasedChunkGenerator",
            "XXX.level.levelgen.NoiseSamplingSettings",
            "XXX.level.levelgen.NoiseSlideSettings",
            "XXX.level.levelgen.PhantomSpawner",
            "XXX.level.levelgen.WorldGenSettings",
            "XXX.levelgen.carver.CanyonWorldCarver",
            "XXX.levelgen.carver.CaveWorldCarver",
            "XXX.levelgen.carver.NetherWorldCarver",
            "XXX.levelgen.carver.UnderwaterCanyonWorldCarver",
            "XXX.levelgen.carver.WorldCarver",
            "XXX.levelgen.feature.AbstractFlowerFeature",
            "XXX.levelgen.feature.BambooFeature",
            "XXX.levelgen.feature.BasaltPillarFeature",
            "XXX.levelgen.feature.BastionFeature",
            "XXX.levelgen.feature.BlockPileFeature",
            "XXX.levelgen.feature.BonusChestFeature",
            "XXX.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart",
            "XXX.levelgen.feature.ConfiguredFeature",
            "XXX.levelgen.feature.CoralClawFeature",
            "XXX.levelgen.feature.CoralMushroomFeature",
            "XXX.levelgen.feature.DecoratedFeature",
            "XXX.levelgen.feature.DeltaFeature",
            "XXX.levelgen.feature.DesertPyramidFeature$FeatureStart",
            "XXX.levelgen.feature.DiskReplaceFeature",
            "XXX.levelgen.feature.DripstoneUtils",
            "XXX.levelgen.feature.EndCityFeature$EndCityStart",
            "XXX.levelgen.feature.EndIslandFeature",
            "XXX.levelgen.feature.Feature",
            "XXX.levelgen.feature.FossilFeature",
            "XXX.levelgen.feature.GlowLichenFeature",
            "XXX.levelgen.feature.HugeBrownMushroomFeature",
            "XXX.levelgen.feature.HugeFungusFeature",
            "XXX.levelgen.feature.IcePatchFeature",
            "XXX.levelgen.feature.IcebergFeature",
            "XXX.levelgen.feature.IglooFeature$FeatureStart",
            "XXX.levelgen.feature.JigsawFeature$FeatureStart",
            "XXX.levelgen.feature.JunglePyramidFeature$FeatureStart",
            "XXX.levelgen.feature.LakeFeature",
            "XXX.levelgen.feature.LargeDripstoneFeature$1",
            "XXX.levelgen.feature.LargeDripstoneFeature$WindOffsetter",
            "XXX.levelgen.feature.MineshaftFeature$MineShaftStart",
            "XXX.levelgen.feature.MonsterRoomFeature",
            "XXX.levelgen.feature.NetherFortressFeature",
            "XXX.levelgen.feature.NoOpFeature",
            "XXX.levelgen.feature.OceanMonumentFeature",
            "XXX.levelgen.feature.OreFeature",
            "XXX.levelgen.feature.RandomBooleanSelectorFeature",
            "XXX.levelgen.feature.RandomSelectorFeature",
            "XXX.levelgen.feature.ReplaceBlockFeature",
            "XXX.levelgen.feature.RuinedPortalFeature$FeatureStart",
            "XXX.levelgen.feature.SeaPickleFeature",
            "XXX.levelgen.feature.ShipwreckFeature",
            "XXX.levelgen.feature.SimpleBlockFeature",
            "XXX.levelgen.feature.SmallDripstoneFeature",
            "XXX.levelgen.feature.SpikeFeature",
            "XXX.levelgen.feature.SpikeFeature$EndSpike",
            "XXX.levelgen.feature.SpringFeature",
            "XXX.levelgen.feature.StrongholdFeature$StrongholdStart",
            "XXX.levelgen.feature.StructureFeature$StructureStartFactory",
            "XXX.levelgen.feature.SwamplandHutFeature",
            "XXX.levelgen.feature.TreeFeature",
            "XXX.levelgen.feature.VillageFeature",
            "XXX.levelgen.feature.VoidStartPlatformFeature",
            "XXX.levelgen.feature.WeightedConfiguredFeature",
            "XXX.levelgen.feature.WoodlandMansionFeature$WoodlandMansionStart",
            "XXX.feature.blockplacers.BlockPlacerType",
            "XXX.feature.blockplacers.DoublePlantPlacer",
            "XXX.feature.blockplacers.package-info",
            "XXX.feature.configurations.BlockStateConfiguration",
            "XXX.feature.configurations.CountConfiguration",
            "XXX.feature.configurations.DecoratorConfiguration",
            "XXX.feature.configurations.DiskConfiguration",
            "XXX.feature.configurations.GeodeConfiguration",
            "XXX.feature.configurations.LargeDripstoneConfiguration",
            "XXX.feature.configurations.MineshaftConfiguration",
            "XXX.feature.configurations.NoneDecoratorConfiguration",
            "XXX.feature.configurations.OceanRuinConfiguration",
            "XXX.feature.configurations.OreConfiguration$Predicates",
            "XXX.feature.configurations.RandomBooleanFeatureConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration",
            "XXX.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder",
            "XXX.feature.configurations.ReplaceBlockConfiguration",
            "XXX.feature.configurations.RuinedPortalConfiguration",
            "XXX.feature.configurations.SimpleBlockConfiguration",
            "XXX.feature.configurations.SmallDripstoneConfiguration",
            "XXX.feature.foliageplacers.FoliagePlacerType",
            "XXX.feature.foliageplacers.MegaPineFoliagePlacer",
            "XXX.feature.foliageplacers.SpruceFoliagePlacer",
            "XXX.levelgen.feature.package-info",
            "XXX.feature.stateproviders.BlockStateProviderType",
            "XXX.feature.stateproviders.PlainFlowerProvider",
            "XXX.feature.stateproviders.SimpleStateProvider",
            "XXX.feature.stateproviders.package-info",
            "XXX.feature.structures.FeaturePoolElement",
            "XXX.feature.structures.JigsawPlacement",
            "XXX.feature.structures.JigsawPlacement$PieceFactory",
            "XXX.feature.structures.JigsawPlacement$Placer",
            "XXX.feature.structures.ListPoolElement",
            "XXX.feature.structures.StructurePoolElement",
            "XXX.feature.structures.StructureTemplatePool",
            "XXX.feature.structures.package-info",
            "XXX.feature.treedecorators.BeehiveDecorator",
            "XXX.feature.treedecorators.LeaveVineDecorator",
            "XXX.feature.treedecorators.TreeDecoratorType",
            "XXX.feature.treedecorators.package-info",
            "XXX.feature.trunkplacers.FancyTrunkPlacer",
            "XXX.feature.trunkplacers.ForkingTrunkPlacer",
            "XXX.feature.trunkplacers.MegaJungleTrunkPlacer",
            "XXX.feature.trunkplacers.TrunkPlacer",
            "XXX.feature.trunkplacers.package-info",
            "XXX.levelgen.flat.FlatLevelGeneratorSettings",
            "XXX.level.levelgen.package-info",
            "XXX.levelgen.placement.BiasedRangeDecorator",
            "XXX.levelgen.placement.CarvingMaskDecoratorConfiguration",
            "XXX.levelgen.placement.ChanceDecoratorConfiguration",
            "XXX.levelgen.placement.CountDecorator",
            "XXX.levelgen.placement.CountWithExtraChanceDecorator",
            "XXX.levelgen.placement.DecoratedDecorator",
            "XXX.levelgen.placement.DecorationContext",
            "XXX.levelgen.placement.DepthAverageDecorator",
            "XXX.levelgen.placement.EmeraldPlacementDecorator",
            "XXX.levelgen.placement.EndIslandPlacementDecorator",
            "XXX.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration",
            "XXX.levelgen.placement.HeightmapDecorator",
            "XXX.levelgen.placement.IcebergPlacementDecorator",
            "XXX.levelgen.placement.LakeWaterPlacementDecorator",
            "XXX.levelgen.placement.NoiseCountFactorDecoratorConfiguration",
            "XXX.levelgen.placement.RangeDecorator",
            "XXX.levelgen.placement.Spread32Decorator",
            "XXX.levelgen.placement.TopSolidHeightMapDecorator",
            "XXX.placement.nether.CountMultiLayerDecorator",
            "XXX.placement.nether.GlowstoneDecorator",
            "XXX.placement.nether.package-info",
            "XXX.levelgen.structure.BeardedStructureStart",
            "XXX.levelgen.structure.BoundingBox$1",
            "XXX.levelgen.structure.BuriedTreasurePieces$BuriedTreasurePiece",
            "XXX.levelgen.structure.EndCityPieces",
            "XXX.levelgen.structure.EndCityPieces$2",
            "XXX.levelgen.structure.EndCityPieces$4",
            "XXX.levelgen.structure.EndCityPieces$SectionGenerator",
            "XXX.levelgen.structure.IglooPieces$IglooPiece",
            "XXX.levelgen.structure.JunglePyramidPiece$1",
            "XXX.levelgen.structure.LegacyStructureDataHandler",
            "XXX.levelgen.structure.MineShaftPieces$1",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftCrossing",
            "XXX.levelgen.structure.MineShaftPieces$MineShaftRoom",
            "XXX.levelgen.structure.NetherBridgePieces",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeCrossing",
            "XXX.levelgen.structure.NetherBridgePieces$BridgeStraight",
            "XXX.levelgen.structure.NetherBridgePieces$CastleCorridorTBalconyPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorCrossingPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleSmallCorridorPiece",
            "XXX.levelgen.structure.NetherBridgePieces$CastleStalkRoom",
            "XXX.levelgen.structure.NetherBridgePieces$NetherBridgePiece",
            "XXX.levelgen.structure.NetherBridgePieces$RoomCrossing",
            "XXX.levelgen.structure.NetherBridgePieces$StartPiece",
            "XXX.levelgen.structure.NetherFossilFeature$FeatureStart",
            "XXX.levelgen.structure.NetherFossilPieces$NetherFossilPiece",
            "XXX.levelgen.structure.OceanMonumentPieces$1",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$FitSimpleRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$MonumentBuilding",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentCoreRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXYRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYZRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentEntryRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece",
            "XXX.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleTopRoom",
            "XXX.levelgen.structure.OceanMonumentPieces$RoomDefinition",
            "XXX.levelgen.structure.OceanRuinFeature$OceanRuinStart",
            "XXX.levelgen.structure.OceanRuinPieces",
            "XXX.levelgen.structure.PoolElementStructurePiece",
            "XXX.levelgen.structure.RuinedPortalPiece$Properties",
            "XXX.levelgen.structure.ScatteredFeaturePiece",
            "XXX.levelgen.structure.ShipwreckPieces$ShipwreckPiece",
            "XXX.levelgen.structure.StrongholdPieces$1",
            "XXX.levelgen.structure.StrongholdPieces$3",
            "XXX.levelgen.structure.StrongholdPieces$FillerCorridor",
            "XXX.levelgen.structure.StrongholdPieces$LeftTurn",
            "XXX.levelgen.structure.StrongholdPieces$PieceWeight",
            "XXX.levelgen.structure.StrongholdPieces$PrisonHall",
            "XXX.levelgen.structure.StrongholdPieces$RoomCrossing",
            "XXX.levelgen.structure.StrongholdPieces$StairsDown",
            "XXX.levelgen.structure.StrongholdPieces$Straight",
            "XXX.levelgen.structure.StrongholdPieces$StrongholdPiece",
            "XXX.levelgen.structure.StrongholdPieces$Turn",
            "XXX.levelgen.structure.StructurePiece",
            "XXX.levelgen.structure.StructurePiece$BlockSelector",
            "XXX.levelgen.structure.StructureStart$1",
            "XXX.levelgen.structure.TemplateStructurePiece",
            "XXX.levelgen.structure.WoodlandMansionPieces$1",
            "XXX.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer",
            "XXX.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection",
            "XXX.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection",
            "XXX.levelgen.structure.package-info",
            "XXX.structure.templatesystem.AxisAlignedLinearPosTest",
            "XXX.structure.templatesystem.BlockAgeProcessor",
            "XXX.structure.templatesystem.BlockMatchTest",
            "XXX.structure.templatesystem.BlockStateMatchTest",
            "XXX.structure.templatesystem.JigsawReplacementProcessor",
            "XXX.structure.templatesystem.LinearPosTest",
            "XXX.structure.templatesystem.PosAlwaysTrueTest",
            "XXX.structure.templatesystem.PosRuleTestType",
            "XXX.structure.templatesystem.RandomBlockMatchTest",
            "XXX.structure.templatesystem.RuleProcessor",
            "XXX.structure.templatesystem.RuleTestType",
            "XXX.structure.templatesystem.StructurePlaceSettings",
            "XXX.structure.templatesystem.StructureProcessorList",
            "XXX.structure.templatesystem.StructureTemplate",
            "XXX.structure.templatesystem.StructureTemplate$Palette",
            "XXX.structure.templatesystem.StructureTemplate$StructureBlockInfo",
            "XXX.structure.templatesystem.TagMatchTest",
            "XXX.levelgen.surfacebuilders.BadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ConfiguredSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.MountainSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NetherForestSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.NopeSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SoulSandValleySurfaceBuilder",
            "XXX.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration",
            "XXX.levelgen.surfacebuilders.SwampSurfaceBuilder",
            "XXX.levelgen.surfacebuilders.package-info",
            "XXX.levelgen.synth.NormalNoise",
            "XXX.levelgen.synth.PerlinSimplexNoise",
            "XXX.levelgen.synth.SurfaceNoise",
            "XXX.level.lighting.BlockLightEngine",
            "XXX.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap",
            "XXX.level.lighting.DynamicGraphMinFixedPoint",
            "XXX.level.lighting.DynamicGraphMinFixedPoint$2",
            "XXX.level.lighting.LayerLightEngine",
            "XXX.level.lighting.LayerLightEventListener$DummyLightLayerEventListener",
            "XXX.level.lighting.LayerLightSectionStorage$1",
            "XXX.level.lighting.LightEventListener",
            "XXX.level.lighting.SkyLightSectionStorage",
            "XXX.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap",
            "XXX.level.lighting.SpatialLongSet$InternalMap",
            "XXX.level.material.EmptyFluid",
            "XXX.level.material.FlowingFluid$1",
            "XXX.level.material.FluidState",
            "XXX.level.material.FogType",
            "XXX.level.pathfinder.AmphibiousNodeEvaluator",
            "XXX.level.pathfinder.BlockPathTypes",
            "XXX.level.pathfinder.Node",
            "XXX.level.pathfinder.Path",
            "XXX.level.pathfinder.PathFinder",
            "XXX.level.pathfinder.Target",
            "XXX.saveddata.maps.MapBanner",
            "XXX.saveddata.maps.MapDecoration",
            "XXX.saveddata.maps.MapFrame",
            "XXX.saveddata.maps.MapItemSavedData",
            "XXX.saveddata.maps.package-info",
            "XXX.level.storage.CommandStorage",
            "XXX.level.storage.LevelVersion",
            "XXX.level.storage.PlayerDataStorage",
            "XXX.level.storage.ServerLevelData",
            "XXX.level.storage.WritableLevelData",
            "XXX.storage.loot.Deserializers",
            "XXX.storage.loot.GsonAdapterFactory$1",
            "XXX.storage.loot.GsonAdapterFactory$InlineSerializer",
            "XXX.storage.loot.IntRange",
            "XXX.storage.loot.IntRange$IntChecker",
            "XXX.storage.loot.IntRange$Serializer",
            "XXX.storage.loot.ItemModifierManager$FunctionSequence",
            "XXX.storage.loot.LootContext$1",
            "XXX.storage.loot.LootContext$DynamicDrop",
            "XXX.storage.loot.LootContext$EntityTarget$Serializer",
            "XXX.storage.loot.LootPool",
            "XXX.storage.loot.LootPool$Builder",
            "XXX.storage.loot.LootTable",
            "XXX.storage.loot.LootTable$Builder",
            "XXX.storage.loot.LootTables",
            "XXX.storage.loot.PredicateManager$1",
            "XXX.storage.loot.Serializer",
            "XXX.storage.loot.ValidationContext",
            "XXX.loot.entries.AlternativesEntry$Builder",
            "XXX.loot.entries.CompositeEntryBase",
            "XXX.loot.entries.CompositeEntryBase$CompositeEntryConstructor",
            "XXX.loot.entries.DynamicLoot$1",
            "XXX.loot.entries.EmptyLootItem",
            "XXX.loot.entries.EmptyLootItem$Serializer",
            "XXX.loot.entries.EntryGroup$Builder",
            "XXX.loot.entries.LootItem$1",
            "XXX.loot.entries.LootPoolEntries",
            "XXX.loot.entries.LootPoolEntryContainer",
            "XXX.loot.entries.LootPoolEntryContainer$Serializer",
            "XXX.loot.entries.LootPoolSingletonContainer",
            "XXX.loot.entries.LootPoolSingletonContainer$Builder",
            "XXX.loot.entries.LootPoolSingletonContainer$EntryBase",
            "XXX.loot.entries.LootPoolSingletonContainer$Serializer",
            "XXX.loot.entries.LootTableReference$1",
            "XXX.loot.entries.SequentialEntry",
            "XXX.loot.entries.TagEntry",
            "XXX.loot.entries.TagEntry$Serializer",
            "XXX.loot.functions.ApplyBonusCount",
            "XXX.loot.functions.ApplyBonusCount$BinomialWithBonusCount",
            "XXX.loot.functions.ApplyBonusCount$FormulaDeserializer",
            "XXX.loot.functions.ApplyBonusCount$Serializer",
            "XXX.loot.functions.ApplyExplosionDecay",
            "XXX.loot.functions.ApplyExplosionDecay$Serializer",
            "XXX.loot.functions.CopyBlockState$1",
            "XXX.loot.functions.CopyBlockState$Serializer",
            "XXX.loot.functions.CopyNameFunction$1",
            "XXX.loot.functions.CopyNameFunction$Serializer",
            "XXX.loot.functions.CopyNbtFunction$1",
            "XXX.loot.functions.CopyNbtFunction$CopyOperation",
            "XXX.loot.functions.SetBannerPatternFunction",
            "XXX.loot.functions.SetBannerPatternFunction$Builder",
            "XXX.loot.functions.SetEnchantmentsFunction$1",
            "XXX.loot.functions.SetEnchantmentsFunction$Serializer",
            "XXX.loot.predicates.ValueCheckCondition$1",
            "XXX.loot.predicates.WeatherCheck",
            "XXX.loot.predicates.WeatherCheck$Builder",
            "XXX.loot.predicates.package-info",
            "XXX.providers.nbt.ContextNbtProvider$1",
            "XXX.providers.nbt.ContextNbtProvider$Getter",
            "XXX.providers.nbt.ContextNbtProvider$Serializer",
            "XXX.providers.nbt.NbtProvider",
            "XXX.providers.nbt.StorageNbtProvider",
            "XXX.providers.nbt.StorageNbtProvider$Serializer",
            "XXX.providers.number.BinomialDistributionGenerator",
            "XXX.providers.number.BinomialDistributionGenerator$Serializer",
            "XXX.providers.number.ConstantValue$1",
            "XXX.providers.number.ConstantValue$Serializer",
            "XXX.providers.number.NumberProvider",
            "XXX.providers.number.ScoreboardValue",
            "XXX.providers.number.ScoreboardValue$Serializer",
            "XXX.providers.number.UniformGenerator$1",
            "XXX.providers.number.package-info",
            "XXX.providers.score.ContextScoreboardNameProvider$1",
            "XXX.providers.score.ContextScoreboardNameProvider$Serializer",
            "XXX.providers.score.FixedScoreboardNameProvider$1",
            "XXX.providers.score.LootScoreProviderType",
            "XXX.providers.score.ScoreboardNameProviders",
            "XXX.phys.shapes.OffsetDoubleList",
            "XXX.phys.shapes.Shapes$DoubleLineConsumer",
            "XXX.phys.shapes.SubShape"
          ]
        }
      }
    },
    {
      "type": "ansi",
      "value": {
        "title": "Changes",
        "lines": [
          "XXX.blaze3d.systems.RenderSystem \u001b[2;32m+77M\u001b[0m \u001b[2;31m-74M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.mojang.math.Matrix4f \u001b[2;32m+1M\u001b[0m",
          "XXX.mojang.realmsclient.RealmsMainScreen \u001b[2;32m+14M\u001b[0m \u001b[2;31m-12M\u001b[0m",
          "XXX.mojang.realmsclient.RealmsMainScreen$ServerEntry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.realmsclient.gui.RealmsDataFetcher \u001b[2;32m+9M\u001b[0m \u001b[2;31m-10M\u001b[0m | \u001b[2;32m+8P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.gui.screens.RealmsBackupInfoScreen \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.gui.screens.RealmsResetWorldScreen \u001b[2;32m+7M\u001b[0m \u001b[2;31m-8M\u001b[0m | \u001b[2;31m-3P\u001b[0m",
          "XXX.gui.screens.RealmsSelectWorldTemplateScreen \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.util.task.GetServerDetailsTask \u001b[2;32m+7M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "net.minecraft.CrashReportCategory \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m",
          "net.minecraft.Util \u001b[2;32m+4M\u001b[0m",
          "XXX.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.ConstructBeaconTrigger$TriggerInstance \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.advancements.critereon.EntityTypePredicate \u001b[2;32m+1M\u001b[0m",
          "XXX.advancements.critereon.EntityTypePredicate$TagPredicate \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.client.Minecraft$1 \u001b[2;31m-1P\u001b[0m",
          "XXX.client.gui.GuiComponent \u001b[2;32m+1M\u001b[0m",
          "XXX.gui.components.BossHealthOverlay \u001b[2;31m-1M\u001b[0m",
          "XXX.gui.components.LerpingBossEvent \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.screens.inventory.LoomScreen \u001b[2;32m+1M\u001b[0m",
          "XXX.screens.worldselection.CreateWorldScreen \u001b[2;32m+25M\u001b[0m \u001b[2;31m-28M\u001b[0m | \u001b[2;32m+5P\u001b[0m \u001b[2;31m-6P\u001b[0m",
          "XXX.gui.spectator.PlayerMenuItem \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.model.ArmorStandModel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.client.model.HoglinModel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.client.model.SnowGolemModel \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+4P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.client.model.SquidModel \u001b[2;32m+5M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.client.model.TridentModel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.model.TropicalFishModelB \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.client.model.VexModel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.client.model.VillagerModel \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.client.model.WitherBossModel \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.client.model.ZombieModel \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.model.dragon.DragonHeadModel \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.model.geom.ModelPart \u001b[2;32m+10M\u001b[0m \u001b[2;31m-15M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-7P\u001b[0m",
          "XXX.client.multiplayer.ClientAdvancements \u001b[2;31m-1M\u001b[0m",
          "XXX.client.multiplayer.ClientChunkCache \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.client.multiplayer.ClientLevel \u001b[2;32m+18M\u001b[0m \u001b[2;31m-14M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.client.multiplayer.ClientLevel$ClientLevelData \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.client.particle.SquidInkParticle \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.client.player.AbstractClientPlayer \u001b[2;31m-1M\u001b[0m",
          "XXX.client.renderer.GameRenderer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.blockentity.ChestRenderer \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.blockentity.EnchantTableRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.blockentity.PistonHeadRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.blockentity.SignRenderer \u001b[2;32m+7M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.renderer.blockentity.SkullBlockRenderer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.renderer.blockentity.StructureBlockRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.blockentity.TheEndGatewayRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.chunk.VisGraph \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.debug.DebugRenderer \u001b[2;32m+1P\u001b[0m",
          "XXX.renderer.entity.BeeRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.BoatRenderer \u001b[2;32m+3M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.renderer.entity.CaveSpiderRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ChickenRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.CowRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.DolphinRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.DrownedRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.EndCrystalRenderer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.EnderDragonRenderer$DragonModel \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.EndermiteRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.EntityRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.renderer.entity.HoglinRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.HumanoidMobRenderer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.renderer.entity.IllagerRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ItemEntityRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ItemRenderer \u001b[2;32m+7M\u001b[0m \u001b[2;31m-6M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.renderer.entity.LightningBoltRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.LlamaSpitRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.MinecartRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.MushroomCowRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.PaintingRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ParrotRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.PigRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.PillagerRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.PufferfishRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+3P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.renderer.entity.RavagerRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.SalmonRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ShulkerBulletRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.SilverfishRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.SlimeRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.SpectralArrowRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.SquidRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.StriderRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ThrownTridentRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.TntMinecartRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.TropicalFishRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.renderer.entity.UndeadHorseRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.VillagerRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.WitchRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.WitherSkeletonRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.WolfRenderer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.renderer.entity.ZombieRenderer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.layers.ArrowLayer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.entity.layers.CatCollarLayer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.layers.DrownedOuterLayer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.layers.HorseArmorLayer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.layers.ParrotOnShoulderLayer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.resources.sounds.AbstractSoundInstance \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.client.server.LanServer \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.commands.CommandFunction$CommandEntry \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.commands.CommandFunction$FunctionEntry \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.commands.arguments.AngleArgument \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.core.BlockPos \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.core.BlockPos$MutableBlockPos \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.minecraft.core.BlockSourceImpl \u001b[2;31m-1M\u001b[0m",
          "XXX.data.models.BlockModelGenerators$BlockFamilyProvider \u001b[2;32m+10M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.models.model.ModelTemplates \u001b[2;32m+9P\u001b[0m",
          "XXX.models.model.TextureSlot \u001b[2;32m+3P\u001b[0m",
          "XXX.gametest.framework.GameTestSequence \u001b[2;32m+6M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.gametest.framework.GameTestServer \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.gametest.framework.GameTestTicker \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.gametest.framework.StructureUtils \u001b[2;32m+7M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.gametest.framework.TestFunction \u001b[2;32m+4M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.minecraft.nbt.ListTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.minecraft.nbt.LongArrayTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.nbt.LongTag \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.minecraft.nbt.NumericTag \u001b[2;32m+1M\u001b[0m",
          "XXX.minecraft.nbt.Tag \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-5P\u001b[0m",
          "XXX.protocol.game.ClientGamePacketListener \u001b[2;32m+1P\u001b[0m",
          "XXX.server.commands.SpreadPlayersCommand$Position \u001b[2;32m+3M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.server.dedicated.DedicatedServer \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.dedicated.DedicatedServerProperties \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.server.level.ChunkMap \u001b[2;32m+27M\u001b[0m \u001b[2;31m-26M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.server.level.DemoMode \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.packs.repository.Pack$PackConstructor \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.packs.repository.PackCompatibility \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.packs.repository.ServerPacksSource \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.packs.resources.ReloadableResourceManager \u001b[2;32m+1P\u001b[0m \u001b[2;31m-2P\u001b[0m",
          "XXX.packs.resources.SimpleReloadableResourceManager \u001b[2;32m+2M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.server.players.PlayerList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.server.players.ServerOpList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.server.players.UserBanList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.server.players.UserWhiteList \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.sounds.SoundEvents \u001b[2;32m+89P\u001b[0m",
          "XXX.minecraft.stats.StatType \u001b[2;31m-1M\u001b[0m",
          "XXX.minecraft.tags.BlockTags \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+7P\u001b[0m",
          "XXX.minecraft.tags.FluidTags \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.minecraft.tags.TagContainer \u001b[2;32m+14M\u001b[0m \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.minecraft.tags.TagLoader \u001b[2;32m+20M\u001b[0m \u001b[2;31m-8M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.datafix.fixes.JigsawRotationFix \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.world.damagesource.DamageSource \u001b[2;32m+4M\u001b[0m | \u001b[2;32m+5P\u001b[0m",
          "XXX.world.effect.MobEffectInstance \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.world.entity.Entity \u001b[2;32m+47M\u001b[0m \u001b[2;31m-19M\u001b[0m | \u001b[2;32m+7P\u001b[0m \u001b[2;31m-9P\u001b[0m",
          "XXX.world.entity.EquipmentSlot \u001b[2;32m+1M\u001b[0m",
          "XXX.world.entity.ExperienceOrb \u001b[2;32m+8M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-3P\u001b[0m",
          "XXX.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.ai.behavior.SetWalkTargetFromLookTarget \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.ai.goal.AvoidEntityGoal \u001b[2;32m+1M\u001b[0m",
          "XXX.ai.goal.TemptGoal \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.ai.sensing.AdultSensor \u001b[2;32m+6M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.ai.sensing.SensorType \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+2P\u001b[0m",
          "XXX.ai.util.GoalUtils \u001b[2;32m+7M\u001b[0m",
          "XXX.village.poi.PoiManager \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.ambient.Bat \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.AbstractFish \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.animal.Animal \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Panda \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.PolarBear \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.animal.Sheep \u001b[2;32m+2M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.boss.enderdragon.EndCrystal \u001b[2;32m+1M\u001b[0m",
          "XXX.entity.decoration.ArmorStand \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.decoration.ItemFrame \u001b[2;32m+6M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.entity.vehicle.MinecartSpawner \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.entity.vehicle.MinecartTNT \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.inventory.AbstractFurnaceMenu \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.item.ArmorItem \u001b[2;32m+1M\u001b[0m",
          "XXX.world.item.BlockItem \u001b[2;32m+2M\u001b[0m",
          "XXX.world.item.DyeColor \u001b[2;31m-1M\u001b[0m | \u001b[2;31m-2P\u001b[0m",
          "XXX.world.item.ElytraItem \u001b[2;32m+1M\u001b[0m",
          "XXX.world.level.EmptyBlockGetter \u001b[2;32m+2M\u001b[0m",
          "XXX.world.level.ForcedChunksSavedData \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.level.Level \u001b[2;32m+8M\u001b[0m \u001b[2;31m-14M\u001b[0m | \u001b[2;32m+6P\u001b[0m \u001b[2;31m-6P\u001b[0m",
          "XXX.world.level.LevelAccessor \u001b[2;32m+4M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.AnvilBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BaseRailBlock \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.block.BedBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BeehiveBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BellBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BlastFurnaceBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.BubbleColumnBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DoorBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.DropperBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.EndGatewayBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.FurnaceBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.LiquidBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SimpleWaterloggedBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SmokerBlock \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SoulFireBlock \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.block.SoundType \u001b[2;32m+14P\u001b[0m",
          "XXX.level.block.StairBlock \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.BeaconBlockEntity \u001b[2;32m+7M\u001b[0m \u001b[2;31m-7M\u001b[0m",
          "XXX.block.entity.BeehiveBlockEntity \u001b[2;32m+5M\u001b[0m \u001b[2;31m-6M\u001b[0m",
          "XXX.block.entity.BellBlockEntity \u001b[2;32m+12M\u001b[0m \u001b[2;31m-9M\u001b[0m",
          "XXX.block.entity.DaylightDetectorBlockEntity \u001b[2;32m+1M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.block.entity.DropperBlockEntity \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.block.entity.EnderChestBlockEntity \u001b[2;32m+5M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-4P\u001b[0m",
          "XXX.block.entity.ShulkerBoxBlockEntity \u001b[2;32m+7M\u001b[0m \u001b[2;31m-9M\u001b[0m | \u001b[2;31m-1P\u001b[0m",
          "XXX.block.entity.SkullBlockEntity \u001b[2;32m+3M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.block.entity.SpawnerBlockEntity \u001b[2;32m+4M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.block.entity.StructureBlockEntity \u001b[2;32m+2M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.chunk.ImposterProtoChunk \u001b[2;32m+1M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.chunk.storage.OldChunkStorage \u001b[2;32m+1M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.levelgen.DebugLevelSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.levelgen.FlatLevelSource \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.level.material.Material \u001b[2;32m+3P\u001b[0m",
          "XXX.level.material.WaterFluid \u001b[2;32m+1M\u001b[0m",
          "XXX.newbiome.context.BigContext \u001b[2;31m-1P\u001b[0m",
          "XXX.newbiome.context.LazyAreaContext \u001b[2;31m-1M\u001b[0m",
          "XXX.saveddata.maps.MapItemSavedData$HoldingPlayer \u001b[2;32m+8M\u001b[0m \u001b[2;31m-2M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.level.storage.CommandStorage$Container \u001b[2;32m+4M\u001b[0m \u001b[2;31m-2M\u001b[0m",
          "XXX.level.storage.DimensionDataStorage \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m",
          "XXX.level.storage.LevelSummary \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.EnchantWithLevelsFunction \u001b[2;32m+5M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.EnchantWithLevelsFunction$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.LootingEnchantFunction \u001b[2;32m+4M\u001b[0m \u001b[2;31m-4M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.LootingEnchantFunction$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.SetAttributesFunction \u001b[2;32m+3M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.functions.SetAttributesFunction$ModifierBuilder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.SetItemDamageFunction \u001b[2;32m+9M\u001b[0m \u001b[2;31m-5M\u001b[0m | \u001b[2;32m+2P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.loot.functions.SetStewEffectFunction \u001b[2;32m+2M\u001b[0m",
          "XXX.loot.functions.SetStewEffectFunction$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.predicates.EntityHasScoreCondition \u001b[2;32m+2M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.loot.predicates.EntityHasScoreCondition$Builder \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.world.phys.AABB \u001b[2;31m-3M\u001b[0m",
          "XXX.world.phys.Vec3 \u001b[2;32m+3M\u001b[0m | \u001b[2;32m+1P\u001b[0m",
          "XXX.phys.shapes.BitSetDiscreteVoxelShape \u001b[2;32m+6M\u001b[0m \u001b[2;31m-3M\u001b[0m",
          "XXX.phys.shapes.CollisionContext \u001b[2;32m+1P\u001b[0m",
          "XXX.phys.shapes.DiscreteVoxelShape \u001b[2;31m-3M\u001b[0m | \u001b[2;32m+1P\u001b[0m \u001b[2;31m-1P\u001b[0m",
          "XXX.phys.shapes.EntityCollisionContext$1 \u001b[2;32m+1M\u001b[0m \u001b[2;31m-1M\u001b[0m",
          "XXX.phys.shapes.IndexMerger \u001b[2;32m+1P\u001b[0m",
          "XXX.phys.shapes.IndirectMerger \u001b[2;32m+2M\u001b[0m | \u001b[2;32m+5P\u001b[0m \u001b[2;31m-3P\u001b[0m"
        ]
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.blaze3d.systems.RenderSystem",
        "differences": {
          "added": [
            "void drawArrays(int,int,int)",
            "void lambda$glGenBuffers$72(Consumer)",
            "void lambda$setupGui3DDiffuseLighting$71(Vector3f,Vector3f)",
            "void lambda$setupGuiFlatDiffuseLighting$70(Vector3f,Vector3f)",
            "void lambda$setupLevelDiffuseLighting$69(Vector3f,Vector3f,Matrix4f)",
            "void lambda$setupOverlayColor$68(IntSupplier,int)",
            "void lambda$glUniformMatrix4$67(int,boolean,FloatBuffer)",
            "void lambda$glUniformMatrix3$66(int,boolean,FloatBuffer)",
            "void lambda$glUniformMatrix2$65(int,boolean,FloatBuffer)",
            "void lambda$glUniform4$64(int,FloatBuffer)",
            "void lambda$glUniform3$63(int,FloatBuffer)",
            "void lambda$glUniform2$62(int,FloatBuffer)",
            "void lambda$glUniform1$61(int,FloatBuffer)",
            "void lambda$glUniform4$60(int,IntBuffer)",
            "void lambda$glUniform3$59(int,IntBuffer)",
            "void lambda$glUniform2$58(int,IntBuffer)",
            "void lambda$glUniform1$57(int,IntBuffer)",
            "void lambda$glUniform1i$56(int,int)",
            "void lambda$glDeleteBuffers$55(int)",
            "void lambda$glBindBuffer$54(int,Supplier)",
            "void lambda$glMultiTexCoord2f$53(int,float,float)",
            "void lambda$renderCrosshair$52(int)",
            "void lambda$getString$51(int,Consumer)",
            "void lambda$readPixels$50(int,int,int,int,int,int,ByteBuffer)",
            "void lambda$pixelTransfer$49(int,float)",
            "void lambda$pixelStore$48(int,int)",
            "void lambda$lineWidth$47(float)",
            "void lambda$drawArrays$46(int,int,int)",
            "void lambda$color3f$45(float,float,float)",
            "void lambda$color4f$44(float,float,float,float)",
            "void lambda$multMatrix$43(Matrix4f)",
            "void lambda$translated$42(double,double,double)",
            "void lambda$translatef$41(float,float,float)",
            "void lambda$scaled$40(double,double,double)",
            "void lambda$scalef$39(float,float,float)",
            "void lambda$rotatef$38(float,float,float,float)",
            "void lambda$ortho$37(double,double,double,double,double,double)",
            "void lambda$matrixMode$36(int)",
            "void lambda$clear$35(int,boolean)",
            "void lambda$clearStencil$34(int)",
            "void lambda$clearColor$33(float,float,float,float)",
            "void lambda$clearDepth$32(double)",
            "void lambda$stencilOp$31(int,int,int)",
            "void lambda$stencilMask$30(int)",
            "void lambda$stencilFunc$29(int,int,int)",
            "void lambda$colorMask$28(boolean,boolean,boolean,boolean)",
            "void lambda$viewport$27(int,int,int,int)",
            "void lambda$shadeModel$26(int)",
            "void lambda$bindTexture$25(int)",
            "void lambda$deleteTexture$24(int)",
            "void lambda$texParameter$23(int,int,int)",
            "void lambda$activeTexture$22(int)",
            "void lambda$logicOp$21(GlStateManager$LogicOp)",
            "void lambda$polygonOffset$20(float,float)",
            "void lambda$polygonMode$19(int,int)",
            "void lambda$fogi$18(int,int)",
            "void lambda$fog$17(int,float,float,float,float)",
            "void lambda$fogEnd$16(float)",
            "void lambda$fogStart$15(float)",
            "void lambda$fogDensity$14(float)",
            "void lambda$fogMode$13(int)",
            "void lambda$fogMode$12(GlStateManager$FogMode)",
            "void lambda$blendColor$11(float,float,float,float)",
            "void lambda$blendEquation$10(int)",
            "void lambda$blendFuncSeparate$9(int,int,int,int)",
            "void lambda$blendFuncSeparate$8(GlStateManager$SourceFactor,GlStateManager$DestFactor,GlStateManager$SourceFactor,GlStateManager$DestFactor)",
            "void lambda$blendFunc$7(int,int)",
            "void lambda$blendFunc$6(GlStateManager$SourceFactor,GlStateManager$DestFactor)",
            "void lambda$depthMask$5(boolean)",
            "void lambda$depthFunc$4(int)",
            "void lambda$enableScissor$3(int,int,int,int)",
            "void lambda$normal3f$2(float,float,float)",
            "void lambda$colorMaterial$1(int,int)",
            "void lambda$alphaFunc$0(int,float)"
          ],
          "removed": [
            "void drawElements(int,int,int)",
            "RenderSystem$AutoStorageIndexBuffer getSequentialBuffer(VertexFormat$Mode,int)",
            "void lambda$glGenBuffers$73(Consumer)",
            "void lambda$setupGui3DDiffuseLighting$72(Vector3f,Vector3f)",
            "void lambda$setupGuiFlatDiffuseLighting$71(Vector3f,Vector3f)",
            "void lambda$setupLevelDiffuseLighting$70(Vector3f,Vector3f,Matrix4f)",
            "void lambda$setupOverlayColor$69(IntSupplier,int)",
            "void lambda$glUniformMatrix4$68(int,boolean,FloatBuffer)",
            "void lambda$glUniformMatrix3$67(int,boolean,FloatBuffer)",
            "void lambda$glUniformMatrix2$66(int,boolean,FloatBuffer)",
            "void lambda$glUniform4$65(int,FloatBuffer)",
            "void lambda$glUniform3$64(int,FloatBuffer)",
            "void lambda$glUniform2$63(int,FloatBuffer)",
            "void lambda$glUniform1$62(int,FloatBuffer)",
            "void lambda$glUniform4$61(int,IntBuffer)",
            "void lambda$glUniform3$60(int,IntBuffer)",
            "void lambda$glUniform2$59(int,IntBuffer)",
            "void lambda$glUniform1$58(int,IntBuffer)",
            "void lambda$glUniform1i$57(int,int)",
            "void lambda$glDeleteBuffers$56(int)",
            "void lambda$glBindBuffer$55(int,Supplier)",
            "void lambda$glMultiTexCoord2f$54(int,float,float)",
            "void lambda$renderCrosshair$53(int)",
            "void lambda$getString$52(int,Consumer)",
            "void lambda$readPixels$51(int,int,int,int,int,int,ByteBuffer)",
            "void lambda$pixelTransfer$50(int,float)",
            "void lambda$pixelStore$49(int,int)",
            "void lambda$lineWidth$48(float)",
            "void lambda$drawElements$47(int,int,int)",
            "void lambda$color3f$46(float,float,float)",
            "void lambda$color4f$45(float,float,float,float)",
            "void lambda$multMatrix$44(Matrix4f)",
            "void lambda$translated$43(double,double,double)",
            "void lambda$translatef$42(float,float,float)",
            "void lambda$scaled$41(double,double,double)",
            "void lambda$scalef$40(float,float,float)",
            "void lambda$rotatef$39(float,float,float,float)",
            "void lambda$ortho$38(double,double,double,double,double,double)",
            "void lambda$matrixMode$37(int)",
            "void lambda$clear$36(int,boolean)",
            "void lambda$clearStencil$35(int)",
            "void lambda$clearColor$34(float,float,float,float)",
            "void lambda$clearDepth$33(double)",
            "void lambda$stencilOp$32(int,int,int)",
            "void lambda$stencilMask$31(int)",
            "void lambda$stencilFunc$30(int,int,int)",
            "void lambda$colorMask$29(boolean,boolean,boolean,boolean)",
            "void lambda$viewport$28(int,int,int,int)",
            "void lambda$shadeModel$27(int)",
            "void lambda$bindTexture$26(int)",
            "void lambda$deleteTexture$25(int)",
            "void lambda$texParameter$24(int,int,int)",
            "void lambda$activeTexture$23(int)",
            "void lambda$logicOp$22(GlStateManager$LogicOp)",
            "void lambda$polygonOffset$21(float,float)",
            "void lambda$polygonMode$20(int,int)",
            "void lambda$fogi$19(int,int)",
            "void lambda$fog$18(int,float,float,float,float)",
            "void lambda$fogEnd$17(float)",
            "void lambda$fogStart$16(float)",
            "void lambda$fogDensity$15(float)",
            "void lambda$fogMode$14(int)",
            "void lambda$fogMode$13(GlStateManager$FogMode)",
            "void lambda$blendColor$12(float,float,float,float)",
            "void lambda$blendEquation$11(int)",
            "void lambda$blendFuncSeparate$10(int,int,int,int)",
            "void lambda$blendFuncSeparate$9(GlStateManager$SourceFactor,GlStateManager$DestFactor,GlStateManager$SourceFactor,GlStateManager$DestFactor)",
            "void lambda$blendFunc$8(int,int)",
            "void lambda$blendFunc$7(GlStateManager$SourceFactor,GlStateManager$DestFactor)",
            "void lambda$depthMask$6(boolean)",
            "void lambda$depthFunc$5(int)",
            "void lambda$enableScissor$4(int,int,int,int)",
            "void lambda$normal3f$3(float,float,float)",
            "void lambda$colorMaterial$2(int,int)",
            "void lambda$alphaFunc$1(int,float)",
            "void lambda$static$0(IntConsumer,int)",
            "Logger access$200()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.math.Matrix4f",
        "differences": {
          "added": [],
          "removed": [
            "void multiplyWithTranslation(float,float,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.RealmsMainScreen",
        "differences": {
          "added": [
            "void access$7600(RealmsMainScreen,PoseStack,int,int,int,int,boolean,boolean)",
            "void access$7700(RealmsMainScreen,Button)",
            "boolean access$7800(RealmsMainScreen)",
            "void access$7900(RealmsMainScreen,PoseStack,int,int,boolean,int,int,boolean,boolean)",
            "String access$8000(RealmsMainScreen)",
            "boolean access$7802(RealmsMainScreen,boolean)",
            "void access$8100(RealmsMainScreen,PoseStack,int,int,int,int,boolean)",
            "int access$8200(RealmsMainScreen)",
            "int access$8300(RealmsMainScreen)",
            "ResourceLocation access$8400()",
            "Minecraft access$8500(RealmsMainScreen)",
            "void access$8600(RealmsMainScreen)"
          ],
          "removed": [
            "Component access$7600()",
            "Component access$7700()",
            "void access$7800(RealmsMainScreen,PoseStack,int,int,int,int,boolean,boolean)",
            "void access$7900(RealmsMainScreen,Button)",
            "boolean access$8000(RealmsMainScreen)",
            "void access$8100(RealmsMainScreen,PoseStack,int,int,boolean,int,int,boolean,boolean)",
            "String access$8200(RealmsMainScreen)",
            "boolean access$8002(RealmsMainScreen,boolean)",
            "void access$8300(RealmsMainScreen,PoseStack,int,int,int,int,boolean)",
            "int access$8400(RealmsMainScreen)",
            "int access$8500(RealmsMainScreen)",
            "ResourceLocation access$8600()",
            "Minecraft access$8700(RealmsMainScreen)",
            "void access$8800(RealmsMainScreen)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.RealmsMainScreen$ServerEntry",
        "differences": {
          "added": [
            "RealmsServer access$8700(RealmsMainScreen$ServerEntry)"
          ],
          "removed": [
            "RealmsServer access$8900(RealmsMainScreen$ServerEntry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.RealmsDataFetcher",
        "differences": {
          "added": [
            "void <init>()",
            "boolean access$500(RealmsDataFetcher)",
            "void access$600(RealmsDataFetcher,List)",
            "Map access$700(RealmsDataFetcher)",
            "Logger access$800()",
            "int access$902(RealmsDataFetcher,int)",
            "boolean access$1002(RealmsDataFetcher,boolean)",
            "RealmsServerPlayerLists access$1102(RealmsDataFetcher,RealmsServerPlayerLists)",
            "boolean access$1202(RealmsDataFetcher,boolean)",
            "String access$1302(RealmsDataFetcher,String)"
          ],
          "removed": [
            "void <init>(Minecraft,RealmsClient)",
            "void updateServersList()",
            "void updatePendingInvites()",
            "void updateTrialAvailable()",
            "void updateLiveStats()",
            "void updateUnreadNews()",
            "RealmsPersistence$RealmsPersistenceData fetchAndUpdateNewsStorage()",
            "void lambda$cancelTasks$1(ScheduledFuture)",
            "Boolean lambda$markClean$0(RealmsDataFetcher$Task,Boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsBackupInfoScreen",
        "differences": {
          "added": [],
          "removed": [
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsResetWorldScreen",
        "differences": {
          "added": [
            "void callback(WorldTemplate)",
            "void switchSlot()",
            "void resetWorldWithTemplate(WorldTemplate)",
            "void triggerResetWorld(RealmsResetWorldScreen$ResetWorldInfo)",
            "void resetWorld(String,WorldTemplate,int,boolean)",
            "void resetWorld(RealmsResetWorldScreen$ResetWorldInfo)",
            "void lambda$switchSlot$7()",
            "void access$900(RealmsResetWorldScreen,PoseStack,int,int,Component,ResourceLocation,boolean,boolean)"
          ],
          "removed": [
            "void startTask(LongRunningTask)",
            "void templateSelectionCallback(WorldTemplate)",
            "void generationSelectionCallback(WorldGenerationInfo)",
            "void resetWorld(Runnable)",
            "void lambda$generationSelectionCallback$8(WorldGenerationInfo)",
            "void lambda$templateSelectionCallback$7(WorldTemplate)",
            "void access$600(RealmsResetWorldScreen,PoseStack,int,int,Component,ResourceLocation,boolean,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.gui.screens.RealmsSelectWorldTemplateScreen",
        "differences": {
          "added": [
            "void <init>(RealmsScreenWithCallback,RealmsServer$WorldType)",
            "void <init>(RealmsScreenWithCallback,RealmsServer$WorldType,WorldTemplatePaginatedList)",
            "boolean keyPressed(int,int,int)",
            "void backButtonClicked()"
          ],
          "removed": [
            "void <init>(Consumer,RealmsServer$WorldType)",
            "void <init>(Consumer,RealmsServer$WorldType,WorldTemplatePaginatedList)",
            "void onClose()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "com.mojang.realmsclient.util.task.GetServerDetailsTask",
        "differences": {
          "added": [
            "void sleep(int)",
            "void lambda$run$2(RealmsServerAddress,boolean)",
            "void lambda$null$1(RealmsServerAddress)",
            "Void lambda$null$0(Throwable)"
          ],
          "removed": [
            "RealmsServerAddress fetchServerAddress()",
            "RealmsLongRunningMcoTaskScreen connectScreen(RealmsServerAddress)",
            "RealmsLongConfirmationScreen resourcePackDownloadConfirmationScreen(RealmsServerAddress,Function)",
            "CompletableFuture scheduleResourcePackDownload(RealmsServerAddress)",
            "void lambda$resourcePackDownloadConfirmationScreen$2(RealmsServerAddress,Function,boolean)",
            "Void lambda$null$1(Throwable)",
            "void lambda$null$0(Function,RealmsServerAddress)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.CrashReportCategory",
        "differences": {
          "added": [
            "String formatLocation(double,double,double)",
            "String formatLocation(BlockPos)",
            "String formatLocation(int,int,int)",
            "void populateBlockDetails(CrashReportCategory,BlockPos,BlockState)",
            "String lambda$populateBlockDetails$0(BlockPos)"
          ],
          "removed": [
            "String formatLocation(LevelHeightAccessor,double,double,double)",
            "String formatLocation(LevelHeightAccessor,BlockPos)",
            "String formatLocation(LevelHeightAccessor,int,int,int)",
            "void populateBlockDetails(CrashReportCategory,LevelHeightAccessor,BlockPos,BlockState)",
            "String lambda$populateBlockDetails$0(LevelHeightAccessor,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.Util",
        "differences": {
          "added": [],
          "removed": [
            "void logAndPauseIfInIde(String)",
            "void doPause()",
            "Object getRandom(List,Random)",
            "DataResult fixedSize(DoubleStream,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance",
        "differences": {
          "added": [
            "boolean matches(Block,ItemStack,int)"
          ],
          "removed": [
            "boolean matches(BlockState,ItemStack,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance",
        "differences": {
          "added": [
            "boolean matches(BeaconBlockEntity)"
          ],
          "removed": [
            "boolean matches(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.EntityTypePredicate",
        "differences": {
          "added": [],
          "removed": [
            "JsonSyntaxException lambda$fromJson$1(ResourceLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.advancements.critereon.EntityTypePredicate$TagPredicate",
        "differences": {
          "added": [],
          "removed": [
            "IllegalStateException lambda$serializeToJson$0()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.GuiComponent",
        "differences": {
          "added": [],
          "removed": [
            "void fillGradient(PoseStack,int,int,int,int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.components.BossHealthOverlay",
        "differences": {
          "added": [
            "boolean hasBoss()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.components.LerpingBossEvent",
        "differences": {
          "added": [
            "void setPercent(float)",
            "float getPercent()"
          ],
          "removed": [
            "void setProgress(float)",
            "float getProgress()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.inventory.LoomScreen",
        "differences": {
          "added": [],
          "removed": [
            "void init()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.gui.screens.worldselection.CreateWorldScreen",
        "differences": {
          "added": [
            "void toggleDisplayOptions()",
            "void updateDisplayOptions()",
            "void setDisplayOptions(boolean)",
            "void lambda$createTempDataPackDirFromExistingWorld$21(MutableObject,Path,Path)",
            "boolean lambda$createTempDataPackDirFromExistingWorld$20(Path,Path)",
            "void lambda$copyTempDataPackDirToNewWorld$19(Path,Path)",
            "boolean lambda$copyTempDataPackDirToNewWorld$18(Path)",
            "void lambda$removeTempDataPackDir$17(Path)",
            "Object lambda$tryApplyNewDataPacks$16(DataPackConfig,ServerResources,Throwable)",
            "void lambda$null$15(DataPackConfig,ServerResources)",
            "void lambda$null$14()",
            "void lambda$null$13(boolean)",
            "void lambda$tryApplyNewDataPacks$12()",
            "boolean lambda$tryApplyNewDataPacks$11(List,String)",
            "void lambda$init$8(Button)",
            "void lambda$init$7(Button)",
            "void lambda$null$6(Optional)",
            "void lambda$null$5(GameRules)",
            "void lambda$init$4(Button)",
            "void lambda$init$3(Button)",
            "void lambda$init$2(Button)",
            "void lambda$init$1(Button)",
            "Component access$100()",
            "CreateWorldScreen$SelectedGameMode access$200(CreateWorldScreen)",
            "Component access$400(CreateWorldScreen)",
            "Component access$500(CreateWorldScreen)",
            "Difficulty access$600(CreateWorldScreen)",
            "boolean access$700(CreateWorldScreen)"
          ],
          "removed": [
            "Difficulty getEffectiveDifficulty()",
            "void toggleWorldGenSettingsVisibility()",
            "void refreshWorldGenSettingsVisibility()",
            "void setWorldGenSettingsVisible(boolean)",
            "void lambda$createTempDataPackDirFromExistingWorld$23(MutableObject,Path,Path)",
            "boolean lambda$createTempDataPackDirFromExistingWorld$22(Path,Path)",
            "void lambda$copyTempDataPackDirToNewWorld$21(Path,Path)",
            "boolean lambda$copyTempDataPackDirToNewWorld$20(Path)",
            "void lambda$removeTempDataPackDir$19(Path)",
            "Object lambda$tryApplyNewDataPacks$18(DataPackConfig,ServerResources,Throwable)",
            "void lambda$null$17(DataPackConfig,ServerResources)",
            "void lambda$null$16()",
            "void lambda$null$15(boolean)",
            "void lambda$tryApplyNewDataPacks$14()",
            "boolean lambda$tryApplyNewDataPacks$13(List,String)",
            "void lambda$init$12(Button)",
            "void lambda$init$11(Button)",
            "void lambda$null$8(Optional)",
            "void lambda$null$7(GameRules)",
            "void lambda$init$6(Button)",
            "void lambda$init$5(CycleButton,Boolean)",
            "MutableComponent lambda$init$4(CycleButton)",
            "void lambda$init$3(CycleButton,Difficulty)",
            "void lambda$init$2(CycleButton,CreateWorldScreen$SelectedGameMode)",
            "MutableComponent lambda$init$1(CycleButton)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.ArmorStandModel",
        "differences": {
          "added": [
            "void <init>()",
            "void <init>(float)"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.HoglinModel",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.SnowGolemModel",
        "differences": {
          "added": [
            "void <init>()",
            "Iterable parts()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer()",
            "ModelPart root()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.SquidModel",
        "differences": {
          "added": [
            "void <init>()",
            "Iterable parts()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "String createTentacleName(int)",
            "LayerDefinition createBodyLayer()",
            "ModelPart root()",
            "ModelPart lambda$new$0(ModelPart,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.TridentModel",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.TropicalFishModelB",
        "differences": {
          "added": [
            "void <init>(float)",
            "Iterable parts()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer(CubeDeformation)",
            "ModelPart root()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.VexModel",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.VillagerModel",
        "differences": {
          "added": [
            "void <init>(float)",
            "void <init>(float,int,int)",
            "Iterable parts()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "MeshDefinition createBodyModel()",
            "ModelPart root()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.WitherBossModel",
        "differences": {
          "added": [
            "void <init>(float)",
            "ImmutableList parts()",
            "Iterable parts()"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createBodyLayer(CubeDeformation)",
            "ModelPart root()",
            "void setupHeadRotation(WitherBoss,ModelPart,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.ZombieModel",
        "differences": {
          "added": [
            "void <init>(float,boolean)",
            "void <init>(float,float,int,int)"
          ],
          "removed": [
            "void <init>(ModelPart)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.dragon.DragonHeadModel",
        "differences": {
          "added": [
            "void <init>(float)"
          ],
          "removed": [
            "void <init>(ModelPart)",
            "LayerDefinition createHeadLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.model.geom.ModelPart",
        "differences": {
          "added": [
            "void <init>(Model)",
            "void <init>(Model,int,int)",
            "void <init>(int,int,int,int)",
            "void <init>()",
            "ModelPart createShallowCopy()",
            "void addChild(ModelPart)",
            "ModelPart texOffs(int,int)",
            "ModelPart addBox(String,float,float,float,int,int,int,float,int,int)",
            "ModelPart addBox(float,float,float,float,float,float)",
            "ModelPart addBox(float,float,float,float,float,float,boolean)",
            "void addBox(float,float,float,float,float,float,float)",
            "void addBox(float,float,float,float,float,float,float,float,float)",
            "void addBox(float,float,float,float,float,float,float,boolean)",
            "void addBox(int,int,float,float,float,float,float,float,float,float,float,boolean,boolean)",
            "ModelPart setTexSize(int,int)"
          ],
          "removed": [
            "void <init>(List,Map)",
            "PartPose storePose()",
            "void loadPose(PartPose)",
            "ModelPart getChild(String)",
            "void setRotation(float,float,float)",
            "void visit(PoseStack,ModelPart$Visitor)",
            "void visit(PoseStack,ModelPart$Visitor,String)",
            "boolean isEmpty()",
            "Stream getAllParts()",
            "void lambda$visit$0(PoseStack,ModelPart$Visitor,String,String,ModelPart)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientAdvancements",
        "differences": {
          "added": [
            "Map getProgress()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientChunkCache",
        "differences": {
          "added": [
            "LevelChunk replaceWithPacketData(int,int,ChunkBiomeContainer,FriendlyByteBuf,CompoundTag,int,boolean)",
            "boolean isEntityTickingChunk(Entity)"
          ],
          "removed": [
            "LevelChunk replaceWithPacketData(int,int,ChunkBiomeContainer,FriendlyByteBuf,CompoundTag,BitSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientLevel",
        "differences": {
          "added": [
            "void updateChunkPos(Entity)",
            "void onChunkLoaded(int,int)",
            "void removeEntity(int)",
            "void onEntityRemoved(Entity)",
            "void reAddEntitiesToChunk(LevelChunk)",
            "void removeAllPendingEntityRemovals()",
            "void setMapData(MapItemSavedData)",
            "Vec3 getSkyColor(BlockPos,float)",
            "int lambda$getBlockTint$7(BlockPos,ColorResolver)",
            "String lambda$fillReportDetails$5()",
            "void lambda$doAnimateTick$4(BlockPos$MutableBlockPos,AmbientParticleSettings)",
            "void lambda$clearTintCaches$3(ColorResolver,BlockTintCache)",
            "void lambda$onChunkLoaded$2(int,int,ColorResolver,BlockTintCache)",
            "String lambda$tickNonPassenger$1(Entity)"
          ],
          "removed": [
            "void onChunkLoaded(ChunkPos)",
            "void removeEntity(int,Entity$RemovalReason)",
            "void setMapData(String,MapItemSavedData)",
            "Vec3 getSkyColor(Vec3,float)",
            "void gameEvent(Entity,GameEvent,BlockPos)",
            "LevelEntityGetter getEntities()",
            "String gatherChunkSourceStats()",
            "void addDestroyBlockEffect(BlockPos,BlockState)",
            "int lambda$getBlockTint$9(BlockPos,ColorResolver)",
            "Vec3 lambda$getSkyColor$8(BiomeManager,int,int,int)",
            "String lambda$fillReportDetails$7()",
            "void lambda$doAnimateTick$5(BlockPos$MutableBlockPos,AmbientParticleSettings)",
            "void lambda$clearTintCaches$4(ColorResolver,BlockTintCache)",
            "void lambda$onChunkLoaded$3(ChunkPos,ColorResolver,BlockTintCache)",
            "String lambda$tickNonPassenger$2(Entity)",
            "void lambda$tickEntities$1(Entity)",
            "EntityTickList access$100(ClientLevel)",
            "List access$200(ClientLevel)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.multiplayer.ClientLevel$ClientLevelData",
        "differences": {
          "added": [
            "void fillCrashReportCategory(CrashReportCategory)"
          ],
          "removed": [
            "void fillCrashReportCategory(CrashReportCategory,LevelHeightAccessor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.particle.SquidInkParticle",
        "differences": {
          "added": [
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet)",
            "void <init>(ClientLevel,double,double,double,double,double,double,SpriteSet,SquidInkParticle$1)"
          ],
          "removed": [
            "void <init>(ClientLevel,double,double,double,double,double,double,int,SpriteSet)",
            "void <init>(ClientLevel,double,double,double,double,double,double,int,SpriteSet,SquidInkParticle$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.player.AbstractClientPlayer",
        "differences": {
          "added": [
            "ResourceLocation getSkullPath(String)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.GameRenderer",
        "differences": {
          "added": [
            "Matrix4f getProjectionMatrix(Camera,float,boolean)"
          ],
          "removed": [
            "Matrix4f getProjectionMatrix(double)",
            "float getDepthFar()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.ChestRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)",
            "LayerDefinition createSingleBodyLayer()",
            "LayerDefinition createDoubleBodyRightLayer()",
            "LayerDefinition createDoubleBodyLeftLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.EnchantTableRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.PistonHeadRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.SignRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)",
            "Material getMaterial(Block)",
            "FormattedCharSequence lambda$render$0(Font,Component)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)",
            "WoodType getWoodType(Block)",
            "SignRenderer$SignModel createSignModel(EntityModelSet,WoodType)",
            "LayerDefinition createSignLayer()",
            "FormattedCharSequence lambda$render$2(Component)",
            "SignRenderer$SignModel lambda$new$1(BlockEntityRendererProvider$Context,WoodType)",
            "WoodType lambda$new$0(WoodType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.SkullBlockRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)",
            "void renderSkull(Direction,float,SkullBlock$Type,GameProfile,float,PoseStack,MultiBufferSource,int)",
            "void lambda$static$1(HashMap)"
          ],
          "removed": [
            "Map createSkullRenderers(EntityModelSet)",
            "void <init>(BlockEntityRendererProvider$Context)",
            "void renderSkull(Direction,float,float,PoseStack,MultiBufferSource,int,SkullModelBase,RenderType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.StructureBlockRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.blockentity.TheEndGatewayRenderer",
        "differences": {
          "added": [
            "void <init>(BlockEntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(BlockEntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.chunk.VisGraph",
        "differences": {
          "added": [
            "Set floodFill(BlockPos)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.BeeRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.BoatRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)",
            "void <clinit>()"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)",
            "Pair lambda$new$1(EntityRendererProvider$Context,Boat$Type)",
            "Boat$Type lambda$new$0(Boat$Type)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.CaveSpiderRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ChickenRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.CowRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.DolphinRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.DrownedRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.EndCrystalRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)",
            "LayerDefinition createBodyLayer()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.EnderDragonRenderer$DragonModel",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(ModelPart)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.EndermiteRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.EntityRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)",
            "EntityRenderDispatcher getDispatcher()"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.HoglinRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.HumanoidMobRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher,HumanoidModel,float)",
            "void <init>(EntityRenderDispatcher,HumanoidModel,float,float,float,float)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,HumanoidModel,float)",
            "void <init>(EntityRendererProvider$Context,HumanoidModel,float,float,float,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.IllagerRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher,IllagerModel,float)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,IllagerModel,float)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ItemEntityRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher,ItemRenderer)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ItemRenderer",
        "differences": {
          "added": [
            "void <init>(TextureManager,ModelManager,ItemColors)",
            "BakedModel getModel(ItemStack,Level,LivingEntity)",
            "void renderStatic(ItemStack,ItemTransforms$TransformType,int,int,PoseStack,MultiBufferSource)",
            "void renderStatic(LivingEntity,ItemStack,ItemTransforms$TransformType,boolean,PoseStack,MultiBufferSource,Level,int,int)",
            "void renderAndDecorateItem(LivingEntity,ItemStack,int,int)",
            "void tryRenderGuiItem(LivingEntity,ItemStack,int,int)"
          ],
          "removed": [
            "void <init>(TextureManager,ModelManager,ItemColors,BlockEntityWithoutLevelRenderer)",
            "BakedModel getModel(ItemStack,Level,LivingEntity,int)",
            "void renderStatic(ItemStack,ItemTransforms$TransformType,int,int,PoseStack,MultiBufferSource,int)",
            "void renderStatic(LivingEntity,ItemStack,ItemTransforms$TransformType,boolean,PoseStack,MultiBufferSource,Level,int,int,int)",
            "void renderAndDecorateItem(ItemStack,int,int,int)",
            "void renderAndDecorateItem(LivingEntity,ItemStack,int,int,int)",
            "void tryRenderGuiItem(LivingEntity,ItemStack,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.LightningBoltRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.LlamaSpitRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.MinecartRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,ModelLayerLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.MushroomCowRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.PaintingRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ParrotRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.PigRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.PillagerRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.PufferfishRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.RavagerRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.SalmonRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ShulkerBulletRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.SilverfishRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.SlimeRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.SpectralArrowRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.SquidRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,SquidModel)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.StriderRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ThrownTridentRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.TntMinecartRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.TropicalFishRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.UndeadHorseRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,ModelLayerLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.VillagerRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher,ReloadableResourceManager)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.WitchRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.WitherSkeletonRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.WolfRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.ZombieRenderer",
        "differences": {
          "added": [
            "void <init>(EntityRenderDispatcher)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context)",
            "void <init>(EntityRendererProvider$Context,ModelLayerLocation,ModelLayerLocation,ModelLayerLocation)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.layers.ArrowLayer",
        "differences": {
          "added": [
            "void <init>(LivingEntityRenderer)"
          ],
          "removed": [
            "void <init>(EntityRendererProvider$Context,LivingEntityRenderer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.layers.CatCollarLayer",
        "differences": {
          "added": [
            "void <init>(RenderLayerParent)"
          ],
          "removed": [
            "void <init>(RenderLayerParent,EntityModelSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.layers.DrownedOuterLayer",
        "differences": {
          "added": [
            "void <init>(RenderLayerParent)"
          ],
          "removed": [
            "void <init>(RenderLayerParent,EntityModelSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.layers.HorseArmorLayer",
        "differences": {
          "added": [
            "void <init>(RenderLayerParent)"
          ],
          "removed": [
            "void <init>(RenderLayerParent,EntityModelSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.renderer.entity.layers.ParrotOnShoulderLayer",
        "differences": {
          "added": [
            "void <init>(RenderLayerParent)"
          ],
          "removed": [
            "void <init>(RenderLayerParent,EntityModelSet)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.resources.sounds.AbstractSoundInstance",
        "differences": {
          "added": [
            "boolean hasPriority()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.client.server.LanServer",
        "differences": {
          "added": [
            "boolean isUpToDate()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.CommandFunction$CommandEntry",
        "differences": {
          "added": [
            "void execute(ServerFunctionManager,CommandSourceStack,ArrayDeque,int)"
          ],
          "removed": [
            "void execute(ServerFunctionManager,CommandSourceStack,Deque,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.commands.CommandFunction$FunctionEntry",
        "differences": {
          "added": [
            "void execute(ServerFunctionManager,CommandSourceStack,ArrayDeque,int)",
            "void lambda$execute$0(int,ArrayDeque,ServerFunctionManager,CommandSourceStack,CommandFunction)"
          ],
          "removed": [
            "void execute(ServerFunctionManager,CommandSourceStack,Deque,int)",
            "void lambda$execute$0(int,Deque,ServerFunctionManager,CommandSourceStack,CommandFunction)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.BlockPos",
        "differences": {
          "added": [
            "boolean isOutsideBuildHeight(long)"
          ],
          "removed": [
            "BlockPos atY(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.BlockPos$MutableBlockPos",
        "differences": {
          "added": [
            "void setX(int)",
            "void setY(int)",
            "void setZ(int)"
          ],
          "removed": [
            "BlockPos$MutableBlockPos setX(int)",
            "BlockPos$MutableBlockPos setY(int)",
            "BlockPos$MutableBlockPos setZ(int)",
            "Vec3i setZ(int)",
            "Vec3i setY(int)",
            "Vec3i setX(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.core.BlockSourceImpl",
        "differences": {
          "added": [
            "Material getMaterial()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider",
        "differences": {
          "added": [
            "BlockModelGenerators$BlockFamilyProvider fullBlock(Function)",
            "BlockModelGenerators$BlockFamilyProvider sign(Block,Block)"
          ],
          "removed": [
            "BlockModelGenerators$BlockFamilyProvider fullBlockCopies(Block[])",
            "BlockModelGenerators$BlockFamilyProvider sign(Block)",
            "BlockModelGenerators$BlockFamilyProvider door(Block)",
            "void trapdoor(Block)",
            "ResourceLocation getOrCreateModel(ModelTemplate,Block)",
            "BlockModelGenerators$BlockFamilyProvider generateFor(BlockFamily)",
            "void lambda$generateFor$1(BlockFamily$Variant,Block)",
            "ResourceLocation lambda$getOrCreateModel$0(Block,ModelTemplate)",
            "void access$2200(BlockModelGenerators$BlockFamilyProvider,Block)",
            "BlockModelGenerators$BlockFamilyProvider access$2300(BlockModelGenerators$BlockFamilyProvider,Block)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.GameTestSequence",
        "differences": {
          "added": [
            "GameTestSequence thenWait(Runnable)",
            "GameTestSequence thenWait(long,Runnable)",
            "void lambda$thenTrigger$4(GameTestSequence$Condition)",
            "void lambda$thenFail$3(Supplier)"
          ],
          "removed": [
            "GameTestSequence thenWaitUntil(Runnable)",
            "GameTestSequence thenWaitUntil(long,Runnable)",
            "GameTestSequence thenExecuteFor(int,Runnable)",
            "void lambda$thenTrigger$5(GameTestSequence$Condition)",
            "void lambda$thenFail$4(Supplier)",
            "void lambda$thenExecuteFor$3(int,Runnable)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.GameTestServer",
        "differences": {
          "added": [
            "void <init>(Thread,LevelStorageSource$LevelStorageAccess,PackRepository,ServerResources,Collection,BlockPos,RegistryAccess$RegistryHolder,Registry,WritableRegistry)",
            "boolean publishServer(GameType,boolean,int)"
          ],
          "removed": [
            "void <init>(Thread,LevelStorageSource$LevelStorageAccess,PackRepository,ServerResources,Collection,BlockPos,RegistryAccess$RegistryHolder,Registry,Registry)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.StructureUtils",
        "differences": {
          "added": [
            "int lambda$findNearestStructureBlock$3(BlockPos,BlockPos)",
            "boolean lambda$findStructureBlockContainingPos$2(BlockPos,ServerLevel,BlockPos)",
            "boolean lambda$clearSpaceForStructure$1(Entity)",
            "void lambda$clearSpaceForStructure$0(int,ServerLevel,BlockPos)"
          ],
          "removed": [
            "void main(String[])",
            "int lambda$findNearestStructureBlock$5(BlockPos,BlockPos)",
            "boolean lambda$findStructureBlockContainingPos$4(BlockPos,ServerLevel,BlockPos)",
            "boolean lambda$clearSpaceForStructure$3(Entity)",
            "void lambda$clearSpaceForStructure$2(int,ServerLevel,BlockPos)",
            "void lambda$main$1(Path)",
            "boolean lambda$main$0(Path)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.gametest.framework.TestFunction",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(String,String,String,Rotation,int,long,boolean,int,int,Consumer)",
            "boolean isFlaky()",
            "int getMaxAttempts()",
            "int getRequiredSuccesses()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.ListTag",
        "differences": {
          "added": [
            "void stripEmptyChildren()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.LongArrayTag",
        "differences": {
          "added": [
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.LongTag",
        "differences": {
          "added": [
            "String toString()",
            "Component getPrettyDisplay(String,int)"
          ],
          "removed": [
            "void accept(TagVisitor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.NumericTag",
        "differences": {
          "added": [],
          "removed": [
            "String toString()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.nbt.Tag",
        "differences": {
          "added": [
            "void stripEmptyChildren()",
            "boolean isEmpty()",
            "Component getPrettyDisplay()",
            "void <clinit>()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.commands.SpreadPlayersCommand$Position",
        "differences": {
          "added": [
            "void <init>(double,double)",
            "void set(double,double)",
            "double access$000(SpreadPlayersCommand$Position)",
            "double access$002(SpreadPlayersCommand$Position,double)"
          ],
          "removed": [
            "void <init>(SpreadPlayersCommand$1)",
            "double access$200(SpreadPlayersCommand$Position)",
            "double access$202(SpreadPlayersCommand$Position,double)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.DedicatedServer",
        "differences": {
          "added": [
            "boolean publishServer(GameType,boolean,int)"
          ],
          "removed": [
            "boolean isResourcePackRequired()",
            "GameType getForcedGameType()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.dedicated.DedicatedServerProperties",
        "differences": {
          "added": [
            "Integer lambda$new$2(Integer)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.ChunkMap",
        "differences": {
          "added": [
            "void <init>(ServerLevel,LevelStorageSource$LevelStorageAccess,DataFixer,StructureManager,Executor,BlockableEventLoop,LightChunkGetter,ChunkGenerator,ChunkProgressListener,Supplier,int,boolean)",
            "CompletableFuture getEntityTickingRangeFuture(ChunkPos)",
            "CompletableFuture postProcess(ChunkHolder)",
            "CompletableFuture unpackTicks(ChunkHolder)",
            "ChunkMap$DistanceManager getDistanceManager()",
            "Integer lambda$dumpChunks$41(LevelChunk)",
            "Optional lambda$dumpChunks$40(ChunkAccess)",
            "void lambda$setViewDistance$39(ChunkPos,int,Packet[],ServerPlayer)",
            "void lambda$unpackTicks$38(ChunkHolder,Runnable)",
            "Either lambda$unpackTicks$37(Either)",
            "LevelChunk lambda$null$36(ChunkAccess)",
            "void lambda$postProcess$35(ChunkHolder,Runnable)",
            "void lambda$postProcess$34(ChunkPos,Either)",
            "Either lambda$null$33(ChunkPos,LevelChunk)",
            "void lambda$null$32(Packet[],LevelChunk,ServerPlayer)",
            "void lambda$postProcess$31(ChunkHolder,Runnable)",
            "Either lambda$postProcess$30(Either)",
            "Either lambda$null$29(List)",
            "ChunkStatus lambda$postProcess$28(int)",
            "void lambda$protoChunkToFullChunk$27(ChunkHolder,Runnable)",
            "Either lambda$protoChunkToFullChunk$26(ChunkHolder,Either)",
            "ChunkAccess lambda$null$25(ChunkHolder,ChunkAccess)",
            "ChunkHolder$FullChunkStatus lambda$null$24(ChunkHolder)",
            "Either lambda$getEntityTickingRangeFuture$4(Either)",
            "ChunkStatus lambda$getEntityTickingRangeFuture$2(int)",
            "int access$700(ChunkPos,ServerPlayer,boolean)"
          ],
          "removed": [
            "void <init>(ServerLevel,LevelStorageSource$LevelStorageAccess,DataFixer,StructureManager,Executor,BlockableEventLoop,LightChunkGetter,ChunkGenerator,ChunkProgressListener,ChunkStatusUpdateListener,Supplier,int,boolean)",
            "CompletableFuture prepareEntityTickingChunk(ChunkPos)",
            "void postLoadProtoChunk(ServerLevel,List)",
            "CompletableFuture prepareTickingChunk(ChunkHolder)",
            "CompletableFuture prepareAccessibleChunk(ChunkHolder)",
            "DistanceManager getDistanceManager()",
            "void onFullChunkStatusChange(ChunkPos,ChunkHolder$FullChunkStatus)",
            "Optional lambda$dumpChunks$41(ChunkAccess)",
            "void lambda$setViewDistance$40(ChunkPos,int,Packet[],ServerPlayer)",
            "void lambda$prepareAccessibleChunk$39(ChunkHolder,Runnable)",
            "Either lambda$prepareAccessibleChunk$38(Either)",
            "LevelChunk lambda$null$37(List)",
            "void lambda$prepareTickingChunk$36(ChunkHolder,Runnable)",
            "void lambda$prepareTickingChunk$35(ChunkPos,Either)",
            "void lambda$null$34(ChunkPos,LevelChunk)",
            "void lambda$null$33(Packet[],LevelChunk,ServerPlayer)",
            "void lambda$prepareTickingChunk$32(ChunkHolder,Runnable)",
            "Either lambda$prepareTickingChunk$31(Either)",
            "Either lambda$null$30(List)",
            "ChunkStatus lambda$prepareTickingChunk$29(int)",
            "void lambda$protoChunkToFullChunk$28(ChunkHolder,Runnable)",
            "Either lambda$protoChunkToFullChunk$27(ChunkHolder,Either)",
            "ChunkAccess lambda$null$26(ChunkHolder,ChunkAccess)",
            "ChunkHolder$FullChunkStatus lambda$null$25(ChunkHolder)",
            "void lambda$null$24(ProtoChunk,LevelChunk)",
            "Either lambda$prepareEntityTickingChunk$4(Either)",
            "ChunkStatus lambda$prepareEntityTickingChunk$2(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.level.DemoMode",
        "differences": {
          "added": [
            "void <init>(ServerLevel)"
          ],
          "removed": [
            "void <init>(ServerPlayer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.PackCompatibility",
        "differences": {
          "added": [
            "PackCompatibility forFormat(int)"
          ],
          "removed": [
            "PackCompatibility forFormat(int,PackType)",
            "PackCompatibility forMetadata(PackMetadataSection,PackType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.repository.ServerPacksSource",
        "differences": {
          "added": [],
          "removed": [
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.packs.resources.SimpleReloadableResourceManager",
        "differences": {
          "added": [
            "ReloadInstance createReload(Executor,Executor,List,CompletableFuture)",
            "ReloadInstance createQueuedReload(Executor,Executor,CompletableFuture)",
            "ReloadInstance createFullReload(Executor,Executor,CompletableFuture,List)",
            "Object lambda$createFullReload$0(List)"
          ],
          "removed": [
            "ReloadInstance createReload(Executor,Executor,CompletableFuture,List)",
            "Object lambda$createReload$0(List)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.PlayerList",
        "differences": {
          "added": [
            "void whiteList(GameProfile)",
            "void blackList(GameProfile)",
            "void setOverrideGameMode(GameType)",
            "void updatePlayerGameMode(ServerPlayer,ServerPlayer,ServerLevel)"
          ],
          "removed": [
            "void lambda$remove$1(Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.ServerOpList",
        "differences": {
          "added": [
            "int getOpLevel(GameProfile)",
            "GameProfile find(String)"
          ],
          "removed": [
            "String[] lambda$getUserList$0(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.UserBanList",
        "differences": {
          "added": [
            "GameProfile find(String)"
          ],
          "removed": [
            "String[] lambda$getUserList$0(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.server.players.UserWhiteList",
        "differences": {
          "added": [
            "GameProfile find(String)"
          ],
          "removed": [
            "String[] lambda$getUserList$0(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.stats.StatType",
        "differences": {
          "added": [
            "int size()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.BlockTags",
        "differences": {
          "added": [
            "List getWrappers()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.FluidTags",
        "differences": {
          "added": [
            "List getWrappers()"
          ],
          "removed": [
            "List getStaticTags()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagContainer",
        "differences": {
          "added": [
            "void serializeToNetwork(FriendlyByteBuf)",
            "TagContainer deserializeFromNetwork(FriendlyByteBuf)",
            "TagContainer of(TagCollection,TagCollection,TagCollection,TagCollection)"
          ],
          "removed": [
            "void <init>(Map)",
            "TagCollection get(ResourceKey)",
            "TagCollection getOrEmpty(ResourceKey)",
            "Tag getTagOrThrow(ResourceKey,ResourceLocation,Function)",
            "ResourceLocation getIdOrThrow(ResourceKey,Tag,Supplier)",
            "void getAll(TagContainer$CollectionConsumer)",
            "void acceptCap(TagContainer$CollectionConsumer,ResourceKey,TagCollection)",
            "Map serializeToNetwork(RegistryAccess)",
            "TagContainer deserializeFromNetwork(RegistryAccess,Map)",
            "void addTagsFromPayload(RegistryAccess,TagContainer$Builder,ResourceKey,TagCollection$NetworkPayload)",
            "void lambda$deserializeFromNetwork$1(RegistryAccess,TagContainer$Builder,ResourceKey,TagCollection$NetworkPayload)",
            "void lambda$getAll$0(TagContainer$CollectionConsumer,ResourceKey,TagCollection)",
            "Logger access$000()",
            "void <init>(Map,TagContainer$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.tags.TagLoader",
        "differences": {
          "added": [
            "void <init>(Function,String,String)",
            "CompletableFuture prepare(ResourceManager,Executor)",
            "TagCollection load(Map)",
            "void lambda$load$4(Function,Function,ResourceLocation,Tag$Builder)",
            "Object lambda$load$3(ResourceLocation)",
            "Map lambda$prepare$2(ResourceManager)",
            "Tag$Builder lambda$null$1(ResourceLocation)",
            "boolean lambda$null$0(String)"
          ],
          "removed": [
            "void <init>(Function,String)",
            "Map load(ResourceManager)",
            "void visitDependenciesAndElement(Map,Multimap,Set,ResourceLocation,BiConsumer)",
            "boolean isCyclic(Multimap,ResourceLocation,ResourceLocation)",
            "void addDependencyIfNotCyclic(Multimap,ResourceLocation,ResourceLocation)",
            "TagCollection build(Map)",
            "TagCollection loadAndBuild(ResourceManager)",
            "void lambda$build$12(Map,Multimap,Set,Function,Function,Map,ResourceLocation)",
            "void lambda$null$11(Function,Function,Map,ResourceLocation,Tag$Builder)",
            "void lambda$null$10(Map,ResourceLocation,Tag)",
            "void lambda$null$9(ResourceLocation,Collection)",
            "void lambda$build$8(Multimap,ResourceLocation,Tag$Builder)",
            "void lambda$null$7(Multimap,ResourceLocation,ResourceLocation)",
            "void lambda$build$6(Multimap,ResourceLocation,Tag$Builder)",
            "void lambda$null$5(Multimap,ResourceLocation,ResourceLocation)",
            "Object lambda$build$4(ResourceLocation)",
            "boolean lambda$isCyclic$3(Multimap,ResourceLocation,ResourceLocation)",
            "void lambda$visitDependenciesAndElement$2(Map,Multimap,Set,BiConsumer,ResourceLocation)",
            "Tag$Builder lambda$load$1(ResourceLocation)",
            "boolean lambda$load$0(String)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.damagesource.DamageSource",
        "differences": {
          "added": [],
          "removed": [
            "boolean isDamageHelmet()",
            "DamageSource damageHelmet()",
            "boolean isFall()",
            "DamageSource setIsFall()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.effect.MobEffectInstance",
        "differences": {
          "added": [
            "void setSplash(boolean)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.Entity",
        "differences": {
          "added": [
            "void remove()",
            "void setDropContainerContent(boolean)",
            "void setLocationFromBoundingbox()",
            "void burn(int)",
            "boolean causeFallDamage(float,float)",
            "void setLevel(Level)",
            "void setPosAndOldPos(double,double,double)",
            "boolean setSlot(int,ItemStack)",
            "boolean checkAndResetForcedChunkAdditionFlag()",
            "boolean checkAndResetUpdateChunkPos()",
            "boolean hasPassenger(Class)",
            "Collection getIndirectPassengers()",
            "boolean hasOnePlayerPassenger()",
            "void fillIndirectPassengers(boolean,Set)",
            "void lambda$teleportTo$10(ServerLevel,Entity)",
            "Style lambda$getDisplayName$9(Style)",
            "String lambda$fillCrashReportCategory$5()",
            "PortalInfo lambda$findDimensionEntryPoint$4(ServerLevel,BlockUtil$FoundRectangle)",
            "boolean lambda$null$3(BlockState,BlockPos)"
          ],
          "removed": [
            "void discard()",
            "void remove(Entity$RemovalReason)",
            "AABB makeBoundingBox()",
            "void checkOutOfWorld()",
            "void gameEvent(Entity,GameEvent)",
            "void gameEvent(GameEvent)",
            "boolean occludesVibrations()",
            "boolean causeFallDamage(float,float,DamageSource)",
            "void setOldPosAndRot()",
            "GameEventListenerRegistrar getGameEventListenerRegistrar()",
            "int getTicksFrozen()",
            "void setTicksFrozen(int)",
            "float getPercentFrozen()",
            "boolean isFullyFrozen()",
            "int getTicksRequiredToFreeze()",
            "SlotAccess getSlot(int)",
            "Entity getFirstPassenger()",
            "boolean hasPassenger(Predicate)",
            "Stream getIndirectPassengersStream()",
            "Stream getPassengersAndSelf()",
            "Iterable getIndirectPassengers()",
            "boolean hasExactlyOnePlayerPassenger()",
            "ChunkPos chunkPosition()",
            "int getBlockX()",
            "int getBlockY()",
            "int getBlockZ()",
            "void recreateFromPacket(ClientboundAddEntityPacket)",
            "ItemStack getPickResult()",
            "void setBodyIsInPowderSnow(boolean)",
            "boolean canFreeze()",
            "boolean isRemoved()",
            "Entity$RemovalReason getRemovalReason()",
            "void setRemoved(Entity$RemovalReason)",
            "void unsetRemoved()",
            "void setLevelCallback(EntityInLevelCallback)",
            "boolean shouldBeSaved()",
            "boolean isAlwaysTicking()",
            "boolean lambda$hasIndirectPassenger$15(Entity,Entity)",
            "boolean lambda$hasExactlyOnePlayerPassenger$14(Entity)",
            "Iterator lambda$getIndirectPassengers$13()",
            "boolean lambda$refreshDimensions$12(BlockState,BlockPos)",
            "void lambda$teleportTo$11(Entity)",
            "Style lambda$getDisplayName$10(Style)",
            "String lambda$fillCrashReportCategory$9()",
            "PortalInfo lambda$findDimensionEntryPoint$5(ServerLevel,BlockUtil$FoundRectangle)",
            "boolean lambda$null$4(BlockState,BlockPos)",
            "boolean lambda$removePassenger$3(Entity,Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.EquipmentSlot",
        "differences": {
          "added": [],
          "removed": [
            "int getIndex(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ExperienceOrb",
        "differences": {
          "added": [
            "void burn(int)"
          ],
          "removed": [
            "void scanForEntities()",
            "void award(ServerLevel,Vec3,int)",
            "boolean tryMergeToExisting(ServerLevel,Vec3,int)",
            "boolean canMerge(ExperienceOrb)",
            "boolean canMerge(ExperienceOrb,int,int)",
            "void merge(ExperienceOrb)",
            "SoundSource getSoundSource()",
            "boolean lambda$tryMergeToExisting$0(int,int,ExperienceOrb)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(Function)",
            "Float lambda$new$0(float,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.behavior.SetWalkTargetFromLookTarget",
        "differences": {
          "added": [],
          "removed": [
            "void <init>(Function,int)",
            "Float lambda$new$0(float,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.AvoidEntityGoal",
        "differences": {
          "added": [],
          "removed": [
            "boolean lambda$canUse$2(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.goal.TemptGoal",
        "differences": {
          "added": [
            "void <init>(PathfinderMob,double,boolean,Ingredient)",
            "boolean shouldFollowItem(ItemStack)"
          ],
          "removed": [
            "boolean shouldFollow(LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.sensing.AdultSensor",
        "differences": {
          "added": [
            "void doTick(ServerLevel,AgableMob)",
            "void setNearestVisibleAdult(AgableMob,List)",
            "boolean lambda$setNearestVisibleAdult$3(AgableMob)",
            "AgableMob lambda$setNearestVisibleAdult$2(LivingEntity)",
            "boolean lambda$setNearestVisibleAdult$1(AgableMob,LivingEntity)",
            "void lambda$doTick$0(AgableMob,List)"
          ],
          "removed": [
            "void doTick(ServerLevel,AgeableMob)",
            "void setNearestVisibleAdult(AgeableMob,List)",
            "boolean lambda$setNearestVisibleAdult$3(AgeableMob)",
            "AgeableMob lambda$setNearestVisibleAdult$2(LivingEntity)",
            "boolean lambda$setNearestVisibleAdult$1(AgeableMob,LivingEntity)",
            "void lambda$doTick$0(AgeableMob,List)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.sensing.SensorType",
        "differences": {
          "added": [],
          "removed": [
            "TemptingSensor lambda$static$0()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.util.GoalUtils",
        "differences": {
          "added": [],
          "removed": [
            "boolean mobRestricted(PathfinderMob,int)",
            "boolean isOutsideLimits(BlockPos,PathfinderMob)",
            "boolean isRestricted(boolean,PathfinderMob,BlockPos)",
            "boolean isNotStable(PathNavigation,BlockPos)",
            "boolean isWater(PathfinderMob,BlockPos)",
            "boolean hasMalus(PathfinderMob,BlockPos)",
            "boolean isSolid(PathfinderMob,BlockPos)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ai.village.poi.PoiManager",
        "differences": {
          "added": [
            "void <init>(File,DataFixer,boolean)"
          ],
          "removed": [
            "void <init>(File,DataFixer,boolean,LevelHeightAccessor)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.ambient.Bat",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.AbstractFish",
        "differences": {
          "added": [],
          "removed": [
            "ItemStack lambda$mobInteract$0()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Animal",
        "differences": {
          "added": [
            "void usePlayerItem(Player,ItemStack)"
          ],
          "removed": [
            "void usePlayerItem(Player,InteractionHand,ItemStack)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Panda",
        "differences": {
          "added": [
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.PolarBear",
        "differences": {
          "added": [
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.animal.Sheep",
        "differences": {
          "added": [
            "Sheep getBreedOffspring(ServerLevel,AgableMob)",
            "AgableMob getBreedOffspring(ServerLevel,AgableMob)"
          ],
          "removed": [
            "Sheep getBreedOffspring(ServerLevel,AgeableMob)",
            "AgeableMob getBreedOffspring(ServerLevel,AgeableMob)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.boss.enderdragon.EndCrystal",
        "differences": {
          "added": [],
          "removed": [
            "ItemStack getPickResult()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.ArmorStand",
        "differences": {
          "added": [
            "boolean setSlot(int,ItemStack)"
          ],
          "removed": [
            "ItemStack getPickResult()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.decoration.ItemFrame",
        "differences": {
          "added": [
            "boolean setSlot(int,ItemStack)"
          ],
          "removed": [
            "void <init>(EntityType,Level,BlockPos,Direction)",
            "SlotAccess getSlot(int)",
            "void recreateFromPacket(ClientboundAddEntityPacket)",
            "ItemStack getPickResult()",
            "ItemStack getFrameItemStack()",
            "boolean isGlowFrame()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.MinecartSpawner",
        "differences": {
          "added": [],
          "removed": [
            "Runnable createTicker(Level)",
            "void lambda$createTicker$1(Level)",
            "void lambda$createTicker$0(Level)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.entity.vehicle.MinecartTNT",
        "differences": {
          "added": [
            "boolean causeFallDamage(float,float)"
          ],
          "removed": [
            "boolean causeFallDamage(float,float,DamageSource)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.inventory.AbstractFurnaceMenu",
        "differences": {
          "added": [
            "void handlePlacement(boolean,Recipe,ServerPlayer)"
          ],
          "removed": [
            "boolean shouldMoveToInventory(int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ArmorItem",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getEquipSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.BlockItem",
        "differences": {
          "added": [],
          "removed": [
            "boolean canFitInsideContainerItems()",
            "void onDestroyed(ItemEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.DyeColor",
        "differences": {
          "added": [
            "int getTextureDiffuseColorBGR()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.item.ElytraItem",
        "differences": {
          "added": [],
          "removed": [
            "SoundEvent getEquipSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.EmptyBlockGetter",
        "differences": {
          "added": [],
          "removed": [
            "int getMinBuildHeight()",
            "int getHeight()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.ForcedChunksSavedData",
        "differences": {
          "added": [
            "void load(CompoundTag)"
          ],
          "removed": [
            "void <init>(LongSet)",
            "ForcedChunksSavedData load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.Level",
        "differences": {
          "added": [
            "BlockState getTopBlockState(BlockPos)",
            "boolean isOutsideBuildHeight(BlockPos)",
            "boolean isOutsideBuildHeight(int)",
            "boolean addBlockEntity(BlockEntity)",
            "void addAllPendingBlockEntities(Collection)",
            "String gatherChunkSourceStats()",
            "BlockEntity getPendingBlockEntityAt(BlockPos)",
            "void setBlockEntity(BlockPos,BlockEntity)",
            "List getEntities(EntityType,AABB,Predicate)",
            "List getEntitiesOfClass(Class,AABB,Predicate)",
            "List getLoadedEntitiesOfClass(Class,AABB,Predicate)",
            "void blockEntityChanged(BlockPos,BlockEntity)",
            "String lambda$tickBlockEntities$2(BlockEntity)",
            "Object lambda$addBlockEntity$1(BlockEntity)"
          ],
          "removed": [
            "void addDestroyBlockEffect(BlockPos,BlockState)",
            "void addBlockEntityTicker(TickingBlockEntity)",
            "void setBlockEntity(BlockEntity)",
            "List getEntities(EntityTypeTest,AABB,Predicate)",
            "void blockEntityChanged(BlockPos)",
            "void postGameEventInRadius(Entity,GameEvent,BlockPos,int)",
            "void lambda$getEntities$2(Predicate,List,EntityTypeTest,Entity)",
            "void lambda$getEntities$1(Entity,Predicate,List,Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.LevelAccessor",
        "differences": {
          "added": [
            "int getHeight()"
          ],
          "removed": [
            "int getLogicalHeight()",
            "void gameEvent(GameEvent,BlockPos)",
            "void gameEvent(GameEvent,Entity)",
            "void gameEvent(Entity,GameEvent,Entity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.AnvilBlock",
        "differences": {
          "added": [
            "void onBroken(Level,BlockPos,FallingBlockEntity)"
          ],
          "removed": [
            "void onBrokenAfterFall(Level,BlockPos,FallingBlockEntity)",
            "DamageSource getFallDamageSource()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BaseRailBlock",
        "differences": {
          "added": [],
          "removed": [
            "BlockState updateShape(BlockState,Direction,BlockState,LevelAccessor,BlockPos,BlockPos)",
            "FluidState getFluidState(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BedBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BeehiveBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BellBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BlastFurnaceBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.BubbleColumnBlock",
        "differences": {
          "added": [
            "Fluid takeLiquid(LevelAccessor,BlockPos,BlockState)"
          ],
          "removed": [
            "ItemStack pickupBlock(LevelAccessor,BlockPos,BlockState)",
            "Optional getPickupSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DoorBlock",
        "differences": {
          "added": [
            "void setOpen(Level,BlockState,BlockPos,boolean)"
          ],
          "removed": [
            "void setOpen(Entity,Level,BlockState,BlockPos,boolean)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.DropperBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.EndGatewayBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.FurnaceBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.LiquidBlock",
        "differences": {
          "added": [
            "Fluid takeLiquid(LevelAccessor,BlockPos,BlockState)"
          ],
          "removed": [
            "ItemStack pickupBlock(LevelAccessor,BlockPos,BlockState)",
            "Optional getPickupSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SimpleWaterloggedBlock",
        "differences": {
          "added": [
            "Fluid takeLiquid(LevelAccessor,BlockPos,BlockState)"
          ],
          "removed": [
            "ItemStack pickupBlock(LevelAccessor,BlockPos,BlockState)",
            "Optional getPickupSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SmokerBlock",
        "differences": {
          "added": [
            "BlockEntity newBlockEntity(BlockGetter)"
          ],
          "removed": [
            "BlockEntity newBlockEntity(BlockPos,BlockState)",
            "BlockEntityTicker getTicker(Level,BlockState,BlockEntityType)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.SoulFireBlock",
        "differences": {
          "added": [
            "boolean canSurviveOnBlock(Block)"
          ],
          "removed": [
            "boolean canSurviveOnBlock(BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.StairBlock",
        "differences": {
          "added": [
            "void prepareRender(BlockGetter,BlockPos)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BeaconBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void tick()",
            "void updateBase(int,int,int)",
            "void applyEffects()",
            "void playSound(SoundEvent)",
            "int getLevels()",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void tick(Level,BlockPos,BlockState,BeaconBlockEntity)",
            "int updateBase(Level,int,int,int)",
            "void applyEffects(Level,BlockPos,int,MobEffect,MobEffect)",
            "void playSound(Level,BlockPos,SoundEvent)",
            "void load(CompoundTag)",
            "void setLevel(Level)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BeehiveBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void sendDebugPackets()",
            "boolean releaseOccupant(BlockState,BeehiveBlockEntity$BeeData,List,BeehiveBlockEntity$BeeReleaseStatus)",
            "void tickOccupants()",
            "void tick()",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "boolean releaseOccupant(Level,BlockPos,BlockState,BeehiveBlockEntity$BeeData,List,BeehiveBlockEntity$BeeReleaseStatus,BlockPos)",
            "void tickOccupants(Level,BlockPos,BlockState,List,BlockPos)",
            "void serverTick(Level,BlockPos,BlockState,BeehiveBlockEntity)",
            "void load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.BellBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void tick()",
            "void playResonateSound()",
            "boolean areRaidersNearby()",
            "void makeRaidersGlow(Level)",
            "void showBellParticles(Level)",
            "boolean isRaiderWithinRange(LivingEntity)",
            "void lambda$showBellParticles$1(BlockPos,int,MutableInt,Level,LivingEntity)",
            "boolean lambda$showBellParticles$0(BlockPos,LivingEntity)"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void tick(Level,BlockPos,BlockState,BellBlockEntity,BellBlockEntity$ResonationEndAction)",
            "void clientTick(Level,BlockPos,BlockState,BellBlockEntity)",
            "void serverTick(Level,BlockPos,BlockState,BellBlockEntity)",
            "boolean areRaidersNearby(BlockPos,List)",
            "void makeRaidersGlow(Level,BlockPos,List)",
            "void showBellParticles(Level,BlockPos,List)",
            "boolean isRaiderWithinRange(BlockPos,LivingEntity)",
            "void lambda$showBellParticles$3(BlockPos,int,MutableInt,Level,LivingEntity)",
            "boolean lambda$showBellParticles$2(BlockPos,LivingEntity)",
            "boolean lambda$showBellParticles$1(BlockPos,LivingEntity)",
            "boolean lambda$makeRaidersGlow$0(BlockPos,LivingEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void tick()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.DropperBlockEntity",
        "differences": {
          "added": [
            "void <init>()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.EnderChestBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void tick()",
            "void setRemoved()",
            "void startOpen()",
            "void stopOpen()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void lidAnimateTick(Level,BlockPos,BlockState,EnderChestBlockEntity)",
            "void startOpen(Player)",
            "void stopOpen(Player)",
            "void recheckOpen()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity",
        "differences": {
          "added": [
            "void <init>(DyeColor)",
            "void <init>()",
            "void tick()",
            "void updateAnimation()",
            "AABB getBoundingBox(Direction)",
            "AABB getTopBoundingBox(Direction)",
            "void moveCollidedEntities()",
            "void doNeighborUpdates()",
            "void load(BlockState,CompoundTag)"
          ],
          "removed": [
            "void <init>(DyeColor,BlockPos,BlockState)",
            "void <init>(BlockPos,BlockState)",
            "void tick(Level,BlockPos,BlockState,ShulkerBoxBlockEntity)",
            "void updateAnimation(Level,BlockPos,BlockState)",
            "void moveCollidedEntities(Level,BlockPos,BlockState)",
            "void doNeighborUpdates(Level,BlockPos,BlockState)",
            "void load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SkullBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void load(BlockState,CompoundTag)",
            "void tick()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)",
            "void dragonHeadAnimation(Level,BlockPos,BlockState,SkullBlockEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.SpawnerBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void load(BlockState,CompoundTag)",
            "void tick()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)",
            "void clientTick(Level,BlockPos,BlockState,SpawnerBlockEntity)",
            "void serverTick(Level,BlockPos,BlockState,SpawnerBlockEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.block.entity.StructureBlockEntity",
        "differences": {
          "added": [
            "void <init>()",
            "void load(BlockState,CompoundTag)",
            "void nextMode()",
            "Component getDisplayName()"
          ],
          "removed": [
            "void <init>(BlockPos,BlockState)",
            "void load(CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.ImposterProtoChunk",
        "differences": {
          "added": [
            "void setBlockEntity(BlockPos,BlockEntity)",
            "LevelLightEngine getLightEngine()",
            "void setLastSaveTime(long)"
          ],
          "removed": [
            "void setBlockEntity(BlockEntity)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.chunk.storage.OldChunkStorage",
        "differences": {
          "added": [],
          "removed": [
            "void <clinit>()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.DebugLevelSource",
        "differences": {
          "added": [
            "BlockGetter getBaseColumn(int,int)"
          ],
          "removed": [
            "NoiseColumn getBaseColumn(int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.levelgen.FlatLevelSource",
        "differences": {
          "added": [
            "BlockGetter getBaseColumn(int,int)"
          ],
          "removed": [
            "NoiseColumn getBaseColumn(int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.material.WaterFluid",
        "differences": {
          "added": [],
          "removed": [
            "Optional getPickupSound()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.newbiome.context.LazyAreaContext",
        "differences": {
          "added": [
            "long getMixedSeed()"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer",
        "differences": {
          "added": [
            "Packet nextUpdatePacket(ItemStack)",
            "void markDirty(int,int)"
          ],
          "removed": [
            "MapItemSavedData$MapPatch createPatch()",
            "Packet nextUpdatePacket(int)",
            "void markColorsDirty(int,int)",
            "void markDecorationsDirty()",
            "void <init>(MapItemSavedData,Player,MapItemSavedData$1)",
            "Packet access$200(MapItemSavedData$HoldingPlayer,int)",
            "void access$300(MapItemSavedData$HoldingPlayer,int,int)",
            "void access$400(MapItemSavedData$HoldingPlayer)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.CommandStorage$Container",
        "differences": {
          "added": [
            "void <init>(String)",
            "void load(CompoundTag)"
          ],
          "removed": [
            "void <init>()",
            "CommandStorage$Container load(CompoundTag)",
            "void <init>(CommandStorage$1)",
            "CommandStorage$Container access$100(CommandStorage$Container,CompoundTag)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.DimensionDataStorage",
        "differences": {
          "added": [
            "SavedData computeIfAbsent(Supplier,String)",
            "SavedData get(Supplier,String)",
            "SavedData readSavedData(Supplier,String)",
            "void set(SavedData)"
          ],
          "removed": [
            "SavedData computeIfAbsent(Function,Supplier,String)",
            "SavedData get(Function,String)",
            "SavedData readSavedData(Function,String)",
            "void set(String,SavedData)",
            "void lambda$save$0(String,SavedData)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.LevelSummary",
        "differences": {
          "added": [
            "boolean shouldBackup()"
          ],
          "removed": [
            "LevelSummary$BackupStatus backupStatus()"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],RandomIntGenerator,boolean)",
            "EnchantWithLevelsFunction$Builder enchantWithLevels(RandomIntGenerator)",
            "void <init>(LootItemCondition[],RandomIntGenerator,boolean,EnchantWithLevelsFunction$1)",
            "RandomIntGenerator access$100(EnchantWithLevelsFunction)"
          ],
          "removed": [
            "void <init>(LootItemCondition[],NumberProvider,boolean)",
            "Set getReferencedContextParams()",
            "EnchantWithLevelsFunction$Builder enchantWithLevels(NumberProvider)",
            "void <init>(LootItemCondition[],NumberProvider,boolean,EnchantWithLevelsFunction$1)",
            "NumberProvider access$100(EnchantWithLevelsFunction)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder",
        "differences": {
          "added": [
            "void <init>(RandomIntGenerator)"
          ],
          "removed": [
            "void <init>(NumberProvider)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],RandomValueBounds,int)",
            "LootingEnchantFunction$Builder lootingMultiplier(RandomValueBounds)",
            "void <init>(LootItemCondition[],RandomValueBounds,int,LootingEnchantFunction$1)",
            "RandomValueBounds access$100(LootingEnchantFunction)"
          ],
          "removed": [
            "void <init>(LootItemCondition[],NumberProvider,int)",
            "LootingEnchantFunction$Builder lootingMultiplier(NumberProvider)",
            "void <init>(LootItemCondition[],NumberProvider,int,LootingEnchantFunction$1)",
            "NumberProvider access$100(LootingEnchantFunction)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder",
        "differences": {
          "added": [
            "void <init>(RandomValueBounds)"
          ],
          "removed": [
            "void <init>(NumberProvider)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetAttributesFunction",
        "differences": {
          "added": [
            "SetAttributesFunction$ModifierBuilder modifier(String,Attribute,AttributeModifier$Operation,RandomValueBounds)"
          ],
          "removed": [
            "Set getReferencedContextParams()",
            "SetAttributesFunction$ModifierBuilder modifier(String,Attribute,AttributeModifier$Operation,NumberProvider)",
            "Stream lambda$getReferencedContextParams$0(SetAttributesFunction$Modifier)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder",
        "differences": {
          "added": [
            "void <init>(String,Attribute,AttributeModifier$Operation,RandomValueBounds)"
          ],
          "removed": [
            "void <init>(String,Attribute,AttributeModifier$Operation,NumberProvider)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction",
        "differences": {
          "added": [
            "void <init>(LootItemCondition[],RandomValueBounds)",
            "LootItemConditionalFunction$Builder setDamage(RandomValueBounds)",
            "LootItemFunction lambda$setDamage$0(RandomValueBounds,LootItemCondition[])",
            "RandomValueBounds access$000(SetItemDamageFunction)",
            "void <init>(LootItemCondition[],RandomValueBounds,SetItemDamageFunction$1)"
          ],
          "removed": [
            "void <init>(LootItemCondition[],NumberProvider,boolean)",
            "Set getReferencedContextParams()",
            "LootItemConditionalFunction$Builder setDamage(NumberProvider)",
            "LootItemConditionalFunction$Builder setDamage(NumberProvider,boolean)",
            "LootItemFunction lambda$setDamage$1(NumberProvider,boolean,LootItemCondition[])",
            "LootItemFunction lambda$setDamage$0(NumberProvider,LootItemCondition[])",
            "NumberProvider access$000(SetItemDamageFunction)",
            "boolean access$100(SetItemDamageFunction)",
            "void <init>(LootItemCondition[],NumberProvider,boolean,SetItemDamageFunction$1)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction",
        "differences": {
          "added": [],
          "removed": [
            "Set getReferencedContextParams()",
            "Stream lambda$getReferencedContextParams$0(NumberProvider)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder",
        "differences": {
          "added": [
            "SetStewEffectFunction$Builder withEffect(MobEffect,RandomValueBounds)"
          ],
          "removed": [
            "SetStewEffectFunction$Builder withEffect(MobEffect,NumberProvider)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition",
        "differences": {
          "added": [
            "boolean hasScore(Entity,Scoreboard,String,RandomValueBounds)"
          ],
          "removed": [
            "boolean hasScore(LootContext,Entity,Scoreboard,String,IntRange)",
            "Stream lambda$getReferencedContextParams$0(IntRange)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder",
        "differences": {
          "added": [
            "EntityHasScoreCondition$Builder withScore(String,RandomValueBounds)"
          ],
          "removed": [
            "EntityHasScoreCondition$Builder withScore(String,IntRange)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.AABB",
        "differences": {
          "added": [
            "double clipXCollide(AABB,double)",
            "double clipYCollide(AABB,double)",
            "double clipZCollide(AABB,double)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.Vec3",
        "differences": {
          "added": [],
          "removed": [
            "DoubleStream lambda$static$2(Vec3)",
            "DataResult lambda$static$1(DoubleStream)",
            "Vec3 lambda$null$0(double[])"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape",
        "differences": {
          "added": [
            "void <init>(int,int,int,int,int,int,int,int,int)",
            "void setFull(int,int,int,boolean,boolean)",
            "void setZStrip(int,int,int,int,boolean)"
          ],
          "removed": [
            "BitSetDiscreteVoxelShape withFilledBounds(int,int,int,int,int,int,int,int,int)",
            "void fillUpdateBounds(int,int,int,boolean)",
            "void fill(int,int,int)",
            "void forAllBoxes(DiscreteVoxelShape,DiscreteVoxelShape$IntLineConsumer,boolean)",
            "boolean isXZRectangleFull(int,int,int,int,int)",
            "void clearZStrip(int,int,int,int)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.DiscreteVoxelShape",
        "differences": {
          "added": [
            "boolean isZStripFull(int,int,int,int)",
            "void setZStrip(int,int,int,int,boolean)",
            "boolean isXZRectangleFull(int,int,int,int,int)"
          ],
          "removed": []
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.EntityCollisionContext$1",
        "differences": {
          "added": [
            "void <init>(boolean,double,Item,Predicate)"
          ],
          "removed": [
            "void <init>(boolean,double,ItemStack,ItemStack,Predicate,Optional)"
          ]
        }
      }
    },
    {
      "type": "entries",
      "value": {
        "name": "net.minecraft.world.phys.shapes.IndirectMerger",
        "differences": {
          "added": [],
          "removed": [
            "int size()",
            "void <clinit>()"
          ]
        }
      }
    }
  ]
}